// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package file

import (
    "github.com/apache/arrow/go/v17/parquet"
    "github.com/apache/arrow/go/v17/parquet/internal/encoding"
)

{{range .In}}
// {{.Name}}ColumnChunkReader is the Typed Column chunk reader instance for reading
// {{.Name}} column data.
type {{.Name}}ColumnChunkReader struct {
  columnChunkReader
}

// Skip skips the next nvalues so that the next call to ReadBatch
// will start reading *after* the skipped values.
func (cr *{{.Name}}ColumnChunkReader) Skip(nvalues int64) (int64, error) {
  return cr.columnChunkReader.skipValues(nvalues,
    func(batch int64, buf []byte) (int64, error) {
      vals, _, err := cr.ReadBatch(batch,
        {{- if ne .Name "Boolean"}}
        {{.prefix}}.{{.Name}}Traits.CastFromBytes(buf),
        arrow.Int16Traits.CastFromBytes(buf),
        arrow.Int16Traits.CastFromBytes(buf))
        {{- else}}
        *(*[]bool)(unsafe.Pointer(&buf)),
        nil,
        nil)
        {{- end}}
      return vals, err
    })
}

// ReadBatch reads batchSize values from the column.
//
// Returns error if values is not at least big enough to hold the number of values that will be read.
//
// defLvls and repLvls can be nil, or will be populated if not nil. If not nil, they must be
// at least large enough to hold the number of values that will be read.
//
// total is the number of rows that were read, valuesRead is the actual number of physical values
// that were read excluding nulls
func (cr *{{.Name}}ColumnChunkReader) ReadBatch(batchSize int64, values []{{.name}}, defLvls, repLvls []int16) (total int64, valuesRead int, err error) {
  return cr.readBatch(batchSize, defLvls, repLvls, func(start, len int64) (int, error) {
    return cr.curDecoder.(encoding.{{.Name}}Decoder).Decode(values[start:start+len])
  })
}
{{end}}

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: messages/types.proto

package util_message

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllTheTypes_ExampleEnum int32

const (
	AllTheTypes_OPTION_0 AllTheTypes_ExampleEnum = 0
	AllTheTypes_OPTION_1 AllTheTypes_ExampleEnum = 1
)

// Enum value maps for AllTheTypes_ExampleEnum.
var (
	AllTheTypes_ExampleEnum_name = map[int32]string{
		0: "OPTION_0",
		1: "OPTION_1",
	}
	AllTheTypes_ExampleEnum_value = map[string]int32{
		"OPTION_0": 0,
		"OPTION_1": 1,
	}
)

func (x AllTheTypes_ExampleEnum) Enum() *AllTheTypes_ExampleEnum {
	p := new(AllTheTypes_ExampleEnum)
	*p = x
	return p
}

func (x AllTheTypes_ExampleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllTheTypes_ExampleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_messages_types_proto_enumTypes[0].Descriptor()
}

func (AllTheTypes_ExampleEnum) Type() protoreflect.EnumType {
	return &file_messages_types_proto_enumTypes[0]
}

func (x AllTheTypes_ExampleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllTheTypes_ExampleEnum.Descriptor instead.
func (AllTheTypes_ExampleEnum) EnumDescriptor() ([]byte, []int) {
	return file_messages_types_proto_rawDescGZIP(), []int{1, 0}
}

type ExampleMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field1 string `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
}

func (x *ExampleMessage) Reset() {
	*x = ExampleMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleMessage) ProtoMessage() {}

func (x *ExampleMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleMessage.ProtoReflect.Descriptor instead.
func (*ExampleMessage) Descriptor() ([]byte, []int) {
	return file_messages_types_proto_rawDescGZIP(), []int{0}
}

func (x *ExampleMessage) GetField1() string {
	if x != nil {
		return x.Field1
	}
	return ""
}

type AllTheTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Str      string                  `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Int32    int32                   `protobuf:"varint,2,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64    int64                   `protobuf:"varint,3,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint32   int32                   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sin64    int64                   `protobuf:"zigzag64,5,opt,name=sin64,proto3" json:"sin64,omitempty"`
	Uint32   uint32                  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64   uint64                  `protobuf:"varint,7,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed32  uint32                  `protobuf:"fixed32,8,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Fixed64  uint64                  `protobuf:"fixed64,9,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Sfixed32 int32                   `protobuf:"fixed32,10,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Bool     bool                    `protobuf:"varint,11,opt,name=bool,proto3" json:"bool,omitempty"`
	Bytes    []byte                  `protobuf:"bytes,12,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Double   float64                 `protobuf:"fixed64,13,opt,name=double,proto3" json:"double,omitempty"`
	Enum     AllTheTypes_ExampleEnum `protobuf:"varint,14,opt,name=enum,proto3,enum=AllTheTypes_ExampleEnum" json:"enum,omitempty"`
	Message  *ExampleMessage         `protobuf:"bytes,15,opt,name=message,proto3" json:"message,omitempty"`
	// Types that are assignable to Oneof:
	//
	//	*AllTheTypes_Oneofstring
	//	*AllTheTypes_Oneofmessage
	Oneof       isAllTheTypes_Oneof        `protobuf_oneof:"oneof"`
	Any         *anypb.Any                 `protobuf:"bytes,18,opt,name=any,proto3" json:"any,omitempty"`
	SimpleMap   map[int32]string           `protobuf:"bytes,19,rep,name=simple_map,json=simpleMap,proto3" json:"simple_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ComplexMap  map[string]*ExampleMessage `protobuf:"bytes,20,rep,name=complex_map,json=complexMap,proto3" json:"complex_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SimpleList  []string                   `protobuf:"bytes,21,rep,name=simple_list,json=simpleList,proto3" json:"simple_list,omitempty"`
	ComplexList []*ExampleMessage          `protobuf:"bytes,22,rep,name=complex_list,json=complexList,proto3" json:"complex_list,omitempty"`
}

func (x *AllTheTypes) Reset() {
	*x = AllTheTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTheTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTheTypes) ProtoMessage() {}

func (x *AllTheTypes) ProtoReflect() protoreflect.Message {
	mi := &file_messages_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTheTypes.ProtoReflect.Descriptor instead.
func (*AllTheTypes) Descriptor() ([]byte, []int) {
	return file_messages_types_proto_rawDescGZIP(), []int{1}
}

func (x *AllTheTypes) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *AllTheTypes) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *AllTheTypes) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *AllTheTypes) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *AllTheTypes) GetSin64() int64 {
	if x != nil {
		return x.Sin64
	}
	return 0
}

func (x *AllTheTypes) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *AllTheTypes) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *AllTheTypes) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *AllTheTypes) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *AllTheTypes) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *AllTheTypes) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *AllTheTypes) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *AllTheTypes) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *AllTheTypes) GetEnum() AllTheTypes_ExampleEnum {
	if x != nil {
		return x.Enum
	}
	return AllTheTypes_OPTION_0
}

func (x *AllTheTypes) GetMessage() *ExampleMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (m *AllTheTypes) GetOneof() isAllTheTypes_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *AllTheTypes) GetOneofstring() string {
	if x, ok := x.GetOneof().(*AllTheTypes_Oneofstring); ok {
		return x.Oneofstring
	}
	return ""
}

func (x *AllTheTypes) GetOneofmessage() *ExampleMessage {
	if x, ok := x.GetOneof().(*AllTheTypes_Oneofmessage); ok {
		return x.Oneofmessage
	}
	return nil
}

func (x *AllTheTypes) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *AllTheTypes) GetSimpleMap() map[int32]string {
	if x != nil {
		return x.SimpleMap
	}
	return nil
}

func (x *AllTheTypes) GetComplexMap() map[string]*ExampleMessage {
	if x != nil {
		return x.ComplexMap
	}
	return nil
}

func (x *AllTheTypes) GetSimpleList() []string {
	if x != nil {
		return x.SimpleList
	}
	return nil
}

func (x *AllTheTypes) GetComplexList() []*ExampleMessage {
	if x != nil {
		return x.ComplexList
	}
	return nil
}

type isAllTheTypes_Oneof interface {
	isAllTheTypes_Oneof()
}

type AllTheTypes_Oneofstring struct {
	Oneofstring string `protobuf:"bytes,16,opt,name=oneofstring,proto3,oneof"`
}

type AllTheTypes_Oneofmessage struct {
	Oneofmessage *ExampleMessage `protobuf:"bytes,17,opt,name=oneofmessage,proto3,oneof"`
}

func (*AllTheTypes_Oneofstring) isAllTheTypes_Oneof() {}

func (*AllTheTypes_Oneofmessage) isAllTheTypes_Oneof() {}

var File_messages_types_proto protoreflect.FileDescriptor

var file_messages_types_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x28, 0x0a, 0x0e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x22, 0xa9, 0x07, 0x0a, 0x0b,
	0x41, 0x6c, 0x6c, 0x54, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x6e, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x73, 0x69, 0x6e, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x68, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x03, 0x61, 0x6e, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x6c, 0x6c, 0x54,
	0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x68, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x29, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x10, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2e, 0x2f, 0x75, 0x74,
	0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messages_types_proto_rawDescOnce sync.Once
	file_messages_types_proto_rawDescData = file_messages_types_proto_rawDesc
)

func file_messages_types_proto_rawDescGZIP() []byte {
	file_messages_types_proto_rawDescOnce.Do(func() {
		file_messages_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_types_proto_rawDescData)
	})
	return file_messages_types_proto_rawDescData
}

var file_messages_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_messages_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_messages_types_proto_goTypes = []interface{}{
	(AllTheTypes_ExampleEnum)(0), // 0: AllTheTypes.ExampleEnum
	(*ExampleMessage)(nil),       // 1: ExampleMessage
	(*AllTheTypes)(nil),          // 2: AllTheTypes
	nil,                          // 3: AllTheTypes.SimpleMapEntry
	nil,                          // 4: AllTheTypes.ComplexMapEntry
	(*anypb.Any)(nil),            // 5: google.protobuf.Any
}
var file_messages_types_proto_depIdxs = []int32{
	0, // 0: AllTheTypes.enum:type_name -> AllTheTypes.ExampleEnum
	1, // 1: AllTheTypes.message:type_name -> ExampleMessage
	1, // 2: AllTheTypes.oneofmessage:type_name -> ExampleMessage
	5, // 3: AllTheTypes.any:type_name -> google.protobuf.Any
	3, // 4: AllTheTypes.simple_map:type_name -> AllTheTypes.SimpleMapEntry
	4, // 5: AllTheTypes.complex_map:type_name -> AllTheTypes.ComplexMapEntry
	1, // 6: AllTheTypes.complex_list:type_name -> ExampleMessage
	1, // 7: AllTheTypes.ComplexMapEntry.value:type_name -> ExampleMessage
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_messages_types_proto_init() }
func file_messages_types_proto_init() {
	if File_messages_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_messages_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTheTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messages_types_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AllTheTypes_Oneofstring)(nil),
		(*AllTheTypes_Oneofmessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_types_proto_goTypes,
		DependencyIndexes: file_messages_types_proto_depIdxs,
		EnumInfos:         file_messages_types_proto_enumTypes,
		MessageInfos:      file_messages_types_proto_msgTypes,
	}.Build()
	File_messages_types_proto = out.File
	file_messages_types_proto_rawDesc = nil
	file_messages_types_proto_goTypes = nil
	file_messages_types_proto_depIdxs = nil
}

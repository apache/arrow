/**
 * Autogenerated by Thrift Compiler (0.20.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "parquet_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace parquet { namespace format {

int _kTypeValues[] = {
  Type::BOOLEAN,
  Type::INT32,
  Type::INT64,
  Type::INT96,
  Type::FLOAT,
  Type::DOUBLE,
  Type::BYTE_ARRAY,
  Type::FIXED_LEN_BYTE_ARRAY
};
const char* _kTypeNames[] = {
  "BOOLEAN",
  "INT32",
  "INT64",
  "INT96",
  "FLOAT",
  "DOUBLE",
  "BYTE_ARRAY",
  "FIXED_LEN_BYTE_ARRAY"
};
const std::map<int, const char*> _Type_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTypeValues, _kTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Type::type& val) {
  std::map<int, const char*>::const_iterator it = _Type_VALUES_TO_NAMES.find(val);
  if (it != _Type_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Type::type& val) {
  std::map<int, const char*>::const_iterator it = _Type_VALUES_TO_NAMES.find(val);
  if (it != _Type_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kConvertedTypeValues[] = {
  /**
   * a BYTE_ARRAY actually contains UTF8 encoded chars
   */
  ConvertedType::UTF8,
  /**
   * a map is converted as an optional field containing a repeated key/value pair
   */
  ConvertedType::MAP,
  /**
   * a key/value pair is converted into a group of two fields
   */
  ConvertedType::MAP_KEY_VALUE,
  /**
   * a list is converted into an optional field containing a repeated field for its
   * values
   */
  ConvertedType::LIST,
  /**
   * an enum is converted into a binary field
   */
  ConvertedType::ENUM,
  /**
   * A decimal value.
   *
   * This may be used to annotate binary or fixed primitive types. The
   * underlying byte array stores the unscaled value encoded as two's
   * complement using big-endian byte order (the most significant byte is the
   * zeroth element). The value of the decimal is the value * 10^{-scale}.
   *
   * This must be accompanied by a (maximum) precision and a scale in the
   * SchemaElement. The precision specifies the number of digits in the decimal
   * and the scale stores the location of the decimal point. For example 1.23
   * would have precision 3 (3 total digits) and scale 2 (the decimal point is
   * 2 digits over).
   */
  ConvertedType::DECIMAL,
  /**
   * A Date
   *
   * Stored as days since Unix epoch, encoded as the INT32 physical type.
   *
   */
  ConvertedType::DATE,
  /**
   * A time
   *
   * The total number of milliseconds since midnight.  The value is stored
   * as an INT32 physical type.
   */
  ConvertedType::TIME_MILLIS,
  /**
   * A time.
   *
   * The total number of microseconds since midnight.  The value is stored as
   * an INT64 physical type.
   */
  ConvertedType::TIME_MICROS,
  /**
   * A date/time combination
   *
   * Date and time recorded as milliseconds since the Unix epoch.  Recorded as
   * a physical type of INT64.
   */
  ConvertedType::TIMESTAMP_MILLIS,
  /**
   * A date/time combination
   *
   * Date and time recorded as microseconds since the Unix epoch.  The value is
   * stored as an INT64 physical type.
   */
  ConvertedType::TIMESTAMP_MICROS,
  /**
   * An unsigned integer value.
   *
   * The number describes the maximum number of meaningful data bits in
   * the stored value. 8, 16 and 32 bit values are stored using the
   * INT32 physical type.  64 bit values are stored using the INT64
   * physical type.
   *
   */
  ConvertedType::UINT_8,
  ConvertedType::UINT_16,
  ConvertedType::UINT_32,
  ConvertedType::UINT_64,
  /**
   * A signed integer value.
   *
   * The number describes the maximum number of meaningful data bits in
   * the stored value. 8, 16 and 32 bit values are stored using the
   * INT32 physical type.  64 bit values are stored using the INT64
   * physical type.
   *
   */
  ConvertedType::INT_8,
  ConvertedType::INT_16,
  ConvertedType::INT_32,
  ConvertedType::INT_64,
  /**
   * An embedded JSON document
   *
   * A JSON document embedded within a single UTF8 column.
   */
  ConvertedType::JSON,
  /**
   * An embedded BSON document
   *
   * A BSON document embedded within a single BINARY column.
   */
  ConvertedType::BSON,
  /**
   * An interval of time
   *
   * This type annotates data stored as a FIXED_LEN_BYTE_ARRAY of length 12
   * This data is composed of three separate little endian unsigned
   * integers.  Each stores a component of a duration of time.  The first
   * integer identifies the number of months associated with the duration,
   * the second identifies the number of days associated with the duration
   * and the third identifies the number of milliseconds associated with
   * the provided duration.  This duration of time is independent of any
   * particular timezone or date.
   */
  ConvertedType::INTERVAL
};
const char* _kConvertedTypeNames[] = {
  /**
   * a BYTE_ARRAY actually contains UTF8 encoded chars
   */
  "UTF8",
  /**
   * a map is converted as an optional field containing a repeated key/value pair
   */
  "MAP",
  /**
   * a key/value pair is converted into a group of two fields
   */
  "MAP_KEY_VALUE",
  /**
   * a list is converted into an optional field containing a repeated field for its
   * values
   */
  "LIST",
  /**
   * an enum is converted into a binary field
   */
  "ENUM",
  /**
   * A decimal value.
   *
   * This may be used to annotate binary or fixed primitive types. The
   * underlying byte array stores the unscaled value encoded as two's
   * complement using big-endian byte order (the most significant byte is the
   * zeroth element). The value of the decimal is the value * 10^{-scale}.
   *
   * This must be accompanied by a (maximum) precision and a scale in the
   * SchemaElement. The precision specifies the number of digits in the decimal
   * and the scale stores the location of the decimal point. For example 1.23
   * would have precision 3 (3 total digits) and scale 2 (the decimal point is
   * 2 digits over).
   */
  "DECIMAL",
  /**
   * A Date
   *
   * Stored as days since Unix epoch, encoded as the INT32 physical type.
   *
   */
  "DATE",
  /**
   * A time
   *
   * The total number of milliseconds since midnight.  The value is stored
   * as an INT32 physical type.
   */
  "TIME_MILLIS",
  /**
   * A time.
   *
   * The total number of microseconds since midnight.  The value is stored as
   * an INT64 physical type.
   */
  "TIME_MICROS",
  /**
   * A date/time combination
   *
   * Date and time recorded as milliseconds since the Unix epoch.  Recorded as
   * a physical type of INT64.
   */
  "TIMESTAMP_MILLIS",
  /**
   * A date/time combination
   *
   * Date and time recorded as microseconds since the Unix epoch.  The value is
   * stored as an INT64 physical type.
   */
  "TIMESTAMP_MICROS",
  /**
   * An unsigned integer value.
   *
   * The number describes the maximum number of meaningful data bits in
   * the stored value. 8, 16 and 32 bit values are stored using the
   * INT32 physical type.  64 bit values are stored using the INT64
   * physical type.
   *
   */
  "UINT_8",
  "UINT_16",
  "UINT_32",
  "UINT_64",
  /**
   * A signed integer value.
   *
   * The number describes the maximum number of meaningful data bits in
   * the stored value. 8, 16 and 32 bit values are stored using the
   * INT32 physical type.  64 bit values are stored using the INT64
   * physical type.
   *
   */
  "INT_8",
  "INT_16",
  "INT_32",
  "INT_64",
  /**
   * An embedded JSON document
   *
   * A JSON document embedded within a single UTF8 column.
   */
  "JSON",
  /**
   * An embedded BSON document
   *
   * A BSON document embedded within a single BINARY column.
   */
  "BSON",
  /**
   * An interval of time
   *
   * This type annotates data stored as a FIXED_LEN_BYTE_ARRAY of length 12
   * This data is composed of three separate little endian unsigned
   * integers.  Each stores a component of a duration of time.  The first
   * integer identifies the number of months associated with the duration,
   * the second identifies the number of days associated with the duration
   * and the third identifies the number of milliseconds associated with
   * the provided duration.  This duration of time is independent of any
   * particular timezone or date.
   */
  "INTERVAL"
};
const std::map<int, const char*> _ConvertedType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(22, _kConvertedTypeValues, _kConvertedTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const ConvertedType::type& val) {
  std::map<int, const char*>::const_iterator it = _ConvertedType_VALUES_TO_NAMES.find(val);
  if (it != _ConvertedType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const ConvertedType::type& val) {
  std::map<int, const char*>::const_iterator it = _ConvertedType_VALUES_TO_NAMES.find(val);
  if (it != _ConvertedType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kFieldRepetitionTypeValues[] = {
  /**
   * This field is required (can not be null) and each record has exactly 1 value.
   */
  FieldRepetitionType::REQUIRED,
  /**
   * The field is optional (can be null) and each record has 0 or 1 values.
   */
  FieldRepetitionType::OPTIONAL,
  /**
   * The field is repeated and can contain 0 or more values
   */
  FieldRepetitionType::REPEATED
};
const char* _kFieldRepetitionTypeNames[] = {
  /**
   * This field is required (can not be null) and each record has exactly 1 value.
   */
  "REQUIRED",
  /**
   * The field is optional (can be null) and each record has 0 or 1 values.
   */
  "OPTIONAL",
  /**
   * The field is repeated and can contain 0 or more values
   */
  "REPEATED"
};
const std::map<int, const char*> _FieldRepetitionType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kFieldRepetitionTypeValues, _kFieldRepetitionTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const FieldRepetitionType::type& val) {
  std::map<int, const char*>::const_iterator it = _FieldRepetitionType_VALUES_TO_NAMES.find(val);
  if (it != _FieldRepetitionType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const FieldRepetitionType::type& val) {
  std::map<int, const char*>::const_iterator it = _FieldRepetitionType_VALUES_TO_NAMES.find(val);
  if (it != _FieldRepetitionType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kEdgesValues[] = {
  Edges::PLANAR,
  Edges::SPHERICAL
};
const char* _kEdgesNames[] = {
  "PLANAR",
  "SPHERICAL"
};
const std::map<int, const char*> _Edges_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kEdgesValues, _kEdgesNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Edges::type& val) {
  std::map<int, const char*>::const_iterator it = _Edges_VALUES_TO_NAMES.find(val);
  if (it != _Edges_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Edges::type& val) {
  std::map<int, const char*>::const_iterator it = _Edges_VALUES_TO_NAMES.find(val);
  if (it != _Edges_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kGeometryEncodingValues[] = {
  /**
   * Allowed for physical type: BYTE_ARRAY.
   *
   * Well-known binary (WKB) representations of geometries. It supports 2D or
   * 3D geometries of the standard geometry types (Point, LineString, Polygon,
   * MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection). This
   * is the preferred option for maximum portability.
   *
   * This encoding enables GeometryStatistics to be set in the column chunk
   * and page index.
   */
  GeometryEncoding::WKB
};
const char* _kGeometryEncodingNames[] = {
  /**
   * Allowed for physical type: BYTE_ARRAY.
   *
   * Well-known binary (WKB) representations of geometries. It supports 2D or
   * 3D geometries of the standard geometry types (Point, LineString, Polygon,
   * MultiPoint, MultiLineString, MultiPolygon, and GeometryCollection). This
   * is the preferred option for maximum portability.
   *
   * This encoding enables GeometryStatistics to be set in the column chunk
   * and page index.
   */
  "WKB"
};
const std::map<int, const char*> _GeometryEncoding_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(1, _kGeometryEncodingValues, _kGeometryEncodingNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const GeometryEncoding::type& val) {
  std::map<int, const char*>::const_iterator it = _GeometryEncoding_VALUES_TO_NAMES.find(val);
  if (it != _GeometryEncoding_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const GeometryEncoding::type& val) {
  std::map<int, const char*>::const_iterator it = _GeometryEncoding_VALUES_TO_NAMES.find(val);
  if (it != _GeometryEncoding_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kEncodingValues[] = {
  /**
   * Default encoding.
   * BOOLEAN - 1 bit per value. 0 is false; 1 is true.
   * INT32 - 4 bytes per value.  Stored as little-endian.
   * INT64 - 8 bytes per value.  Stored as little-endian.
   * FLOAT - 4 bytes per value.  IEEE. Stored as little-endian.
   * DOUBLE - 8 bytes per value.  IEEE. Stored as little-endian.
   * BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes.
   * FIXED_LEN_BYTE_ARRAY - Just the bytes.
   */
  Encoding::PLAIN,
  /**
   * Deprecated: Dictionary encoding. The values in the dictionary are encoded in the
   * plain type.
   * in a data page use RLE_DICTIONARY instead.
   * in a Dictionary page use PLAIN instead
   */
  Encoding::PLAIN_DICTIONARY,
  /**
   * Group packed run length encoding. Usable for definition/repetition levels
   * encoding and Booleans (on one bit: 0 is false; 1 is true.)
   */
  Encoding::RLE,
  /**
   * Bit packed encoding.  This can only be used if the data has a known max
   * width.  Usable for definition/repetition levels encoding.
   */
  Encoding::BIT_PACKED,
  /**
   * Delta encoding for integers. This can be used for int columns and works best
   * on sorted data
   */
  Encoding::DELTA_BINARY_PACKED,
  /**
   * Encoding for byte arrays to separate the length values and the data. The lengths
   * are encoded using DELTA_BINARY_PACKED
   */
  Encoding::DELTA_LENGTH_BYTE_ARRAY,
  /**
   * Incremental-encoded byte array. Prefix lengths are encoded using DELTA_BINARY_PACKED.
   * Suffixes are stored as delta length byte arrays.
   */
  Encoding::DELTA_BYTE_ARRAY,
  /**
   * Dictionary encoding: the ids are encoded using the RLE encoding
   */
  Encoding::RLE_DICTIONARY,
  /**
   * Encoding for fixed-width data (FLOAT, DOUBLE, INT32, INT64, FIXED_LEN_BYTE_ARRAY).
   * K byte-streams are created where K is the size in bytes of the data type.
   * The individual bytes of a value are scattered to the corresponding stream and
   * the streams are concatenated.
   * This itself does not reduce the size of the data but can lead to better compression
   * afterwards.
   *
   * Added in 2.8 for FLOAT and DOUBLE.
   * Support for INT32, INT64 and FIXED_LEN_BYTE_ARRAY added in 2.11.
   */
  Encoding::BYTE_STREAM_SPLIT
};
const char* _kEncodingNames[] = {
  /**
   * Default encoding.
   * BOOLEAN - 1 bit per value. 0 is false; 1 is true.
   * INT32 - 4 bytes per value.  Stored as little-endian.
   * INT64 - 8 bytes per value.  Stored as little-endian.
   * FLOAT - 4 bytes per value.  IEEE. Stored as little-endian.
   * DOUBLE - 8 bytes per value.  IEEE. Stored as little-endian.
   * BYTE_ARRAY - 4 byte length stored as little endian, followed by bytes.
   * FIXED_LEN_BYTE_ARRAY - Just the bytes.
   */
  "PLAIN",
  /**
   * Deprecated: Dictionary encoding. The values in the dictionary are encoded in the
   * plain type.
   * in a data page use RLE_DICTIONARY instead.
   * in a Dictionary page use PLAIN instead
   */
  "PLAIN_DICTIONARY",
  /**
   * Group packed run length encoding. Usable for definition/repetition levels
   * encoding and Booleans (on one bit: 0 is false; 1 is true.)
   */
  "RLE",
  /**
   * Bit packed encoding.  This can only be used if the data has a known max
   * width.  Usable for definition/repetition levels encoding.
   */
  "BIT_PACKED",
  /**
   * Delta encoding for integers. This can be used for int columns and works best
   * on sorted data
   */
  "DELTA_BINARY_PACKED",
  /**
   * Encoding for byte arrays to separate the length values and the data. The lengths
   * are encoded using DELTA_BINARY_PACKED
   */
  "DELTA_LENGTH_BYTE_ARRAY",
  /**
   * Incremental-encoded byte array. Prefix lengths are encoded using DELTA_BINARY_PACKED.
   * Suffixes are stored as delta length byte arrays.
   */
  "DELTA_BYTE_ARRAY",
  /**
   * Dictionary encoding: the ids are encoded using the RLE encoding
   */
  "RLE_DICTIONARY",
  /**
   * Encoding for fixed-width data (FLOAT, DOUBLE, INT32, INT64, FIXED_LEN_BYTE_ARRAY).
   * K byte-streams are created where K is the size in bytes of the data type.
   * The individual bytes of a value are scattered to the corresponding stream and
   * the streams are concatenated.
   * This itself does not reduce the size of the data but can lead to better compression
   * afterwards.
   *
   * Added in 2.8 for FLOAT and DOUBLE.
   * Support for INT32, INT64 and FIXED_LEN_BYTE_ARRAY added in 2.11.
   */
  "BYTE_STREAM_SPLIT"
};
const std::map<int, const char*> _Encoding_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kEncodingValues, _kEncodingNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const Encoding::type& val) {
  std::map<int, const char*>::const_iterator it = _Encoding_VALUES_TO_NAMES.find(val);
  if (it != _Encoding_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const Encoding::type& val) {
  std::map<int, const char*>::const_iterator it = _Encoding_VALUES_TO_NAMES.find(val);
  if (it != _Encoding_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kCompressionCodecValues[] = {
  CompressionCodec::UNCOMPRESSED,
  CompressionCodec::SNAPPY,
  CompressionCodec::GZIP,
  CompressionCodec::LZO,
  CompressionCodec::BROTLI,
  CompressionCodec::LZ4,
  CompressionCodec::ZSTD,
  CompressionCodec::LZ4_RAW
};
const char* _kCompressionCodecNames[] = {
  "UNCOMPRESSED",
  "SNAPPY",
  "GZIP",
  "LZO",
  "BROTLI",
  "LZ4",
  "ZSTD",
  "LZ4_RAW"
};
const std::map<int, const char*> _CompressionCodec_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kCompressionCodecValues, _kCompressionCodecNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const CompressionCodec::type& val) {
  std::map<int, const char*>::const_iterator it = _CompressionCodec_VALUES_TO_NAMES.find(val);
  if (it != _CompressionCodec_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const CompressionCodec::type& val) {
  std::map<int, const char*>::const_iterator it = _CompressionCodec_VALUES_TO_NAMES.find(val);
  if (it != _CompressionCodec_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kPageTypeValues[] = {
  PageType::DATA_PAGE,
  PageType::INDEX_PAGE,
  PageType::DICTIONARY_PAGE,
  PageType::DATA_PAGE_V2
};
const char* _kPageTypeNames[] = {
  "DATA_PAGE",
  "INDEX_PAGE",
  "DICTIONARY_PAGE",
  "DATA_PAGE_V2"
};
const std::map<int, const char*> _PageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kPageTypeValues, _kPageTypeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const PageType::type& val) {
  std::map<int, const char*>::const_iterator it = _PageType_VALUES_TO_NAMES.find(val);
  if (it != _PageType_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const PageType::type& val) {
  std::map<int, const char*>::const_iterator it = _PageType_VALUES_TO_NAMES.find(val);
  if (it != _PageType_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kBoundaryOrderValues[] = {
  BoundaryOrder::UNORDERED,
  BoundaryOrder::ASCENDING,
  BoundaryOrder::DESCENDING
};
const char* _kBoundaryOrderNames[] = {
  "UNORDERED",
  "ASCENDING",
  "DESCENDING"
};
const std::map<int, const char*> _BoundaryOrder_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kBoundaryOrderValues, _kBoundaryOrderNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const BoundaryOrder::type& val) {
  std::map<int, const char*>::const_iterator it = _BoundaryOrder_VALUES_TO_NAMES.find(val);
  if (it != _BoundaryOrder_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const BoundaryOrder::type& val) {
  std::map<int, const char*>::const_iterator it = _BoundaryOrder_VALUES_TO_NAMES.find(val);
  if (it != _BoundaryOrder_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


SizeStatistics::~SizeStatistics() noexcept {
}


void SizeStatistics::__set_unencoded_byte_array_data_bytes(const int64_t val) {
  this->unencoded_byte_array_data_bytes = val;
__isset.unencoded_byte_array_data_bytes = true;
}

void SizeStatistics::__set_repetition_level_histogram(const std::vector<int64_t> & val) {
  this->repetition_level_histogram = val;
__isset.repetition_level_histogram = true;
}

void SizeStatistics::__set_definition_level_histogram(const std::vector<int64_t> & val) {
  this->definition_level_histogram = val;
__isset.definition_level_histogram = true;
}
std::ostream& operator<<(std::ostream& out, const SizeStatistics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SizeStatistics &a, SizeStatistics &b) {
  using ::std::swap;
  swap(a.unencoded_byte_array_data_bytes, b.unencoded_byte_array_data_bytes);
  swap(a.repetition_level_histogram, b.repetition_level_histogram);
  swap(a.definition_level_histogram, b.definition_level_histogram);
  swap(a.__isset, b.__isset);
}

SizeStatistics::SizeStatistics(const SizeStatistics& other12) {
  unencoded_byte_array_data_bytes = other12.unencoded_byte_array_data_bytes;
  repetition_level_histogram = other12.repetition_level_histogram;
  definition_level_histogram = other12.definition_level_histogram;
  __isset = other12.__isset;
}
SizeStatistics::SizeStatistics(SizeStatistics&& other13) noexcept {
  unencoded_byte_array_data_bytes = other13.unencoded_byte_array_data_bytes;
  repetition_level_histogram = std::move(other13.repetition_level_histogram);
  definition_level_histogram = std::move(other13.definition_level_histogram);
  __isset = other13.__isset;
}
SizeStatistics& SizeStatistics::operator=(const SizeStatistics& other14) {
  unencoded_byte_array_data_bytes = other14.unencoded_byte_array_data_bytes;
  repetition_level_histogram = other14.repetition_level_histogram;
  definition_level_histogram = other14.definition_level_histogram;
  __isset = other14.__isset;
  return *this;
}
SizeStatistics& SizeStatistics::operator=(SizeStatistics&& other15) noexcept {
  unencoded_byte_array_data_bytes = other15.unencoded_byte_array_data_bytes;
  repetition_level_histogram = std::move(other15.repetition_level_histogram);
  definition_level_histogram = std::move(other15.definition_level_histogram);
  __isset = other15.__isset;
  return *this;
}
void SizeStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SizeStatistics(";
  out << "unencoded_byte_array_data_bytes="; (__isset.unencoded_byte_array_data_bytes ? (out << to_string(unencoded_byte_array_data_bytes)) : (out << "<null>"));
  out << ", " << "repetition_level_histogram="; (__isset.repetition_level_histogram ? (out << to_string(repetition_level_histogram)) : (out << "<null>"));
  out << ", " << "definition_level_histogram="; (__isset.definition_level_histogram ? (out << to_string(definition_level_histogram)) : (out << "<null>"));
  out << ")";
}


Covering::~Covering() noexcept {
}


void Covering::__set_kind(const std::string& val) {
  this->kind = val;
}

void Covering::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const Covering& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Covering &a, Covering &b) {
  using ::std::swap;
  swap(a.kind, b.kind);
  swap(a.value, b.value);
}

Covering::Covering(const Covering& other16) {
  kind = other16.kind;
  value = other16.value;
}
Covering::Covering(Covering&& other17) noexcept {
  kind = std::move(other17.kind);
  value = std::move(other17.value);
}
Covering& Covering::operator=(const Covering& other18) {
  kind = other18.kind;
  value = other18.value;
  return *this;
}
Covering& Covering::operator=(Covering&& other19) noexcept {
  kind = std::move(other19.kind);
  value = std::move(other19.value);
  return *this;
}
void Covering::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Covering(";
  out << "kind=" << to_string(kind);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


BoundingBox::~BoundingBox() noexcept {
}


void BoundingBox::__set_xmin(const double val) {
  this->xmin = val;
}

void BoundingBox::__set_xmax(const double val) {
  this->xmax = val;
}

void BoundingBox::__set_ymin(const double val) {
  this->ymin = val;
}

void BoundingBox::__set_ymax(const double val) {
  this->ymax = val;
}

void BoundingBox::__set_zmin(const double val) {
  this->zmin = val;
__isset.zmin = true;
}

void BoundingBox::__set_zmax(const double val) {
  this->zmax = val;
__isset.zmax = true;
}

void BoundingBox::__set_mmin(const double val) {
  this->mmin = val;
__isset.mmin = true;
}

void BoundingBox::__set_mmax(const double val) {
  this->mmax = val;
__isset.mmax = true;
}
std::ostream& operator<<(std::ostream& out, const BoundingBox& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BoundingBox &a, BoundingBox &b) {
  using ::std::swap;
  swap(a.xmin, b.xmin);
  swap(a.xmax, b.xmax);
  swap(a.ymin, b.ymin);
  swap(a.ymax, b.ymax);
  swap(a.zmin, b.zmin);
  swap(a.zmax, b.zmax);
  swap(a.mmin, b.mmin);
  swap(a.mmax, b.mmax);
  swap(a.__isset, b.__isset);
}

BoundingBox::BoundingBox(const BoundingBox& other20) noexcept {
  xmin = other20.xmin;
  xmax = other20.xmax;
  ymin = other20.ymin;
  ymax = other20.ymax;
  zmin = other20.zmin;
  zmax = other20.zmax;
  mmin = other20.mmin;
  mmax = other20.mmax;
  __isset = other20.__isset;
}
BoundingBox::BoundingBox(BoundingBox&& other21) noexcept {
  xmin = other21.xmin;
  xmax = other21.xmax;
  ymin = other21.ymin;
  ymax = other21.ymax;
  zmin = other21.zmin;
  zmax = other21.zmax;
  mmin = other21.mmin;
  mmax = other21.mmax;
  __isset = other21.__isset;
}
BoundingBox& BoundingBox::operator=(const BoundingBox& other22) noexcept {
  xmin = other22.xmin;
  xmax = other22.xmax;
  ymin = other22.ymin;
  ymax = other22.ymax;
  zmin = other22.zmin;
  zmax = other22.zmax;
  mmin = other22.mmin;
  mmax = other22.mmax;
  __isset = other22.__isset;
  return *this;
}
BoundingBox& BoundingBox::operator=(BoundingBox&& other23) noexcept {
  xmin = other23.xmin;
  xmax = other23.xmax;
  ymin = other23.ymin;
  ymax = other23.ymax;
  zmin = other23.zmin;
  zmax = other23.zmax;
  mmin = other23.mmin;
  mmax = other23.mmax;
  __isset = other23.__isset;
  return *this;
}
void BoundingBox::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BoundingBox(";
  out << "xmin=" << to_string(xmin);
  out << ", " << "xmax=" << to_string(xmax);
  out << ", " << "ymin=" << to_string(ymin);
  out << ", " << "ymax=" << to_string(ymax);
  out << ", " << "zmin="; (__isset.zmin ? (out << to_string(zmin)) : (out << "<null>"));
  out << ", " << "zmax="; (__isset.zmax ? (out << to_string(zmax)) : (out << "<null>"));
  out << ", " << "mmin="; (__isset.mmin ? (out << to_string(mmin)) : (out << "<null>"));
  out << ", " << "mmax="; (__isset.mmax ? (out << to_string(mmax)) : (out << "<null>"));
  out << ")";
}


GeometryStatistics::~GeometryStatistics() noexcept {
}


void GeometryStatistics::__set_bbox(const BoundingBox& val) {
  this->bbox = val;
__isset.bbox = true;
}

void GeometryStatistics::__set_coverings(const std::vector<Covering> & val) {
  this->coverings = val;
__isset.coverings = true;
}

void GeometryStatistics::__set_geometry_types(const std::vector<int32_t> & val) {
  this->geometry_types = val;
__isset.geometry_types = true;
}
std::ostream& operator<<(std::ostream& out, const GeometryStatistics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GeometryStatistics &a, GeometryStatistics &b) {
  using ::std::swap;
  swap(a.bbox, b.bbox);
  swap(a.coverings, b.coverings);
  swap(a.geometry_types, b.geometry_types);
  swap(a.__isset, b.__isset);
}

GeometryStatistics::GeometryStatistics(const GeometryStatistics& other36) {
  bbox = other36.bbox;
  coverings = other36.coverings;
  geometry_types = other36.geometry_types;
  __isset = other36.__isset;
}
GeometryStatistics::GeometryStatistics(GeometryStatistics&& other37) noexcept {
  bbox = std::move(other37.bbox);
  coverings = std::move(other37.coverings);
  geometry_types = std::move(other37.geometry_types);
  __isset = other37.__isset;
}
GeometryStatistics& GeometryStatistics::operator=(const GeometryStatistics& other38) {
  bbox = other38.bbox;
  coverings = other38.coverings;
  geometry_types = other38.geometry_types;
  __isset = other38.__isset;
  return *this;
}
GeometryStatistics& GeometryStatistics::operator=(GeometryStatistics&& other39) noexcept {
  bbox = std::move(other39.bbox);
  coverings = std::move(other39.coverings);
  geometry_types = std::move(other39.geometry_types);
  __isset = other39.__isset;
  return *this;
}
void GeometryStatistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GeometryStatistics(";
  out << "bbox="; (__isset.bbox ? (out << to_string(bbox)) : (out << "<null>"));
  out << ", " << "coverings="; (__isset.coverings ? (out << to_string(coverings)) : (out << "<null>"));
  out << ", " << "geometry_types="; (__isset.geometry_types ? (out << to_string(geometry_types)) : (out << "<null>"));
  out << ")";
}


Statistics::~Statistics() noexcept {
}


void Statistics::__set_max(const std::string& val) {
  this->max = val;
__isset.max = true;
}

void Statistics::__set_min(const std::string& val) {
  this->min = val;
__isset.min = true;
}

void Statistics::__set_null_count(const int64_t val) {
  this->null_count = val;
__isset.null_count = true;
}

void Statistics::__set_distinct_count(const int64_t val) {
  this->distinct_count = val;
__isset.distinct_count = true;
}

void Statistics::__set_max_value(const std::string& val) {
  this->max_value = val;
__isset.max_value = true;
}

void Statistics::__set_min_value(const std::string& val) {
  this->min_value = val;
__isset.min_value = true;
}

void Statistics::__set_is_max_value_exact(const bool val) {
  this->is_max_value_exact = val;
__isset.is_max_value_exact = true;
}

void Statistics::__set_is_min_value_exact(const bool val) {
  this->is_min_value_exact = val;
__isset.is_min_value_exact = true;
}

void Statistics::__set_geometry_stats(const GeometryStatistics& val) {
  this->geometry_stats = val;
__isset.geometry_stats = true;
}
std::ostream& operator<<(std::ostream& out, const Statistics& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Statistics &a, Statistics &b) {
  using ::std::swap;
  swap(a.max, b.max);
  swap(a.min, b.min);
  swap(a.null_count, b.null_count);
  swap(a.distinct_count, b.distinct_count);
  swap(a.max_value, b.max_value);
  swap(a.min_value, b.min_value);
  swap(a.is_max_value_exact, b.is_max_value_exact);
  swap(a.is_min_value_exact, b.is_min_value_exact);
  swap(a.geometry_stats, b.geometry_stats);
  swap(a.__isset, b.__isset);
}

Statistics::Statistics(const Statistics& other40) {
  max = other40.max;
  min = other40.min;
  null_count = other40.null_count;
  distinct_count = other40.distinct_count;
  max_value = other40.max_value;
  min_value = other40.min_value;
  is_max_value_exact = other40.is_max_value_exact;
  is_min_value_exact = other40.is_min_value_exact;
  geometry_stats = other40.geometry_stats;
  __isset = other40.__isset;
}
Statistics::Statistics(Statistics&& other41) noexcept {
  max = std::move(other41.max);
  min = std::move(other41.min);
  null_count = other41.null_count;
  distinct_count = other41.distinct_count;
  max_value = std::move(other41.max_value);
  min_value = std::move(other41.min_value);
  is_max_value_exact = other41.is_max_value_exact;
  is_min_value_exact = other41.is_min_value_exact;
  geometry_stats = std::move(other41.geometry_stats);
  __isset = other41.__isset;
}
Statistics& Statistics::operator=(const Statistics& other42) {
  max = other42.max;
  min = other42.min;
  null_count = other42.null_count;
  distinct_count = other42.distinct_count;
  max_value = other42.max_value;
  min_value = other42.min_value;
  is_max_value_exact = other42.is_max_value_exact;
  is_min_value_exact = other42.is_min_value_exact;
  geometry_stats = other42.geometry_stats;
  __isset = other42.__isset;
  return *this;
}
Statistics& Statistics::operator=(Statistics&& other43) noexcept {
  max = std::move(other43.max);
  min = std::move(other43.min);
  null_count = other43.null_count;
  distinct_count = other43.distinct_count;
  max_value = std::move(other43.max_value);
  min_value = std::move(other43.min_value);
  is_max_value_exact = other43.is_max_value_exact;
  is_min_value_exact = other43.is_min_value_exact;
  geometry_stats = std::move(other43.geometry_stats);
  __isset = other43.__isset;
  return *this;
}
void Statistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Statistics(";
  out << "max="; (__isset.max ? (out << to_string(max)) : (out << "<null>"));
  out << ", " << "min="; (__isset.min ? (out << to_string(min)) : (out << "<null>"));
  out << ", " << "null_count="; (__isset.null_count ? (out << to_string(null_count)) : (out << "<null>"));
  out << ", " << "distinct_count="; (__isset.distinct_count ? (out << to_string(distinct_count)) : (out << "<null>"));
  out << ", " << "max_value="; (__isset.max_value ? (out << to_string(max_value)) : (out << "<null>"));
  out << ", " << "min_value="; (__isset.min_value ? (out << to_string(min_value)) : (out << "<null>"));
  out << ", " << "is_max_value_exact="; (__isset.is_max_value_exact ? (out << to_string(is_max_value_exact)) : (out << "<null>"));
  out << ", " << "is_min_value_exact="; (__isset.is_min_value_exact ? (out << to_string(is_min_value_exact)) : (out << "<null>"));
  out << ", " << "geometry_stats="; (__isset.geometry_stats ? (out << to_string(geometry_stats)) : (out << "<null>"));
  out << ")";
}


StringType::~StringType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const StringType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(StringType &a, StringType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

StringType::StringType(const StringType& other44) noexcept {
  (void) other44;
}
StringType::StringType(StringType&& other45) noexcept {
  (void) other45;
}
StringType& StringType::operator=(const StringType& other46) noexcept {
  (void) other46;
  return *this;
}
StringType& StringType::operator=(StringType&& other47) noexcept {
  (void) other47;
  return *this;
}
void StringType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringType(";
  out << ")";
}


UUIDType::~UUIDType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const UUIDType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(UUIDType &a, UUIDType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

UUIDType::UUIDType(const UUIDType& other48) noexcept {
  (void) other48;
}
UUIDType::UUIDType(UUIDType&& other49) noexcept {
  (void) other49;
}
UUIDType& UUIDType::operator=(const UUIDType& other50) noexcept {
  (void) other50;
  return *this;
}
UUIDType& UUIDType::operator=(UUIDType&& other51) noexcept {
  (void) other51;
  return *this;
}
void UUIDType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UUIDType(";
  out << ")";
}


MapType::~MapType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const MapType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MapType &a, MapType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

MapType::MapType(const MapType& other52) noexcept {
  (void) other52;
}
MapType::MapType(MapType&& other53) noexcept {
  (void) other53;
}
MapType& MapType::operator=(const MapType& other54) noexcept {
  (void) other54;
  return *this;
}
MapType& MapType::operator=(MapType&& other55) noexcept {
  (void) other55;
  return *this;
}
void MapType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MapType(";
  out << ")";
}


ListType::~ListType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const ListType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ListType &a, ListType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

ListType::ListType(const ListType& other56) noexcept {
  (void) other56;
}
ListType::ListType(ListType&& other57) noexcept {
  (void) other57;
}
ListType& ListType::operator=(const ListType& other58) noexcept {
  (void) other58;
  return *this;
}
ListType& ListType::operator=(ListType&& other59) noexcept {
  (void) other59;
  return *this;
}
void ListType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ListType(";
  out << ")";
}


EnumType::~EnumType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const EnumType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(EnumType &a, EnumType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

EnumType::EnumType(const EnumType& other60) noexcept {
  (void) other60;
}
EnumType::EnumType(EnumType&& other61) noexcept {
  (void) other61;
}
EnumType& EnumType::operator=(const EnumType& other62) noexcept {
  (void) other62;
  return *this;
}
EnumType& EnumType::operator=(EnumType&& other63) noexcept {
  (void) other63;
  return *this;
}
void EnumType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EnumType(";
  out << ")";
}


DateType::~DateType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const DateType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DateType &a, DateType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

DateType::DateType(const DateType& other64) noexcept {
  (void) other64;
}
DateType::DateType(DateType&& other65) noexcept {
  (void) other65;
}
DateType& DateType::operator=(const DateType& other66) noexcept {
  (void) other66;
  return *this;
}
DateType& DateType::operator=(DateType&& other67) noexcept {
  (void) other67;
  return *this;
}
void DateType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DateType(";
  out << ")";
}


Float16Type::~Float16Type() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Float16Type& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Float16Type &a, Float16Type &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Float16Type::Float16Type(const Float16Type& other68) noexcept {
  (void) other68;
}
Float16Type::Float16Type(Float16Type&& other69) noexcept {
  (void) other69;
}
Float16Type& Float16Type::operator=(const Float16Type& other70) noexcept {
  (void) other70;
  return *this;
}
Float16Type& Float16Type::operator=(Float16Type&& other71) noexcept {
  (void) other71;
  return *this;
}
void Float16Type::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Float16Type(";
  out << ")";
}


NullType::~NullType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const NullType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NullType &a, NullType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

NullType::NullType(const NullType& other72) noexcept {
  (void) other72;
}
NullType::NullType(NullType&& other73) noexcept {
  (void) other73;
}
NullType& NullType::operator=(const NullType& other74) noexcept {
  (void) other74;
  return *this;
}
NullType& NullType::operator=(NullType&& other75) noexcept {
  (void) other75;
  return *this;
}
void NullType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NullType(";
  out << ")";
}


DecimalType::~DecimalType() noexcept {
}


void DecimalType::__set_scale(const int32_t val) {
  this->scale = val;
}

void DecimalType::__set_precision(const int32_t val) {
  this->precision = val;
}
std::ostream& operator<<(std::ostream& out, const DecimalType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DecimalType &a, DecimalType &b) {
  using ::std::swap;
  swap(a.scale, b.scale);
  swap(a.precision, b.precision);
}

DecimalType::DecimalType(const DecimalType& other76) noexcept {
  scale = other76.scale;
  precision = other76.precision;
}
DecimalType::DecimalType(DecimalType&& other77) noexcept {
  scale = other77.scale;
  precision = other77.precision;
}
DecimalType& DecimalType::operator=(const DecimalType& other78) noexcept {
  scale = other78.scale;
  precision = other78.precision;
  return *this;
}
DecimalType& DecimalType::operator=(DecimalType&& other79) noexcept {
  scale = other79.scale;
  precision = other79.precision;
  return *this;
}
void DecimalType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DecimalType(";
  out << "scale=" << to_string(scale);
  out << ", " << "precision=" << to_string(precision);
  out << ")";
}


MilliSeconds::~MilliSeconds() noexcept {
}

std::ostream& operator<<(std::ostream& out, const MilliSeconds& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MilliSeconds &a, MilliSeconds &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

MilliSeconds::MilliSeconds(const MilliSeconds& other80) noexcept {
  (void) other80;
}
MilliSeconds::MilliSeconds(MilliSeconds&& other81) noexcept {
  (void) other81;
}
MilliSeconds& MilliSeconds::operator=(const MilliSeconds& other82) noexcept {
  (void) other82;
  return *this;
}
MilliSeconds& MilliSeconds::operator=(MilliSeconds&& other83) noexcept {
  (void) other83;
  return *this;
}
void MilliSeconds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MilliSeconds(";
  out << ")";
}


MicroSeconds::~MicroSeconds() noexcept {
}

std::ostream& operator<<(std::ostream& out, const MicroSeconds& obj)
{
  obj.printTo(out);
  return out;
}


void swap(MicroSeconds &a, MicroSeconds &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

MicroSeconds::MicroSeconds(const MicroSeconds& other84) noexcept {
  (void) other84;
}
MicroSeconds::MicroSeconds(MicroSeconds&& other85) noexcept {
  (void) other85;
}
MicroSeconds& MicroSeconds::operator=(const MicroSeconds& other86) noexcept {
  (void) other86;
  return *this;
}
MicroSeconds& MicroSeconds::operator=(MicroSeconds&& other87) noexcept {
  (void) other87;
  return *this;
}
void MicroSeconds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MicroSeconds(";
  out << ")";
}


NanoSeconds::~NanoSeconds() noexcept {
}

std::ostream& operator<<(std::ostream& out, const NanoSeconds& obj)
{
  obj.printTo(out);
  return out;
}


void swap(NanoSeconds &a, NanoSeconds &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

NanoSeconds::NanoSeconds(const NanoSeconds& other88) noexcept {
  (void) other88;
}
NanoSeconds::NanoSeconds(NanoSeconds&& other89) noexcept {
  (void) other89;
}
NanoSeconds& NanoSeconds::operator=(const NanoSeconds& other90) noexcept {
  (void) other90;
  return *this;
}
NanoSeconds& NanoSeconds::operator=(NanoSeconds&& other91) noexcept {
  (void) other91;
  return *this;
}
void NanoSeconds::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NanoSeconds(";
  out << ")";
}


TimeUnit::~TimeUnit() noexcept {
}


void TimeUnit::__set_MILLIS(const MilliSeconds& val) {
  this->MILLIS = val;
__isset.MILLIS = true;
}

void TimeUnit::__set_MICROS(const MicroSeconds& val) {
  this->MICROS = val;
__isset.MICROS = true;
}

void TimeUnit::__set_NANOS(const NanoSeconds& val) {
  this->NANOS = val;
__isset.NANOS = true;
}
std::ostream& operator<<(std::ostream& out, const TimeUnit& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TimeUnit &a, TimeUnit &b) {
  using ::std::swap;
  swap(a.MILLIS, b.MILLIS);
  swap(a.MICROS, b.MICROS);
  swap(a.NANOS, b.NANOS);
  swap(a.__isset, b.__isset);
}

TimeUnit::TimeUnit(const TimeUnit& other92) noexcept {
  MILLIS = other92.MILLIS;
  MICROS = other92.MICROS;
  NANOS = other92.NANOS;
  __isset = other92.__isset;
}
TimeUnit::TimeUnit(TimeUnit&& other93) noexcept {
  MILLIS = std::move(other93.MILLIS);
  MICROS = std::move(other93.MICROS);
  NANOS = std::move(other93.NANOS);
  __isset = other93.__isset;
}
TimeUnit& TimeUnit::operator=(const TimeUnit& other94) noexcept {
  MILLIS = other94.MILLIS;
  MICROS = other94.MICROS;
  NANOS = other94.NANOS;
  __isset = other94.__isset;
  return *this;
}
TimeUnit& TimeUnit::operator=(TimeUnit&& other95) noexcept {
  MILLIS = std::move(other95.MILLIS);
  MICROS = std::move(other95.MICROS);
  NANOS = std::move(other95.NANOS);
  __isset = other95.__isset;
  return *this;
}
void TimeUnit::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimeUnit(";
  out << "MILLIS="; (__isset.MILLIS ? (out << to_string(MILLIS)) : (out << "<null>"));
  out << ", " << "MICROS="; (__isset.MICROS ? (out << to_string(MICROS)) : (out << "<null>"));
  out << ", " << "NANOS="; (__isset.NANOS ? (out << to_string(NANOS)) : (out << "<null>"));
  out << ")";
}


TimestampType::~TimestampType() noexcept {
}


void TimestampType::__set_isAdjustedToUTC(const bool val) {
  this->isAdjustedToUTC = val;
}

void TimestampType::__set_unit(const TimeUnit& val) {
  this->unit = val;
}
std::ostream& operator<<(std::ostream& out, const TimestampType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TimestampType &a, TimestampType &b) {
  using ::std::swap;
  swap(a.isAdjustedToUTC, b.isAdjustedToUTC);
  swap(a.unit, b.unit);
}

TimestampType::TimestampType(const TimestampType& other96) noexcept {
  isAdjustedToUTC = other96.isAdjustedToUTC;
  unit = other96.unit;
}
TimestampType::TimestampType(TimestampType&& other97) noexcept {
  isAdjustedToUTC = other97.isAdjustedToUTC;
  unit = std::move(other97.unit);
}
TimestampType& TimestampType::operator=(const TimestampType& other98) noexcept {
  isAdjustedToUTC = other98.isAdjustedToUTC;
  unit = other98.unit;
  return *this;
}
TimestampType& TimestampType::operator=(TimestampType&& other99) noexcept {
  isAdjustedToUTC = other99.isAdjustedToUTC;
  unit = std::move(other99.unit);
  return *this;
}
void TimestampType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimestampType(";
  out << "isAdjustedToUTC=" << to_string(isAdjustedToUTC);
  out << ", " << "unit=" << to_string(unit);
  out << ")";
}


TimeType::~TimeType() noexcept {
}


void TimeType::__set_isAdjustedToUTC(const bool val) {
  this->isAdjustedToUTC = val;
}

void TimeType::__set_unit(const TimeUnit& val) {
  this->unit = val;
}
std::ostream& operator<<(std::ostream& out, const TimeType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TimeType &a, TimeType &b) {
  using ::std::swap;
  swap(a.isAdjustedToUTC, b.isAdjustedToUTC);
  swap(a.unit, b.unit);
}

TimeType::TimeType(const TimeType& other100) noexcept {
  isAdjustedToUTC = other100.isAdjustedToUTC;
  unit = other100.unit;
}
TimeType::TimeType(TimeType&& other101) noexcept {
  isAdjustedToUTC = other101.isAdjustedToUTC;
  unit = std::move(other101.unit);
}
TimeType& TimeType::operator=(const TimeType& other102) noexcept {
  isAdjustedToUTC = other102.isAdjustedToUTC;
  unit = other102.unit;
  return *this;
}
TimeType& TimeType::operator=(TimeType&& other103) noexcept {
  isAdjustedToUTC = other103.isAdjustedToUTC;
  unit = std::move(other103.unit);
  return *this;
}
void TimeType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TimeType(";
  out << "isAdjustedToUTC=" << to_string(isAdjustedToUTC);
  out << ", " << "unit=" << to_string(unit);
  out << ")";
}


IntType::~IntType() noexcept {
}


void IntType::__set_bitWidth(const int8_t val) {
  this->bitWidth = val;
}

void IntType::__set_isSigned(const bool val) {
  this->isSigned = val;
}
std::ostream& operator<<(std::ostream& out, const IntType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(IntType &a, IntType &b) {
  using ::std::swap;
  swap(a.bitWidth, b.bitWidth);
  swap(a.isSigned, b.isSigned);
}

IntType::IntType(const IntType& other104) noexcept {
  bitWidth = other104.bitWidth;
  isSigned = other104.isSigned;
}
IntType::IntType(IntType&& other105) noexcept {
  bitWidth = other105.bitWidth;
  isSigned = other105.isSigned;
}
IntType& IntType::operator=(const IntType& other106) noexcept {
  bitWidth = other106.bitWidth;
  isSigned = other106.isSigned;
  return *this;
}
IntType& IntType::operator=(IntType&& other107) noexcept {
  bitWidth = other107.bitWidth;
  isSigned = other107.isSigned;
  return *this;
}
void IntType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IntType(";
  out << "bitWidth=" << to_string(bitWidth);
  out << ", " << "isSigned=" << to_string(isSigned);
  out << ")";
}


JsonType::~JsonType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const JsonType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(JsonType &a, JsonType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

JsonType::JsonType(const JsonType& other108) noexcept {
  (void) other108;
}
JsonType::JsonType(JsonType&& other109) noexcept {
  (void) other109;
}
JsonType& JsonType::operator=(const JsonType& other110) noexcept {
  (void) other110;
  return *this;
}
JsonType& JsonType::operator=(JsonType&& other111) noexcept {
  (void) other111;
  return *this;
}
void JsonType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JsonType(";
  out << ")";
}


BsonType::~BsonType() noexcept {
}

std::ostream& operator<<(std::ostream& out, const BsonType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BsonType &a, BsonType &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

BsonType::BsonType(const BsonType& other112) noexcept {
  (void) other112;
}
BsonType::BsonType(BsonType&& other113) noexcept {
  (void) other113;
}
BsonType& BsonType::operator=(const BsonType& other114) noexcept {
  (void) other114;
  return *this;
}
BsonType& BsonType::operator=(BsonType&& other115) noexcept {
  (void) other115;
  return *this;
}
void BsonType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BsonType(";
  out << ")";
}


GeometryType::~GeometryType() noexcept {
}


void GeometryType::__set_encoding(const GeometryEncoding::type val) {
  this->encoding = val;
}

void GeometryType::__set_edges(const Edges::type val) {
  this->edges = val;
}

void GeometryType::__set_crs(const std::string& val) {
  this->crs = val;
__isset.crs = true;
}

void GeometryType::__set_crs_encoding(const std::string& val) {
  this->crs_encoding = val;
__isset.crs_encoding = true;
}

void GeometryType::__set_metadata(const std::string& val) {
  this->metadata = val;
__isset.metadata = true;
}
std::ostream& operator<<(std::ostream& out, const GeometryType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(GeometryType &a, GeometryType &b) {
  using ::std::swap;
  swap(a.encoding, b.encoding);
  swap(a.edges, b.edges);
  swap(a.crs, b.crs);
  swap(a.crs_encoding, b.crs_encoding);
  swap(a.metadata, b.metadata);
  swap(a.__isset, b.__isset);
}

GeometryType::GeometryType(const GeometryType& other118) {
  encoding = other118.encoding;
  edges = other118.edges;
  crs = other118.crs;
  crs_encoding = other118.crs_encoding;
  metadata = other118.metadata;
  __isset = other118.__isset;
}
GeometryType::GeometryType(GeometryType&& other119) noexcept {
  encoding = other119.encoding;
  edges = other119.edges;
  crs = std::move(other119.crs);
  crs_encoding = std::move(other119.crs_encoding);
  metadata = std::move(other119.metadata);
  __isset = other119.__isset;
}
GeometryType& GeometryType::operator=(const GeometryType& other120) {
  encoding = other120.encoding;
  edges = other120.edges;
  crs = other120.crs;
  crs_encoding = other120.crs_encoding;
  metadata = other120.metadata;
  __isset = other120.__isset;
  return *this;
}
GeometryType& GeometryType::operator=(GeometryType&& other121) noexcept {
  encoding = other121.encoding;
  edges = other121.edges;
  crs = std::move(other121.crs);
  crs_encoding = std::move(other121.crs_encoding);
  metadata = std::move(other121.metadata);
  __isset = other121.__isset;
  return *this;
}
void GeometryType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GeometryType(";
  out << "encoding=" << to_string(encoding);
  out << ", " << "edges=" << to_string(edges);
  out << ", " << "crs="; (__isset.crs ? (out << to_string(crs)) : (out << "<null>"));
  out << ", " << "crs_encoding="; (__isset.crs_encoding ? (out << to_string(crs_encoding)) : (out << "<null>"));
  out << ", " << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ")";
}


LogicalType::~LogicalType() noexcept {
}


void LogicalType::__set_STRING(const StringType& val) {
  this->STRING = val;
__isset.STRING = true;
}

void LogicalType::__set_MAP(const MapType& val) {
  this->MAP = val;
__isset.MAP = true;
}

void LogicalType::__set_LIST(const ListType& val) {
  this->LIST = val;
__isset.LIST = true;
}

void LogicalType::__set_ENUM(const EnumType& val) {
  this->ENUM = val;
__isset.ENUM = true;
}

void LogicalType::__set_DECIMAL(const DecimalType& val) {
  this->DECIMAL = val;
__isset.DECIMAL = true;
}

void LogicalType::__set_DATE(const DateType& val) {
  this->DATE = val;
__isset.DATE = true;
}

void LogicalType::__set_TIME(const TimeType& val) {
  this->TIME = val;
__isset.TIME = true;
}

void LogicalType::__set_TIMESTAMP(const TimestampType& val) {
  this->TIMESTAMP = val;
__isset.TIMESTAMP = true;
}

void LogicalType::__set_INTEGER(const IntType& val) {
  this->INTEGER = val;
__isset.INTEGER = true;
}

void LogicalType::__set_UNKNOWN(const NullType& val) {
  this->UNKNOWN = val;
__isset.UNKNOWN = true;
}

void LogicalType::__set_JSON(const JsonType& val) {
  this->JSON = val;
__isset.JSON = true;
}

void LogicalType::__set_BSON(const BsonType& val) {
  this->BSON = val;
__isset.BSON = true;
}

void LogicalType::__set_UUID(const UUIDType& val) {
  this->UUID = val;
__isset.UUID = true;
}

void LogicalType::__set_FLOAT16(const Float16Type& val) {
  this->FLOAT16 = val;
__isset.FLOAT16 = true;
}

void LogicalType::__set_GEOMETRY(const GeometryType& val) {
  this->GEOMETRY = val;
__isset.GEOMETRY = true;
}
std::ostream& operator<<(std::ostream& out, const LogicalType& obj)
{
  obj.printTo(out);
  return out;
}


void swap(LogicalType &a, LogicalType &b) {
  using ::std::swap;
  swap(a.STRING, b.STRING);
  swap(a.MAP, b.MAP);
  swap(a.LIST, b.LIST);
  swap(a.ENUM, b.ENUM);
  swap(a.DECIMAL, b.DECIMAL);
  swap(a.DATE, b.DATE);
  swap(a.TIME, b.TIME);
  swap(a.TIMESTAMP, b.TIMESTAMP);
  swap(a.INTEGER, b.INTEGER);
  swap(a.UNKNOWN, b.UNKNOWN);
  swap(a.JSON, b.JSON);
  swap(a.BSON, b.BSON);
  swap(a.UUID, b.UUID);
  swap(a.FLOAT16, b.FLOAT16);
  swap(a.GEOMETRY, b.GEOMETRY);
  swap(a.__isset, b.__isset);
}

LogicalType::LogicalType(const LogicalType& other122) {
  STRING = other122.STRING;
  MAP = other122.MAP;
  LIST = other122.LIST;
  ENUM = other122.ENUM;
  DECIMAL = other122.DECIMAL;
  DATE = other122.DATE;
  TIME = other122.TIME;
  TIMESTAMP = other122.TIMESTAMP;
  INTEGER = other122.INTEGER;
  UNKNOWN = other122.UNKNOWN;
  JSON = other122.JSON;
  BSON = other122.BSON;
  UUID = other122.UUID;
  FLOAT16 = other122.FLOAT16;
  GEOMETRY = other122.GEOMETRY;
  __isset = other122.__isset;
}
LogicalType::LogicalType(LogicalType&& other123) noexcept {
  STRING = std::move(other123.STRING);
  MAP = std::move(other123.MAP);
  LIST = std::move(other123.LIST);
  ENUM = std::move(other123.ENUM);
  DECIMAL = std::move(other123.DECIMAL);
  DATE = std::move(other123.DATE);
  TIME = std::move(other123.TIME);
  TIMESTAMP = std::move(other123.TIMESTAMP);
  INTEGER = std::move(other123.INTEGER);
  UNKNOWN = std::move(other123.UNKNOWN);
  JSON = std::move(other123.JSON);
  BSON = std::move(other123.BSON);
  UUID = std::move(other123.UUID);
  FLOAT16 = std::move(other123.FLOAT16);
  GEOMETRY = std::move(other123.GEOMETRY);
  __isset = other123.__isset;
}
LogicalType& LogicalType::operator=(const LogicalType& other124) {
  STRING = other124.STRING;
  MAP = other124.MAP;
  LIST = other124.LIST;
  ENUM = other124.ENUM;
  DECIMAL = other124.DECIMAL;
  DATE = other124.DATE;
  TIME = other124.TIME;
  TIMESTAMP = other124.TIMESTAMP;
  INTEGER = other124.INTEGER;
  UNKNOWN = other124.UNKNOWN;
  JSON = other124.JSON;
  BSON = other124.BSON;
  UUID = other124.UUID;
  FLOAT16 = other124.FLOAT16;
  GEOMETRY = other124.GEOMETRY;
  __isset = other124.__isset;
  return *this;
}
LogicalType& LogicalType::operator=(LogicalType&& other125) noexcept {
  STRING = std::move(other125.STRING);
  MAP = std::move(other125.MAP);
  LIST = std::move(other125.LIST);
  ENUM = std::move(other125.ENUM);
  DECIMAL = std::move(other125.DECIMAL);
  DATE = std::move(other125.DATE);
  TIME = std::move(other125.TIME);
  TIMESTAMP = std::move(other125.TIMESTAMP);
  INTEGER = std::move(other125.INTEGER);
  UNKNOWN = std::move(other125.UNKNOWN);
  JSON = std::move(other125.JSON);
  BSON = std::move(other125.BSON);
  UUID = std::move(other125.UUID);
  FLOAT16 = std::move(other125.FLOAT16);
  GEOMETRY = std::move(other125.GEOMETRY);
  __isset = other125.__isset;
  return *this;
}
void LogicalType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogicalType(";
  out << "STRING="; (__isset.STRING ? (out << to_string(STRING)) : (out << "<null>"));
  out << ", " << "MAP="; (__isset.MAP ? (out << to_string(MAP)) : (out << "<null>"));
  out << ", " << "LIST="; (__isset.LIST ? (out << to_string(LIST)) : (out << "<null>"));
  out << ", " << "ENUM="; (__isset.ENUM ? (out << to_string(ENUM)) : (out << "<null>"));
  out << ", " << "DECIMAL="; (__isset.DECIMAL ? (out << to_string(DECIMAL)) : (out << "<null>"));
  out << ", " << "DATE="; (__isset.DATE ? (out << to_string(DATE)) : (out << "<null>"));
  out << ", " << "TIME="; (__isset.TIME ? (out << to_string(TIME)) : (out << "<null>"));
  out << ", " << "TIMESTAMP="; (__isset.TIMESTAMP ? (out << to_string(TIMESTAMP)) : (out << "<null>"));
  out << ", " << "INTEGER="; (__isset.INTEGER ? (out << to_string(INTEGER)) : (out << "<null>"));
  out << ", " << "UNKNOWN="; (__isset.UNKNOWN ? (out << to_string(UNKNOWN)) : (out << "<null>"));
  out << ", " << "JSON="; (__isset.JSON ? (out << to_string(JSON)) : (out << "<null>"));
  out << ", " << "BSON="; (__isset.BSON ? (out << to_string(BSON)) : (out << "<null>"));
  out << ", " << "UUID="; (__isset.UUID ? (out << to_string(UUID)) : (out << "<null>"));
  out << ", " << "FLOAT16="; (__isset.FLOAT16 ? (out << to_string(FLOAT16)) : (out << "<null>"));
  out << ", " << "GEOMETRY="; (__isset.GEOMETRY ? (out << to_string(GEOMETRY)) : (out << "<null>"));
  out << ")";
}


SchemaElement::~SchemaElement() noexcept {
}


void SchemaElement::__set_type(const Type::type val) {
  this->type = val;
__isset.type = true;
}

void SchemaElement::__set_type_length(const int32_t val) {
  this->type_length = val;
__isset.type_length = true;
}

void SchemaElement::__set_repetition_type(const FieldRepetitionType::type val) {
  this->repetition_type = val;
__isset.repetition_type = true;
}

void SchemaElement::__set_name(const std::string& val) {
  this->name = val;
}

void SchemaElement::__set_num_children(const int32_t val) {
  this->num_children = val;
__isset.num_children = true;
}

void SchemaElement::__set_converted_type(const ConvertedType::type val) {
  this->converted_type = val;
__isset.converted_type = true;
}

void SchemaElement::__set_scale(const int32_t val) {
  this->scale = val;
__isset.scale = true;
}

void SchemaElement::__set_precision(const int32_t val) {
  this->precision = val;
__isset.precision = true;
}

void SchemaElement::__set_field_id(const int32_t val) {
  this->field_id = val;
__isset.field_id = true;
}

void SchemaElement::__set_logicalType(const LogicalType& val) {
  this->logicalType = val;
__isset.logicalType = true;
}
std::ostream& operator<<(std::ostream& out, const SchemaElement& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SchemaElement &a, SchemaElement &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.type_length, b.type_length);
  swap(a.repetition_type, b.repetition_type);
  swap(a.name, b.name);
  swap(a.num_children, b.num_children);
  swap(a.converted_type, b.converted_type);
  swap(a.scale, b.scale);
  swap(a.precision, b.precision);
  swap(a.field_id, b.field_id);
  swap(a.logicalType, b.logicalType);
  swap(a.__isset, b.__isset);
}

SchemaElement::SchemaElement(const SchemaElement& other129) {
  type = other129.type;
  type_length = other129.type_length;
  repetition_type = other129.repetition_type;
  name = other129.name;
  num_children = other129.num_children;
  converted_type = other129.converted_type;
  scale = other129.scale;
  precision = other129.precision;
  field_id = other129.field_id;
  logicalType = other129.logicalType;
  __isset = other129.__isset;
}
SchemaElement::SchemaElement(SchemaElement&& other130) noexcept {
  type = other130.type;
  type_length = other130.type_length;
  repetition_type = other130.repetition_type;
  name = std::move(other130.name);
  num_children = other130.num_children;
  converted_type = other130.converted_type;
  scale = other130.scale;
  precision = other130.precision;
  field_id = other130.field_id;
  logicalType = std::move(other130.logicalType);
  __isset = other130.__isset;
}
SchemaElement& SchemaElement::operator=(const SchemaElement& other131) {
  type = other131.type;
  type_length = other131.type_length;
  repetition_type = other131.repetition_type;
  name = other131.name;
  num_children = other131.num_children;
  converted_type = other131.converted_type;
  scale = other131.scale;
  precision = other131.precision;
  field_id = other131.field_id;
  logicalType = other131.logicalType;
  __isset = other131.__isset;
  return *this;
}
SchemaElement& SchemaElement::operator=(SchemaElement&& other132) noexcept {
  type = other132.type;
  type_length = other132.type_length;
  repetition_type = other132.repetition_type;
  name = std::move(other132.name);
  num_children = other132.num_children;
  converted_type = other132.converted_type;
  scale = other132.scale;
  precision = other132.precision;
  field_id = other132.field_id;
  logicalType = std::move(other132.logicalType);
  __isset = other132.__isset;
  return *this;
}
void SchemaElement::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SchemaElement(";
  out << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "type_length="; (__isset.type_length ? (out << to_string(type_length)) : (out << "<null>"));
  out << ", " << "repetition_type="; (__isset.repetition_type ? (out << to_string(repetition_type)) : (out << "<null>"));
  out << ", " << "name=" << to_string(name);
  out << ", " << "num_children="; (__isset.num_children ? (out << to_string(num_children)) : (out << "<null>"));
  out << ", " << "converted_type="; (__isset.converted_type ? (out << to_string(converted_type)) : (out << "<null>"));
  out << ", " << "scale="; (__isset.scale ? (out << to_string(scale)) : (out << "<null>"));
  out << ", " << "precision="; (__isset.precision ? (out << to_string(precision)) : (out << "<null>"));
  out << ", " << "field_id="; (__isset.field_id ? (out << to_string(field_id)) : (out << "<null>"));
  out << ", " << "logicalType="; (__isset.logicalType ? (out << to_string(logicalType)) : (out << "<null>"));
  out << ")";
}


DataPageHeader::~DataPageHeader() noexcept {
}


void DataPageHeader::__set_num_values(const int32_t val) {
  this->num_values = val;
}

void DataPageHeader::__set_encoding(const Encoding::type val) {
  this->encoding = val;
}

void DataPageHeader::__set_definition_level_encoding(const Encoding::type val) {
  this->definition_level_encoding = val;
}

void DataPageHeader::__set_repetition_level_encoding(const Encoding::type val) {
  this->repetition_level_encoding = val;
}

void DataPageHeader::__set_statistics(const Statistics& val) {
  this->statistics = val;
__isset.statistics = true;
}
std::ostream& operator<<(std::ostream& out, const DataPageHeader& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DataPageHeader &a, DataPageHeader &b) {
  using ::std::swap;
  swap(a.num_values, b.num_values);
  swap(a.encoding, b.encoding);
  swap(a.definition_level_encoding, b.definition_level_encoding);
  swap(a.repetition_level_encoding, b.repetition_level_encoding);
  swap(a.statistics, b.statistics);
  swap(a.__isset, b.__isset);
}

DataPageHeader::DataPageHeader(const DataPageHeader& other136) {
  num_values = other136.num_values;
  encoding = other136.encoding;
  definition_level_encoding = other136.definition_level_encoding;
  repetition_level_encoding = other136.repetition_level_encoding;
  statistics = other136.statistics;
  __isset = other136.__isset;
}
DataPageHeader::DataPageHeader(DataPageHeader&& other137) noexcept {
  num_values = other137.num_values;
  encoding = other137.encoding;
  definition_level_encoding = other137.definition_level_encoding;
  repetition_level_encoding = other137.repetition_level_encoding;
  statistics = std::move(other137.statistics);
  __isset = other137.__isset;
}
DataPageHeader& DataPageHeader::operator=(const DataPageHeader& other138) {
  num_values = other138.num_values;
  encoding = other138.encoding;
  definition_level_encoding = other138.definition_level_encoding;
  repetition_level_encoding = other138.repetition_level_encoding;
  statistics = other138.statistics;
  __isset = other138.__isset;
  return *this;
}
DataPageHeader& DataPageHeader::operator=(DataPageHeader&& other139) noexcept {
  num_values = other139.num_values;
  encoding = other139.encoding;
  definition_level_encoding = other139.definition_level_encoding;
  repetition_level_encoding = other139.repetition_level_encoding;
  statistics = std::move(other139.statistics);
  __isset = other139.__isset;
  return *this;
}
void DataPageHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataPageHeader(";
  out << "num_values=" << to_string(num_values);
  out << ", " << "encoding=" << to_string(encoding);
  out << ", " << "definition_level_encoding=" << to_string(definition_level_encoding);
  out << ", " << "repetition_level_encoding=" << to_string(repetition_level_encoding);
  out << ", " << "statistics="; (__isset.statistics ? (out << to_string(statistics)) : (out << "<null>"));
  out << ")";
}


IndexPageHeader::~IndexPageHeader() noexcept {
}

std::ostream& operator<<(std::ostream& out, const IndexPageHeader& obj)
{
  obj.printTo(out);
  return out;
}


void swap(IndexPageHeader &a, IndexPageHeader &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

IndexPageHeader::IndexPageHeader(const IndexPageHeader& other140) noexcept {
  (void) other140;
}
IndexPageHeader::IndexPageHeader(IndexPageHeader&& other141) noexcept {
  (void) other141;
}
IndexPageHeader& IndexPageHeader::operator=(const IndexPageHeader& other142) noexcept {
  (void) other142;
  return *this;
}
IndexPageHeader& IndexPageHeader::operator=(IndexPageHeader&& other143) noexcept {
  (void) other143;
  return *this;
}
void IndexPageHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IndexPageHeader(";
  out << ")";
}


DictionaryPageHeader::~DictionaryPageHeader() noexcept {
}


void DictionaryPageHeader::__set_num_values(const int32_t val) {
  this->num_values = val;
}

void DictionaryPageHeader::__set_encoding(const Encoding::type val) {
  this->encoding = val;
}

void DictionaryPageHeader::__set_is_sorted(const bool val) {
  this->is_sorted = val;
__isset.is_sorted = true;
}
std::ostream& operator<<(std::ostream& out, const DictionaryPageHeader& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DictionaryPageHeader &a, DictionaryPageHeader &b) {
  using ::std::swap;
  swap(a.num_values, b.num_values);
  swap(a.encoding, b.encoding);
  swap(a.is_sorted, b.is_sorted);
  swap(a.__isset, b.__isset);
}

DictionaryPageHeader::DictionaryPageHeader(const DictionaryPageHeader& other145) noexcept {
  num_values = other145.num_values;
  encoding = other145.encoding;
  is_sorted = other145.is_sorted;
  __isset = other145.__isset;
}
DictionaryPageHeader::DictionaryPageHeader(DictionaryPageHeader&& other146) noexcept {
  num_values = other146.num_values;
  encoding = other146.encoding;
  is_sorted = other146.is_sorted;
  __isset = other146.__isset;
}
DictionaryPageHeader& DictionaryPageHeader::operator=(const DictionaryPageHeader& other147) noexcept {
  num_values = other147.num_values;
  encoding = other147.encoding;
  is_sorted = other147.is_sorted;
  __isset = other147.__isset;
  return *this;
}
DictionaryPageHeader& DictionaryPageHeader::operator=(DictionaryPageHeader&& other148) noexcept {
  num_values = other148.num_values;
  encoding = other148.encoding;
  is_sorted = other148.is_sorted;
  __isset = other148.__isset;
  return *this;
}
void DictionaryPageHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DictionaryPageHeader(";
  out << "num_values=" << to_string(num_values);
  out << ", " << "encoding=" << to_string(encoding);
  out << ", " << "is_sorted="; (__isset.is_sorted ? (out << to_string(is_sorted)) : (out << "<null>"));
  out << ")";
}


DataPageHeaderV2::~DataPageHeaderV2() noexcept {
}


void DataPageHeaderV2::__set_num_values(const int32_t val) {
  this->num_values = val;
}

void DataPageHeaderV2::__set_num_nulls(const int32_t val) {
  this->num_nulls = val;
}

void DataPageHeaderV2::__set_num_rows(const int32_t val) {
  this->num_rows = val;
}

void DataPageHeaderV2::__set_encoding(const Encoding::type val) {
  this->encoding = val;
}

void DataPageHeaderV2::__set_definition_levels_byte_length(const int32_t val) {
  this->definition_levels_byte_length = val;
}

void DataPageHeaderV2::__set_repetition_levels_byte_length(const int32_t val) {
  this->repetition_levels_byte_length = val;
}

void DataPageHeaderV2::__set_is_compressed(const bool val) {
  this->is_compressed = val;
__isset.is_compressed = true;
}

void DataPageHeaderV2::__set_statistics(const Statistics& val) {
  this->statistics = val;
__isset.statistics = true;
}
std::ostream& operator<<(std::ostream& out, const DataPageHeaderV2& obj)
{
  obj.printTo(out);
  return out;
}


void swap(DataPageHeaderV2 &a, DataPageHeaderV2 &b) {
  using ::std::swap;
  swap(a.num_values, b.num_values);
  swap(a.num_nulls, b.num_nulls);
  swap(a.num_rows, b.num_rows);
  swap(a.encoding, b.encoding);
  swap(a.definition_levels_byte_length, b.definition_levels_byte_length);
  swap(a.repetition_levels_byte_length, b.repetition_levels_byte_length);
  swap(a.is_compressed, b.is_compressed);
  swap(a.statistics, b.statistics);
  swap(a.__isset, b.__isset);
}

DataPageHeaderV2::DataPageHeaderV2(const DataPageHeaderV2& other150) {
  num_values = other150.num_values;
  num_nulls = other150.num_nulls;
  num_rows = other150.num_rows;
  encoding = other150.encoding;
  definition_levels_byte_length = other150.definition_levels_byte_length;
  repetition_levels_byte_length = other150.repetition_levels_byte_length;
  is_compressed = other150.is_compressed;
  statistics = other150.statistics;
  __isset = other150.__isset;
}
DataPageHeaderV2::DataPageHeaderV2(DataPageHeaderV2&& other151) noexcept {
  num_values = other151.num_values;
  num_nulls = other151.num_nulls;
  num_rows = other151.num_rows;
  encoding = other151.encoding;
  definition_levels_byte_length = other151.definition_levels_byte_length;
  repetition_levels_byte_length = other151.repetition_levels_byte_length;
  is_compressed = other151.is_compressed;
  statistics = std::move(other151.statistics);
  __isset = other151.__isset;
}
DataPageHeaderV2& DataPageHeaderV2::operator=(const DataPageHeaderV2& other152) {
  num_values = other152.num_values;
  num_nulls = other152.num_nulls;
  num_rows = other152.num_rows;
  encoding = other152.encoding;
  definition_levels_byte_length = other152.definition_levels_byte_length;
  repetition_levels_byte_length = other152.repetition_levels_byte_length;
  is_compressed = other152.is_compressed;
  statistics = other152.statistics;
  __isset = other152.__isset;
  return *this;
}
DataPageHeaderV2& DataPageHeaderV2::operator=(DataPageHeaderV2&& other153) noexcept {
  num_values = other153.num_values;
  num_nulls = other153.num_nulls;
  num_rows = other153.num_rows;
  encoding = other153.encoding;
  definition_levels_byte_length = other153.definition_levels_byte_length;
  repetition_levels_byte_length = other153.repetition_levels_byte_length;
  is_compressed = other153.is_compressed;
  statistics = std::move(other153.statistics);
  __isset = other153.__isset;
  return *this;
}
void DataPageHeaderV2::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DataPageHeaderV2(";
  out << "num_values=" << to_string(num_values);
  out << ", " << "num_nulls=" << to_string(num_nulls);
  out << ", " << "num_rows=" << to_string(num_rows);
  out << ", " << "encoding=" << to_string(encoding);
  out << ", " << "definition_levels_byte_length=" << to_string(definition_levels_byte_length);
  out << ", " << "repetition_levels_byte_length=" << to_string(repetition_levels_byte_length);
  out << ", " << "is_compressed="; (__isset.is_compressed ? (out << to_string(is_compressed)) : (out << "<null>"));
  out << ", " << "statistics="; (__isset.statistics ? (out << to_string(statistics)) : (out << "<null>"));
  out << ")";
}


SplitBlockAlgorithm::~SplitBlockAlgorithm() noexcept {
}

std::ostream& operator<<(std::ostream& out, const SplitBlockAlgorithm& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SplitBlockAlgorithm &a, SplitBlockAlgorithm &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

SplitBlockAlgorithm::SplitBlockAlgorithm(const SplitBlockAlgorithm& other154) noexcept {
  (void) other154;
}
SplitBlockAlgorithm::SplitBlockAlgorithm(SplitBlockAlgorithm&& other155) noexcept {
  (void) other155;
}
SplitBlockAlgorithm& SplitBlockAlgorithm::operator=(const SplitBlockAlgorithm& other156) noexcept {
  (void) other156;
  return *this;
}
SplitBlockAlgorithm& SplitBlockAlgorithm::operator=(SplitBlockAlgorithm&& other157) noexcept {
  (void) other157;
  return *this;
}
void SplitBlockAlgorithm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SplitBlockAlgorithm(";
  out << ")";
}


BloomFilterAlgorithm::~BloomFilterAlgorithm() noexcept {
}


void BloomFilterAlgorithm::__set_BLOCK(const SplitBlockAlgorithm& val) {
  this->BLOCK = val;
__isset.BLOCK = true;
}
std::ostream& operator<<(std::ostream& out, const BloomFilterAlgorithm& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BloomFilterAlgorithm &a, BloomFilterAlgorithm &b) {
  using ::std::swap;
  swap(a.BLOCK, b.BLOCK);
  swap(a.__isset, b.__isset);
}

BloomFilterAlgorithm::BloomFilterAlgorithm(const BloomFilterAlgorithm& other158) noexcept {
  BLOCK = other158.BLOCK;
  __isset = other158.__isset;
}
BloomFilterAlgorithm::BloomFilterAlgorithm(BloomFilterAlgorithm&& other159) noexcept {
  BLOCK = std::move(other159.BLOCK);
  __isset = other159.__isset;
}
BloomFilterAlgorithm& BloomFilterAlgorithm::operator=(const BloomFilterAlgorithm& other160) noexcept {
  BLOCK = other160.BLOCK;
  __isset = other160.__isset;
  return *this;
}
BloomFilterAlgorithm& BloomFilterAlgorithm::operator=(BloomFilterAlgorithm&& other161) noexcept {
  BLOCK = std::move(other161.BLOCK);
  __isset = other161.__isset;
  return *this;
}
void BloomFilterAlgorithm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BloomFilterAlgorithm(";
  out << "BLOCK="; (__isset.BLOCK ? (out << to_string(BLOCK)) : (out << "<null>"));
  out << ")";
}


XxHash::~XxHash() noexcept {
}

std::ostream& operator<<(std::ostream& out, const XxHash& obj)
{
  obj.printTo(out);
  return out;
}


void swap(XxHash &a, XxHash &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

XxHash::XxHash(const XxHash& other162) noexcept {
  (void) other162;
}
XxHash::XxHash(XxHash&& other163) noexcept {
  (void) other163;
}
XxHash& XxHash::operator=(const XxHash& other164) noexcept {
  (void) other164;
  return *this;
}
XxHash& XxHash::operator=(XxHash&& other165) noexcept {
  (void) other165;
  return *this;
}
void XxHash::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "XxHash(";
  out << ")";
}


BloomFilterHash::~BloomFilterHash() noexcept {
}


void BloomFilterHash::__set_XXHASH(const XxHash& val) {
  this->XXHASH = val;
__isset.XXHASH = true;
}
std::ostream& operator<<(std::ostream& out, const BloomFilterHash& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BloomFilterHash &a, BloomFilterHash &b) {
  using ::std::swap;
  swap(a.XXHASH, b.XXHASH);
  swap(a.__isset, b.__isset);
}

BloomFilterHash::BloomFilterHash(const BloomFilterHash& other166) noexcept {
  XXHASH = other166.XXHASH;
  __isset = other166.__isset;
}
BloomFilterHash::BloomFilterHash(BloomFilterHash&& other167) noexcept {
  XXHASH = std::move(other167.XXHASH);
  __isset = other167.__isset;
}
BloomFilterHash& BloomFilterHash::operator=(const BloomFilterHash& other168) noexcept {
  XXHASH = other168.XXHASH;
  __isset = other168.__isset;
  return *this;
}
BloomFilterHash& BloomFilterHash::operator=(BloomFilterHash&& other169) noexcept {
  XXHASH = std::move(other169.XXHASH);
  __isset = other169.__isset;
  return *this;
}
void BloomFilterHash::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BloomFilterHash(";
  out << "XXHASH="; (__isset.XXHASH ? (out << to_string(XXHASH)) : (out << "<null>"));
  out << ")";
}


Uncompressed::~Uncompressed() noexcept {
}

std::ostream& operator<<(std::ostream& out, const Uncompressed& obj)
{
  obj.printTo(out);
  return out;
}


void swap(Uncompressed &a, Uncompressed &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

Uncompressed::Uncompressed(const Uncompressed& other170) noexcept {
  (void) other170;
}
Uncompressed::Uncompressed(Uncompressed&& other171) noexcept {
  (void) other171;
}
Uncompressed& Uncompressed::operator=(const Uncompressed& other172) noexcept {
  (void) other172;
  return *this;
}
Uncompressed& Uncompressed::operator=(Uncompressed&& other173) noexcept {
  (void) other173;
  return *this;
}
void Uncompressed::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Uncompressed(";
  out << ")";
}


BloomFilterCompression::~BloomFilterCompression() noexcept {
}


void BloomFilterCompression::__set_UNCOMPRESSED(const Uncompressed& val) {
  this->UNCOMPRESSED = val;
__isset.UNCOMPRESSED = true;
}
std::ostream& operator<<(std::ostream& out, const BloomFilterCompression& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BloomFilterCompression &a, BloomFilterCompression &b) {
  using ::std::swap;
  swap(a.UNCOMPRESSED, b.UNCOMPRESSED);
  swap(a.__isset, b.__isset);
}

BloomFilterCompression::BloomFilterCompression(const BloomFilterCompression& other174) noexcept {
  UNCOMPRESSED = other174.UNCOMPRESSED;
  __isset = other174.__isset;
}
BloomFilterCompression::BloomFilterCompression(BloomFilterCompression&& other175) noexcept {
  UNCOMPRESSED = std::move(other175.UNCOMPRESSED);
  __isset = other175.__isset;
}
BloomFilterCompression& BloomFilterCompression::operator=(const BloomFilterCompression& other176) noexcept {
  UNCOMPRESSED = other176.UNCOMPRESSED;
  __isset = other176.__isset;
  return *this;
}
BloomFilterCompression& BloomFilterCompression::operator=(BloomFilterCompression&& other177) noexcept {
  UNCOMPRESSED = std::move(other177.UNCOMPRESSED);
  __isset = other177.__isset;
  return *this;
}
void BloomFilterCompression::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BloomFilterCompression(";
  out << "UNCOMPRESSED="; (__isset.UNCOMPRESSED ? (out << to_string(UNCOMPRESSED)) : (out << "<null>"));
  out << ")";
}


BloomFilterHeader::~BloomFilterHeader() noexcept {
}


void BloomFilterHeader::__set_numBytes(const int32_t val) {
  this->numBytes = val;
}

void BloomFilterHeader::__set_algorithm(const BloomFilterAlgorithm& val) {
  this->algorithm = val;
}

void BloomFilterHeader::__set_hash(const BloomFilterHash& val) {
  this->hash = val;
}

void BloomFilterHeader::__set_compression(const BloomFilterCompression& val) {
  this->compression = val;
}
std::ostream& operator<<(std::ostream& out, const BloomFilterHeader& obj)
{
  obj.printTo(out);
  return out;
}


void swap(BloomFilterHeader &a, BloomFilterHeader &b) {
  using ::std::swap;
  swap(a.numBytes, b.numBytes);
  swap(a.algorithm, b.algorithm);
  swap(a.hash, b.hash);
  swap(a.compression, b.compression);
}

BloomFilterHeader::BloomFilterHeader(const BloomFilterHeader& other178) noexcept {
  numBytes = other178.numBytes;
  algorithm = other178.algorithm;
  hash = other178.hash;
  compression = other178.compression;
}
BloomFilterHeader::BloomFilterHeader(BloomFilterHeader&& other179) noexcept {
  numBytes = other179.numBytes;
  algorithm = std::move(other179.algorithm);
  hash = std::move(other179.hash);
  compression = std::move(other179.compression);
}
BloomFilterHeader& BloomFilterHeader::operator=(const BloomFilterHeader& other180) noexcept {
  numBytes = other180.numBytes;
  algorithm = other180.algorithm;
  hash = other180.hash;
  compression = other180.compression;
  return *this;
}
BloomFilterHeader& BloomFilterHeader::operator=(BloomFilterHeader&& other181) noexcept {
  numBytes = other181.numBytes;
  algorithm = std::move(other181.algorithm);
  hash = std::move(other181.hash);
  compression = std::move(other181.compression);
  return *this;
}
void BloomFilterHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BloomFilterHeader(";
  out << "numBytes=" << to_string(numBytes);
  out << ", " << "algorithm=" << to_string(algorithm);
  out << ", " << "hash=" << to_string(hash);
  out << ", " << "compression=" << to_string(compression);
  out << ")";
}


PageHeader::~PageHeader() noexcept {
}


void PageHeader::__set_type(const PageType::type val) {
  this->type = val;
}

void PageHeader::__set_uncompressed_page_size(const int32_t val) {
  this->uncompressed_page_size = val;
}

void PageHeader::__set_compressed_page_size(const int32_t val) {
  this->compressed_page_size = val;
}

void PageHeader::__set_crc(const int32_t val) {
  this->crc = val;
__isset.crc = true;
}

void PageHeader::__set_data_page_header(const DataPageHeader& val) {
  this->data_page_header = val;
__isset.data_page_header = true;
}

void PageHeader::__set_index_page_header(const IndexPageHeader& val) {
  this->index_page_header = val;
__isset.index_page_header = true;
}

void PageHeader::__set_dictionary_page_header(const DictionaryPageHeader& val) {
  this->dictionary_page_header = val;
__isset.dictionary_page_header = true;
}

void PageHeader::__set_data_page_header_v2(const DataPageHeaderV2& val) {
  this->data_page_header_v2 = val;
__isset.data_page_header_v2 = true;
}
std::ostream& operator<<(std::ostream& out, const PageHeader& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PageHeader &a, PageHeader &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.uncompressed_page_size, b.uncompressed_page_size);
  swap(a.compressed_page_size, b.compressed_page_size);
  swap(a.crc, b.crc);
  swap(a.data_page_header, b.data_page_header);
  swap(a.index_page_header, b.index_page_header);
  swap(a.dictionary_page_header, b.dictionary_page_header);
  swap(a.data_page_header_v2, b.data_page_header_v2);
  swap(a.__isset, b.__isset);
}

PageHeader::PageHeader(const PageHeader& other183) {
  type = other183.type;
  uncompressed_page_size = other183.uncompressed_page_size;
  compressed_page_size = other183.compressed_page_size;
  crc = other183.crc;
  data_page_header = other183.data_page_header;
  index_page_header = other183.index_page_header;
  dictionary_page_header = other183.dictionary_page_header;
  data_page_header_v2 = other183.data_page_header_v2;
  __isset = other183.__isset;
}
PageHeader::PageHeader(PageHeader&& other184) noexcept {
  type = other184.type;
  uncompressed_page_size = other184.uncompressed_page_size;
  compressed_page_size = other184.compressed_page_size;
  crc = other184.crc;
  data_page_header = std::move(other184.data_page_header);
  index_page_header = std::move(other184.index_page_header);
  dictionary_page_header = std::move(other184.dictionary_page_header);
  data_page_header_v2 = std::move(other184.data_page_header_v2);
  __isset = other184.__isset;
}
PageHeader& PageHeader::operator=(const PageHeader& other185) {
  type = other185.type;
  uncompressed_page_size = other185.uncompressed_page_size;
  compressed_page_size = other185.compressed_page_size;
  crc = other185.crc;
  data_page_header = other185.data_page_header;
  index_page_header = other185.index_page_header;
  dictionary_page_header = other185.dictionary_page_header;
  data_page_header_v2 = other185.data_page_header_v2;
  __isset = other185.__isset;
  return *this;
}
PageHeader& PageHeader::operator=(PageHeader&& other186) noexcept {
  type = other186.type;
  uncompressed_page_size = other186.uncompressed_page_size;
  compressed_page_size = other186.compressed_page_size;
  crc = other186.crc;
  data_page_header = std::move(other186.data_page_header);
  index_page_header = std::move(other186.index_page_header);
  dictionary_page_header = std::move(other186.dictionary_page_header);
  data_page_header_v2 = std::move(other186.data_page_header_v2);
  __isset = other186.__isset;
  return *this;
}
void PageHeader::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PageHeader(";
  out << "type=" << to_string(type);
  out << ", " << "uncompressed_page_size=" << to_string(uncompressed_page_size);
  out << ", " << "compressed_page_size=" << to_string(compressed_page_size);
  out << ", " << "crc="; (__isset.crc ? (out << to_string(crc)) : (out << "<null>"));
  out << ", " << "data_page_header="; (__isset.data_page_header ? (out << to_string(data_page_header)) : (out << "<null>"));
  out << ", " << "index_page_header="; (__isset.index_page_header ? (out << to_string(index_page_header)) : (out << "<null>"));
  out << ", " << "dictionary_page_header="; (__isset.dictionary_page_header ? (out << to_string(dictionary_page_header)) : (out << "<null>"));
  out << ", " << "data_page_header_v2="; (__isset.data_page_header_v2 ? (out << to_string(data_page_header_v2)) : (out << "<null>"));
  out << ")";
}


KeyValue::~KeyValue() noexcept {
}


void KeyValue::__set_key(const std::string& val) {
  this->key = val;
}

void KeyValue::__set_value(const std::string& val) {
  this->value = val;
__isset.value = true;
}
std::ostream& operator<<(std::ostream& out, const KeyValue& obj)
{
  obj.printTo(out);
  return out;
}


void swap(KeyValue &a, KeyValue &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

KeyValue::KeyValue(const KeyValue& other187) {
  key = other187.key;
  value = other187.value;
  __isset = other187.__isset;
}
KeyValue::KeyValue(KeyValue&& other188) noexcept {
  key = std::move(other188.key);
  value = std::move(other188.value);
  __isset = other188.__isset;
}
KeyValue& KeyValue::operator=(const KeyValue& other189) {
  key = other189.key;
  value = other189.value;
  __isset = other189.__isset;
  return *this;
}
KeyValue& KeyValue::operator=(KeyValue&& other190) noexcept {
  key = std::move(other190.key);
  value = std::move(other190.value);
  __isset = other190.__isset;
  return *this;
}
void KeyValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeyValue(";
  out << "key=" << to_string(key);
  out << ", " << "value="; (__isset.value ? (out << to_string(value)) : (out << "<null>"));
  out << ")";
}


SortingColumn::~SortingColumn() noexcept {
}


void SortingColumn::__set_column_idx(const int32_t val) {
  this->column_idx = val;
}

void SortingColumn::__set_descending(const bool val) {
  this->descending = val;
}

void SortingColumn::__set_nulls_first(const bool val) {
  this->nulls_first = val;
}
std::ostream& operator<<(std::ostream& out, const SortingColumn& obj)
{
  obj.printTo(out);
  return out;
}


void swap(SortingColumn &a, SortingColumn &b) {
  using ::std::swap;
  swap(a.column_idx, b.column_idx);
  swap(a.descending, b.descending);
  swap(a.nulls_first, b.nulls_first);
}

SortingColumn::SortingColumn(const SortingColumn& other191) noexcept {
  column_idx = other191.column_idx;
  descending = other191.descending;
  nulls_first = other191.nulls_first;
}
SortingColumn::SortingColumn(SortingColumn&& other192) noexcept {
  column_idx = other192.column_idx;
  descending = other192.descending;
  nulls_first = other192.nulls_first;
}
SortingColumn& SortingColumn::operator=(const SortingColumn& other193) noexcept {
  column_idx = other193.column_idx;
  descending = other193.descending;
  nulls_first = other193.nulls_first;
  return *this;
}
SortingColumn& SortingColumn::operator=(SortingColumn&& other194) noexcept {
  column_idx = other194.column_idx;
  descending = other194.descending;
  nulls_first = other194.nulls_first;
  return *this;
}
void SortingColumn::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SortingColumn(";
  out << "column_idx=" << to_string(column_idx);
  out << ", " << "descending=" << to_string(descending);
  out << ", " << "nulls_first=" << to_string(nulls_first);
  out << ")";
}


PageEncodingStats::~PageEncodingStats() noexcept {
}


void PageEncodingStats::__set_page_type(const PageType::type val) {
  this->page_type = val;
}

void PageEncodingStats::__set_encoding(const Encoding::type val) {
  this->encoding = val;
}

void PageEncodingStats::__set_count(const int32_t val) {
  this->count = val;
}
std::ostream& operator<<(std::ostream& out, const PageEncodingStats& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PageEncodingStats &a, PageEncodingStats &b) {
  using ::std::swap;
  swap(a.page_type, b.page_type);
  swap(a.encoding, b.encoding);
  swap(a.count, b.count);
}

PageEncodingStats::PageEncodingStats(const PageEncodingStats& other197) noexcept {
  page_type = other197.page_type;
  encoding = other197.encoding;
  count = other197.count;
}
PageEncodingStats::PageEncodingStats(PageEncodingStats&& other198) noexcept {
  page_type = other198.page_type;
  encoding = other198.encoding;
  count = other198.count;
}
PageEncodingStats& PageEncodingStats::operator=(const PageEncodingStats& other199) noexcept {
  page_type = other199.page_type;
  encoding = other199.encoding;
  count = other199.count;
  return *this;
}
PageEncodingStats& PageEncodingStats::operator=(PageEncodingStats&& other200) noexcept {
  page_type = other200.page_type;
  encoding = other200.encoding;
  count = other200.count;
  return *this;
}
void PageEncodingStats::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PageEncodingStats(";
  out << "page_type=" << to_string(page_type);
  out << ", " << "encoding=" << to_string(encoding);
  out << ", " << "count=" << to_string(count);
  out << ")";
}


ColumnMetaData::~ColumnMetaData() noexcept {
}


void ColumnMetaData::__set_type(const Type::type val) {
  this->type = val;
}

void ColumnMetaData::__set_encodings(const std::vector<Encoding::type> & val) {
  this->encodings = val;
}

void ColumnMetaData::__set_path_in_schema(const std::vector<std::string> & val) {
  this->path_in_schema = val;
}

void ColumnMetaData::__set_codec(const CompressionCodec::type val) {
  this->codec = val;
}

void ColumnMetaData::__set_num_values(const int64_t val) {
  this->num_values = val;
}

void ColumnMetaData::__set_total_uncompressed_size(const int64_t val) {
  this->total_uncompressed_size = val;
}

void ColumnMetaData::__set_total_compressed_size(const int64_t val) {
  this->total_compressed_size = val;
}

void ColumnMetaData::__set_key_value_metadata(const std::vector<KeyValue> & val) {
  this->key_value_metadata = val;
__isset.key_value_metadata = true;
}

void ColumnMetaData::__set_data_page_offset(const int64_t val) {
  this->data_page_offset = val;
}

void ColumnMetaData::__set_index_page_offset(const int64_t val) {
  this->index_page_offset = val;
__isset.index_page_offset = true;
}

void ColumnMetaData::__set_dictionary_page_offset(const int64_t val) {
  this->dictionary_page_offset = val;
__isset.dictionary_page_offset = true;
}

void ColumnMetaData::__set_statistics(const Statistics& val) {
  this->statistics = val;
__isset.statistics = true;
}

void ColumnMetaData::__set_encoding_stats(const std::vector<PageEncodingStats> & val) {
  this->encoding_stats = val;
__isset.encoding_stats = true;
}

void ColumnMetaData::__set_bloom_filter_offset(const int64_t val) {
  this->bloom_filter_offset = val;
__isset.bloom_filter_offset = true;
}

void ColumnMetaData::__set_bloom_filter_length(const int32_t val) {
  this->bloom_filter_length = val;
__isset.bloom_filter_length = true;
}

void ColumnMetaData::__set_size_statistics(const SizeStatistics& val) {
  this->size_statistics = val;
__isset.size_statistics = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnMetaData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnMetaData &a, ColumnMetaData &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.encodings, b.encodings);
  swap(a.path_in_schema, b.path_in_schema);
  swap(a.codec, b.codec);
  swap(a.num_values, b.num_values);
  swap(a.total_uncompressed_size, b.total_uncompressed_size);
  swap(a.total_compressed_size, b.total_compressed_size);
  swap(a.key_value_metadata, b.key_value_metadata);
  swap(a.data_page_offset, b.data_page_offset);
  swap(a.index_page_offset, b.index_page_offset);
  swap(a.dictionary_page_offset, b.dictionary_page_offset);
  swap(a.statistics, b.statistics);
  swap(a.encoding_stats, b.encoding_stats);
  swap(a.bloom_filter_offset, b.bloom_filter_offset);
  swap(a.bloom_filter_length, b.bloom_filter_length);
  swap(a.size_statistics, b.size_statistics);
  swap(a.__isset, b.__isset);
}

ColumnMetaData::ColumnMetaData(const ColumnMetaData& other228) {
  type = other228.type;
  encodings = other228.encodings;
  path_in_schema = other228.path_in_schema;
  codec = other228.codec;
  num_values = other228.num_values;
  total_uncompressed_size = other228.total_uncompressed_size;
  total_compressed_size = other228.total_compressed_size;
  key_value_metadata = other228.key_value_metadata;
  data_page_offset = other228.data_page_offset;
  index_page_offset = other228.index_page_offset;
  dictionary_page_offset = other228.dictionary_page_offset;
  statistics = other228.statistics;
  encoding_stats = other228.encoding_stats;
  bloom_filter_offset = other228.bloom_filter_offset;
  bloom_filter_length = other228.bloom_filter_length;
  size_statistics = other228.size_statistics;
  __isset = other228.__isset;
}
ColumnMetaData::ColumnMetaData(ColumnMetaData&& other229) noexcept {
  type = other229.type;
  encodings = std::move(other229.encodings);
  path_in_schema = std::move(other229.path_in_schema);
  codec = other229.codec;
  num_values = other229.num_values;
  total_uncompressed_size = other229.total_uncompressed_size;
  total_compressed_size = other229.total_compressed_size;
  key_value_metadata = std::move(other229.key_value_metadata);
  data_page_offset = other229.data_page_offset;
  index_page_offset = other229.index_page_offset;
  dictionary_page_offset = other229.dictionary_page_offset;
  statistics = std::move(other229.statistics);
  encoding_stats = std::move(other229.encoding_stats);
  bloom_filter_offset = other229.bloom_filter_offset;
  bloom_filter_length = other229.bloom_filter_length;
  size_statistics = std::move(other229.size_statistics);
  __isset = other229.__isset;
}
ColumnMetaData& ColumnMetaData::operator=(const ColumnMetaData& other230) {
  type = other230.type;
  encodings = other230.encodings;
  path_in_schema = other230.path_in_schema;
  codec = other230.codec;
  num_values = other230.num_values;
  total_uncompressed_size = other230.total_uncompressed_size;
  total_compressed_size = other230.total_compressed_size;
  key_value_metadata = other230.key_value_metadata;
  data_page_offset = other230.data_page_offset;
  index_page_offset = other230.index_page_offset;
  dictionary_page_offset = other230.dictionary_page_offset;
  statistics = other230.statistics;
  encoding_stats = other230.encoding_stats;
  bloom_filter_offset = other230.bloom_filter_offset;
  bloom_filter_length = other230.bloom_filter_length;
  size_statistics = other230.size_statistics;
  __isset = other230.__isset;
  return *this;
}
ColumnMetaData& ColumnMetaData::operator=(ColumnMetaData&& other231) noexcept {
  type = other231.type;
  encodings = std::move(other231.encodings);
  path_in_schema = std::move(other231.path_in_schema);
  codec = other231.codec;
  num_values = other231.num_values;
  total_uncompressed_size = other231.total_uncompressed_size;
  total_compressed_size = other231.total_compressed_size;
  key_value_metadata = std::move(other231.key_value_metadata);
  data_page_offset = other231.data_page_offset;
  index_page_offset = other231.index_page_offset;
  dictionary_page_offset = other231.dictionary_page_offset;
  statistics = std::move(other231.statistics);
  encoding_stats = std::move(other231.encoding_stats);
  bloom_filter_offset = other231.bloom_filter_offset;
  bloom_filter_length = other231.bloom_filter_length;
  size_statistics = std::move(other231.size_statistics);
  __isset = other231.__isset;
  return *this;
}
void ColumnMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnMetaData(";
  out << "type=" << to_string(type);
  out << ", " << "encodings=" << to_string(encodings);
  out << ", " << "path_in_schema=" << to_string(path_in_schema);
  out << ", " << "codec=" << to_string(codec);
  out << ", " << "num_values=" << to_string(num_values);
  out << ", " << "total_uncompressed_size=" << to_string(total_uncompressed_size);
  out << ", " << "total_compressed_size=" << to_string(total_compressed_size);
  out << ", " << "key_value_metadata="; (__isset.key_value_metadata ? (out << to_string(key_value_metadata)) : (out << "<null>"));
  out << ", " << "data_page_offset=" << to_string(data_page_offset);
  out << ", " << "index_page_offset="; (__isset.index_page_offset ? (out << to_string(index_page_offset)) : (out << "<null>"));
  out << ", " << "dictionary_page_offset="; (__isset.dictionary_page_offset ? (out << to_string(dictionary_page_offset)) : (out << "<null>"));
  out << ", " << "statistics="; (__isset.statistics ? (out << to_string(statistics)) : (out << "<null>"));
  out << ", " << "encoding_stats="; (__isset.encoding_stats ? (out << to_string(encoding_stats)) : (out << "<null>"));
  out << ", " << "bloom_filter_offset="; (__isset.bloom_filter_offset ? (out << to_string(bloom_filter_offset)) : (out << "<null>"));
  out << ", " << "bloom_filter_length="; (__isset.bloom_filter_length ? (out << to_string(bloom_filter_length)) : (out << "<null>"));
  out << ", " << "size_statistics="; (__isset.size_statistics ? (out << to_string(size_statistics)) : (out << "<null>"));
  out << ")";
}


EncryptionWithFooterKey::~EncryptionWithFooterKey() noexcept {
}

std::ostream& operator<<(std::ostream& out, const EncryptionWithFooterKey& obj)
{
  obj.printTo(out);
  return out;
}


void swap(EncryptionWithFooterKey &a, EncryptionWithFooterKey &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

EncryptionWithFooterKey::EncryptionWithFooterKey(const EncryptionWithFooterKey& other232) noexcept {
  (void) other232;
}
EncryptionWithFooterKey::EncryptionWithFooterKey(EncryptionWithFooterKey&& other233) noexcept {
  (void) other233;
}
EncryptionWithFooterKey& EncryptionWithFooterKey::operator=(const EncryptionWithFooterKey& other234) noexcept {
  (void) other234;
  return *this;
}
EncryptionWithFooterKey& EncryptionWithFooterKey::operator=(EncryptionWithFooterKey&& other235) noexcept {
  (void) other235;
  return *this;
}
void EncryptionWithFooterKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EncryptionWithFooterKey(";
  out << ")";
}


EncryptionWithColumnKey::~EncryptionWithColumnKey() noexcept {
}


void EncryptionWithColumnKey::__set_path_in_schema(const std::vector<std::string> & val) {
  this->path_in_schema = val;
}

void EncryptionWithColumnKey::__set_key_metadata(const std::string& val) {
  this->key_metadata = val;
__isset.key_metadata = true;
}
std::ostream& operator<<(std::ostream& out, const EncryptionWithColumnKey& obj)
{
  obj.printTo(out);
  return out;
}


void swap(EncryptionWithColumnKey &a, EncryptionWithColumnKey &b) {
  using ::std::swap;
  swap(a.path_in_schema, b.path_in_schema);
  swap(a.key_metadata, b.key_metadata);
  swap(a.__isset, b.__isset);
}

EncryptionWithColumnKey::EncryptionWithColumnKey(const EncryptionWithColumnKey& other242) {
  path_in_schema = other242.path_in_schema;
  key_metadata = other242.key_metadata;
  __isset = other242.__isset;
}
EncryptionWithColumnKey::EncryptionWithColumnKey(EncryptionWithColumnKey&& other243) noexcept {
  path_in_schema = std::move(other243.path_in_schema);
  key_metadata = std::move(other243.key_metadata);
  __isset = other243.__isset;
}
EncryptionWithColumnKey& EncryptionWithColumnKey::operator=(const EncryptionWithColumnKey& other244) {
  path_in_schema = other244.path_in_schema;
  key_metadata = other244.key_metadata;
  __isset = other244.__isset;
  return *this;
}
EncryptionWithColumnKey& EncryptionWithColumnKey::operator=(EncryptionWithColumnKey&& other245) noexcept {
  path_in_schema = std::move(other245.path_in_schema);
  key_metadata = std::move(other245.key_metadata);
  __isset = other245.__isset;
  return *this;
}
void EncryptionWithColumnKey::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EncryptionWithColumnKey(";
  out << "path_in_schema=" << to_string(path_in_schema);
  out << ", " << "key_metadata="; (__isset.key_metadata ? (out << to_string(key_metadata)) : (out << "<null>"));
  out << ")";
}


ColumnCryptoMetaData::~ColumnCryptoMetaData() noexcept {
}


void ColumnCryptoMetaData::__set_ENCRYPTION_WITH_FOOTER_KEY(const EncryptionWithFooterKey& val) {
  this->ENCRYPTION_WITH_FOOTER_KEY = val;
__isset.ENCRYPTION_WITH_FOOTER_KEY = true;
}

void ColumnCryptoMetaData::__set_ENCRYPTION_WITH_COLUMN_KEY(const EncryptionWithColumnKey& val) {
  this->ENCRYPTION_WITH_COLUMN_KEY = val;
__isset.ENCRYPTION_WITH_COLUMN_KEY = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnCryptoMetaData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnCryptoMetaData &a, ColumnCryptoMetaData &b) {
  using ::std::swap;
  swap(a.ENCRYPTION_WITH_FOOTER_KEY, b.ENCRYPTION_WITH_FOOTER_KEY);
  swap(a.ENCRYPTION_WITH_COLUMN_KEY, b.ENCRYPTION_WITH_COLUMN_KEY);
  swap(a.__isset, b.__isset);
}

ColumnCryptoMetaData::ColumnCryptoMetaData(const ColumnCryptoMetaData& other246) {
  ENCRYPTION_WITH_FOOTER_KEY = other246.ENCRYPTION_WITH_FOOTER_KEY;
  ENCRYPTION_WITH_COLUMN_KEY = other246.ENCRYPTION_WITH_COLUMN_KEY;
  __isset = other246.__isset;
}
ColumnCryptoMetaData::ColumnCryptoMetaData(ColumnCryptoMetaData&& other247) noexcept {
  ENCRYPTION_WITH_FOOTER_KEY = std::move(other247.ENCRYPTION_WITH_FOOTER_KEY);
  ENCRYPTION_WITH_COLUMN_KEY = std::move(other247.ENCRYPTION_WITH_COLUMN_KEY);
  __isset = other247.__isset;
}
ColumnCryptoMetaData& ColumnCryptoMetaData::operator=(const ColumnCryptoMetaData& other248) {
  ENCRYPTION_WITH_FOOTER_KEY = other248.ENCRYPTION_WITH_FOOTER_KEY;
  ENCRYPTION_WITH_COLUMN_KEY = other248.ENCRYPTION_WITH_COLUMN_KEY;
  __isset = other248.__isset;
  return *this;
}
ColumnCryptoMetaData& ColumnCryptoMetaData::operator=(ColumnCryptoMetaData&& other249) noexcept {
  ENCRYPTION_WITH_FOOTER_KEY = std::move(other249.ENCRYPTION_WITH_FOOTER_KEY);
  ENCRYPTION_WITH_COLUMN_KEY = std::move(other249.ENCRYPTION_WITH_COLUMN_KEY);
  __isset = other249.__isset;
  return *this;
}
void ColumnCryptoMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnCryptoMetaData(";
  out << "ENCRYPTION_WITH_FOOTER_KEY="; (__isset.ENCRYPTION_WITH_FOOTER_KEY ? (out << to_string(ENCRYPTION_WITH_FOOTER_KEY)) : (out << "<null>"));
  out << ", " << "ENCRYPTION_WITH_COLUMN_KEY="; (__isset.ENCRYPTION_WITH_COLUMN_KEY ? (out << to_string(ENCRYPTION_WITH_COLUMN_KEY)) : (out << "<null>"));
  out << ")";
}


ColumnChunk::~ColumnChunk() noexcept {
}


void ColumnChunk::__set_file_path(const std::string& val) {
  this->file_path = val;
__isset.file_path = true;
}

void ColumnChunk::__set_file_offset(const int64_t val) {
  this->file_offset = val;
}

void ColumnChunk::__set_meta_data(const ColumnMetaData& val) {
  this->meta_data = val;
__isset.meta_data = true;
}

void ColumnChunk::__set_offset_index_offset(const int64_t val) {
  this->offset_index_offset = val;
__isset.offset_index_offset = true;
}

void ColumnChunk::__set_offset_index_length(const int32_t val) {
  this->offset_index_length = val;
__isset.offset_index_length = true;
}

void ColumnChunk::__set_column_index_offset(const int64_t val) {
  this->column_index_offset = val;
__isset.column_index_offset = true;
}

void ColumnChunk::__set_column_index_length(const int32_t val) {
  this->column_index_length = val;
__isset.column_index_length = true;
}

void ColumnChunk::__set_crypto_metadata(const ColumnCryptoMetaData& val) {
  this->crypto_metadata = val;
__isset.crypto_metadata = true;
}

void ColumnChunk::__set_encrypted_column_metadata(const std::string& val) {
  this->encrypted_column_metadata = val;
__isset.encrypted_column_metadata = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnChunk& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnChunk &a, ColumnChunk &b) {
  using ::std::swap;
  swap(a.file_path, b.file_path);
  swap(a.file_offset, b.file_offset);
  swap(a.meta_data, b.meta_data);
  swap(a.offset_index_offset, b.offset_index_offset);
  swap(a.offset_index_length, b.offset_index_length);
  swap(a.column_index_offset, b.column_index_offset);
  swap(a.column_index_length, b.column_index_length);
  swap(a.crypto_metadata, b.crypto_metadata);
  swap(a.encrypted_column_metadata, b.encrypted_column_metadata);
  swap(a.__isset, b.__isset);
}

ColumnChunk::ColumnChunk(const ColumnChunk& other250) {
  file_path = other250.file_path;
  file_offset = other250.file_offset;
  meta_data = other250.meta_data;
  offset_index_offset = other250.offset_index_offset;
  offset_index_length = other250.offset_index_length;
  column_index_offset = other250.column_index_offset;
  column_index_length = other250.column_index_length;
  crypto_metadata = other250.crypto_metadata;
  encrypted_column_metadata = other250.encrypted_column_metadata;
  __isset = other250.__isset;
}
ColumnChunk::ColumnChunk(ColumnChunk&& other251) noexcept {
  file_path = std::move(other251.file_path);
  file_offset = other251.file_offset;
  meta_data = std::move(other251.meta_data);
  offset_index_offset = other251.offset_index_offset;
  offset_index_length = other251.offset_index_length;
  column_index_offset = other251.column_index_offset;
  column_index_length = other251.column_index_length;
  crypto_metadata = std::move(other251.crypto_metadata);
  encrypted_column_metadata = std::move(other251.encrypted_column_metadata);
  __isset = other251.__isset;
}
ColumnChunk& ColumnChunk::operator=(const ColumnChunk& other252) {
  file_path = other252.file_path;
  file_offset = other252.file_offset;
  meta_data = other252.meta_data;
  offset_index_offset = other252.offset_index_offset;
  offset_index_length = other252.offset_index_length;
  column_index_offset = other252.column_index_offset;
  column_index_length = other252.column_index_length;
  crypto_metadata = other252.crypto_metadata;
  encrypted_column_metadata = other252.encrypted_column_metadata;
  __isset = other252.__isset;
  return *this;
}
ColumnChunk& ColumnChunk::operator=(ColumnChunk&& other253) noexcept {
  file_path = std::move(other253.file_path);
  file_offset = other253.file_offset;
  meta_data = std::move(other253.meta_data);
  offset_index_offset = other253.offset_index_offset;
  offset_index_length = other253.offset_index_length;
  column_index_offset = other253.column_index_offset;
  column_index_length = other253.column_index_length;
  crypto_metadata = std::move(other253.crypto_metadata);
  encrypted_column_metadata = std::move(other253.encrypted_column_metadata);
  __isset = other253.__isset;
  return *this;
}
void ColumnChunk::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnChunk(";
  out << "file_path="; (__isset.file_path ? (out << to_string(file_path)) : (out << "<null>"));
  out << ", " << "file_offset=" << to_string(file_offset);
  out << ", " << "meta_data="; (__isset.meta_data ? (out << to_string(meta_data)) : (out << "<null>"));
  out << ", " << "offset_index_offset="; (__isset.offset_index_offset ? (out << to_string(offset_index_offset)) : (out << "<null>"));
  out << ", " << "offset_index_length="; (__isset.offset_index_length ? (out << to_string(offset_index_length)) : (out << "<null>"));
  out << ", " << "column_index_offset="; (__isset.column_index_offset ? (out << to_string(column_index_offset)) : (out << "<null>"));
  out << ", " << "column_index_length="; (__isset.column_index_length ? (out << to_string(column_index_length)) : (out << "<null>"));
  out << ", " << "crypto_metadata="; (__isset.crypto_metadata ? (out << to_string(crypto_metadata)) : (out << "<null>"));
  out << ", " << "encrypted_column_metadata="; (__isset.encrypted_column_metadata ? (out << to_string(encrypted_column_metadata)) : (out << "<null>"));
  out << ")";
}


RowGroup::~RowGroup() noexcept {
}


void RowGroup::__set_columns(const std::vector<ColumnChunk> & val) {
  this->columns = val;
}

void RowGroup::__set_total_byte_size(const int64_t val) {
  this->total_byte_size = val;
}

void RowGroup::__set_num_rows(const int64_t val) {
  this->num_rows = val;
}

void RowGroup::__set_sorting_columns(const std::vector<SortingColumn> & val) {
  this->sorting_columns = val;
__isset.sorting_columns = true;
}

void RowGroup::__set_file_offset(const int64_t val) {
  this->file_offset = val;
__isset.file_offset = true;
}

void RowGroup::__set_total_compressed_size(const int64_t val) {
  this->total_compressed_size = val;
__isset.total_compressed_size = true;
}

void RowGroup::__set_ordinal(const int16_t val) {
  this->ordinal = val;
__isset.ordinal = true;
}
std::ostream& operator<<(std::ostream& out, const RowGroup& obj)
{
  obj.printTo(out);
  return out;
}


void swap(RowGroup &a, RowGroup &b) {
  using ::std::swap;
  swap(a.columns, b.columns);
  swap(a.total_byte_size, b.total_byte_size);
  swap(a.num_rows, b.num_rows);
  swap(a.sorting_columns, b.sorting_columns);
  swap(a.file_offset, b.file_offset);
  swap(a.total_compressed_size, b.total_compressed_size);
  swap(a.ordinal, b.ordinal);
  swap(a.__isset, b.__isset);
}

RowGroup::RowGroup(const RowGroup& other266) {
  columns = other266.columns;
  total_byte_size = other266.total_byte_size;
  num_rows = other266.num_rows;
  sorting_columns = other266.sorting_columns;
  file_offset = other266.file_offset;
  total_compressed_size = other266.total_compressed_size;
  ordinal = other266.ordinal;
  __isset = other266.__isset;
}
RowGroup::RowGroup(RowGroup&& other267) noexcept {
  columns = std::move(other267.columns);
  total_byte_size = other267.total_byte_size;
  num_rows = other267.num_rows;
  sorting_columns = std::move(other267.sorting_columns);
  file_offset = other267.file_offset;
  total_compressed_size = other267.total_compressed_size;
  ordinal = other267.ordinal;
  __isset = other267.__isset;
}
RowGroup& RowGroup::operator=(const RowGroup& other268) {
  columns = other268.columns;
  total_byte_size = other268.total_byte_size;
  num_rows = other268.num_rows;
  sorting_columns = other268.sorting_columns;
  file_offset = other268.file_offset;
  total_compressed_size = other268.total_compressed_size;
  ordinal = other268.ordinal;
  __isset = other268.__isset;
  return *this;
}
RowGroup& RowGroup::operator=(RowGroup&& other269) noexcept {
  columns = std::move(other269.columns);
  total_byte_size = other269.total_byte_size;
  num_rows = other269.num_rows;
  sorting_columns = std::move(other269.sorting_columns);
  file_offset = other269.file_offset;
  total_compressed_size = other269.total_compressed_size;
  ordinal = other269.ordinal;
  __isset = other269.__isset;
  return *this;
}
void RowGroup::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RowGroup(";
  out << "columns=" << to_string(columns);
  out << ", " << "total_byte_size=" << to_string(total_byte_size);
  out << ", " << "num_rows=" << to_string(num_rows);
  out << ", " << "sorting_columns="; (__isset.sorting_columns ? (out << to_string(sorting_columns)) : (out << "<null>"));
  out << ", " << "file_offset="; (__isset.file_offset ? (out << to_string(file_offset)) : (out << "<null>"));
  out << ", " << "total_compressed_size="; (__isset.total_compressed_size ? (out << to_string(total_compressed_size)) : (out << "<null>"));
  out << ", " << "ordinal="; (__isset.ordinal ? (out << to_string(ordinal)) : (out << "<null>"));
  out << ")";
}


TypeDefinedOrder::~TypeDefinedOrder() noexcept {
}

std::ostream& operator<<(std::ostream& out, const TypeDefinedOrder& obj)
{
  obj.printTo(out);
  return out;
}


void swap(TypeDefinedOrder &a, TypeDefinedOrder &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

TypeDefinedOrder::TypeDefinedOrder(const TypeDefinedOrder& other270) noexcept {
  (void) other270;
}
TypeDefinedOrder::TypeDefinedOrder(TypeDefinedOrder&& other271) noexcept {
  (void) other271;
}
TypeDefinedOrder& TypeDefinedOrder::operator=(const TypeDefinedOrder& other272) noexcept {
  (void) other272;
  return *this;
}
TypeDefinedOrder& TypeDefinedOrder::operator=(TypeDefinedOrder&& other273) noexcept {
  (void) other273;
  return *this;
}
void TypeDefinedOrder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TypeDefinedOrder(";
  out << ")";
}


ColumnOrder::~ColumnOrder() noexcept {
}


void ColumnOrder::__set_TYPE_ORDER(const TypeDefinedOrder& val) {
  this->TYPE_ORDER = val;
__isset.TYPE_ORDER = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnOrder& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnOrder &a, ColumnOrder &b) {
  using ::std::swap;
  swap(a.TYPE_ORDER, b.TYPE_ORDER);
  swap(a.__isset, b.__isset);
}

ColumnOrder::ColumnOrder(const ColumnOrder& other274) noexcept {
  TYPE_ORDER = other274.TYPE_ORDER;
  __isset = other274.__isset;
}
ColumnOrder::ColumnOrder(ColumnOrder&& other275) noexcept {
  TYPE_ORDER = std::move(other275.TYPE_ORDER);
  __isset = other275.__isset;
}
ColumnOrder& ColumnOrder::operator=(const ColumnOrder& other276) noexcept {
  TYPE_ORDER = other276.TYPE_ORDER;
  __isset = other276.__isset;
  return *this;
}
ColumnOrder& ColumnOrder::operator=(ColumnOrder&& other277) noexcept {
  TYPE_ORDER = std::move(other277.TYPE_ORDER);
  __isset = other277.__isset;
  return *this;
}
void ColumnOrder::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnOrder(";
  out << "TYPE_ORDER="; (__isset.TYPE_ORDER ? (out << to_string(TYPE_ORDER)) : (out << "<null>"));
  out << ")";
}


PageLocation::~PageLocation() noexcept {
}


void PageLocation::__set_offset(const int64_t val) {
  this->offset = val;
}

void PageLocation::__set_compressed_page_size(const int32_t val) {
  this->compressed_page_size = val;
}

void PageLocation::__set_first_row_index(const int64_t val) {
  this->first_row_index = val;
}
std::ostream& operator<<(std::ostream& out, const PageLocation& obj)
{
  obj.printTo(out);
  return out;
}


void swap(PageLocation &a, PageLocation &b) {
  using ::std::swap;
  swap(a.offset, b.offset);
  swap(a.compressed_page_size, b.compressed_page_size);
  swap(a.first_row_index, b.first_row_index);
}

PageLocation::PageLocation(const PageLocation& other278) noexcept {
  offset = other278.offset;
  compressed_page_size = other278.compressed_page_size;
  first_row_index = other278.first_row_index;
}
PageLocation::PageLocation(PageLocation&& other279) noexcept {
  offset = other279.offset;
  compressed_page_size = other279.compressed_page_size;
  first_row_index = other279.first_row_index;
}
PageLocation& PageLocation::operator=(const PageLocation& other280) noexcept {
  offset = other280.offset;
  compressed_page_size = other280.compressed_page_size;
  first_row_index = other280.first_row_index;
  return *this;
}
PageLocation& PageLocation::operator=(PageLocation&& other281) noexcept {
  offset = other281.offset;
  compressed_page_size = other281.compressed_page_size;
  first_row_index = other281.first_row_index;
  return *this;
}
void PageLocation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PageLocation(";
  out << "offset=" << to_string(offset);
  out << ", " << "compressed_page_size=" << to_string(compressed_page_size);
  out << ", " << "first_row_index=" << to_string(first_row_index);
  out << ")";
}


OffsetIndex::~OffsetIndex() noexcept {
}


void OffsetIndex::__set_page_locations(const std::vector<PageLocation> & val) {
  this->page_locations = val;
}

void OffsetIndex::__set_unencoded_byte_array_data_bytes(const std::vector<int64_t> & val) {
  this->unencoded_byte_array_data_bytes = val;
__isset.unencoded_byte_array_data_bytes = true;
}
std::ostream& operator<<(std::ostream& out, const OffsetIndex& obj)
{
  obj.printTo(out);
  return out;
}


void swap(OffsetIndex &a, OffsetIndex &b) {
  using ::std::swap;
  swap(a.page_locations, b.page_locations);
  swap(a.unencoded_byte_array_data_bytes, b.unencoded_byte_array_data_bytes);
  swap(a.__isset, b.__isset);
}

OffsetIndex::OffsetIndex(const OffsetIndex& other294) {
  page_locations = other294.page_locations;
  unencoded_byte_array_data_bytes = other294.unencoded_byte_array_data_bytes;
  __isset = other294.__isset;
}
OffsetIndex::OffsetIndex(OffsetIndex&& other295) noexcept {
  page_locations = std::move(other295.page_locations);
  unencoded_byte_array_data_bytes = std::move(other295.unencoded_byte_array_data_bytes);
  __isset = other295.__isset;
}
OffsetIndex& OffsetIndex::operator=(const OffsetIndex& other296) {
  page_locations = other296.page_locations;
  unencoded_byte_array_data_bytes = other296.unencoded_byte_array_data_bytes;
  __isset = other296.__isset;
  return *this;
}
OffsetIndex& OffsetIndex::operator=(OffsetIndex&& other297) noexcept {
  page_locations = std::move(other297.page_locations);
  unencoded_byte_array_data_bytes = std::move(other297.unencoded_byte_array_data_bytes);
  __isset = other297.__isset;
  return *this;
}
void OffsetIndex::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OffsetIndex(";
  out << "page_locations=" << to_string(page_locations);
  out << ", " << "unencoded_byte_array_data_bytes="; (__isset.unencoded_byte_array_data_bytes ? (out << to_string(unencoded_byte_array_data_bytes)) : (out << "<null>"));
  out << ")";
}


ColumnIndex::~ColumnIndex() noexcept {
}


void ColumnIndex::__set_null_pages(const std::vector<bool> & val) {
  this->null_pages = val;
}

void ColumnIndex::__set_min_values(const std::vector<std::string> & val) {
  this->min_values = val;
}

void ColumnIndex::__set_max_values(const std::vector<std::string> & val) {
  this->max_values = val;
}

void ColumnIndex::__set_boundary_order(const BoundaryOrder::type val) {
  this->boundary_order = val;
}

void ColumnIndex::__set_null_counts(const std::vector<int64_t> & val) {
  this->null_counts = val;
__isset.null_counts = true;
}

void ColumnIndex::__set_repetition_level_histograms(const std::vector<int64_t> & val) {
  this->repetition_level_histograms = val;
__isset.repetition_level_histograms = true;
}

void ColumnIndex::__set_definition_level_histograms(const std::vector<int64_t> & val) {
  this->definition_level_histograms = val;
__isset.definition_level_histograms = true;
}

void ColumnIndex::__set_geometry_stats(const std::vector<GeometryStatistics> & val) {
  this->geometry_stats = val;
__isset.geometry_stats = true;
}
std::ostream& operator<<(std::ostream& out, const ColumnIndex& obj)
{
  obj.printTo(out);
  return out;
}


void swap(ColumnIndex &a, ColumnIndex &b) {
  using ::std::swap;
  swap(a.null_pages, b.null_pages);
  swap(a.min_values, b.min_values);
  swap(a.max_values, b.max_values);
  swap(a.boundary_order, b.boundary_order);
  swap(a.null_counts, b.null_counts);
  swap(a.repetition_level_histograms, b.repetition_level_histograms);
  swap(a.definition_level_histograms, b.definition_level_histograms);
  swap(a.geometry_stats, b.geometry_stats);
  swap(a.__isset, b.__isset);
}

ColumnIndex::ColumnIndex(const ColumnIndex& other341) {
  null_pages = other341.null_pages;
  min_values = other341.min_values;
  max_values = other341.max_values;
  boundary_order = other341.boundary_order;
  null_counts = other341.null_counts;
  repetition_level_histograms = other341.repetition_level_histograms;
  definition_level_histograms = other341.definition_level_histograms;
  geometry_stats = other341.geometry_stats;
  __isset = other341.__isset;
}
ColumnIndex::ColumnIndex(ColumnIndex&& other342) noexcept {
  null_pages = std::move(other342.null_pages);
  min_values = std::move(other342.min_values);
  max_values = std::move(other342.max_values);
  boundary_order = other342.boundary_order;
  null_counts = std::move(other342.null_counts);
  repetition_level_histograms = std::move(other342.repetition_level_histograms);
  definition_level_histograms = std::move(other342.definition_level_histograms);
  geometry_stats = std::move(other342.geometry_stats);
  __isset = other342.__isset;
}
ColumnIndex& ColumnIndex::operator=(const ColumnIndex& other343) {
  null_pages = other343.null_pages;
  min_values = other343.min_values;
  max_values = other343.max_values;
  boundary_order = other343.boundary_order;
  null_counts = other343.null_counts;
  repetition_level_histograms = other343.repetition_level_histograms;
  definition_level_histograms = other343.definition_level_histograms;
  geometry_stats = other343.geometry_stats;
  __isset = other343.__isset;
  return *this;
}
ColumnIndex& ColumnIndex::operator=(ColumnIndex&& other344) noexcept {
  null_pages = std::move(other344.null_pages);
  min_values = std::move(other344.min_values);
  max_values = std::move(other344.max_values);
  boundary_order = other344.boundary_order;
  null_counts = std::move(other344.null_counts);
  repetition_level_histograms = std::move(other344.repetition_level_histograms);
  definition_level_histograms = std::move(other344.definition_level_histograms);
  geometry_stats = std::move(other344.geometry_stats);
  __isset = other344.__isset;
  return *this;
}
void ColumnIndex::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ColumnIndex(";
  out << "null_pages=" << to_string(null_pages);
  out << ", " << "min_values=" << to_string(min_values);
  out << ", " << "max_values=" << to_string(max_values);
  out << ", " << "boundary_order=" << to_string(boundary_order);
  out << ", " << "null_counts="; (__isset.null_counts ? (out << to_string(null_counts)) : (out << "<null>"));
  out << ", " << "repetition_level_histograms="; (__isset.repetition_level_histograms ? (out << to_string(repetition_level_histograms)) : (out << "<null>"));
  out << ", " << "definition_level_histograms="; (__isset.definition_level_histograms ? (out << to_string(definition_level_histograms)) : (out << "<null>"));
  out << ", " << "geometry_stats="; (__isset.geometry_stats ? (out << to_string(geometry_stats)) : (out << "<null>"));
  out << ")";
}


AesGcmV1::~AesGcmV1() noexcept {
}


void AesGcmV1::__set_aad_prefix(const std::string& val) {
  this->aad_prefix = val;
__isset.aad_prefix = true;
}

void AesGcmV1::__set_aad_file_unique(const std::string& val) {
  this->aad_file_unique = val;
__isset.aad_file_unique = true;
}

void AesGcmV1::__set_supply_aad_prefix(const bool val) {
  this->supply_aad_prefix = val;
__isset.supply_aad_prefix = true;
}
std::ostream& operator<<(std::ostream& out, const AesGcmV1& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AesGcmV1 &a, AesGcmV1 &b) {
  using ::std::swap;
  swap(a.aad_prefix, b.aad_prefix);
  swap(a.aad_file_unique, b.aad_file_unique);
  swap(a.supply_aad_prefix, b.supply_aad_prefix);
  swap(a.__isset, b.__isset);
}

AesGcmV1::AesGcmV1(const AesGcmV1& other345) {
  aad_prefix = other345.aad_prefix;
  aad_file_unique = other345.aad_file_unique;
  supply_aad_prefix = other345.supply_aad_prefix;
  __isset = other345.__isset;
}
AesGcmV1::AesGcmV1(AesGcmV1&& other346) noexcept {
  aad_prefix = std::move(other346.aad_prefix);
  aad_file_unique = std::move(other346.aad_file_unique);
  supply_aad_prefix = other346.supply_aad_prefix;
  __isset = other346.__isset;
}
AesGcmV1& AesGcmV1::operator=(const AesGcmV1& other347) {
  aad_prefix = other347.aad_prefix;
  aad_file_unique = other347.aad_file_unique;
  supply_aad_prefix = other347.supply_aad_prefix;
  __isset = other347.__isset;
  return *this;
}
AesGcmV1& AesGcmV1::operator=(AesGcmV1&& other348) noexcept {
  aad_prefix = std::move(other348.aad_prefix);
  aad_file_unique = std::move(other348.aad_file_unique);
  supply_aad_prefix = other348.supply_aad_prefix;
  __isset = other348.__isset;
  return *this;
}
void AesGcmV1::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AesGcmV1(";
  out << "aad_prefix="; (__isset.aad_prefix ? (out << to_string(aad_prefix)) : (out << "<null>"));
  out << ", " << "aad_file_unique="; (__isset.aad_file_unique ? (out << to_string(aad_file_unique)) : (out << "<null>"));
  out << ", " << "supply_aad_prefix="; (__isset.supply_aad_prefix ? (out << to_string(supply_aad_prefix)) : (out << "<null>"));
  out << ")";
}


AesGcmCtrV1::~AesGcmCtrV1() noexcept {
}


void AesGcmCtrV1::__set_aad_prefix(const std::string& val) {
  this->aad_prefix = val;
__isset.aad_prefix = true;
}

void AesGcmCtrV1::__set_aad_file_unique(const std::string& val) {
  this->aad_file_unique = val;
__isset.aad_file_unique = true;
}

void AesGcmCtrV1::__set_supply_aad_prefix(const bool val) {
  this->supply_aad_prefix = val;
__isset.supply_aad_prefix = true;
}
std::ostream& operator<<(std::ostream& out, const AesGcmCtrV1& obj)
{
  obj.printTo(out);
  return out;
}


void swap(AesGcmCtrV1 &a, AesGcmCtrV1 &b) {
  using ::std::swap;
  swap(a.aad_prefix, b.aad_prefix);
  swap(a.aad_file_unique, b.aad_file_unique);
  swap(a.supply_aad_prefix, b.supply_aad_prefix);
  swap(a.__isset, b.__isset);
}

AesGcmCtrV1::AesGcmCtrV1(const AesGcmCtrV1& other349) {
  aad_prefix = other349.aad_prefix;
  aad_file_unique = other349.aad_file_unique;
  supply_aad_prefix = other349.supply_aad_prefix;
  __isset = other349.__isset;
}
AesGcmCtrV1::AesGcmCtrV1(AesGcmCtrV1&& other350) noexcept {
  aad_prefix = std::move(other350.aad_prefix);
  aad_file_unique = std::move(other350.aad_file_unique);
  supply_aad_prefix = other350.supply_aad_prefix;
  __isset = other350.__isset;
}
AesGcmCtrV1& AesGcmCtrV1::operator=(const AesGcmCtrV1& other351) {
  aad_prefix = other351.aad_prefix;
  aad_file_unique = other351.aad_file_unique;
  supply_aad_prefix = other351.supply_aad_prefix;
  __isset = other351.__isset;
  return *this;
}
AesGcmCtrV1& AesGcmCtrV1::operator=(AesGcmCtrV1&& other352) noexcept {
  aad_prefix = std::move(other352.aad_prefix);
  aad_file_unique = std::move(other352.aad_file_unique);
  supply_aad_prefix = other352.supply_aad_prefix;
  __isset = other352.__isset;
  return *this;
}
void AesGcmCtrV1::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AesGcmCtrV1(";
  out << "aad_prefix="; (__isset.aad_prefix ? (out << to_string(aad_prefix)) : (out << "<null>"));
  out << ", " << "aad_file_unique="; (__isset.aad_file_unique ? (out << to_string(aad_file_unique)) : (out << "<null>"));
  out << ", " << "supply_aad_prefix="; (__isset.supply_aad_prefix ? (out << to_string(supply_aad_prefix)) : (out << "<null>"));
  out << ")";
}


EncryptionAlgorithm::~EncryptionAlgorithm() noexcept {
}


void EncryptionAlgorithm::__set_AES_GCM_V1(const AesGcmV1& val) {
  this->AES_GCM_V1 = val;
__isset.AES_GCM_V1 = true;
}

void EncryptionAlgorithm::__set_AES_GCM_CTR_V1(const AesGcmCtrV1& val) {
  this->AES_GCM_CTR_V1 = val;
__isset.AES_GCM_CTR_V1 = true;
}
std::ostream& operator<<(std::ostream& out, const EncryptionAlgorithm& obj)
{
  obj.printTo(out);
  return out;
}


void swap(EncryptionAlgorithm &a, EncryptionAlgorithm &b) {
  using ::std::swap;
  swap(a.AES_GCM_V1, b.AES_GCM_V1);
  swap(a.AES_GCM_CTR_V1, b.AES_GCM_CTR_V1);
  swap(a.__isset, b.__isset);
}

EncryptionAlgorithm::EncryptionAlgorithm(const EncryptionAlgorithm& other353) {
  AES_GCM_V1 = other353.AES_GCM_V1;
  AES_GCM_CTR_V1 = other353.AES_GCM_CTR_V1;
  __isset = other353.__isset;
}
EncryptionAlgorithm::EncryptionAlgorithm(EncryptionAlgorithm&& other354) noexcept {
  AES_GCM_V1 = std::move(other354.AES_GCM_V1);
  AES_GCM_CTR_V1 = std::move(other354.AES_GCM_CTR_V1);
  __isset = other354.__isset;
}
EncryptionAlgorithm& EncryptionAlgorithm::operator=(const EncryptionAlgorithm& other355) {
  AES_GCM_V1 = other355.AES_GCM_V1;
  AES_GCM_CTR_V1 = other355.AES_GCM_CTR_V1;
  __isset = other355.__isset;
  return *this;
}
EncryptionAlgorithm& EncryptionAlgorithm::operator=(EncryptionAlgorithm&& other356) noexcept {
  AES_GCM_V1 = std::move(other356.AES_GCM_V1);
  AES_GCM_CTR_V1 = std::move(other356.AES_GCM_CTR_V1);
  __isset = other356.__isset;
  return *this;
}
void EncryptionAlgorithm::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EncryptionAlgorithm(";
  out << "AES_GCM_V1="; (__isset.AES_GCM_V1 ? (out << to_string(AES_GCM_V1)) : (out << "<null>"));
  out << ", " << "AES_GCM_CTR_V1="; (__isset.AES_GCM_CTR_V1 ? (out << to_string(AES_GCM_CTR_V1)) : (out << "<null>"));
  out << ")";
}


FileMetaData::~FileMetaData() noexcept {
}


void FileMetaData::__set_version(const int32_t val) {
  this->version = val;
}

void FileMetaData::__set_schema(const std::vector<SchemaElement> & val) {
  this->schema = val;
}

void FileMetaData::__set_num_rows(const int64_t val) {
  this->num_rows = val;
}

void FileMetaData::__set_row_groups(const std::vector<RowGroup> & val) {
  this->row_groups = val;
}

void FileMetaData::__set_key_value_metadata(const std::vector<KeyValue> & val) {
  this->key_value_metadata = val;
__isset.key_value_metadata = true;
}

void FileMetaData::__set_created_by(const std::string& val) {
  this->created_by = val;
__isset.created_by = true;
}

void FileMetaData::__set_column_orders(const std::vector<ColumnOrder> & val) {
  this->column_orders = val;
__isset.column_orders = true;
}

void FileMetaData::__set_encryption_algorithm(const EncryptionAlgorithm& val) {
  this->encryption_algorithm = val;
__isset.encryption_algorithm = true;
}

void FileMetaData::__set_footer_signing_key_metadata(const std::string& val) {
  this->footer_signing_key_metadata = val;
__isset.footer_signing_key_metadata = true;
}
std::ostream& operator<<(std::ostream& out, const FileMetaData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FileMetaData &a, FileMetaData &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.schema, b.schema);
  swap(a.num_rows, b.num_rows);
  swap(a.row_groups, b.row_groups);
  swap(a.key_value_metadata, b.key_value_metadata);
  swap(a.created_by, b.created_by);
  swap(a.column_orders, b.column_orders);
  swap(a.encryption_algorithm, b.encryption_algorithm);
  swap(a.footer_signing_key_metadata, b.footer_signing_key_metadata);
  swap(a.__isset, b.__isset);
}

FileMetaData::FileMetaData(const FileMetaData& other381) {
  version = other381.version;
  schema = other381.schema;
  num_rows = other381.num_rows;
  row_groups = other381.row_groups;
  key_value_metadata = other381.key_value_metadata;
  created_by = other381.created_by;
  column_orders = other381.column_orders;
  encryption_algorithm = other381.encryption_algorithm;
  footer_signing_key_metadata = other381.footer_signing_key_metadata;
  __isset = other381.__isset;
}
FileMetaData::FileMetaData(FileMetaData&& other382) noexcept {
  version = other382.version;
  schema = std::move(other382.schema);
  num_rows = other382.num_rows;
  row_groups = std::move(other382.row_groups);
  key_value_metadata = std::move(other382.key_value_metadata);
  created_by = std::move(other382.created_by);
  column_orders = std::move(other382.column_orders);
  encryption_algorithm = std::move(other382.encryption_algorithm);
  footer_signing_key_metadata = std::move(other382.footer_signing_key_metadata);
  __isset = other382.__isset;
}
FileMetaData& FileMetaData::operator=(const FileMetaData& other383) {
  version = other383.version;
  schema = other383.schema;
  num_rows = other383.num_rows;
  row_groups = other383.row_groups;
  key_value_metadata = other383.key_value_metadata;
  created_by = other383.created_by;
  column_orders = other383.column_orders;
  encryption_algorithm = other383.encryption_algorithm;
  footer_signing_key_metadata = other383.footer_signing_key_metadata;
  __isset = other383.__isset;
  return *this;
}
FileMetaData& FileMetaData::operator=(FileMetaData&& other384) noexcept {
  version = other384.version;
  schema = std::move(other384.schema);
  num_rows = other384.num_rows;
  row_groups = std::move(other384.row_groups);
  key_value_metadata = std::move(other384.key_value_metadata);
  created_by = std::move(other384.created_by);
  column_orders = std::move(other384.column_orders);
  encryption_algorithm = std::move(other384.encryption_algorithm);
  footer_signing_key_metadata = std::move(other384.footer_signing_key_metadata);
  __isset = other384.__isset;
  return *this;
}
void FileMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileMetaData(";
  out << "version=" << to_string(version);
  out << ", " << "schema=" << to_string(schema);
  out << ", " << "num_rows=" << to_string(num_rows);
  out << ", " << "row_groups=" << to_string(row_groups);
  out << ", " << "key_value_metadata="; (__isset.key_value_metadata ? (out << to_string(key_value_metadata)) : (out << "<null>"));
  out << ", " << "created_by="; (__isset.created_by ? (out << to_string(created_by)) : (out << "<null>"));
  out << ", " << "column_orders="; (__isset.column_orders ? (out << to_string(column_orders)) : (out << "<null>"));
  out << ", " << "encryption_algorithm="; (__isset.encryption_algorithm ? (out << to_string(encryption_algorithm)) : (out << "<null>"));
  out << ", " << "footer_signing_key_metadata="; (__isset.footer_signing_key_metadata ? (out << to_string(footer_signing_key_metadata)) : (out << "<null>"));
  out << ")";
}


FileCryptoMetaData::~FileCryptoMetaData() noexcept {
}


void FileCryptoMetaData::__set_encryption_algorithm(const EncryptionAlgorithm& val) {
  this->encryption_algorithm = val;
}

void FileCryptoMetaData::__set_key_metadata(const std::string& val) {
  this->key_metadata = val;
__isset.key_metadata = true;
}
std::ostream& operator<<(std::ostream& out, const FileCryptoMetaData& obj)
{
  obj.printTo(out);
  return out;
}


void swap(FileCryptoMetaData &a, FileCryptoMetaData &b) {
  using ::std::swap;
  swap(a.encryption_algorithm, b.encryption_algorithm);
  swap(a.key_metadata, b.key_metadata);
  swap(a.__isset, b.__isset);
}

FileCryptoMetaData::FileCryptoMetaData(const FileCryptoMetaData& other385) {
  encryption_algorithm = other385.encryption_algorithm;
  key_metadata = other385.key_metadata;
  __isset = other385.__isset;
}
FileCryptoMetaData::FileCryptoMetaData(FileCryptoMetaData&& other386) noexcept {
  encryption_algorithm = std::move(other386.encryption_algorithm);
  key_metadata = std::move(other386.key_metadata);
  __isset = other386.__isset;
}
FileCryptoMetaData& FileCryptoMetaData::operator=(const FileCryptoMetaData& other387) {
  encryption_algorithm = other387.encryption_algorithm;
  key_metadata = other387.key_metadata;
  __isset = other387.__isset;
  return *this;
}
FileCryptoMetaData& FileCryptoMetaData::operator=(FileCryptoMetaData&& other388) noexcept {
  encryption_algorithm = std::move(other388.encryption_algorithm);
  key_metadata = std::move(other388.key_metadata);
  __isset = other388.__isset;
  return *this;
}
void FileCryptoMetaData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileCryptoMetaData(";
  out << "encryption_algorithm=" << to_string(encryption_algorithm);
  out << ", " << "key_metadata="; (__isset.key_metadata ? (out << to_string(key_metadata)) : (out << "<null>"));
  out << ")";
}
}
} // namespace

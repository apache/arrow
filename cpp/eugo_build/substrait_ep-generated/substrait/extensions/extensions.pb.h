// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: substrait/extensions/extensions.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef substrait_2fextensions_2fextensions_2eproto_2epb_2eh
#define substrait_2fextensions_2fextensions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_substrait_2fextensions_2fextensions_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fextensions_2fextensions_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_substrait_2fextensions_2fextensions_2eproto;
}  // extern "C"
namespace substrait {
namespace extensions {
class AdvancedExtension;
struct AdvancedExtensionDefaultTypeInternal;
extern AdvancedExtensionDefaultTypeInternal _AdvancedExtension_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull AdvancedExtension_class_data_;
class SimpleExtensionDeclaration;
struct SimpleExtensionDeclarationDefaultTypeInternal;
extern SimpleExtensionDeclarationDefaultTypeInternal _SimpleExtensionDeclaration_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_class_data_;
class SimpleExtensionDeclaration_ExtensionFunction;
struct SimpleExtensionDeclaration_ExtensionFunctionDefaultTypeInternal;
extern SimpleExtensionDeclaration_ExtensionFunctionDefaultTypeInternal _SimpleExtensionDeclaration_ExtensionFunction_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_ExtensionFunction_class_data_;
class SimpleExtensionDeclaration_ExtensionType;
struct SimpleExtensionDeclaration_ExtensionTypeDefaultTypeInternal;
extern SimpleExtensionDeclaration_ExtensionTypeDefaultTypeInternal _SimpleExtensionDeclaration_ExtensionType_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_ExtensionType_class_data_;
class SimpleExtensionDeclaration_ExtensionTypeVariation;
struct SimpleExtensionDeclaration_ExtensionTypeVariationDefaultTypeInternal;
extern SimpleExtensionDeclaration_ExtensionTypeVariationDefaultTypeInternal _SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_ExtensionTypeVariation_class_data_;
class SimpleExtensionURI;
struct SimpleExtensionURIDefaultTypeInternal;
extern SimpleExtensionURIDefaultTypeInternal _SimpleExtensionURI_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionURI_class_data_;
}  // namespace extensions
}  // namespace substrait
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace substrait {
namespace extensions {

// ===================================================================


// -------------------------------------------------------------------

class SimpleExtensionURI final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionURI) */ {
 public:
  inline SimpleExtensionURI() : SimpleExtensionURI(nullptr) {}
  ~SimpleExtensionURI() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleExtensionURI* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleExtensionURI));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleExtensionURI(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleExtensionURI(const SimpleExtensionURI& from) : SimpleExtensionURI(nullptr, from) {}
  inline SimpleExtensionURI(SimpleExtensionURI&& from) noexcept
      : SimpleExtensionURI(nullptr, std::move(from)) {}
  inline SimpleExtensionURI& operator=(const SimpleExtensionURI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleExtensionURI& operator=(SimpleExtensionURI&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleExtensionURI& default_instance() {
    return *reinterpret_cast<const SimpleExtensionURI*>(
        &_SimpleExtensionURI_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(SimpleExtensionURI& a, SimpleExtensionURI& b) { a.Swap(&b); }
  inline void Swap(SimpleExtensionURI* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleExtensionURI* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleExtensionURI* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleExtensionURI>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleExtensionURI& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleExtensionURI& from) { SimpleExtensionURI::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleExtensionURI* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.extensions.SimpleExtensionURI"; }

 protected:
  explicit SimpleExtensionURI(::google::protobuf::Arena* arena);
  SimpleExtensionURI(::google::protobuf::Arena* arena, const SimpleExtensionURI& from);
  SimpleExtensionURI(::google::protobuf::Arena* arena, SimpleExtensionURI&& from) noexcept
      : SimpleExtensionURI(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUriFieldNumber = 2,
    kExtensionUriAnchorFieldNumber = 1,
  };
  // string uri = 2;
  void clear_uri() ;
  const std::string& uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  [[nodiscard]] std::string* release_uri();
  void set_allocated_uri(std::string* value);

  private:
  const std::string& _internal_uri() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // uint32 extension_uri_anchor = 1;
  void clear_extension_uri_anchor() ;
  ::uint32_t extension_uri_anchor() const;
  void set_extension_uri_anchor(::uint32_t value);

  private:
  ::uint32_t _internal_extension_uri_anchor() const;
  void _internal_set_extension_uri_anchor(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionURI)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleExtensionURI& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
    ::uint32_t extension_uri_anchor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fextensions_2fextensions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionURI_class_data_;
// -------------------------------------------------------------------

class SimpleExtensionDeclaration_ExtensionTypeVariation final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation) */ {
 public:
  inline SimpleExtensionDeclaration_ExtensionTypeVariation() : SimpleExtensionDeclaration_ExtensionTypeVariation(nullptr) {}
  ~SimpleExtensionDeclaration_ExtensionTypeVariation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleExtensionDeclaration_ExtensionTypeVariation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleExtensionDeclaration_ExtensionTypeVariation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleExtensionDeclaration_ExtensionTypeVariation(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleExtensionDeclaration_ExtensionTypeVariation(const SimpleExtensionDeclaration_ExtensionTypeVariation& from) : SimpleExtensionDeclaration_ExtensionTypeVariation(nullptr, from) {}
  inline SimpleExtensionDeclaration_ExtensionTypeVariation(SimpleExtensionDeclaration_ExtensionTypeVariation&& from) noexcept
      : SimpleExtensionDeclaration_ExtensionTypeVariation(nullptr, std::move(from)) {}
  inline SimpleExtensionDeclaration_ExtensionTypeVariation& operator=(const SimpleExtensionDeclaration_ExtensionTypeVariation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleExtensionDeclaration_ExtensionTypeVariation& operator=(SimpleExtensionDeclaration_ExtensionTypeVariation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleExtensionDeclaration_ExtensionTypeVariation& default_instance() {
    return *reinterpret_cast<const SimpleExtensionDeclaration_ExtensionTypeVariation*>(
        &_SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SimpleExtensionDeclaration_ExtensionTypeVariation& a, SimpleExtensionDeclaration_ExtensionTypeVariation& b) { a.Swap(&b); }
  inline void Swap(SimpleExtensionDeclaration_ExtensionTypeVariation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleExtensionDeclaration_ExtensionTypeVariation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleExtensionDeclaration_ExtensionTypeVariation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleExtensionDeclaration_ExtensionTypeVariation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleExtensionDeclaration_ExtensionTypeVariation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleExtensionDeclaration_ExtensionTypeVariation& from) { SimpleExtensionDeclaration_ExtensionTypeVariation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleExtensionDeclaration_ExtensionTypeVariation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation"; }

 protected:
  explicit SimpleExtensionDeclaration_ExtensionTypeVariation(::google::protobuf::Arena* arena);
  SimpleExtensionDeclaration_ExtensionTypeVariation(::google::protobuf::Arena* arena, const SimpleExtensionDeclaration_ExtensionTypeVariation& from);
  SimpleExtensionDeclaration_ExtensionTypeVariation(::google::protobuf::Arena* arena, SimpleExtensionDeclaration_ExtensionTypeVariation&& from) noexcept
      : SimpleExtensionDeclaration_ExtensionTypeVariation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kExtensionUriReferenceFieldNumber = 1,
    kTypeVariationAnchorFieldNumber = 2,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 extension_uri_reference = 1;
  void clear_extension_uri_reference() ;
  ::uint32_t extension_uri_reference() const;
  void set_extension_uri_reference(::uint32_t value);

  private:
  ::uint32_t _internal_extension_uri_reference() const;
  void _internal_set_extension_uri_reference(::uint32_t value);

  public:
  // uint32 type_variation_anchor = 2;
  void clear_type_variation_anchor() ;
  ::uint32_t type_variation_anchor() const;
  void set_type_variation_anchor(::uint32_t value);

  private:
  ::uint32_t _internal_type_variation_anchor() const;
  void _internal_set_type_variation_anchor(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      83, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleExtensionDeclaration_ExtensionTypeVariation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t extension_uri_reference_;
    ::uint32_t type_variation_anchor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fextensions_2fextensions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_ExtensionTypeVariation_class_data_;
// -------------------------------------------------------------------

class SimpleExtensionDeclaration_ExtensionType final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration.ExtensionType) */ {
 public:
  inline SimpleExtensionDeclaration_ExtensionType() : SimpleExtensionDeclaration_ExtensionType(nullptr) {}
  ~SimpleExtensionDeclaration_ExtensionType() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleExtensionDeclaration_ExtensionType* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleExtensionDeclaration_ExtensionType));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleExtensionDeclaration_ExtensionType(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleExtensionDeclaration_ExtensionType(const SimpleExtensionDeclaration_ExtensionType& from) : SimpleExtensionDeclaration_ExtensionType(nullptr, from) {}
  inline SimpleExtensionDeclaration_ExtensionType(SimpleExtensionDeclaration_ExtensionType&& from) noexcept
      : SimpleExtensionDeclaration_ExtensionType(nullptr, std::move(from)) {}
  inline SimpleExtensionDeclaration_ExtensionType& operator=(const SimpleExtensionDeclaration_ExtensionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleExtensionDeclaration_ExtensionType& operator=(SimpleExtensionDeclaration_ExtensionType&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleExtensionDeclaration_ExtensionType& default_instance() {
    return *reinterpret_cast<const SimpleExtensionDeclaration_ExtensionType*>(
        &_SimpleExtensionDeclaration_ExtensionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(SimpleExtensionDeclaration_ExtensionType& a, SimpleExtensionDeclaration_ExtensionType& b) { a.Swap(&b); }
  inline void Swap(SimpleExtensionDeclaration_ExtensionType* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleExtensionDeclaration_ExtensionType* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleExtensionDeclaration_ExtensionType* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleExtensionDeclaration_ExtensionType>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleExtensionDeclaration_ExtensionType& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleExtensionDeclaration_ExtensionType& from) { SimpleExtensionDeclaration_ExtensionType::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleExtensionDeclaration_ExtensionType* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.extensions.SimpleExtensionDeclaration.ExtensionType"; }

 protected:
  explicit SimpleExtensionDeclaration_ExtensionType(::google::protobuf::Arena* arena);
  SimpleExtensionDeclaration_ExtensionType(::google::protobuf::Arena* arena, const SimpleExtensionDeclaration_ExtensionType& from);
  SimpleExtensionDeclaration_ExtensionType(::google::protobuf::Arena* arena, SimpleExtensionDeclaration_ExtensionType&& from) noexcept
      : SimpleExtensionDeclaration_ExtensionType(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kExtensionUriReferenceFieldNumber = 1,
    kTypeAnchorFieldNumber = 2,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 extension_uri_reference = 1;
  void clear_extension_uri_reference() ;
  ::uint32_t extension_uri_reference() const;
  void set_extension_uri_reference(::uint32_t value);

  private:
  ::uint32_t _internal_extension_uri_reference() const;
  void _internal_set_extension_uri_reference(::uint32_t value);

  public:
  // uint32 type_anchor = 2;
  void clear_type_anchor() ;
  ::uint32_t type_anchor() const;
  void set_type_anchor(::uint32_t value);

  private:
  ::uint32_t _internal_type_anchor() const;
  void _internal_set_type_anchor(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration.ExtensionType)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      74, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleExtensionDeclaration_ExtensionType& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t extension_uri_reference_;
    ::uint32_t type_anchor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fextensions_2fextensions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_ExtensionType_class_data_;
// -------------------------------------------------------------------

class SimpleExtensionDeclaration_ExtensionFunction final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction) */ {
 public:
  inline SimpleExtensionDeclaration_ExtensionFunction() : SimpleExtensionDeclaration_ExtensionFunction(nullptr) {}
  ~SimpleExtensionDeclaration_ExtensionFunction() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleExtensionDeclaration_ExtensionFunction* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleExtensionDeclaration_ExtensionFunction));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleExtensionDeclaration_ExtensionFunction(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleExtensionDeclaration_ExtensionFunction(const SimpleExtensionDeclaration_ExtensionFunction& from) : SimpleExtensionDeclaration_ExtensionFunction(nullptr, from) {}
  inline SimpleExtensionDeclaration_ExtensionFunction(SimpleExtensionDeclaration_ExtensionFunction&& from) noexcept
      : SimpleExtensionDeclaration_ExtensionFunction(nullptr, std::move(from)) {}
  inline SimpleExtensionDeclaration_ExtensionFunction& operator=(const SimpleExtensionDeclaration_ExtensionFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleExtensionDeclaration_ExtensionFunction& operator=(SimpleExtensionDeclaration_ExtensionFunction&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleExtensionDeclaration_ExtensionFunction& default_instance() {
    return *reinterpret_cast<const SimpleExtensionDeclaration_ExtensionFunction*>(
        &_SimpleExtensionDeclaration_ExtensionFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SimpleExtensionDeclaration_ExtensionFunction& a, SimpleExtensionDeclaration_ExtensionFunction& b) { a.Swap(&b); }
  inline void Swap(SimpleExtensionDeclaration_ExtensionFunction* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleExtensionDeclaration_ExtensionFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleExtensionDeclaration_ExtensionFunction* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleExtensionDeclaration_ExtensionFunction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleExtensionDeclaration_ExtensionFunction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleExtensionDeclaration_ExtensionFunction& from) { SimpleExtensionDeclaration_ExtensionFunction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleExtensionDeclaration_ExtensionFunction* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction"; }

 protected:
  explicit SimpleExtensionDeclaration_ExtensionFunction(::google::protobuf::Arena* arena);
  SimpleExtensionDeclaration_ExtensionFunction(::google::protobuf::Arena* arena, const SimpleExtensionDeclaration_ExtensionFunction& from);
  SimpleExtensionDeclaration_ExtensionFunction(::google::protobuf::Arena* arena, SimpleExtensionDeclaration_ExtensionFunction&& from) noexcept
      : SimpleExtensionDeclaration_ExtensionFunction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 3,
    kExtensionUriReferenceFieldNumber = 1,
    kFunctionAnchorFieldNumber = 2,
  };
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  [[nodiscard]] std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 extension_uri_reference = 1;
  void clear_extension_uri_reference() ;
  ::uint32_t extension_uri_reference() const;
  void set_extension_uri_reference(::uint32_t value);

  private:
  ::uint32_t _internal_extension_uri_reference() const;
  void _internal_set_extension_uri_reference(::uint32_t value);

  public:
  // uint32 function_anchor = 2;
  void clear_function_anchor() ;
  ::uint32_t function_anchor() const;
  void set_function_anchor(::uint32_t value);

  private:
  ::uint32_t _internal_function_anchor() const;
  void _internal_set_function_anchor(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleExtensionDeclaration_ExtensionFunction& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint32_t extension_uri_reference_;
    ::uint32_t function_anchor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fextensions_2fextensions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_ExtensionFunction_class_data_;
// -------------------------------------------------------------------

class SimpleExtensionDeclaration final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.extensions.SimpleExtensionDeclaration) */ {
 public:
  inline SimpleExtensionDeclaration() : SimpleExtensionDeclaration(nullptr) {}
  ~SimpleExtensionDeclaration() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleExtensionDeclaration* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleExtensionDeclaration));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleExtensionDeclaration(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleExtensionDeclaration(const SimpleExtensionDeclaration& from) : SimpleExtensionDeclaration(nullptr, from) {}
  inline SimpleExtensionDeclaration(SimpleExtensionDeclaration&& from) noexcept
      : SimpleExtensionDeclaration(nullptr, std::move(from)) {}
  inline SimpleExtensionDeclaration& operator=(const SimpleExtensionDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleExtensionDeclaration& operator=(SimpleExtensionDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleExtensionDeclaration& default_instance() {
    return *reinterpret_cast<const SimpleExtensionDeclaration*>(
        &_SimpleExtensionDeclaration_default_instance_);
  }
  enum MappingTypeCase {
    kExtensionType = 1,
    kExtensionTypeVariation = 2,
    kExtensionFunction = 3,
    MAPPING_TYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SimpleExtensionDeclaration& a, SimpleExtensionDeclaration& b) { a.Swap(&b); }
  inline void Swap(SimpleExtensionDeclaration* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleExtensionDeclaration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleExtensionDeclaration* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleExtensionDeclaration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleExtensionDeclaration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleExtensionDeclaration& from) { SimpleExtensionDeclaration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleExtensionDeclaration* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.extensions.SimpleExtensionDeclaration"; }

 protected:
  explicit SimpleExtensionDeclaration(::google::protobuf::Arena* arena);
  SimpleExtensionDeclaration(::google::protobuf::Arena* arena, const SimpleExtensionDeclaration& from);
  SimpleExtensionDeclaration(::google::protobuf::Arena* arena, SimpleExtensionDeclaration&& from) noexcept
      : SimpleExtensionDeclaration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using ExtensionType = SimpleExtensionDeclaration_ExtensionType;
  using ExtensionTypeVariation = SimpleExtensionDeclaration_ExtensionTypeVariation;
  using ExtensionFunction = SimpleExtensionDeclaration_ExtensionFunction;

  // accessors -------------------------------------------------------
  enum : int {
    kExtensionTypeFieldNumber = 1,
    kExtensionTypeVariationFieldNumber = 2,
    kExtensionFunctionFieldNumber = 3,
  };
  // .substrait.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
  bool has_extension_type() const;
  private:
  bool _internal_has_extension_type() const;

  public:
  void clear_extension_type() ;
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& extension_type() const;
  [[nodiscard]] ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* release_extension_type();
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* mutable_extension_type();
  void set_allocated_extension_type(::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* value);
  void unsafe_arena_set_allocated_extension_type(::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* value);
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* unsafe_arena_release_extension_type();

  private:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& _internal_extension_type() const;
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* _internal_mutable_extension_type();

  public:
  // .substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
  bool has_extension_type_variation() const;
  private:
  bool _internal_has_extension_type_variation() const;

  public:
  void clear_extension_type_variation() ;
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& extension_type_variation() const;
  [[nodiscard]] ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* release_extension_type_variation();
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* mutable_extension_type_variation();
  void set_allocated_extension_type_variation(::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* value);
  void unsafe_arena_set_allocated_extension_type_variation(::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* value);
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* unsafe_arena_release_extension_type_variation();

  private:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& _internal_extension_type_variation() const;
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* _internal_mutable_extension_type_variation();

  public:
  // .substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
  bool has_extension_function() const;
  private:
  bool _internal_has_extension_function() const;

  public:
  void clear_extension_function() ;
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& extension_function() const;
  [[nodiscard]] ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* release_extension_function();
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* mutable_extension_function();
  void set_allocated_extension_function(::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* value);
  void unsafe_arena_set_allocated_extension_function(::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* value);
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* unsafe_arena_release_extension_function();

  private:
  const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& _internal_extension_function() const;
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* _internal_mutable_extension_function();

  public:
  void clear_mapping_type();
  MappingTypeCase mapping_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.extensions.SimpleExtensionDeclaration)
 private:
  class _Internal;
  void set_has_extension_type();
  void set_has_extension_type_variation();
  void set_has_extension_function();
  inline bool has_mapping_type() const;
  inline void clear_has_mapping_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleExtensionDeclaration& from_msg);
    union MappingTypeUnion {
      constexpr MappingTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* extension_type_;
      ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* extension_type_variation_;
      ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* extension_function_;
    } mapping_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fextensions_2fextensions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull SimpleExtensionDeclaration_class_data_;
// -------------------------------------------------------------------

class AdvancedExtension final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.extensions.AdvancedExtension) */ {
 public:
  inline AdvancedExtension() : AdvancedExtension(nullptr) {}
  ~AdvancedExtension() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AdvancedExtension* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AdvancedExtension));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AdvancedExtension(
      ::google::protobuf::internal::ConstantInitialized);

  inline AdvancedExtension(const AdvancedExtension& from) : AdvancedExtension(nullptr, from) {}
  inline AdvancedExtension(AdvancedExtension&& from) noexcept
      : AdvancedExtension(nullptr, std::move(from)) {}
  inline AdvancedExtension& operator=(const AdvancedExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvancedExtension& operator=(AdvancedExtension&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdvancedExtension& default_instance() {
    return *reinterpret_cast<const AdvancedExtension*>(
        &_AdvancedExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AdvancedExtension& a, AdvancedExtension& b) { a.Swap(&b); }
  inline void Swap(AdvancedExtension* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvancedExtension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdvancedExtension* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AdvancedExtension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AdvancedExtension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AdvancedExtension& from) { AdvancedExtension::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AdvancedExtension* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.extensions.AdvancedExtension"; }

 protected:
  explicit AdvancedExtension(::google::protobuf::Arena* arena);
  AdvancedExtension(::google::protobuf::Arena* arena, const AdvancedExtension& from);
  AdvancedExtension(::google::protobuf::Arena* arena, AdvancedExtension&& from) noexcept
      : AdvancedExtension(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOptimizationFieldNumber = 1,
    kEnhancementFieldNumber = 2,
  };
  // .google.protobuf.Any optimization = 1;
  bool has_optimization() const;
  void clear_optimization() ;
  const ::google::protobuf::Any& optimization() const;
  [[nodiscard]] ::google::protobuf::Any* release_optimization();
  ::google::protobuf::Any* mutable_optimization();
  void set_allocated_optimization(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_optimization(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_optimization();

  private:
  const ::google::protobuf::Any& _internal_optimization() const;
  ::google::protobuf::Any* _internal_mutable_optimization();

  public:
  // .google.protobuf.Any enhancement = 2;
  bool has_enhancement() const;
  void clear_enhancement() ;
  const ::google::protobuf::Any& enhancement() const;
  [[nodiscard]] ::google::protobuf::Any* release_enhancement();
  ::google::protobuf::Any* mutable_enhancement();
  void set_allocated_enhancement(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_enhancement(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_enhancement();

  private:
  const ::google::protobuf::Any& _internal_enhancement() const;
  ::google::protobuf::Any* _internal_mutable_enhancement();

  public:
  // @@protoc_insertion_point(class_scope:substrait.extensions.AdvancedExtension)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AdvancedExtension& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Any* optimization_;
    ::google::protobuf::Any* enhancement_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fextensions_2fextensions_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull AdvancedExtension_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SimpleExtensionURI

// uint32 extension_uri_anchor = 1;
inline void SimpleExtensionURI::clear_extension_uri_anchor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_anchor_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SimpleExtensionURI::extension_uri_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionURI.extension_uri_anchor)
  return _internal_extension_uri_anchor();
}
inline void SimpleExtensionURI::set_extension_uri_anchor(::uint32_t value) {
  _internal_set_extension_uri_anchor(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionURI.extension_uri_anchor)
}
inline ::uint32_t SimpleExtensionURI::_internal_extension_uri_anchor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_uri_anchor_;
}
inline void SimpleExtensionURI::_internal_set_extension_uri_anchor(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_anchor_ = value;
}

// string uri = 2;
inline void SimpleExtensionURI::clear_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleExtensionURI::uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionURI.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimpleExtensionURI::set_uri(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionURI.uri)
}
inline std::string* SimpleExtensionURI::mutable_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionURI.uri)
  return _s;
}
inline const std::string& SimpleExtensionURI::_internal_uri() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.uri_.Get();
}
inline void SimpleExtensionURI::_internal_set_uri(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uri_.Set(value, GetArena());
}
inline std::string* SimpleExtensionURI::_internal_mutable_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uri_.Mutable( GetArena());
}
inline std::string* SimpleExtensionURI::release_uri() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionURI.uri)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.uri_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.uri_.Set("", GetArena());
  }
  return released;
}
inline void SimpleExtensionURI::set_allocated_uri(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uri_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionURI.uri)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration_ExtensionType

// uint32 extension_uri_reference = 1;
inline void SimpleExtensionDeclaration_ExtensionType::clear_extension_uri_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_reference_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionType::extension_uri_reference() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.extension_uri_reference)
  return _internal_extension_uri_reference();
}
inline void SimpleExtensionDeclaration_ExtensionType::set_extension_uri_reference(::uint32_t value) {
  _internal_set_extension_uri_reference(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.extension_uri_reference)
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionType::_internal_extension_uri_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_uri_reference_;
}
inline void SimpleExtensionDeclaration_ExtensionType::_internal_set_extension_uri_reference(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_reference_ = value;
}

// uint32 type_anchor = 2;
inline void SimpleExtensionDeclaration_ExtensionType::clear_type_anchor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_anchor_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionType::type_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.type_anchor)
  return _internal_type_anchor();
}
inline void SimpleExtensionDeclaration_ExtensionType::set_type_anchor(::uint32_t value) {
  _internal_set_type_anchor(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.type_anchor)
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionType::_internal_type_anchor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_anchor_;
}
inline void SimpleExtensionDeclaration_ExtensionType::_internal_set_type_anchor(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_anchor_ = value;
}

// string name = 3;
inline void SimpleExtensionDeclaration_ExtensionType::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleExtensionDeclaration_ExtensionType::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimpleExtensionDeclaration_ExtensionType::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}
inline std::string* SimpleExtensionDeclaration_ExtensionType::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
  return _s;
}
inline const std::string& SimpleExtensionDeclaration_ExtensionType::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SimpleExtensionDeclaration_ExtensionType::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SimpleExtensionDeclaration_ExtensionType::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SimpleExtensionDeclaration_ExtensionType::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void SimpleExtensionDeclaration_ExtensionType::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionDeclaration.ExtensionType.name)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration_ExtensionTypeVariation

// uint32 extension_uri_reference = 1;
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::clear_extension_uri_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_reference_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionTypeVariation::extension_uri_reference() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.extension_uri_reference)
  return _internal_extension_uri_reference();
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_extension_uri_reference(::uint32_t value) {
  _internal_set_extension_uri_reference(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.extension_uri_reference)
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_extension_uri_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_uri_reference_;
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_set_extension_uri_reference(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_reference_ = value;
}

// uint32 type_variation_anchor = 2;
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::clear_type_variation_anchor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_variation_anchor_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionTypeVariation::type_variation_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.type_variation_anchor)
  return _internal_type_variation_anchor();
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_type_variation_anchor(::uint32_t value) {
  _internal_set_type_variation_anchor(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.type_variation_anchor)
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_type_variation_anchor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_variation_anchor_;
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_set_type_variation_anchor(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_variation_anchor_ = value;
}

// string name = 3;
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleExtensionDeclaration_ExtensionTypeVariation::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimpleExtensionDeclaration_ExtensionTypeVariation::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}
inline std::string* SimpleExtensionDeclaration_ExtensionTypeVariation::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
  return _s;
}
inline const std::string& SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SimpleExtensionDeclaration_ExtensionTypeVariation::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SimpleExtensionDeclaration_ExtensionTypeVariation::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void SimpleExtensionDeclaration_ExtensionTypeVariation::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation.name)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration_ExtensionFunction

// uint32 extension_uri_reference = 1;
inline void SimpleExtensionDeclaration_ExtensionFunction::clear_extension_uri_reference() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_reference_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionFunction::extension_uri_reference() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.extension_uri_reference)
  return _internal_extension_uri_reference();
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_extension_uri_reference(::uint32_t value) {
  _internal_set_extension_uri_reference(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.extension_uri_reference)
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionFunction::_internal_extension_uri_reference() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_uri_reference_;
}
inline void SimpleExtensionDeclaration_ExtensionFunction::_internal_set_extension_uri_reference(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.extension_uri_reference_ = value;
}

// uint32 function_anchor = 2;
inline void SimpleExtensionDeclaration_ExtensionFunction::clear_function_anchor() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_anchor_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionFunction::function_anchor() const {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.function_anchor)
  return _internal_function_anchor();
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_function_anchor(::uint32_t value) {
  _internal_set_function_anchor(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.function_anchor)
}
inline ::uint32_t SimpleExtensionDeclaration_ExtensionFunction::_internal_function_anchor() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.function_anchor_;
}
inline void SimpleExtensionDeclaration_ExtensionFunction::_internal_set_function_anchor(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.function_anchor_ = value;
}

// string name = 3;
inline void SimpleExtensionDeclaration_ExtensionFunction::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleExtensionDeclaration_ExtensionFunction::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void SimpleExtensionDeclaration_ExtensionFunction::set_name(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}
inline std::string* SimpleExtensionDeclaration_ExtensionFunction::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
  return _s;
}
inline const std::string& SimpleExtensionDeclaration_ExtensionFunction::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SimpleExtensionDeclaration_ExtensionFunction::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SimpleExtensionDeclaration_ExtensionFunction::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SimpleExtensionDeclaration_ExtensionFunction::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.name_.Set("", GetArena());
  }
  return released;
}
inline void SimpleExtensionDeclaration_ExtensionFunction::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction.name)
}

// -------------------------------------------------------------------

// SimpleExtensionDeclaration

// .substrait.extensions.SimpleExtensionDeclaration.ExtensionType extension_type = 1;
inline bool SimpleExtensionDeclaration::has_extension_type() const {
  return mapping_type_case() == kExtensionType;
}
inline bool SimpleExtensionDeclaration::_internal_has_extension_type() const {
  return mapping_type_case() == kExtensionType;
}
inline void SimpleExtensionDeclaration::set_has_extension_type() {
  _impl_._oneof_case_[0] = kExtensionType;
}
inline void SimpleExtensionDeclaration::clear_extension_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mapping_type_case() == kExtensionType) {
    if (GetArena() == nullptr) {
      delete _impl_.mapping_type_.extension_type_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mapping_type_.extension_type_);
    }
    clear_has_mapping_type();
  }
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* SimpleExtensionDeclaration::release_extension_type() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  if (mapping_type_case() == kExtensionType) {
    clear_has_mapping_type();
    auto* temp = _impl_.mapping_type_.extension_type_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mapping_type_.extension_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& SimpleExtensionDeclaration::_internal_extension_type() const {
  return mapping_type_case() == kExtensionType ? *_impl_.mapping_type_.extension_type_ : reinterpret_cast<::substrait::extensions::SimpleExtensionDeclaration_ExtensionType&>(::substrait::extensions::_SimpleExtensionDeclaration_ExtensionType_default_instance_);
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType& SimpleExtensionDeclaration::extension_type() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  return _internal_extension_type();
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* SimpleExtensionDeclaration::unsafe_arena_release_extension_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  if (mapping_type_case() == kExtensionType) {
    clear_has_mapping_type();
    auto* temp = _impl_.mapping_type_.extension_type_;
    _impl_.mapping_type_.extension_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimpleExtensionDeclaration::unsafe_arena_set_allocated_extension_type(::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mapping_type();
  if (value) {
    set_has_extension_type();
    _impl_.mapping_type_.extension_type_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.extensions.SimpleExtensionDeclaration.extension_type)
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* SimpleExtensionDeclaration::_internal_mutable_extension_type() {
  if (mapping_type_case() != kExtensionType) {
    clear_mapping_type();
    set_has_extension_type();
    _impl_.mapping_type_.extension_type_ =
        ::google::protobuf::Message::DefaultConstruct<::substrait::extensions::SimpleExtensionDeclaration_ExtensionType>(GetArena());
  }
  return _impl_.mapping_type_.extension_type_;
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* SimpleExtensionDeclaration::mutable_extension_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionType* _msg = _internal_mutable_extension_type();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.extension_type)
  return _msg;
}

// .substrait.extensions.SimpleExtensionDeclaration.ExtensionTypeVariation extension_type_variation = 2;
inline bool SimpleExtensionDeclaration::has_extension_type_variation() const {
  return mapping_type_case() == kExtensionTypeVariation;
}
inline bool SimpleExtensionDeclaration::_internal_has_extension_type_variation() const {
  return mapping_type_case() == kExtensionTypeVariation;
}
inline void SimpleExtensionDeclaration::set_has_extension_type_variation() {
  _impl_._oneof_case_[0] = kExtensionTypeVariation;
}
inline void SimpleExtensionDeclaration::clear_extension_type_variation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mapping_type_case() == kExtensionTypeVariation) {
    if (GetArena() == nullptr) {
      delete _impl_.mapping_type_.extension_type_variation_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mapping_type_.extension_type_variation_);
    }
    clear_has_mapping_type();
  }
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* SimpleExtensionDeclaration::release_extension_type_variation() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  if (mapping_type_case() == kExtensionTypeVariation) {
    clear_has_mapping_type();
    auto* temp = _impl_.mapping_type_.extension_type_variation_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mapping_type_.extension_type_variation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& SimpleExtensionDeclaration::_internal_extension_type_variation() const {
  return mapping_type_case() == kExtensionTypeVariation ? *_impl_.mapping_type_.extension_type_variation_ : reinterpret_cast<::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation&>(::substrait::extensions::_SimpleExtensionDeclaration_ExtensionTypeVariation_default_instance_);
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation& SimpleExtensionDeclaration::extension_type_variation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  return _internal_extension_type_variation();
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* SimpleExtensionDeclaration::unsafe_arena_release_extension_type_variation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  if (mapping_type_case() == kExtensionTypeVariation) {
    clear_has_mapping_type();
    auto* temp = _impl_.mapping_type_.extension_type_variation_;
    _impl_.mapping_type_.extension_type_variation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimpleExtensionDeclaration::unsafe_arena_set_allocated_extension_type_variation(::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mapping_type();
  if (value) {
    set_has_extension_type_variation();
    _impl_.mapping_type_.extension_type_variation_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* SimpleExtensionDeclaration::_internal_mutable_extension_type_variation() {
  if (mapping_type_case() != kExtensionTypeVariation) {
    clear_mapping_type();
    set_has_extension_type_variation();
    _impl_.mapping_type_.extension_type_variation_ =
        ::google::protobuf::Message::DefaultConstruct<::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation>(GetArena());
  }
  return _impl_.mapping_type_.extension_type_variation_;
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* SimpleExtensionDeclaration::mutable_extension_type_variation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionTypeVariation* _msg = _internal_mutable_extension_type_variation();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.extension_type_variation)
  return _msg;
}

// .substrait.extensions.SimpleExtensionDeclaration.ExtensionFunction extension_function = 3;
inline bool SimpleExtensionDeclaration::has_extension_function() const {
  return mapping_type_case() == kExtensionFunction;
}
inline bool SimpleExtensionDeclaration::_internal_has_extension_function() const {
  return mapping_type_case() == kExtensionFunction;
}
inline void SimpleExtensionDeclaration::set_has_extension_function() {
  _impl_._oneof_case_[0] = kExtensionFunction;
}
inline void SimpleExtensionDeclaration::clear_extension_function() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (mapping_type_case() == kExtensionFunction) {
    if (GetArena() == nullptr) {
      delete _impl_.mapping_type_.extension_function_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.mapping_type_.extension_function_);
    }
    clear_has_mapping_type();
  }
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* SimpleExtensionDeclaration::release_extension_function() {
  // @@protoc_insertion_point(field_release:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  if (mapping_type_case() == kExtensionFunction) {
    clear_has_mapping_type();
    auto* temp = _impl_.mapping_type_.extension_function_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.mapping_type_.extension_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& SimpleExtensionDeclaration::_internal_extension_function() const {
  return mapping_type_case() == kExtensionFunction ? *_impl_.mapping_type_.extension_function_ : reinterpret_cast<::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction&>(::substrait::extensions::_SimpleExtensionDeclaration_ExtensionFunction_default_instance_);
}
inline const ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction& SimpleExtensionDeclaration::extension_function() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  return _internal_extension_function();
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* SimpleExtensionDeclaration::unsafe_arena_release_extension_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  if (mapping_type_case() == kExtensionFunction) {
    clear_has_mapping_type();
    auto* temp = _impl_.mapping_type_.extension_function_;
    _impl_.mapping_type_.extension_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimpleExtensionDeclaration::unsafe_arena_set_allocated_extension_function(::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_mapping_type();
  if (value) {
    set_has_extension_function();
    _impl_.mapping_type_.extension_function_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.extensions.SimpleExtensionDeclaration.extension_function)
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* SimpleExtensionDeclaration::_internal_mutable_extension_function() {
  if (mapping_type_case() != kExtensionFunction) {
    clear_mapping_type();
    set_has_extension_function();
    _impl_.mapping_type_.extension_function_ =
        ::google::protobuf::Message::DefaultConstruct<::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction>(GetArena());
  }
  return _impl_.mapping_type_.extension_function_;
}
inline ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* SimpleExtensionDeclaration::mutable_extension_function() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::substrait::extensions::SimpleExtensionDeclaration_ExtensionFunction* _msg = _internal_mutable_extension_function();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.SimpleExtensionDeclaration.extension_function)
  return _msg;
}

inline bool SimpleExtensionDeclaration::has_mapping_type() const {
  return mapping_type_case() != MAPPING_TYPE_NOT_SET;
}
inline void SimpleExtensionDeclaration::clear_has_mapping_type() {
  _impl_._oneof_case_[0] = MAPPING_TYPE_NOT_SET;
}
inline SimpleExtensionDeclaration::MappingTypeCase SimpleExtensionDeclaration::mapping_type_case() const {
  return SimpleExtensionDeclaration::MappingTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AdvancedExtension

// .google.protobuf.Any optimization = 1;
inline bool AdvancedExtension::has_optimization() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.optimization_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& AdvancedExtension::_internal_optimization() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.optimization_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& AdvancedExtension::optimization() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.AdvancedExtension.optimization)
  return _internal_optimization();
}
inline void AdvancedExtension::unsafe_arena_set_allocated_optimization(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.optimization_);
  }
  _impl_.optimization_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.extensions.AdvancedExtension.optimization)
}
inline ::google::protobuf::Any* AdvancedExtension::release_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.optimization_;
  _impl_.optimization_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* AdvancedExtension::unsafe_arena_release_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.extensions.AdvancedExtension.optimization)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.optimization_;
  _impl_.optimization_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* AdvancedExtension::_internal_mutable_optimization() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.optimization_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.optimization_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.optimization_;
}
inline ::google::protobuf::Any* AdvancedExtension::mutable_optimization() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_optimization();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.AdvancedExtension.optimization)
  return _msg;
}
inline void AdvancedExtension::set_allocated_optimization(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.optimization_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.optimization_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.AdvancedExtension.optimization)
}

// .google.protobuf.Any enhancement = 2;
inline bool AdvancedExtension::has_enhancement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enhancement_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& AdvancedExtension::_internal_enhancement() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Any* p = _impl_.enhancement_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& AdvancedExtension::enhancement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.extensions.AdvancedExtension.enhancement)
  return _internal_enhancement();
}
inline void AdvancedExtension::unsafe_arena_set_allocated_enhancement(::google::protobuf::Any* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enhancement_);
  }
  _impl_.enhancement_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.extensions.AdvancedExtension.enhancement)
}
inline ::google::protobuf::Any* AdvancedExtension::release_enhancement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* released = _impl_.enhancement_;
  _impl_.enhancement_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Any* AdvancedExtension::unsafe_arena_release_enhancement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.extensions.AdvancedExtension.enhancement)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Any* temp = _impl_.enhancement_;
  _impl_.enhancement_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* AdvancedExtension::_internal_mutable_enhancement() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.enhancement_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.enhancement_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.enhancement_;
}
inline ::google::protobuf::Any* AdvancedExtension::mutable_enhancement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Any* _msg = _internal_mutable_enhancement();
  // @@protoc_insertion_point(field_mutable:substrait.extensions.AdvancedExtension.enhancement)
  return _msg;
}
inline void AdvancedExtension::set_allocated_enhancement(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.enhancement_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.enhancement_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:substrait.extensions.AdvancedExtension.enhancement)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
}  // namespace substrait


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // substrait_2fextensions_2fextensions_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: substrait/plan.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef substrait_2fplan_2eproto_2epb_2eh
#define substrait_2fplan_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "substrait/algebra.pb.h"
#include "substrait/extensions/extensions.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_substrait_2fplan_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fplan_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_substrait_2fplan_2eproto;
}  // extern "C"
namespace substrait {
class Plan;
struct PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Plan_class_data_;
class PlanRel;
struct PlanRelDefaultTypeInternal;
extern PlanRelDefaultTypeInternal _PlanRel_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PlanRel_class_data_;
class PlanVersion;
struct PlanVersionDefaultTypeInternal;
extern PlanVersionDefaultTypeInternal _PlanVersion_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull PlanVersion_class_data_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Version_class_data_;
}  // namespace substrait
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace substrait {

// ===================================================================


// -------------------------------------------------------------------

class Version final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Version* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Version));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Version(
      ::google::protobuf::internal::ConstantInitialized);

  inline Version(const Version& from) : Version(nullptr, from) {}
  inline Version(Version&& from) noexcept
      : Version(nullptr, std::move(from)) {}
  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *reinterpret_cast<const Version*>(
        &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Version& a, Version& b) { a.Swap(&b); }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Version>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Version& from) { Version::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Version* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.Version"; }

 protected:
  explicit Version(::google::protobuf::Arena* arena);
  Version(::google::protobuf::Arena* arena, const Version& from);
  Version(::google::protobuf::Arena* arena, Version&& from) noexcept
      : Version(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGitHashFieldNumber = 4,
    kProducerFieldNumber = 5,
    kMajorNumberFieldNumber = 1,
    kMinorNumberFieldNumber = 2,
    kPatchNumberFieldNumber = 3,
  };
  // string git_hash = 4;
  void clear_git_hash() ;
  const std::string& git_hash() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_git_hash(Arg_&& arg, Args_... args);
  std::string* mutable_git_hash();
  [[nodiscard]] std::string* release_git_hash();
  void set_allocated_git_hash(std::string* value);

  private:
  const std::string& _internal_git_hash() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_git_hash(const std::string& value);
  std::string* _internal_mutable_git_hash();

  public:
  // string producer = 5;
  void clear_producer() ;
  const std::string& producer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_producer(Arg_&& arg, Args_... args);
  std::string* mutable_producer();
  [[nodiscard]] std::string* release_producer();
  void set_allocated_producer(std::string* value);

  private:
  const std::string& _internal_producer() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_producer(const std::string& value);
  std::string* _internal_mutable_producer();

  public:
  // uint32 major_number = 1;
  void clear_major_number() ;
  ::uint32_t major_number() const;
  void set_major_number(::uint32_t value);

  private:
  ::uint32_t _internal_major_number() const;
  void _internal_set_major_number(::uint32_t value);

  public:
  // uint32 minor_number = 2;
  void clear_minor_number() ;
  ::uint32_t minor_number() const;
  void set_minor_number(::uint32_t value);

  private:
  ::uint32_t _internal_minor_number() const;
  void _internal_set_minor_number(::uint32_t value);

  public:
  // uint32 patch_number = 3;
  void clear_patch_number() ;
  ::uint32_t patch_number() const;
  void set_patch_number(::uint32_t value);

  private:
  ::uint32_t _internal_patch_number() const;
  void _internal_set_patch_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Version)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Version& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr git_hash_;
    ::google::protobuf::internal::ArenaStringPtr producer_;
    ::uint32_t major_number_;
    ::uint32_t minor_number_;
    ::uint32_t patch_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Version_class_data_;
// -------------------------------------------------------------------

class PlanVersion final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.PlanVersion) */ {
 public:
  inline PlanVersion() : PlanVersion(nullptr) {}
  ~PlanVersion() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlanVersion* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlanVersion));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlanVersion(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlanVersion(const PlanVersion& from) : PlanVersion(nullptr, from) {}
  inline PlanVersion(PlanVersion&& from) noexcept
      : PlanVersion(nullptr, std::move(from)) {}
  inline PlanVersion& operator=(const PlanVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanVersion& operator=(PlanVersion&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanVersion& default_instance() {
    return *reinterpret_cast<const PlanVersion*>(
        &_PlanVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PlanVersion& a, PlanVersion& b) { a.Swap(&b); }
  inline void Swap(PlanVersion* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanVersion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanVersion* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlanVersion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlanVersion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlanVersion& from) { PlanVersion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlanVersion* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.PlanVersion"; }

 protected:
  explicit PlanVersion(::google::protobuf::Arena* arena);
  PlanVersion(::google::protobuf::Arena* arena, const PlanVersion& from);
  PlanVersion(::google::protobuf::Arena* arena, PlanVersion&& from) noexcept
      : PlanVersion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVersionFieldNumber = 6,
  };
  // .substrait.Version version = 6;
  bool has_version() const;
  void clear_version() ;
  const ::substrait::Version& version() const;
  [[nodiscard]] ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* value);
  void unsafe_arena_set_allocated_version(::substrait::Version* value);
  ::substrait::Version* unsafe_arena_release_version();

  private:
  const ::substrait::Version& _internal_version() const;
  ::substrait::Version* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:substrait.PlanVersion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlanVersion& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::substrait::Version* version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PlanVersion_class_data_;
// -------------------------------------------------------------------

class PlanRel final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.PlanRel) */ {
 public:
  inline PlanRel() : PlanRel(nullptr) {}
  ~PlanRel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlanRel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlanRel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlanRel(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlanRel(const PlanRel& from) : PlanRel(nullptr, from) {}
  inline PlanRel(PlanRel&& from) noexcept
      : PlanRel(nullptr, std::move(from)) {}
  inline PlanRel& operator=(const PlanRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanRel& operator=(PlanRel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanRel& default_instance() {
    return *reinterpret_cast<const PlanRel*>(
        &_PlanRel_default_instance_);
  }
  enum RelTypeCase {
    kRel = 1,
    kRoot = 2,
    REL_TYPE_NOT_SET = 0,
  };
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PlanRel& a, PlanRel& b) { a.Swap(&b); }
  inline void Swap(PlanRel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanRel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlanRel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlanRel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlanRel& from) { PlanRel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlanRel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.PlanRel"; }

 protected:
  explicit PlanRel(::google::protobuf::Arena* arena);
  PlanRel(::google::protobuf::Arena* arena, const PlanRel& from);
  PlanRel(::google::protobuf::Arena* arena, PlanRel&& from) noexcept
      : PlanRel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRelFieldNumber = 1,
    kRootFieldNumber = 2,
  };
  // .substrait.Rel rel = 1;
  bool has_rel() const;
  private:
  bool _internal_has_rel() const;

  public:
  void clear_rel() ;
  const ::substrait::Rel& rel() const;
  [[nodiscard]] ::substrait::Rel* release_rel();
  ::substrait::Rel* mutable_rel();
  void set_allocated_rel(::substrait::Rel* value);
  void unsafe_arena_set_allocated_rel(::substrait::Rel* value);
  ::substrait::Rel* unsafe_arena_release_rel();

  private:
  const ::substrait::Rel& _internal_rel() const;
  ::substrait::Rel* _internal_mutable_rel();

  public:
  // .substrait.RelRoot root = 2;
  bool has_root() const;
  private:
  bool _internal_has_root() const;

  public:
  void clear_root() ;
  const ::substrait::RelRoot& root() const;
  [[nodiscard]] ::substrait::RelRoot* release_root();
  ::substrait::RelRoot* mutable_root();
  void set_allocated_root(::substrait::RelRoot* value);
  void unsafe_arena_set_allocated_root(::substrait::RelRoot* value);
  ::substrait::RelRoot* unsafe_arena_release_root();

  private:
  const ::substrait::RelRoot& _internal_root() const;
  ::substrait::RelRoot* _internal_mutable_root();

  public:
  void clear_rel_type();
  RelTypeCase rel_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.PlanRel)
 private:
  class _Internal;
  void set_has_rel();
  void set_has_root();
  inline bool has_rel_type() const;
  inline void clear_has_rel_type();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlanRel& from_msg);
    union RelTypeUnion {
      constexpr RelTypeUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::substrait::Rel* rel_;
      ::substrait::RelRoot* root_;
    } rel_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull PlanRel_class_data_;
// -------------------------------------------------------------------

class Plan final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:substrait.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  ~Plan() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Plan* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Plan));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Plan(
      ::google::protobuf::internal::ConstantInitialized);

  inline Plan(const Plan& from) : Plan(nullptr, from) {}
  inline Plan(Plan&& from) noexcept
      : Plan(nullptr, std::move(from)) {}
  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plan& default_instance() {
    return *reinterpret_cast<const Plan*>(
        &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Plan& a, Plan& b) { a.Swap(&b); }
  inline void Swap(Plan* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plan* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Plan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Plan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Plan& from) { Plan::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Plan* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "substrait.Plan"; }

 protected:
  explicit Plan(::google::protobuf::Arena* arena);
  Plan(::google::protobuf::Arena* arena, const Plan& from);
  Plan(::google::protobuf::Arena* arena, Plan&& from) noexcept
      : Plan(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExtensionUrisFieldNumber = 1,
    kExtensionsFieldNumber = 2,
    kRelationsFieldNumber = 3,
    kExpectedTypeUrlsFieldNumber = 5,
    kAdvancedExtensionsFieldNumber = 4,
    kVersionFieldNumber = 6,
  };
  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  int extension_uris_size() const;
  private:
  int _internal_extension_uris_size() const;

  public:
  void clear_extension_uris() ;
  ::substrait::extensions::SimpleExtensionURI* mutable_extension_uris(int index);
  ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>* mutable_extension_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>& _internal_extension_uris() const;
  ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>* _internal_mutable_extension_uris();
  public:
  const ::substrait::extensions::SimpleExtensionURI& extension_uris(int index) const;
  ::substrait::extensions::SimpleExtensionURI* add_extension_uris();
  const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>& extension_uris() const;
  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;

  public:
  void clear_extensions() ;
  ::substrait::extensions::SimpleExtensionDeclaration* mutable_extensions(int index);
  ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>* mutable_extensions();

  private:
  const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>& _internal_extensions() const;
  ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>* _internal_mutable_extensions();
  public:
  const ::substrait::extensions::SimpleExtensionDeclaration& extensions(int index) const;
  ::substrait::extensions::SimpleExtensionDeclaration* add_extensions();
  const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>& extensions() const;
  // repeated .substrait.PlanRel relations = 3;
  int relations_size() const;
  private:
  int _internal_relations_size() const;

  public:
  void clear_relations() ;
  ::substrait::PlanRel* mutable_relations(int index);
  ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>* mutable_relations();

  private:
  const ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>& _internal_relations() const;
  ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>* _internal_mutable_relations();
  public:
  const ::substrait::PlanRel& relations(int index) const;
  ::substrait::PlanRel* add_relations();
  const ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>& relations() const;
  // repeated string expected_type_urls = 5;
  int expected_type_urls_size() const;
  private:
  int _internal_expected_type_urls_size() const;

  public:
  void clear_expected_type_urls() ;
  const std::string& expected_type_urls(int index) const;
  std::string* mutable_expected_type_urls(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_expected_type_urls(int index, Arg_&& value, Args_... args);
  std::string* add_expected_type_urls();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_expected_type_urls(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& expected_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_expected_type_urls();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_expected_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_expected_type_urls();

  public:
  // .substrait.extensions.AdvancedExtension advanced_extensions = 4;
  bool has_advanced_extensions() const;
  void clear_advanced_extensions() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extensions() const;
  [[nodiscard]] ::substrait::extensions::AdvancedExtension* release_advanced_extensions();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extensions();
  void set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* value);
  void unsafe_arena_set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* value);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extensions();

  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extensions() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extensions();

  public:
  // .substrait.Version version = 6;
  bool has_version() const;
  void clear_version() ;
  const ::substrait::Version& version() const;
  [[nodiscard]] ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* value);
  void unsafe_arena_set_allocated_version(::substrait::Version* value);
  ::substrait::Version* unsafe_arena_release_version();

  private:
  const ::substrait::Version& _internal_version() const;
  ::substrait::Version* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:substrait.Plan)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Plan& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI > extension_uris_;
    ::google::protobuf::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration > extensions_;
    ::google::protobuf::RepeatedPtrField< ::substrait::PlanRel > relations_;
    ::google::protobuf::RepeatedPtrField<std::string> expected_type_urls_;
    ::substrait::extensions::AdvancedExtension* advanced_extensions_;
    ::substrait::Version* version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Plan_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlanRel

// .substrait.Rel rel = 1;
inline bool PlanRel::has_rel() const {
  return rel_type_case() == kRel;
}
inline bool PlanRel::_internal_has_rel() const {
  return rel_type_case() == kRel;
}
inline void PlanRel::set_has_rel() {
  _impl_._oneof_case_[0] = kRel;
}
inline ::substrait::Rel* PlanRel::release_rel() {
  // @@protoc_insertion_point(field_release:substrait.PlanRel.rel)
  if (rel_type_case() == kRel) {
    clear_has_rel_type();
    auto* temp = _impl_.rel_type_.rel_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.rel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Rel& PlanRel::_internal_rel() const {
  return rel_type_case() == kRel ? *_impl_.rel_type_.rel_ : reinterpret_cast<::substrait::Rel&>(::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& PlanRel::rel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.PlanRel.rel)
  return _internal_rel();
}
inline ::substrait::Rel* PlanRel::unsafe_arena_release_rel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.PlanRel.rel)
  if (rel_type_case() == kRel) {
    clear_has_rel_type();
    auto* temp = _impl_.rel_type_.rel_;
    _impl_.rel_type_.rel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanRel::unsafe_arena_set_allocated_rel(::substrait::Rel* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_rel_type();
  if (value) {
    set_has_rel();
    _impl_.rel_type_.rel_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.PlanRel.rel)
}
inline ::substrait::Rel* PlanRel::_internal_mutable_rel() {
  if (rel_type_case() != kRel) {
    clear_rel_type();
    set_has_rel();
    _impl_.rel_type_.rel_ =
        ::google::protobuf::Message::DefaultConstruct<::substrait::Rel>(GetArena());
  }
  return _impl_.rel_type_.rel_;
}
inline ::substrait::Rel* PlanRel::mutable_rel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::substrait::Rel* _msg = _internal_mutable_rel();
  // @@protoc_insertion_point(field_mutable:substrait.PlanRel.rel)
  return _msg;
}

// .substrait.RelRoot root = 2;
inline bool PlanRel::has_root() const {
  return rel_type_case() == kRoot;
}
inline bool PlanRel::_internal_has_root() const {
  return rel_type_case() == kRoot;
}
inline void PlanRel::set_has_root() {
  _impl_._oneof_case_[0] = kRoot;
}
inline ::substrait::RelRoot* PlanRel::release_root() {
  // @@protoc_insertion_point(field_release:substrait.PlanRel.root)
  if (rel_type_case() == kRoot) {
    clear_has_rel_type();
    auto* temp = _impl_.rel_type_.root_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::RelRoot& PlanRel::_internal_root() const {
  return rel_type_case() == kRoot ? *_impl_.rel_type_.root_ : reinterpret_cast<::substrait::RelRoot&>(::substrait::_RelRoot_default_instance_);
}
inline const ::substrait::RelRoot& PlanRel::root() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.PlanRel.root)
  return _internal_root();
}
inline ::substrait::RelRoot* PlanRel::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.PlanRel.root)
  if (rel_type_case() == kRoot) {
    clear_has_rel_type();
    auto* temp = _impl_.rel_type_.root_;
    _impl_.rel_type_.root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanRel::unsafe_arena_set_allocated_root(::substrait::RelRoot* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_rel_type();
  if (value) {
    set_has_root();
    _impl_.rel_type_.root_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.PlanRel.root)
}
inline ::substrait::RelRoot* PlanRel::_internal_mutable_root() {
  if (rel_type_case() != kRoot) {
    clear_rel_type();
    set_has_root();
    _impl_.rel_type_.root_ =
        ::google::protobuf::Message::DefaultConstruct<::substrait::RelRoot>(GetArena());
  }
  return _impl_.rel_type_.root_;
}
inline ::substrait::RelRoot* PlanRel::mutable_root() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::substrait::RelRoot* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:substrait.PlanRel.root)
  return _msg;
}

inline bool PlanRel::has_rel_type() const {
  return rel_type_case() != REL_TYPE_NOT_SET;
}
inline void PlanRel::clear_has_rel_type() {
  _impl_._oneof_case_[0] = REL_TYPE_NOT_SET;
}
inline PlanRel::RelTypeCase PlanRel::rel_type_case() const {
  return PlanRel::RelTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Plan

// .substrait.Version version = 6;
inline bool Plan::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void Plan::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Version& Plan::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::substrait::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Version&>(::substrait::_Version_default_instance_);
}
inline const ::substrait::Version& Plan::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Plan.version)
  return _internal_version();
}
inline void Plan::unsafe_arena_set_allocated_version(::substrait::Version* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::substrait::Version*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Plan.version)
}
inline ::substrait::Version* Plan::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Version* released = _impl_.version_;
  _impl_.version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::substrait::Version* Plan::unsafe_arena_release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.Plan.version)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::substrait::Version* Plan::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::substrait::Version>(GetArena());
    _impl_.version_ = reinterpret_cast<::substrait::Version*>(p);
  }
  return _impl_.version_;
}
inline ::substrait::Version* Plan::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::substrait::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:substrait.Plan.version)
  return _msg;
}
inline void Plan::set_allocated_version(::substrait::Version* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.version_ = reinterpret_cast<::substrait::Version*>(value);
  // @@protoc_insertion_point(field_set_allocated:substrait.Plan.version)
}

// repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
inline int Plan::_internal_extension_uris_size() const {
  return _internal_extension_uris().size();
}
inline int Plan::extension_uris_size() const {
  return _internal_extension_uris_size();
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::mutable_extension_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.extension_uris)
  return _internal_mutable_extension_uris()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>* Plan::mutable_extension_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.extension_uris)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_extension_uris();
}
inline const ::substrait::extensions::SimpleExtensionURI& Plan::extension_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Plan.extension_uris)
  return _internal_extension_uris().Get(index);
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::add_extension_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::substrait::extensions::SimpleExtensionURI* _add = _internal_mutable_extension_uris()->Add();
  // @@protoc_insertion_point(field_add:substrait.Plan.extension_uris)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>& Plan::extension_uris() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:substrait.Plan.extension_uris)
  return _internal_extension_uris();
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>&
Plan::_internal_extension_uris() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extension_uris_;
}
inline ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>*
Plan::_internal_mutable_extension_uris() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.extension_uris_;
}

// repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
inline int Plan::_internal_extensions_size() const {
  return _internal_extensions().size();
}
inline int Plan::extensions_size() const {
  return _internal_extensions_size();
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::mutable_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.extensions)
  return _internal_mutable_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>* Plan::mutable_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.extensions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_extensions();
}
inline const ::substrait::extensions::SimpleExtensionDeclaration& Plan::extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Plan.extensions)
  return _internal_extensions().Get(index);
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::add_extensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::substrait::extensions::SimpleExtensionDeclaration* _add = _internal_mutable_extensions()->Add();
  // @@protoc_insertion_point(field_add:substrait.Plan.extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>& Plan::extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:substrait.Plan.extensions)
  return _internal_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>&
Plan::_internal_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>*
Plan::_internal_mutable_extensions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.extensions_;
}

// repeated .substrait.PlanRel relations = 3;
inline int Plan::_internal_relations_size() const {
  return _internal_relations().size();
}
inline int Plan::relations_size() const {
  return _internal_relations_size();
}
inline void Plan::clear_relations() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.relations_.Clear();
}
inline ::substrait::PlanRel* Plan::mutable_relations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.relations)
  return _internal_mutable_relations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>* Plan::mutable_relations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.relations)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_relations();
}
inline const ::substrait::PlanRel& Plan::relations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Plan.relations)
  return _internal_relations().Get(index);
}
inline ::substrait::PlanRel* Plan::add_relations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::substrait::PlanRel* _add = _internal_mutable_relations()->Add();
  // @@protoc_insertion_point(field_add:substrait.Plan.relations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>& Plan::relations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:substrait.Plan.relations)
  return _internal_relations();
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>&
Plan::_internal_relations() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.relations_;
}
inline ::google::protobuf::RepeatedPtrField<::substrait::PlanRel>*
Plan::_internal_mutable_relations() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.relations_;
}

// .substrait.extensions.AdvancedExtension advanced_extensions = 4;
inline bool Plan::has_advanced_extensions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extensions_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& Plan::_internal_advanced_extensions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extensions_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& Plan::advanced_extensions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Plan.advanced_extensions)
  return _internal_advanced_extensions();
}
inline void Plan::unsafe_arena_set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.advanced_extensions_);
  }
  _impl_.advanced_extensions_ = reinterpret_cast<::substrait::extensions::AdvancedExtension*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Plan.advanced_extensions)
}
inline ::substrait::extensions::AdvancedExtension* Plan::release_advanced_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* released = _impl_.advanced_extensions_;
  _impl_.advanced_extensions_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::substrait::extensions::AdvancedExtension* Plan::unsafe_arena_release_advanced_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.Plan.advanced_extensions)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extensions_;
  _impl_.advanced_extensions_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* Plan::_internal_mutable_advanced_extensions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.advanced_extensions_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::substrait::extensions::AdvancedExtension>(GetArena());
    _impl_.advanced_extensions_ = reinterpret_cast<::substrait::extensions::AdvancedExtension*>(p);
  }
  return _impl_.advanced_extensions_;
}
inline ::substrait::extensions::AdvancedExtension* Plan::mutable_advanced_extensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extensions();
  // @@protoc_insertion_point(field_mutable:substrait.Plan.advanced_extensions)
  return _msg;
}
inline void Plan::set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.advanced_extensions_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.advanced_extensions_ = reinterpret_cast<::substrait::extensions::AdvancedExtension*>(value);
  // @@protoc_insertion_point(field_set_allocated:substrait.Plan.advanced_extensions)
}

// repeated string expected_type_urls = 5;
inline int Plan::_internal_expected_type_urls_size() const {
  return _internal_expected_type_urls().size();
}
inline int Plan::expected_type_urls_size() const {
  return _internal_expected_type_urls_size();
}
inline void Plan::clear_expected_type_urls() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.expected_type_urls_.Clear();
}
inline std::string* Plan::add_expected_type_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_expected_type_urls()->Add();
  // @@protoc_insertion_point(field_add_mutable:substrait.Plan.expected_type_urls)
  return _s;
}
inline const std::string& Plan::expected_type_urls(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Plan.expected_type_urls)
  return _internal_expected_type_urls().Get(index);
}
inline std::string* Plan::mutable_expected_type_urls(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.expected_type_urls)
  return _internal_mutable_expected_type_urls()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Plan::set_expected_type_urls(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_expected_type_urls()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:substrait.Plan.expected_type_urls)
}
template <typename Arg_, typename... Args_>
inline void Plan::add_expected_type_urls(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_expected_type_urls(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:substrait.Plan.expected_type_urls)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plan::expected_type_urls() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:substrait.Plan.expected_type_urls)
  return _internal_expected_type_urls();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plan::mutable_expected_type_urls() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.expected_type_urls)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_expected_type_urls();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Plan::_internal_expected_type_urls() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.expected_type_urls_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Plan::_internal_mutable_expected_type_urls() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.expected_type_urls_;
}

// -------------------------------------------------------------------

// PlanVersion

// .substrait.Version version = 6;
inline bool PlanVersion::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void PlanVersion::clear_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Version& PlanVersion::_internal_version() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::substrait::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Version&>(::substrait::_Version_default_instance_);
}
inline const ::substrait::Version& PlanVersion::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.PlanVersion.version)
  return _internal_version();
}
inline void PlanVersion::unsafe_arena_set_allocated_version(::substrait::Version* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::substrait::Version*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.PlanVersion.version)
}
inline ::substrait::Version* PlanVersion::release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Version* released = _impl_.version_;
  _impl_.version_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::substrait::Version* PlanVersion::unsafe_arena_release_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.PlanVersion.version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::substrait::Version* PlanVersion::_internal_mutable_version() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.version_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::substrait::Version>(GetArena());
    _impl_.version_ = reinterpret_cast<::substrait::Version*>(p);
  }
  return _impl_.version_;
}
inline ::substrait::Version* PlanVersion::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::substrait::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:substrait.PlanVersion.version)
  return _msg;
}
inline void PlanVersion::set_allocated_version(::substrait::Version* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.version_ = reinterpret_cast<::substrait::Version*>(value);
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanVersion.version)
}

// -------------------------------------------------------------------

// Version

// uint32 major_number = 1;
inline void Version::clear_major_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.major_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Version::major_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.major_number)
  return _internal_major_number();
}
inline void Version::set_major_number(::uint32_t value) {
  _internal_set_major_number(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:substrait.Version.major_number)
}
inline ::uint32_t Version::_internal_major_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.major_number_;
}
inline void Version::_internal_set_major_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.major_number_ = value;
}

// uint32 minor_number = 2;
inline void Version::clear_minor_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minor_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Version::minor_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.minor_number)
  return _internal_minor_number();
}
inline void Version::set_minor_number(::uint32_t value) {
  _internal_set_minor_number(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:substrait.Version.minor_number)
}
inline ::uint32_t Version::_internal_minor_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.minor_number_;
}
inline void Version::_internal_set_minor_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.minor_number_ = value;
}

// uint32 patch_number = 3;
inline void Version::clear_patch_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.patch_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Version::patch_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.patch_number)
  return _internal_patch_number();
}
inline void Version::set_patch_number(::uint32_t value) {
  _internal_set_patch_number(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:substrait.Version.patch_number)
}
inline ::uint32_t Version::_internal_patch_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.patch_number_;
}
inline void Version::_internal_set_patch_number(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.patch_number_ = value;
}

// string git_hash = 4;
inline void Version::clear_git_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.git_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Version::git_hash() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Version.git_hash)
  return _internal_git_hash();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Version::set_git_hash(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.git_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:substrait.Version.git_hash)
}
inline std::string* Version::mutable_git_hash() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_git_hash();
  // @@protoc_insertion_point(field_mutable:substrait.Version.git_hash)
  return _s;
}
inline const std::string& Version::_internal_git_hash() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.git_hash_.Get();
}
inline void Version::_internal_set_git_hash(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.git_hash_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_git_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.git_hash_.Mutable( GetArena());
}
inline std::string* Version::release_git_hash() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.Version.git_hash)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.git_hash_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.git_hash_.Set("", GetArena());
  }
  return released;
}
inline void Version::set_allocated_git_hash(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.git_hash_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.git_hash_.IsDefault()) {
    _impl_.git_hash_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Version.git_hash)
}

// string producer = 5;
inline void Version::clear_producer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.producer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Version::producer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:substrait.Version.producer)
  return _internal_producer();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void Version::set_producer(Arg_&& arg,
                                              Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.producer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:substrait.Version.producer)
}
inline std::string* Version::mutable_producer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_producer();
  // @@protoc_insertion_point(field_mutable:substrait.Version.producer)
  return _s;
}
inline const std::string& Version::_internal_producer() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.producer_.Get();
}
inline void Version::_internal_set_producer(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.producer_.Set(value, GetArena());
}
inline std::string* Version::_internal_mutable_producer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.producer_.Mutable( GetArena());
}
inline std::string* Version::release_producer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:substrait.Version.producer)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.producer_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.producer_.Set("", GetArena());
  }
  return released;
}
inline void Version::set_allocated_producer(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.producer_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.producer_.IsDefault()) {
    _impl_.producer_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Version.producer)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // substrait_2fplan_2eproto_2epb_2eh

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Package Linux

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    paths:
      - '.dockerignore'
      - '.github/workflows/check_labels.yml'
      - '.github/workflows/package_linux.yml'
      - '.github/workflows/report_ci.yml'
      - 'cpp/**'
      - 'c_glib/**'
      - 'dev/tasks/linux-packages/**'
      - 'format/Flight.proto'
      - 'testing'
    tags:
      - '**'
  pull_request:
    paths:
      - '.dockerignore'
      - '.github/workflows/check_labels.yml'
      - '.github/workflows/package_linux.yml'
      - '.github/workflows/report_ci.yml'
      - 'cpp/**'
      - 'c_glib/**'
      - 'dev/tasks/linux-packages/**'
      - 'format/Flight.proto'
      - 'testing'
    types:
      - labeled
      - opened
      - reopened
      - synchronize
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: "The Arrow version"
        type: string
        required: true
      no_rc_version:
        description: "The Arrow version without RC"
        type: string
        required: true

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  check-labels:
    uses: ./.github/workflows/check_labels.yml
    secrets: inherit
    with:
      parent-workflow: package_linux

  package:
    name: ${{ matrix.id }}
    runs-on: ${{ contains(matrix.id, 'amd64') && 'ubuntu-latest' || 'ubuntu-24.04-arm' }}
    needs: check-labels
    if: >-
      needs.check-labels.outputs.force == 'true' ||
      contains(fromJSON(needs.check-labels.outputs.ci-extra-labels || '[]'), 'CI: Extra') ||
      contains(fromJSON(needs.check-labels.outputs.ci-extra-labels || '[]'), 'CI: Extra: Package: Linux')
    timeout-minutes: 75
    strategy:
      fail-fast: false
      matrix:
        id:
          - almalinux-8-amd64
          - almalinux-8-arm64
          #- almalinux-9-amd64
          #- almalinux-9-arm64
          #- almalinux-10-amd64
          #- almalinux-10-arm64
          #- amazon-linux-2023-amd64
          #- amazon-linux-2023-arm64
          #- centos-9-stream-amd64
          #- centos-9-stream-arm64
          #- centos-7-amd64
          #- debian-bookworm-amd64
          #- debian-bookworm-arm64
          #- debian-trixie-amd64
          #- debian-trixie-arm64
          #- debian-forky-amd64
          #- debian-forky-arm64
          #- ubuntu-jammy-amd64
          #- ubuntu-jammy-arm64
          #- ubuntu-noble-amd64
          #- ubuntu-noble-arm64
    env:
      DOCKER_VOLUME_PREFIX: ".docker/"
      ARROW_VERSION: ${{ inputs.version || ''}}
      NO_RC_VERSION: ${{ inputs.no_rc_version  || ''}}
    steps:
      - name: Prepare environment variables
        env:
          ID: ${{ matrix.id }}
        run: |
          set -ex
          # Example: almalinux-8-amd64 -> amd64
          architecture="${ID##*-}"
          echo "ARCHITECTURE=${architecture}" >> "${GITHUB_ENV}"
          # Example: almalinux-8-amd64 -> almalinux-8
          target="${ID%-*}"
          case "${target}" in
            almalinux-*|amazon-linux-*|centos-*)
              echo "TASK_NAMESPACE=yum" >> "${GITHUB_ENV}"
              echo "UPLOAD_EXTENSIONS=rpm" >> "${GITHUB_ENV}"
              if [[ "${architecture}" == "arm64" ]]; then
                # Example: almalinux-8 -> almalinux-8-aarch64
                target="${target}-aarch64"
              fi
              echo "YUM_TARGETS=${target}" >> "${GITHUB_ENV}"
              ;;
            *)
              echo "TASK_NAMESPACE=apt" >> "${GITHUB_ENV}"
              upload_extensions=(ddeb deb debian.tar.xz .dsc .orig.tar.gz)
              echo "UPLOAD_EXTENSIONS=${upload_extensions[*]}" >> "${GITHUB_ENV}"
              if [[ "${architecture}" == "arm64" ]]; then
                # Example: ubuntu-noble -> ubuntu-noble-arm64
                target="${target}-arm64"
              fi
              echo "APT_TARGETS=${target}" >> "${GITHUB_ENV}"
              ;;
          esac
          echo "TARGET=${target}" >> "${GITHUB_ENV}"
      - name: Checkout Arrow
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Free up disk space
        if: runner.os == 'Linux' && runner.arch == 'X64'
        shell: bash
        run: |
          ci/scripts/util_free_space.sh
      - name: Cache Docker Volumes
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: .docker
          key:  package-linux-${{ matrix.id }}-${{ hashFiles('cpp/**') }}
          restore-keys: package-linux-${{ matrix.id }}-
      - name: Set up Ruby
        run: |
          sudo apt update
          sudo apt install -y \
            rake \
            ruby \
            ruby-dev
      - name: Prepare apache-arrow-apt-source for arm64
        if: ${{ env.ARCHITECTURE == 'arm64' }}
        run: |
          pushd dev/tasks/linux-packages/apache-arrow-apt-source/apt
          for target in *-*; do
            cp -a ${target} ${target}-arm64
          done
          popd
      - name: Prepare apache-arrow-release for arm64
        if: ${{ env.ARCHITECTURE == 'arm64' }}
        run: |
          pushd dev/tasks/linux-packages/apache-arrow-release/yum
          for target in *-*; do
            cp -a ${target} ${target}-aarch64
          done
          popd
      - name: Get Arrow Version
        id: get-arrow-version
        run: |
          # In case of dev (no workflow_dispatch inputs) compute ARROW_VERSION and
          # use the same version for NO_RC_VERSION.
          if [ -z "${ARROW_VERSION}" ]; then
            ARROW_VERSION=$(git describe --tags --abbrev=0 --match "apache-arrow-[0-9]*.*" | sed 's/^apache-arrow-//')
            ARROW_VERSION="${ARROW_VERSION}$(date +%Y%m%d)"
            echo "ARROW_VERSION=${ARROW_VERSION}" >> $GITHUB_ENV
            echo "NO_RC_VERSION=${ARROW_VERSION}" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          set -e
          pushd dev/tasks/linux-packages
          rake version:update ARROW_RELEASE_TIME="$(date --iso-8601=seconds)"
          rake docker:pull || :
          rake --trace ${TASK_NAMESPACE}:build BUILD_DIR=build
          popd
        env:
          REPO: ghcr.io/${{ github.repository }}-package-linux
      - name: Login to Dockerhub
        if: >-
          success() &&
          github.event_name == 'push' &&
          github.repository == 'apache/arrow' &&
          github.ref_name == 'main'
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN}}
      - name: Docker Push
        continue-on-error: true
        if: >-
          success() &&
          github.event_name == 'push' &&
          github.repository == 'apache/arrow' &&
          github.ref_name == 'main'
        shell: bash
        run: |
          pushd dev/tasks/linux-packages
          rake docker:push
          popd
        env:
          REPO: ${{ secrets.REPO }}
      - name: Build artifact tarball
        shell: bash
        run: |
          set -ex
          pushd dev/tasks/linux-packages
          tar cvzf ${{ matrix.id }}.tar.gz */${TASK_NAMESPACE}/repositories
          popd
      - name: Upload the artifacts to the job
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ matrix.id }}
          path: dev/tasks/linux-packages/${{ matrix.id }}.tar.gz
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts-downloaded
          name: ${{ matrix.id }}
      - name: Set up test
        run: |
          ls -lrt artifacts-downloaded
          mv artifacts-downloaded/* dev/tasks/linux-packages
          pushd dev/tasks/linux-packages
          rm -rf */${TASK_NAMESPACE}/repositories # Remove artifacts
          tar xf ${{ matrix.id }}.tar.gz # Use uploaded artifacts
          popd
          sudo apt install -y \
            apt-utils \
            cpio \
            createrepo-c \
            devscripts \
            gpg \
            rpm \
            rsync
          gem install --user-install apt-dists-merge
          (echo "Key-Type: RSA"; \
           echo "Key-Length: 4096"; \
           echo "Name-Real: Test"; \
           echo "Name-Email: test@example.com"; \
           echo "%no-protection") | \
            gpg --full-generate-key --batch
          GPG_KEY_ID=$(gpg --list-keys --with-colon test@example.com | grep fpr | cut -d: -f10)
          echo "GPG_KEY_ID=${GPG_KEY_ID}" >> ${GITHUB_ENV}
          case "${{ matrix.id }}" in
            almalinux-*|amazon-linux-*|centos-*)
              repositories_dir=dev/tasks/linux-packages/apache-arrow-release/yum/repositories
              rpm2cpio ${repositories_dir}/*/*/*/Packages/apache-arrow-release-*.rpm | \
                cpio -id
              mv etc/pki/rpm-gpg/RPM-GPG-KEY-Apache-Arrow \
                dev/tasks/linux-packages/KEYS
              ;;
          esac
          gpg --export --armor test@example.com >> dev/tasks/linux-packages/KEYS
      - name: Test
        run: |
          set -e
          pushd dev/tasks/linux-packages
          rake --trace ${TASK_NAMESPACE}:test
          popd

  report-package-linux:
    needs:
      - package
    uses: ./.github/workflows/report_ci.yml
    secrets: inherit

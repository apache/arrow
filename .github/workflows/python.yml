# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Python

on:
  push:
    paths:
      - '.github/workflows/python.yml'
      - 'ci/**'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'python/**'
  pull_request:
    paths:
      - '.github/workflows/python.yml'
      - 'ci/**'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'python/**'

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  ARCHERY_USE_DOCKER_CLI: 1
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:

  docker:
    name: ${{ matrix.title }}
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        name:
          - conda-python-docs
          - conda-python-3.9-nopandas
          - conda-python-3.8-pandas-1.0
          - conda-python-3.10-pandas-latest
        include:
          - name: conda-python-docs
            cache: conda-python-3.9
            image: conda-python-docs
            title: AMD64 Conda Python 3.9 Sphinx & Numpydoc
            python: 3.9
          - name: conda-python-3.9-nopandas
            cache: conda-python-3.9
            image: conda-python
            title: AMD64 Conda Python 3.9 Without Pandas
            python: 3.9
          - name: conda-python-3.8-pandas-1.0
            cache: conda-python-3.8
            image: conda-python-pandas
            title: AMD64 Conda Python 3.8 Pandas 1.0
            python: 3.8
            pandas: "1.0"
            numpy: 1.16
          - name: conda-python-3.10-pandas-latest
            cache: conda-python-3.10
            image: conda-python-pandas
            title: AMD64 Conda Python 3.10 Pandas latest
            python: "3.10"
            pandas: latest
    env:
      PYTHON: ${{ matrix.python || 3.8 }}
      UBUNTU: ${{ matrix.ubuntu || 20.04 }}
      PANDAS: ${{ matrix.pandas || 'latest' }}
      NUMPY: ${{ matrix.numpy || 'latest' }}
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Cache Docker Volumes
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
        with:
          path: .docker
          key: ${{ matrix.cache }}-${{ hashFiles('cpp/**') }}
          restore-keys: ${{ matrix.cache }}-
      - name: Setup Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: 3.8
      - name: Setup Archery
        run: pip install -e dev/archery[docker]
      - name: Execute Docker Build
        env:
          ARCHERY_DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
          ARCHERY_DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          sudo sysctl -w kernel.core_pattern="core.%e.%p"
          ulimit -c unlimited
          archery docker run ${{ matrix.image }}
      - name: Docker Push
        if: >-
          success() &&
          github.event_name == 'push' &&
          github.repository == 'apache/arrow' &&
          github.ref_name == 'main'
        env:
          ARCHERY_DOCKER_USER: ${{ secrets.DOCKERHUB_USER }}
          ARCHERY_DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true
        run: archery docker push ${{ matrix.image }}

  macos:
    name: ${{ matrix.architecture }} macOS ${{ matrix.macos-version }} Python 3
    runs-on: macos-${{ matrix.macos-version }}
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - architecture: AMD64
            macos-version: "12"
          - architecture: ARM64
            macos-version: "14"
    env:
      ARROW_HOME: /tmp/local
      ARROW_AZURE: ON
      ARROW_DATASET: ON
      ARROW_FLIGHT: ON
      ARROW_GANDIVA: ON
      ARROW_GCS: OFF
      ARROW_HDFS: ON
      ARROW_JEMALLOC: ON
      ARROW_ORC: ON
      ARROW_PARQUET: ON
      PARQUET_REQUIRE_ENCRYPTION: ON
      ARROW_PYTHON: ON
      ARROW_S3: ON
      ARROW_SUBSTRAIT: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_LZ4: ON
      ARROW_WITH_BZ2: ON
      ARROW_WITH_ZSTD: ON
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_BROTLI: ON
      ARROW_BUILD_TESTS: OFF
      PYARROW_TEST_LARGE_MEMORY: ON
      # Current oldest supported version according to https://endoflife.date/macos
      MACOSX_DEPLOYMENT_TARGET: 10.15
    steps:
      - name: Checkout Arrow
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
      - name: Install Dependencies
        shell: bash
        run: |
          brew bundle --file=cpp/Brewfile
          python -m pip install \
            -r python/requirements-build.txt \
            -r python/requirements-test.txt
      - name: Setup ccache
        shell: bash
        run: ci/scripts/ccache_setup.sh
      - name: ccache info
        id: ccache-info
        shell: bash
        run: echo "cache-dir=$(ccache --get-config cache_dir)" >> $GITHUB_OUTPUT
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ steps.ccache-info.outputs.cache-dir }}
          key: python-ccache-macos-${{ matrix.macos-version }}-${{ hashFiles('cpp/**', 'python/**') }}
          restore-keys: python-ccache-macos-${{ matrix.macos-version }}-
      - name: Build
        shell: bash
        run: |
          python -m pip install wheel
          ci/scripts/cpp_build.sh $(pwd) $(pwd)/build
          ci/scripts/python_build.sh $(pwd) $(pwd)/build
      - name: Test
        shell: bash
        run: ci/scripts/python_test.sh $(pwd) $(pwd)/build

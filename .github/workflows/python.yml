# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Python

on:
  push:
    branches:
      - '**'
      - '!dependabot/**'
    tags:
      - '**'
    paths:
      - '.dockerignore'
      - '.github/workflows/python.yml'
      - 'ci/**'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'python/**'
  pull_request:
    paths:
      - '.dockerignore'
      - '.github/workflows/python.yml'
      - 'ci/**'
      - 'cpp/**'
      - 'docker-compose.yml'
      - 'python/**'

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  ARCHERY_DEBUG: 1
  DOCKER_VOLUME_PREFIX: ".docker/"

jobs:

  windows:
    name: ${{ matrix.title }}
    runs-on: ${{ matrix.os }}
    if: ${{ !contains(github.event.pull_request.title, 'WIP') }}
    timeout-minutes: 360
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
        include:
          - os: windows-2022
            simd-level: AVX2
            title: AMD64 Windows 2022 MSVC AVX2
    env:
      ARROW_ACERO: ON
      ARROW_BOOST_USE_SHARED: OFF
      ARROW_BUILD_BENCHMARKS: ON
      ARROW_BUILD_SHARED: ON
      ARROW_BUILD_STATIC: OFF
      ARROW_BUILD_TESTS: ON
      ARROW_DATASET: ON
      ARROW_FLIGHT: OFF
      ARROW_HDFS: ON
      ARROW_HOME: "${{ github.workspace }}\\dist"
      ARROW_JEMALLOC: OFF
      ARROW_MIMALLOC: ON
      ARROW_ORC: ON
      ARROW_PARQUET: ON
      ARROW_SIMD_LEVEL: ${{ matrix.simd-level }}
      ARROW_SUBSTRAIT: ON
      ARROW_USE_GLOG: OFF
      ARROW_VERBOSE_THIRDPARTY_BUILD: OFF
      ARROW_WITH_BROTLI: OFF
      ARROW_WITH_BZ2: OFF
      ARROW_WITH_LZ4: ON
      ARROW_WITH_OPENTELEMETRY: OFF
      ARROW_WITH_SNAPPY: ON
      ARROW_WITH_ZLIB: ON
      ARROW_WITH_ZSTD: ON
      BOOST_SOURCE: BUNDLED
      CMAKE_CXX_STANDARD: "17"
      CMAKE_GENERATOR: Ninja
      CMAKE_INSTALL_PREFIX: "${{ github.workspace }}\\dist"
      CMAKE_UNITY_BUILD: ON
      PYARROW_EXTRA_INSTALL_FLAGS: "--editable"
    steps:
      - name: Disable Crash Dialogs
        run: |
          reg add `
            "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Checkout Arrow
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Download Timezone Database
        shell: bash
        run: ci/scripts/download_tz_database.sh
      - name: Install ccache
        shell: bash
        run: |
          ci/scripts/install_ccache.sh 4.6.3 /usr
      - name: Setup ccache
        shell: bash
        run: |
          ci/scripts/ccache_setup.sh
      - name: ccache info
        id: ccache-info
        shell: bash
        run: |
          echo "cache-dir=$(ccache --get-config cache_dir)" >> $GITHUB_OUTPUT
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ steps.ccache-info.outputs.cache-dir }}
          key: cpp-ccache-windows-${{ env.CACHE_VERSION }}-${{ hashFiles('cpp/**') }}
          restore-keys: cpp-ccache-windows-${{ env.CACHE_VERSION }}-
        env:
          # We can invalidate the current cache by updating this.
          CACHE_VERSION: "2025-09-05"
      - name: Build
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          bash -c "ci/scripts/cpp_build.sh $(pwd) $(pwd)/build"
      - name: Set up Python
        uses: actions/setup-python@v5.6.0
        id: python-install
        with:
          python-version: 3.12
      - name: Install build requirements
        shell: cmd
        run: |
          bash -c "python -m pip install -r $(pwd)/python/requirements-build.txt"
      - name: Build PyArrow
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          bash -c "ci/scripts/python_build.sh $(pwd) $(pwd)/build"
      - name: Install test requirements
        shell: cmd
        run: |
          bash -c "python -m pip install -r $(pwd)/python/requirements-test.txt"
      - name: Find and run dumpbin on pyarrow.lib.pyd
        shell: pwsh
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $vc = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          $dumpbin = Join-Path $vc 'VC\Tools\MSVC'
          $msvcver = Get-ChildItem $dumpbin | Sort-Object Name -Descending | Select-Object -First 1
          $dumpbinExe = Join-Path $msvcver.FullName 'bin\Hostx64\x64\dumpbin.exe'
          $pyd = "/d/a/arrow/arrow/dist/build/python/pyarrow/lib.cp312-win_amd64.pyd"
          if (Test-Path $pyd) {
            & $dumpbinExe /DEPENDENTS $pyd
          } else {
            Write-Host "$pyd not found"
            exit 1
          }
      - name: List DLL dependencies of pyarrow.lib.pyd
        shell: cmd
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe" /DEPENDENTS D:\a\arrow\arrow\build\python\pyarrow\lib.cp312-win_amd64.pyd
      - name: Test PyArrow
        shell: cmd
        run: |
          bash -c "echo uname"
          bash -c "ci/scripts/python_test.sh $(pwd) $(pwd)/build"

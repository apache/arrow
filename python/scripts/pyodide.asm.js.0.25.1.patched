"use strict";

var _createPyodideModule = (() => {
  var _scriptDir =
    typeof document !== "undefined" && document.currentScript
      ? document.currentScript.src
      : undefined;
  if (typeof __filename !== "undefined") _scriptDir = _scriptDir || __filename;
  return function (moduleArg = {}) {
    var Module = moduleArg;
    var readyPromiseResolve, readyPromiseReject;
    Module["ready"] = new Promise((resolve, reject) => {
      readyPromiseResolve = resolve;
      readyPromiseReject = reject;
    });
    var moduleOverrides = Object.assign({}, Module);
    var arguments_ = [];
    var thisProgram = "./this.program";
    var quit_ = (status, toThrow) => {
      throw toThrow;
    };
    var ENVIRONMENT_IS_WEB = typeof window == "object";
    var ENVIRONMENT_IS_WORKER = typeof importScripts == "function";
    var ENVIRONMENT_IS_NODE =
      typeof process == "object" &&
      typeof process.versions == "object" &&
      typeof process.versions.node == "string";
    var ENVIRONMENT_IS_SHELL =
      !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
    var scriptDirectory = "";
    function locateFile(path) {
      if (Module["locateFile"]) {
        return Module["locateFile"](path, scriptDirectory);
      }
      return scriptDirectory + path;
    }
    var read_, readAsync, readBinary;
    if (ENVIRONMENT_IS_NODE) {
      var fs = require("fs");
      var nodePath = require("path");
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = nodePath.dirname(scriptDirectory) + "/";
      } else {
        scriptDirectory = __dirname + "/";
      }
      read_ = (filename, binary) => {
        filename = isFileURI(filename)
          ? new URL(filename)
          : nodePath.normalize(filename);
        return fs.readFileSync(filename, binary ? undefined : "utf8");
      };
      readBinary = (filename) => {
        var ret = read_(filename, true);
        if (!ret.buffer) {
          ret = new Uint8Array(ret);
        }
        return ret;
      };
      readAsync = (filename, onload, onerror, binary = true) => {
        filename = isFileURI(filename)
          ? new URL(filename)
          : nodePath.normalize(filename);
        fs.readFile(filename, binary ? undefined : "utf8", (err, data) => {
          if (err) onerror(err);
          else onload(binary ? data.buffer : data);
        });
      };
      if (!Module["thisProgram"] && process.argv.length > 1) {
        thisProgram = process.argv[1].replace(/\\/g, "/");
      }
      arguments_ = process.argv.slice(2);
      quit_ = (status, toThrow) => {
        process.exitCode = status;
        throw toThrow;
      };
      Module["inspect"] = () => "[Emscripten Module object]";
    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
      if (ENVIRONMENT_IS_WORKER) {
        scriptDirectory = self.location.href;
      } else if (typeof document != "undefined" && document.currentScript) {
        scriptDirectory = document.currentScript.src;
      }
      if (_scriptDir) {
        scriptDirectory = _scriptDir;
      }
      if (scriptDirectory.indexOf("blob:") !== 0) {
        scriptDirectory = scriptDirectory.substr(
          0,
          scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1,
        );
      } else {
        scriptDirectory = "";
      }
      {
        read_ = (url) => {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, false);
          xhr.send(null);
          return xhr.responseText;
        };
        if (ENVIRONMENT_IS_WORKER) {
          readBinary = (url) => {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response);
          };
        }
        readAsync = (url, onload, onerror) => {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", url, true);
          xhr.responseType = "arraybuffer";
          xhr.onload = () => {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
              onload(xhr.response);
              return;
            }
            onerror();
          };
          xhr.onerror = onerror;
          xhr.send(null);
        };
      }
    } else {
    }
    var out = Module["print"] || console.log.bind(console);
    var err = Module["printErr"] || console.error.bind(console);
    Object.assign(Module, moduleOverrides);
    moduleOverrides = null;
    if (Module["arguments"]) arguments_ = Module["arguments"];
    if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
    if (Module["quit"]) quit_ = Module["quit"];
    if (!Module.wrapException) {
      Module.wrapException = (e) => e;
    }
    var dynamicLibraries = Module["dynamicLibraries"] || [];
    var wasmBinary;
    if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
    var noExitRuntime = Module["noExitRuntime"] || true;
    if (typeof WebAssembly != "object") {
      abort("no native wasm support detected");
    }
    var wasmMemory;
    var ABORT = false;
    var EXITSTATUS;
    function assert(condition, text) {
      if (!condition) {
        abort(text);
      }
    }
    var HEAP,
      HEAP8,
      HEAPU8,
      HEAP16,
      HEAPU16,
      HEAP32,
      HEAPU32,
      HEAPF32,
      HEAP64,
      HEAPU64,
      HEAPF64;
    function updateMemoryViews() {
      var b = wasmMemory.buffer;
      Module["HEAP8"] = HEAP8 = new Int8Array(b);
      Module["HEAP16"] = HEAP16 = new Int16Array(b);
      Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
      Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
      Module["HEAP32"] = HEAP32 = new Int32Array(b);
      Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
      Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
      Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
      Module["HEAP64"] = HEAP64 = new BigInt64Array(b);
      Module["HEAPU64"] = HEAPU64 = new BigUint64Array(b);
    }
    var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 20971520;
    assert(
      INITIAL_MEMORY >= 5242880,
      "INITIAL_MEMORY should be larger than STACK_SIZE, was " +
        INITIAL_MEMORY +
        "! (STACK_SIZE=" +
        5242880 +
        ")",
    );
    if (Module["wasmMemory"]) {
      wasmMemory = Module["wasmMemory"];
    } else {
      wasmMemory = new WebAssembly.Memory({
        initial: INITIAL_MEMORY / 65536,
        maximum: 2147483648 / 65536,
      });
    }
    updateMemoryViews();
    INITIAL_MEMORY = wasmMemory.buffer.byteLength;
    var __ATPRERUN__ = [];
    var __ATINIT__ = [];
    var __ATMAIN__ = [];
    var __ATEXIT__ = [];
    var __ATPOSTRUN__ = [];
    var __RELOC_FUNCS__ = [];
    var runtimeInitialized = false;
    var runtimeKeepaliveCounter = 0;
    function keepRuntimeAlive() {
      return noExitRuntime || runtimeKeepaliveCounter > 0;
    }
    function preRun() {
      if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function")
          Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
          addOnPreRun(Module["preRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPRERUN__);
    }
    function initRuntime() {
      runtimeInitialized = true;
      callRuntimeCallbacks(__RELOC_FUNCS__);
      if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
      FS.ignorePermissions = false;
      TTY.init();
      SOCKFS.root = FS.mount(SOCKFS, {}, null);
      PIPEFS.root = FS.mount(PIPEFS, {}, null);
      callRuntimeCallbacks(__ATINIT__);
    }
    function preMain() {
      callRuntimeCallbacks(__ATMAIN__);
    }
    function postRun() {
      if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function")
          Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
          addOnPostRun(Module["postRun"].shift());
        }
      }
      callRuntimeCallbacks(__ATPOSTRUN__);
    }
    function addOnPreRun(cb) {
      __ATPRERUN__.unshift(cb);
    }
    function addOnInit(cb) {
      __ATINIT__.unshift(cb);
    }
    function addOnPreMain(cb) {
      __ATMAIN__.unshift(cb);
    }
    function addOnExit(cb) {}
    function addOnPostRun(cb) {
      __ATPOSTRUN__.unshift(cb);
    }
    var runDependencies = 0;
    var runDependencyWatcher = null;
    var dependenciesFulfilled = null;
    function getUniqueRunDependency(id) {
      return id;
    }
    function addRunDependency(id) {
      runDependencies++;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
    }
    function removeRunDependency(id) {
      runDependencies--;
      if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies);
      }
      if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
          var callback = dependenciesFulfilled;
          dependenciesFulfilled = null;
          callback();
        }
      }
    }
    function abort(what) {
      if (Module["onAbort"]) {
        Module["onAbort"](what);
      }
      what = "Aborted(" + what + ")";
      err(what);
      ABORT = true;
      EXITSTATUS = 1;
      what += ". Build with -sASSERTIONS for more info.";
      var e = new WebAssembly.RuntimeError(what);
      readyPromiseReject(e);
      throw e;
    }
    var dataURIPrefix = "data:application/octet-stream;base64,";
    function isDataURI(filename) {
      return filename.startsWith(dataURIPrefix);
    }
    function isFileURI(filename) {
      return filename.startsWith("file://");
    }
    var wasmBinaryFile;
    wasmBinaryFile = "pyodide.asm.wasm";
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = locateFile(wasmBinaryFile);
    }
    function getBinarySync(file) {
      if (file == wasmBinaryFile && wasmBinary) {
        return new Uint8Array(wasmBinary);
      }
      if (readBinary) {
        return readBinary(file);
      }
      throw "both async and sync fetching of the wasm failed";
    }
    function getBinaryPromise(binaryFile) {
      if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
        if (typeof fetch == "function" && !isFileURI(binaryFile)) {
          return fetch(binaryFile, { credentials: "same-origin" })
            .then((response) => {
              if (!response["ok"]) {
                throw "failed to load wasm binary file at '" + binaryFile + "'";
              }
              return response["arrayBuffer"]();
            })
            .catch(() => getBinarySync(binaryFile));
        } else if (readAsync) {
          return new Promise((resolve, reject) => {
            readAsync(
              binaryFile,
              (response) => resolve(new Uint8Array(response)),
              reject,
            );
          });
        }
      }
      return Promise.resolve().then(() => getBinarySync(binaryFile));
    }
    function instantiateArrayBuffer(binaryFile, imports, receiver) {
      return getBinaryPromise(binaryFile)
        .then((binary) => WebAssembly.instantiate(binary, imports))
        .then((instance) => instance)
        .then(receiver, (reason) => {
          err(`failed to asynchronously prepare wasm: ${reason}`);
          abort(reason);
        });
    }
    function instantiateAsync(binary, binaryFile, imports, callback) {
      if (
        !binary &&
        typeof WebAssembly.instantiateStreaming == "function" &&
        !isDataURI(binaryFile) &&
        !isFileURI(binaryFile) &&
        !ENVIRONMENT_IS_NODE &&
        typeof fetch == "function"
      ) {
        return fetch(binaryFile, { credentials: "same-origin" }).then(
          (response) => {
            var result = WebAssembly.instantiateStreaming(response, imports);
            return result.then(callback, function (reason) {
              err(`wasm streaming compile failed: ${reason}`);
              err("falling back to ArrayBuffer instantiation");
              return instantiateArrayBuffer(binaryFile, imports, callback);
            });
          },
        );
      }
      return instantiateArrayBuffer(binaryFile, imports, callback);
    }
    function createWasm() {
      if (Module.adjustWasmImports) {
        Module.adjustWasmImports(wasmImports);
      }
      var info = {
        env: wasmImports,
        wasi_snapshot_preview1: wasmImports,
        "GOT.mem": new Proxy(wasmImports, GOTHandler),
        "GOT.func": new Proxy(wasmImports, GOTHandler),
      };
      function receiveInstance(instance, module) {
        wasmExports = instance.exports;
        wasmExports = relocateExports(wasmExports, 1024);
        var metadata = getDylinkMetadata(module);
        if (metadata.neededDynlibs) {
          dynamicLibraries = metadata.neededDynlibs.concat(dynamicLibraries);
        }
        mergeLibSymbols(wasmExports, "main");
        LDSO.init();
        loadDylibs();
        addOnInit(wasmExports["__wasm_call_ctors"]);
        __RELOC_FUNCS__.push(wasmExports["__wasm_apply_data_relocs"]);
        removeRunDependency("wasm-instantiate");
        return wasmExports;
      }
      addRunDependency("wasm-instantiate");
      function receiveInstantiationResult(result) {
        receiveInstance(result["instance"], result["module"]);
      }
      if (Module["instantiateWasm"]) {
        try {
          return Module["instantiateWasm"](info, receiveInstance);
        } catch (e) {
          err(`Module.instantiateWasm callback failed with error: ${e}`);
          readyPromiseReject(e);
        }
      }
      instantiateAsync(
        wasmBinary,
        wasmBinaryFile,
        info,
        receiveInstantiationResult,
      ).catch(readyPromiseReject);
      return {};
    }
    var ASM_CONSTS = {
      3885483: () => {
        throw new Error("intentionally triggered fatal error!");
      },
      3885540: () => {
        wasmImports["open64"] = wasmImports["open"];
      },
      3885589: () => Module.jspiSupported,
    };
    function console_error(msg) {
      let jsmsg = UTF8ToString(msg);
      console.error(jsmsg);
    }
    function console_error_obj(obj) {
      console.error(obj);
    }
    function new_error(type, msg, err) {
      return new API.PythonError(UTF8ToString(type), UTF8ToString(msg), err);
    }
    new_error.sig = "eiii";
    function fail_test() {
      API.fail_test = true;
    }
    fail_test.sig = "v";
    function raw_call_js(func) {
      func();
    }
    raw_call_js.sig = "ve";
    function hiwire_invalid_ref(type, ref) {
      API.fail_test = !!1;
      if (type === 1 && !ref) {
        if (_PyErr_Occurred()) {
          const e = _wrap_exception();
          console.error(
            "Pyodide internal error: Argument to hiwire_get is falsy. This was " +
              "probably because the Python error indicator was set when get_value was " +
              "called. The Python error that caused this was:",
            e,
          );
          throw e;
        } else {
          const msg =
            "Pyodide internal error: Argument to hiwire_get is falsy (but error " +
            "indicator is not set).";
          console.error(msg);
          throw new Error(msg);
        }
      }
      const typestr = { [1]: "get", [2]: "incref", [3]: "decref" }[type];
      const msg =
        `hiwire_${typestr} on invalid reference ${ref}. This is most likely due ` +
        "to use after free. It may also be due to memory corruption.";
      console.error(msg);
      throw new Error(msg);
    }
    hiwire_invalid_ref.sig = "vii";
    function set_pyodide_module(mod) {
      API._pyodide = mod;
    }
    set_pyodide_module.sig = "ve";
    function js2python_immutable_js(value) {
      try {
        let result = Module.js2python_convertImmutable(value);
        if (result !== undefined) {
          return result;
        }
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return 0;
      }
      errNoRet();
    }
    js2python_immutable_js.sig = "ie";
    function js2python_js(value) {
      try {
        let result = Module.js2python_convertImmutable(value);
        if (result !== undefined) {
          return result;
        }
        return _JsProxy_create(value);
      } catch (e) {
        Module.handle_js_error(e);
        return 0;
      }
      errNoRet();
    }
    js2python_js.sig = "ie";
    function js2python_convert(v, depth, defaultConverter) {
      try {
        return Module.js2python_convert(v, {
          depth: depth,
          defaultConverter: defaultConverter,
        });
      } catch (e) {
        Module.handle_js_error(e);
        return 0;
      }
      errNoRet();
    }
    js2python_convert.sig = "ieie";
    function js2python_init() {
      try {
        {
          0;
          let PropagateError = Module._PropagatePythonError;
          function js2python_string(value) {
            let max_code_point = 0;
            let num_code_points = 0;
            for (let c of value) {
              num_code_points++;
              let code_point = c.codePointAt(0);
              max_code_point =
                code_point > max_code_point ? code_point : max_code_point;
            }
            let result = _PyUnicode_New(num_code_points, max_code_point);
            if (result === 0) {
              throw new PropagateError();
            }
            let ptr = _PyUnicode_Data(result);
            if (max_code_point > 65535) {
              for (let c of value) {
                HEAPU32[ptr / 4] = c.codePointAt(0);
                ptr += 4;
              }
            } else if (max_code_point > 255) {
              for (let c of value) {
                HEAPU16[ptr / 2] = c.codePointAt(0);
                ptr += 2;
              }
            } else {
              for (let c of value) {
                HEAPU8[ptr] = c.codePointAt(0);
                ptr += 1;
              }
            }
            return result;
          }
          function js2python_bigint(value) {
            let value_orig = value;
            let length = 0;
            if (value < 0) {
              value = -value;
            }
            value <<= BigInt(1);
            while (value) {
              length++;
              value >>= BigInt(32);
            }
            let stackTop = stackSave();
            let ptr = stackAlloc(length * 4);
            value = value_orig;
            for (let i = 0; i < length; i++) {
              HEAPU32[(ptr >> 2) + i] = Number(value & BigInt(4294967295));
              value >>= BigInt(32);
            }
            let result = __PyLong_FromByteArray(ptr, length * 4, !!1, !!1);
            stackRestore(stackTop);
            return result;
          }
          function js2python_convertImmutable(value) {
            let result = js2python_convertImmutableInner(value);
            if (result === 0) {
              throw new PropagateError();
            }
            return result;
          }
          Module.js2python_convertImmutable = js2python_convertImmutable;
          function js2python_convertImmutableInner(value) {
            let type = typeof value;
            if (type === "string") {
              return js2python_string(value);
            } else if (type === "number") {
              if (Number.isSafeInteger(value)) {
                return _PyLong_FromDouble(value);
              } else {
                return _PyFloat_FromDouble(value);
              }
            } else if (type === "bigint") {
              return js2python_bigint(value);
            } else if (value === undefined || value === null) {
              return __js2python_none();
            } else if (value === !!1) {
              return __js2python_true();
            } else if (value === !!0) {
              return __js2python_false();
            } else if (API.isPyProxy(value)) {
              const { props: props, shared: shared } =
                Module.PyProxy_getAttrs(value);
              if (props.roundtrip) {
                return _JsProxy_create(value);
              } else {
                return __js2python_pyproxy(shared.ptr);
              }
            }
            return undefined;
          }
          function js2python_convertList(obj, context) {
            let list = _PyList_New(obj.length);
            if (list === 0) {
              return 0;
            }
            let item = 0;
            try {
              context.cache.set(obj, list);
              for (let i = 0; i < obj.length; i++) {
                item = js2python_convert_with_context(obj[i], context);
                _Py_IncRef(item);
                if (_PyList_SetItem(list, i, item) === -1) {
                  throw new PropagateError();
                }
                _Py_DecRef(item);
                item = 0;
              }
            } catch (e) {
              _Py_DecRef(item);
              _Py_DecRef(list);
              throw e;
            }
            return list;
          }
          function js2python_convertMap(obj, entries, context) {
            let dict = _PyDict_New();
            if (dict === 0) {
              return 0;
            }
            let key_py = 0;
            let value_py = 0;
            try {
              context.cache.set(obj, dict);
              for (let [key_js, value_js] of entries) {
                key_py = js2python_convertImmutable(key_js);
                if (key_py === undefined) {
                  let key_type =
                    (key_js.constructor && key_js.constructor.name) ||
                    typeof key_js;
                  throw new Error(
                    `Cannot use key of type ${key_type} as a key to a Python dict`,
                  );
                }
                value_py = js2python_convert_with_context(value_js, context);
                if (_PyDict_SetItem(dict, key_py, value_py) === -1) {
                  throw new PropagateError();
                }
                _Py_DecRef(key_py);
                key_py = 0;
                _Py_DecRef(value_py);
                value_py = 0;
              }
            } catch (e) {
              _Py_DecRef(key_py);
              _Py_DecRef(value_py);
              _Py_DecRef(dict);
              throw e;
            }
            return dict;
          }
          function js2python_convertSet(obj, context) {
            let set = _PySet_New(0);
            if (set === 0) {
              return 0;
            }
            let key_py = 0;
            try {
              context.cache.set(obj, set);
              for (let key_js of obj) {
                key_py = js2python_convertImmutable(key_js);
                if (key_py === undefined) {
                  let key_type =
                    (key_js.constructor && key_js.constructor.name) ||
                    typeof key_js;
                  throw new Error(
                    `Cannot use key of type ${key_type} as a key to a Python set`,
                  );
                }
                const err = _PySet_Add(set, key_py);
                if (err === -1) {
                  throw new PropagateError();
                }
                _Py_DecRef(key_py);
                key_py = 0;
              }
            } catch (e) {
              _Py_DecRef(key_py);
              _Py_DecRef(set);
              throw e;
            }
            return set;
          }
          function checkBoolIntCollision(obj, ty) {
            if (obj.has(1) && obj.has(!!1)) {
              throw new Error(
                `Cannot faithfully convert ${ty} into Python since it ` +
                  "contains both 1 and true as keys.",
              );
            }
            if (obj.has(0) && obj.has(!!0)) {
              throw new Error(
                `Cannot faithfully convert ${ty} into Python since it ` +
                  "contains both 0 and false as keys.",
              );
            }
          }
          function js2python_convertOther(value, context) {
            let typeTag = getTypeTag(value);
            if (
              Array.isArray(value) ||
              value === "[object HTMLCollection]" ||
              value === "[object NodeList]"
            ) {
              return js2python_convertList(value, context);
            }
            if (typeTag === "[object Map]" || value instanceof Map) {
              checkBoolIntCollision(value, "Map");
              return js2python_convertMap(value, value.entries(), context);
            }
            if (typeTag === "[object Set]" || value instanceof Set) {
              checkBoolIntCollision(value, "Set");
              return js2python_convertSet(value, context);
            }
            if (
              typeTag === "[object Object]" &&
              (value.constructor === undefined ||
                value.constructor.name === "Object")
            ) {
              return js2python_convertMap(
                value,
                Object.entries(value),
                context,
              );
            }
            if (
              typeTag === "[object ArrayBuffer]" ||
              ArrayBuffer.isView(value)
            ) {
              let [format_utf8, itemsize] = Module.get_buffer_datatype(value);
              return _JsBuffer_CopyIntoMemoryView(
                value,
                value.byteLength,
                format_utf8,
                itemsize,
              );
            }
            return undefined;
          }
          function js2python_convert_with_context(value, context) {
            let result = js2python_convertImmutable(value);
            if (result !== undefined) {
              return result;
            }
            if (context.depth === 0) {
              return _JsProxy_create(value);
            }
            result = context.cache.get(value);
            if (result !== undefined) {
              return result;
            }
            context.depth--;
            try {
              result = js2python_convertOther(value, context);
              if (result !== undefined) {
                return result;
              }
              if (context.defaultConverter === undefined) {
                return _JsProxy_create(value);
              }
              let result_js = context.defaultConverter(
                value,
                context.converter,
                context.cacheConversion,
              );
              result = js2python_convertImmutable(result_js);
              if (API.isPyProxy(result_js)) {
                Module.pyproxy_destroy(result_js, "", !!0);
              }
              if (result !== undefined) {
                return result;
              }
              return _JsProxy_create(result_js);
            } finally {
              context.depth++;
            }
          }
          function js2python_convert(
            val,
            { depth: depth, defaultConverter: defaultConverter },
          ) {
            let context = {
              cache: new Map(),
              depth: depth,
              defaultConverter: defaultConverter,
              converter: (x) =>
                Module.pyproxy_new(js2python_convert_with_context(x, context)),
              cacheConversion(input, output) {
                if (API.isPyProxy(output)) {
                  context.cache.set(input, Module.PyProxy_getPtr(output));
                } else {
                  throw new Error("Second argument should be a PyProxy!");
                }
              },
            };
            return js2python_convert_with_context(val, context);
          }
          Module.js2python_convert = js2python_convert;
        }
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    js2python_init.sig = "i";
    function isReservedWord(word) {
      if (!Module.pythonReservedWords) {
        Module.pythonReservedWords = new Set([
          "False",
          "await",
          "else",
          "import",
          "pass",
          "None",
          "break",
          "except",
          "in",
          "raise",
          "True",
          "class",
          "finally",
          "is",
          "return",
          "and",
          "continue",
          "for",
          "lambda",
          "try",
          "as",
          "def",
          "from",
          "nonlocal",
          "while",
          "assert",
          "del",
          "global",
          "not",
          "with",
          "async",
          "elif",
          "if",
          "or",
          "yield",
        ]);
      }
      return Module.pythonReservedWords.has(word);
    }
    function normalizeReservedWords(word) {
      const noTrailing_ = word.replace(/_*$/, "");
      if (!isReservedWord(noTrailing_)) {
        return word;
      }
      if (noTrailing_ !== word) {
        return word.slice(0, -1);
      }
      return word;
    }
    function JsProxy_GetAttr_js(jsobj, ptrkey) {
      try {
        const jskey = normalizeReservedWords(UTF8ToString(ptrkey));
        const result = jsobj[jskey];
        if (result === undefined && !(jskey in jsobj)) {
          return null;
        }
        return nullToUndefined(result);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsProxy_GetAttr_js.sig = "eei";
    function JsProxy_SetAttr_js(jsobj, ptrkey, jsval) {
      try {
        let jskey = normalizeReservedWords(UTF8ToString(ptrkey));
        jsobj[jskey] = jsval;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsProxy_SetAttr_js.sig = "ieie";
    function JsProxy_DelAttr_js(jsobj, ptrkey) {
      try {
        let jskey = normalizeReservedWords(UTF8ToString(ptrkey));
        delete jsobj[jskey];
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsProxy_DelAttr_js.sig = "iei";
    function JsProxy_GetIter_js(obj) {
      try {
        return obj[Symbol.iterator]();
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsProxy_GetIter_js.sig = "ee";
    function handle_next_result_js(res, done, msg) {
      try {
        let errmsg;
        if (typeof res !== "object") {
          errmsg = `Result should have type "object" not "${typeof res}"`;
        } else if (typeof res.done === "undefined") {
          if (typeof res.then === "function") {
            errmsg = `Result was a promise, use anext() / asend() / athrow() instead.`;
          } else {
            errmsg = `Result has no "done" field.`;
          }
        }
        if (errmsg) {
          HEAPU32[(msg >> 2) + 0] = stringToNewUTF8(errmsg);
          HEAPU32[(done >> 2) + 0] = -1;
        }
        HEAPU32[(done >> 2) + 0] = res.done;
        return res.value;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    handle_next_result_js.sig = "eeii";
    function JsException_new_helper(name_ptr, message_ptr, stack_ptr) {
      try {
        let name = UTF8ToString(name_ptr);
        let message = UTF8ToString(message_ptr);
        let stack = UTF8ToString(stack_ptr);
        return API.deserializeError(name, message, stack);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsException_new_helper.sig = "eiii";
    function JsProxy_GetAsyncIter_js(obj) {
      try {
        return obj[Symbol.asyncIterator]();
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsProxy_GetAsyncIter_js.sig = "ee";
    function _agen_handle_result_js(
      p,
      msg,
      set_result,
      set_exception,
      closing,
    ) {
      try {
        let errmsg;
        if (typeof p !== "object") {
          errmsg = `Result of anext() should be object not ${typeof p}`;
        } else if (typeof p.then !== "function") {
          if (typeof p.done === "boolean") {
            errmsg = `Result of anext() was not a promise, use next() instead.`;
          } else {
            errmsg = `Result of anext() was not a promise.`;
          }
        }
        if (errmsg) {
          HEAPU32[(msg >> 2) + 0] = stringToNewUTF8(errmsg);
          return -1;
        }
        _Py_IncRef(set_result);
        _Py_IncRef(set_exception);
        p.then(
          ({ done: done, value: value }) => {
            __agen_handle_result_js_c(
              set_result,
              set_exception,
              done,
              value,
              closing,
            );
          },
          (err) => {
            __agen_handle_result_js_c(
              set_result,
              set_exception,
              -1,
              err,
              closing,
            );
          },
        ).finally(() => {
          _Py_DecRef(set_result);
          _Py_DecRef(set_exception);
        });
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    _agen_handle_result_js.sig = "ieiiii";
    function get_length_helper(val) {
      try {
        let result;
        if (typeof val.size === "number") {
          result = val.size;
        } else if (typeof val.length === "number") {
          result = val.length;
        } else {
          return -2;
        }
        if (result < 0) {
          return -3;
        }
        if (result > 2147483647) {
          return -4;
        }
        return result;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    get_length_helper.sig = "ie";
    function get_length_string(val) {
      try {
        let result;
        if (typeof val.size === "number") {
          result = val.size;
        } else if (typeof val.length === "number") {
          result = val.length;
        }
        return stringToNewUTF8(" " + result.toString());
      } catch (e) {
        Module.handle_js_error(e);
        return 0;
      }
      errNoRet();
    }
    get_length_string.sig = "ie";
    function destroy_jsarray_entries(array) {
      for (let v of array) {
        try {
          if (typeof v.destroy === "function") {
            v.destroy();
          }
        } catch (e) {
          console.warn("Weird error:", e);
        }
      }
    }
    destroy_jsarray_entries.sig = "ve";
    function JsArray_repeat_js(o, count) {
      try {
        return Array.from({ length: count }, () => o).flat();
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsArray_repeat_js.sig = "eei";
    function JsArray_inplace_repeat_js(o, count) {
      try {
        o.splice(0, o.length, ...Array.from({ length: count }, () => o).flat());
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsArray_inplace_repeat_js.sig = "iei";
    function JsArray_reversed_iterator(array) {
      return new ReversedIterator(array);
    }
    class ReversedIterator {
      constructor(array) {
        this._array = array;
        this._i = array.length - 1;
      }
      __length_hint__() {
        return this._array.length;
      }
      [Symbol.toStringTag]() {
        return "ReverseIterator";
      }
      next() {
        const i = this._i;
        const a = this._array;
        const done = i < 0;
        const value = done ? undefined : a[i];
        this._i--;
        return { done: done, value: value };
      }
    }
    JsArray_reversed_iterator.sig = "ee";
    function JsArray_index_js(o, v, start, stop) {
      try {
        for (let i = start; i < stop; i++) {
          if (o[i] === v) {
            return i;
          }
        }
        return -1;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsArray_index_js.sig = "ieeii";
    function JsArray_count_js(o, v) {
      try {
        let result = 0;
        for (let i = 0; i < o.length; i++) {
          if (o[i] === v) {
            result++;
          }
        }
        return result;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsArray_count_js.sig = "iee";
    function JsArray_reverse_js(array) {
      try {
        array.reverse();
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsArray_reverse_js.sig = "ie";
    function JsProxy_subscript_js(obj, key) {
      try {
        let result = obj.get(key);
        if (result === undefined) {
          if (obj.has && typeof obj.has === "function" && !obj.has(key)) {
            return null;
          }
        }
        return nullToUndefined(result);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsProxy_subscript_js.sig = "eee";
    function JsMap_GetIter_js(obj) {
      try {
        let result;
        if (typeof obj.keys === "function") {
          result = obj.keys();
        } else {
          result = obj[Symbol.iterator]();
        }
        return result;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsMap_GetIter_js.sig = "ee";
    function JsMap_clear_js(map) {
      try {
        if (map && typeof map.clear === "function") {
          map.clear();
          return 1;
        }
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsMap_clear_js.sig = "ie";
    function JsProxy_Dir_js(jsobj) {
      try {
        let result = [];
        do {
          const names = Object.getOwnPropertyNames(jsobj);
          result.push(
            ...names
              .filter((s) => {
                let c = s.charCodeAt(0);
                return c < 48 || c > 57;
              })
              .map((word) =>
                isReservedWord(word.replace(/_*$/, "")) ? word + "_" : word,
              ),
          );
        } while ((jsobj = Object.getPrototypeOf(jsobj)));
        return result;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsProxy_Dir_js.sig = "ee";
    function JsProxy_Bool_js(val) {
      try {
        if (!val) {
          return !!0;
        }
        if (val.size === 0) {
          if (/HTML[A-Za-z]*Element/.test(getTypeTag(val))) {
            return !!1;
          }
          return !!0;
        }
        if (val.length === 0 && JsvArray_Check(val)) {
          return !!0;
        }
        if (val.byteLength === 0) {
          return !!0;
        }
        return !!1;
      } catch (e) {
        return !!0;
      }
    }
    JsProxy_Bool_js.sig = "ie";
    function JsObjMap_GetIter_js(obj) {
      try {
        return Module.iterObject(obj);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsObjMap_GetIter_js.sig = "ee";
    function JsObjMap_length_js(obj) {
      try {
        let length = 0;
        for (let _ of Module.iterObject(obj)) {
          length++;
        }
        return length;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsObjMap_length_js.sig = "ie";
    function JsObjMap_subscript_js(obj, key) {
      try {
        if (!Object.prototype.hasOwnProperty.call(obj, key)) {
          return null;
        }
        return obj[key];
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsObjMap_subscript_js.sig = "eee";
    function JsObjMap_ass_subscript_js(obj, key, value) {
      try {
        if (value === null) {
          if (!Object.prototype.hasOwnProperty.call(obj, key)) {
            return -1;
          }
          delete obj[key];
        } else {
          obj[key] = value;
        }
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsObjMap_ass_subscript_js.sig = "ieee";
    function JsObjMap_contains_js(obj, key) {
      try {
        return Object.prototype.hasOwnProperty.call(obj, key);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsObjMap_contains_js.sig = "iee";
    function get_async_js_call_done_callback(proxies) {
      try {
        return function (result) {
          let msg =
            "This borrowed proxy was automatically destroyed " +
            "at the end of an asynchronous function call. Try " +
            "using create_proxy or create_once_callable.";
          for (let px of proxies) {
            Module.pyproxy_destroy(px, msg, !!0);
          }
          if (API.isPyProxy(result)) {
            Module.pyproxy_destroy(result, msg, !!0);
          }
        };
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    get_async_js_call_done_callback.sig = "ee";
    function wrap_generator(gen, proxies) {
      try {
        proxies = new Set(proxies);
        const msg =
          "This borrowed proxy was automatically destroyed " +
          "when a generator completed execution. Try " +
          "using create_proxy or create_once_callable.";
        function cleanup() {
          proxies.forEach((px) => Module.pyproxy_destroy(px, msg));
        }
        function wrap(funcname) {
          return function (val) {
            if (API.isPyProxy(val)) {
              val = val.copy();
              proxies.add(val);
            }
            let res;
            try {
              res = gen[funcname](val);
            } catch (e) {
              cleanup();
              throw e;
            }
            if (res.done) {
              proxies.delete(res.value);
              cleanup();
            }
            return res;
          };
        }
        return {
          get [Symbol.toStringTag]() {
            return "Generator";
          },
          [Symbol.iterator]() {
            return this;
          },
          next: wrap("next"),
          throw: wrap("throw"),
          return: wrap("return"),
        };
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    wrap_generator.sig = "eee";
    function wrap_async_generator(gen, proxies) {
      try {
        proxies = new Set(proxies);
        const msg =
          "This borrowed proxy was automatically destroyed " +
          "when an asynchronous generator completed execution. Try " +
          "using create_proxy or create_once_callable.";
        function cleanup() {
          proxies.forEach((px) => Module.pyproxy_destroy(px, msg));
        }
        function wrap(funcname) {
          return async function (val) {
            if (API.isPyProxy(val)) {
              val = val.copy();
              proxies.add(val);
            }
            let res;
            try {
              res = await gen[funcname](val);
            } catch (e) {
              cleanup();
              throw e;
            }
            if (res.done) {
              proxies.delete(res.value);
              cleanup();
            }
            return res;
          };
        }
        return {
          get [Symbol.toStringTag]() {
            return "AsyncGenerator";
          },
          [Symbol.asyncIterator]() {
            return this;
          },
          next: wrap("next"),
          throw: wrap("throw"),
          return: wrap("return"),
        };
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    wrap_async_generator.sig = "eee";
    function JsBuffer_DecodeString_js(buffer, encoding) {
      try {
        let encoding_js;
        if (encoding) {
          encoding_js = UTF8ToString(encoding);
        }
        const decoder = new TextDecoder(encoding_js, {
          fatal: !!1,
          ignoreBOM: !!1,
        });
        let res;
        try {
          res = decoder.decode(buffer);
        } catch (e) {
          if (e instanceof TypeError) {
            return null;
          }
          throw e;
        }
        return res;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsBuffer_DecodeString_js.sig = "eei";
    function JsBuffer_get_info(
      jsobj,
      byteLength_ptr,
      format_ptr,
      size_ptr,
      checked_ptr,
    ) {
      const [format_utf8, size, checked] = Module.get_buffer_datatype(jsobj);
      HEAPU32[(byteLength_ptr >> 2) + 0] = jsobj.byteLength;
      HEAPU32[(format_ptr >> 2) + 0] = format_utf8;
      HEAPU32[(size_ptr >> 2) + 0] = size;
      HEAPU8[checked_ptr + 0] = checked;
    }
    JsBuffer_get_info.sig = "veiiii";
    function JsDoubleProxy_unwrap_helper(id) {
      try {
        return Module.PyProxy_getPtr(id);
      } catch (e) {
        Module.handle_js_error(e);
        return 0;
      }
      errNoRet();
    }
    JsDoubleProxy_unwrap_helper.sig = "ie";
    function JsProxy_compute_typeflags(obj) {
      try {
        let type_flags = 0;
        if (API.isPyProxy(obj) && !pyproxyIsAlive(obj)) {
          return 0;
        }
        const typeTag = getTypeTag(obj);
        function safeBool(cb) {
          try {
            return cb();
          } catch (e) {
            return !!0;
          }
        }
        const isBufferView = safeBool(() => ArrayBuffer.isView(obj));
        const isArray = safeBool(() => Array.isArray(obj));
        const constructorName = safeBool(() => obj.constructor.name) || "";
        if (typeof obj === "function") {
          type_flags |= 1 << 9;
        }
        if (hasMethod(obj, "then")) {
          type_flags |= 1 << 7;
        }
        if (hasMethod(obj, Symbol.iterator)) {
          type_flags |= 1 << 0;
        }
        if (hasMethod(obj, Symbol.asyncIterator)) {
          type_flags |= 1 << 15;
        }
        if (
          hasMethod(obj, "next") &&
          (hasMethod(obj, Symbol.iterator) ||
            !hasMethod(obj, Symbol.asyncIterator))
        ) {
          type_flags |= 1 << 1;
        }
        if (
          hasMethod(obj, "next") &&
          (!hasMethod(obj, Symbol.iterator) ||
            hasMethod(obj, Symbol.asyncIterator))
        ) {
          type_flags |= 1 << 18;
        }
        if (
          hasProperty(obj, "size") ||
          (hasProperty(obj, "length") && typeof obj !== "function")
        ) {
          type_flags |= 1 << 2;
        }
        if (hasMethod(obj, "get")) {
          type_flags |= 1 << 3;
        }
        if (hasMethod(obj, "set")) {
          type_flags |= 1 << 4;
        }
        if (hasMethod(obj, "has")) {
          type_flags |= 1 << 5;
        }
        if (hasMethod(obj, "includes")) {
          type_flags |= 1 << 6;
        }
        if (
          (isBufferView || typeTag === "[object ArrayBuffer]") &&
          !(type_flags & (1 << 9))
        ) {
          type_flags |= 1 << 8;
        }
        if (API.isPyProxy(obj)) {
          type_flags |= 1 << 13;
        }
        if (isArray) {
          type_flags |= 1 << 10;
        }
        if (
          typeTag === "[object HTMLCollection]" ||
          typeTag === "[object NodeList]"
        ) {
          type_flags |= 1 << 11;
        }
        if (isBufferView && typeTag !== "[object DataView]") {
          type_flags |= 1 << 12;
        }
        if (typeTag === "[object Generator]") {
          type_flags |= 1 << 16;
        }
        if (typeTag === "[object AsyncGenerator]") {
          type_flags |= 1 << 17;
        }
        if (
          hasProperty(obj, "name") &&
          hasProperty(obj, "message") &&
          (hasProperty(obj, "stack") || constructorName === "DOMException") &&
          !(type_flags & ((1 << 9) | (1 << 8)))
        ) {
          type_flags |= 1 << 19;
        }
        return type_flags;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsProxy_compute_typeflags.sig = "ie";
    function is_comlink_proxy(obj) {
      try {
        return !!(API.Comlink && value[API.Comlink.createEndpoint]);
      } catch (e) {
        return !!0;
      }
    }
    is_comlink_proxy.sig = "ie";
    function throw_no_gil() {
      throw new API.NoGilError(
        "Attempted to use PyProxy when Python GIL not held",
      );
    }
    throw_no_gil.sig = "v";
    function pyproxy_Check(val) {
      return API.isPyProxy(val);
    }
    pyproxy_Check.sig = "ie";
    function pyproxy_AsPyObject(val) {
      if (!API.isPyProxy(val) || !pyproxyIsAlive(val)) {
        return 0;
      }
      return Module.PyProxy_getPtr(val);
    }
    pyproxy_AsPyObject.sig = "ie";
    function destroy_proxies(proxies, msg_ptr) {
      let msg = undefined;
      if (msg_ptr) {
        msg = _JsvString_FromId(msg_ptr);
      }
      for (let px of proxies) {
        Module.pyproxy_destroy(px, msg, false);
      }
    }
    destroy_proxies.sig = "vei";
    function gc_register_proxies(proxies) {
      for (let px of proxies) {
        Module.gc_register_proxy(Module.PyProxy_getAttrs(px).shared);
      }
    }
    gc_register_proxies.sig = "ve";
    function destroy_proxy(px, msg_ptr) {
      const { shared: shared, props: props } = Module.PyProxy_getAttrsQuiet(px);
      if (!shared.ptr) {
        return;
      }
      if (props.roundtrip) {
        return;
      }
      let msg = undefined;
      if (msg_ptr) {
        msg = _JsvString_FromId(msg_ptr);
      }
      Module.pyproxy_destroy(px, msg, false);
    }
    destroy_proxy.sig = "vei";
    function proxy_cache_get(proxyCache, descr) {
      const proxy = proxyCache.get(descr);
      if (!proxy) {
        return null;
      }
      if (pyproxyIsAlive(proxy)) {
        return proxy;
      } else {
        proxyCache.delete(descr);
        return null;
      }
    }
    proxy_cache_get.sig = "eei";
    function proxy_cache_set(proxyCache, descr, proxy) {
      proxyCache.set(descr, proxy);
    }
    proxy_cache_set.sig = "veie";
    function _pyproxyGen_make_result(done, value) {
      return { done: !!done, value: value };
    }
    _pyproxyGen_make_result.sig = "eie";
    function array_to_js(array, len) {
      return Array.from(HEAP32.subarray(array / 4, array / 4 + len));
    }
    array_to_js.sig = "eii";
    function _pyproxy_get_buffer_result(
      start_ptr,
      smallest_ptr,
      largest_ptr,
      readonly,
      format,
      itemsize,
      shape,
      strides,
      view,
      c_contiguous,
      f_contiguous,
      sentinel,
    ) {
      format = UTF8ToString(format);
      return {
        start_ptr: start_ptr,
        smallest_ptr: smallest_ptr,
        largest_ptr: largest_ptr,
        readonly: readonly,
        format: format,
        itemsize: itemsize,
        shape: shape,
        strides: strides,
        view: view,
        c_contiguous: c_contiguous,
        f_contiguous: f_contiguous,
      };
    }
    _pyproxy_get_buffer_result.sig = "eiiiiiieeiiii";
    function pyproxy_new_ex(ptrobj, capture_this, roundtrip, gcRegister) {
      try {
        return Module.pyproxy_new(ptrobj, {
          props: { captureThis: !!capture_this, roundtrip: !!roundtrip },
          gcRegister: gcRegister,
        });
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    pyproxy_new_ex.sig = "eiiii";
    function pyproxy_new(ptrobj) {
      try {
        return Module.pyproxy_new(ptrobj);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    pyproxy_new.sig = "ei";
    function create_once_callable(obj) {
      try {
        _Py_IncRef(obj);
        let alreadyCalled = !!0;
        function wrapper(...args) {
          if (alreadyCalled) {
            throw new Error("OnceProxy can only be called once");
          }
          try {
            return Module.callPyObject(obj, args);
          } finally {
            wrapper.destroy();
          }
        }
        wrapper.destroy = function () {
          if (alreadyCalled) {
            throw new Error("OnceProxy has already been destroyed");
          }
          alreadyCalled = !!1;
          Module.finalizationRegistry.unregister(wrapper);
          _Py_DecRef(obj);
        };
        Module.finalizationRegistry.register(
          wrapper,
          [obj, undefined],
          wrapper,
        );
        return wrapper;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    create_once_callable.sig = "ei";
    function create_promise_handles(
      handle_result,
      handle_exception,
      done_callback,
    ) {
      try {
        if (handle_result) {
          _Py_IncRef(handle_result);
        }
        if (handle_exception) {
          _Py_IncRef(handle_exception);
        }
        if (!done_callback) {
          done_callback = (x) => {};
        }
        let used = !!0;
        function checkUsed() {
          if (used) {
            throw new Error(
              "One of the promise handles has already been called.",
            );
          }
        }
        function destroy() {
          checkUsed();
          used = !!1;
          if (handle_result) {
            _Py_DecRef(handle_result);
          }
          if (handle_exception) {
            _Py_DecRef(handle_exception);
          }
        }
        function onFulfilled(res) {
          checkUsed();
          try {
            if (handle_result) {
              return Module.callPyObject(handle_result, [res]);
            }
          } finally {
            done_callback(res);
            destroy();
          }
        }
        function onRejected(err) {
          checkUsed();
          try {
            if (handle_exception) {
              return Module.callPyObject(handle_exception, [err]);
            }
          } finally {
            done_callback(undefined);
            destroy();
          }
        }
        onFulfilled.destroy = destroy;
        onRejected.destroy = destroy;
        return [onFulfilled, onRejected];
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    create_promise_handles.sig = "eiie";
    function _python2js_buffer_inner(
      buf,
      itemsize,
      ndim,
      format,
      shape,
      strides,
      suboffsets,
    ) {
      try {
        let converter = Module.get_converter(format, itemsize);
        return Module._python2js_buffer_recursive(buf, 0, {
          ndim: ndim,
          format: format,
          itemsize: itemsize,
          shape: shape,
          strides: strides,
          suboffsets: suboffsets,
          converter: converter,
        });
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    _python2js_buffer_inner.sig = "eiiiiiii";
    function python2js_buffer_init() {
      try {
        {
          0;
          Module.processBufferFormatString = function (
            formatStr,
            errorMessage = "",
          ) {
            if (formatStr.length > 2) {
              throw new Error(
                "Expected format string to have length <= 2, " +
                  `got '${formatStr}'.` +
                  errorMessage,
              );
            }
            let formatChar = formatStr.slice(-1);
            let alignChar = formatStr.slice(0, -1);
            let bigEndian;
            switch (alignChar) {
              case "!":
              case ">":
                bigEndian = !!1;
                break;
              case "<":
              case "@":
              case "=":
              case "":
                bigEndian = !!0;
                break;
              default:
                throw new Error(
                  `Unrecognized alignment character ${alignChar}.` +
                    errorMessage,
                );
            }
            let arrayType;
            switch (formatChar) {
              case "b":
                arrayType = Int8Array;
                break;
              case "s":
              case "p":
              case "c":
              case "B":
              case "?":
                arrayType = Uint8Array;
                break;
              case "h":
                arrayType = Int16Array;
                break;
              case "H":
                arrayType = Uint16Array;
                break;
              case "i":
              case "l":
              case "n":
                arrayType = Int32Array;
                break;
              case "I":
              case "L":
              case "N":
              case "P":
                arrayType = Uint32Array;
                break;
              case "q":
                if (globalThis.BigInt64Array === undefined) {
                  throw new Error(
                    "BigInt64Array is not supported on this browser." +
                      errorMessage,
                  );
                }
                arrayType = BigInt64Array;
                break;
              case "Q":
                if (globalThis.BigUint64Array === undefined) {
                  throw new Error(
                    "BigUint64Array is not supported on this browser." +
                      errorMessage,
                  );
                }
                arrayType = BigUint64Array;
                break;
              case "f":
                arrayType = Float32Array;
                break;
              case "d":
                arrayType = Float64Array;
                break;
              case "e":
                throw new Error("Javascript has no Float16 support.");
              default:
                throw new Error(
                  `Unrecognized format character '${formatChar}'.` +
                    errorMessage,
                );
            }
            return [arrayType, bigEndian];
          };
          Module.python2js_buffer_1d_contiguous = function (ptr, stride, n) {
            let byteLength = stride * n;
            return HEAP8.slice(ptr, ptr + byteLength).buffer;
          };
          Module.python2js_buffer_1d_noncontiguous = function (
            ptr,
            stride,
            suboffset,
            n,
            itemsize,
          ) {
            let byteLength = itemsize * n;
            let buffer = new Uint8Array(byteLength);
            for (let i = 0; i < n; ++i) {
              let curptr = ptr + i * stride;
              if (suboffset >= 0) {
                curptr = HEAPU32[(curptr >> 2) + 0] + suboffset;
              }
              buffer.set(
                HEAP8.subarray(curptr, curptr + itemsize),
                i * itemsize,
              );
            }
            return buffer.buffer;
          };
          Module._python2js_buffer_recursive = function (
            ptr,
            curdim,
            bufferData,
          ) {
            let n = HEAPU32[(bufferData.shape >> 2) + curdim];
            let stride = HEAP32[(bufferData.strides >> 2) + curdim];
            let suboffset = -1;
            if (bufferData.suboffsets !== 0) {
              suboffset = HEAP32[(bufferData.suboffsets >> 2) + curdim];
            }
            if (curdim === bufferData.ndim - 1) {
              let arraybuffer;
              if (stride === bufferData.itemsize && suboffset < 0) {
                arraybuffer = Module.python2js_buffer_1d_contiguous(
                  ptr,
                  stride,
                  n,
                );
              } else {
                arraybuffer = Module.python2js_buffer_1d_noncontiguous(
                  ptr,
                  stride,
                  suboffset,
                  n,
                  bufferData.itemsize,
                );
              }
              return bufferData.converter(arraybuffer);
            }
            let result = [];
            for (let i = 0; i < n; ++i) {
              let curPtr = ptr + i * stride;
              if (suboffset >= 0) {
                curptr = HEAPU32[(curptr >> 2) + 0] + suboffset;
              }
              result.push(
                Module._python2js_buffer_recursive(
                  curPtr,
                  curdim + 1,
                  bufferData,
                ),
              );
            }
            return result;
          };
          Module.get_converter = function (format, itemsize) {
            let formatStr = UTF8ToString(format);
            let [ArrayType, bigEndian] =
              Module.processBufferFormatString(formatStr);
            let formatChar = formatStr.slice(-1);
            switch (formatChar) {
              case "s":
                let decoder = new TextDecoder("utf8", { ignoreBOM: !!1 });
                return (buff) => decoder.decode(buff);
              case "?":
                return (buff) => Array.from(new Uint8Array(buff), (x) => !!x);
            }
            if (!bigEndian) {
              return (buff) => new ArrayType(buff);
            }
            let getFuncName;
            let setFuncName;
            switch (itemsize) {
              case 2:
                getFuncName = "getUint16";
                setFuncName = "setUint16";
                break;
              case 4:
                getFuncName = "getUint32";
                setFuncName = "setUint32";
                break;
              case 8:
                getFuncName = "getFloat64";
                setFuncName = "setFloat64";
                break;
              default:
                throw new Error(`Unexpected size ${itemsize}`);
            }
            function swapFunc(buff) {
              let dataview = new DataView(buff);
              let getFunc = dataview[getFuncName].bind(dataview);
              let setFunc = dataview[setFuncName].bind(dataview);
              for (let byte = 0; byte < dataview.byteLength; byte += itemsize) {
                setFunc(byte, getFunc(byte, !!1), !!0);
              }
              return buff;
            }
            return (buff) => new ArrayType(swapFunc(buff));
          };
        }
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    python2js_buffer_init.sig = "i";
    function jslib_init_js() {
      try {
        HEAP32[_Jsr_undefined / 4] = _hiwire_intern(undefined);
        HEAP32[_Jsr_true / 4] = _hiwire_intern(true);
        HEAP32[_Jsr_false / 4] = _hiwire_intern(false);
        HEAP32[_Jsr_novalue / 4] = _hiwire_intern({ noValueMarker: 1 });
        Module.novalue = _hiwire_get(HEAP32[_Jsr_novalue / 4]);
        Hiwire.num_keys = _hiwire_num_refs;
        return 0;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    jslib_init_js.sig = "i";
    function JsvNoValue_Check(v) {
      return v === Module.novalue;
    }
    JsvNoValue_Check.sig = "ie";
    function JsvNum_fromInt(x) {
      return x;
    }
    JsvNum_fromInt.sig = "ei";
    function JsvNum_fromDouble(val) {
      return val;
    }
    JsvNum_fromDouble.sig = "ed";
    function JsvNum_fromDigits(digits, ndigits) {
      let result = BigInt(0);
      for (let i = 0; i < ndigits; i++) {
        result += BigInt(HEAPU32[(digits >> 2) + i]) << BigInt(32 * i);
      }
      result +=
        BigInt(HEAPU32[(digits >> 2) + ndigits - 1] & 2147483648) <<
        BigInt(1 + 32 * (ndigits - 1));
      if (
        -Number.MAX_SAFE_INTEGER < result &&
        result < Number.MAX_SAFE_INTEGER
      ) {
        result = Number(result);
      }
      return result;
    }
    JsvNum_fromDigits.sig = "eii";
    function Jsv_to_bool(x) {
      return !!x;
    }
    Jsv_to_bool.sig = "ie";
    function Jsv_typeof(x) {
      return typeof x;
    }
    Jsv_typeof.sig = "ee";
    function Jsv_constructorName(obj) {
      try {
        return stringToNewUTF8(obj.constructor.name);
      } catch (e) {
        Module.handle_js_error(e);
        return 0;
      }
      errNoRet();
    }
    Jsv_constructorName.sig = "ie";
    function JsvUTF8ToString(ptr) {
      return UTF8ToString(ptr);
    }
    JsvUTF8ToString.sig = "ei";
    function JsvArray_New() {
      return [];
    }
    JsvArray_New.sig = "e";
    function JsvArray_Check(obj) {
      try {
        if (Array.isArray(obj)) {
          return true;
        }
        let typeTag = getTypeTag(obj);
        if (
          typeTag === "[object HTMLCollection]" ||
          typeTag === "[object NodeList]"
        ) {
          return true;
        }
        if (ArrayBuffer.isView(obj) && obj.constructor.name !== "DataView") {
          return true;
        }
        return false;
      } catch (e) {
        return false;
      }
    }
    JsvArray_Check.sig = "ie";
    function JsvArray_Get(arr, idx) {
      try {
        const result = arr[idx];
        if (result === undefined && !(idx in arr)) {
          return null;
        }
        return nullToUndefined(result);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvArray_Get.sig = "eei";
    function JsvArray_Set(arr, idx, val) {
      try {
        arr[idx] = val;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvArray_Set.sig = "ieie";
    function JsvArray_Delete(arr, idx) {
      try {
        if (idx < 0 || idx >= arr.length) {
          return null;
        }
        return arr.splice(idx, 1)[0];
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvArray_Delete.sig = "eei";
    function JsvArray_Push(arr, obj) {
      return arr.push(obj);
    }
    JsvArray_Push.sig = "iee";
    function JsvArray_Extend(arr, vals) {
      arr.push(...vals);
    }
    JsvArray_Extend.sig = "vee";
    function JsvArray_Insert(arr, idx, value) {
      try {
        arr.splice(idx, 0, value);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvArray_Insert.sig = "ieie";
    function JsvArray_ShallowCopy(arr) {
      try {
        return "slice" in arr ? arr.slice() : Array.from(arr);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvArray_ShallowCopy.sig = "ee";
    function JsvArray_slice(obj, length, start, stop, step) {
      try {
        let result;
        if (step === 1) {
          result = obj.slice(start, stop);
        } else {
          result = Array.from(
            { length: length },
            (_, i) => obj[start + i * step],
          );
        }
        return result;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvArray_slice.sig = "eeiiii";
    function JsvArray_slice_assign(
      obj,
      slicelength,
      start,
      stop,
      step,
      values_length,
      values,
    ) {
      try {
        let jsvalues = [];
        for (let i = 0; i < values_length; i++) {
          const ref = _python2js(HEAPU32[(values >> 2) + i]);
          if (ref === null) {
            return -1;
          }
          jsvalues.push(ref);
        }
        if (step === 1) {
          obj.splice(start, slicelength, ...jsvalues);
        } else {
          if (values !== 0) {
            for (let i = 0; i < slicelength; i++) {
              obj.splice(start + i * step, 1, jsvalues[i]);
            }
          } else {
            for (let i = slicelength - 1; i >= 0; i--) {
              obj.splice(start + i * step, 1);
            }
          }
        }
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvArray_slice_assign.sig = "ieiiiiii";
    function JsvObject_New() {
      return {};
    }
    JsvObject_New.sig = "e";
    function JsvObject_SetAttr(obj, attr, value) {
      try {
        obj[attr] = value;
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvObject_SetAttr.sig = "ieee";
    function JsvObject_Entries(obj) {
      try {
        return Object.entries(obj);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_Entries.sig = "ee";
    function JsvObject_Keys(obj) {
      try {
        return Object.keys(obj);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_Keys.sig = "ee";
    function JsvObject_Values(obj) {
      try {
        return Object.values(obj);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_Values.sig = "ee";
    function JsvObject_toString(obj) {
      try {
        return obj.toString();
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_toString.sig = "ee";
    function JsvObject_CallMethod(obj, meth, args) {
      try {
        return nullToUndefined(obj[meth](...args));
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_CallMethod.sig = "eeee";
    function JsvObject_CallMethod_NoArgs(obj, meth) {
      try {
        return nullToUndefined(obj[meth]());
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_CallMethod_NoArgs.sig = "eee";
    function JsvObject_CallMethod_OneArg(obj, meth, arg) {
      try {
        return nullToUndefined(obj[meth](arg));
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_CallMethod_OneArg.sig = "eeee";
    function JsvObject_CallMethod_TwoArgs(obj, meth, arg1, arg2) {
      try {
        return nullToUndefined(obj[meth](arg1, arg2));
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvObject_CallMethod_TwoArgs.sig = "eeeee";
    function JsvFunction_Check(obj) {
      try {
        return typeof obj === "function";
      } catch (e) {
        return false;
      }
    }
    JsvFunction_Check.sig = "ie";
    function JsvFunction_CallBound(func, this_, args) {
      try {
        return nullToUndefined(func.apply(this_, args));
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvFunction_CallBound.sig = "eeee";
    function JsvFunction_Call_OneArg(func, arg) {
      try {
        return nullToUndefined(func.apply(null, [arg]));
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvFunction_Call_OneArg.sig = "eee";
    function JsvFunction_Construct(func, args) {
      try {
        return nullToUndefined(Reflect.construct(func, args));
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvFunction_Construct.sig = "eee";
    function JsvPromise_Check(obj) {
      try {
        return isPromise(obj);
      } catch (e) {
        return false;
      }
    }
    JsvPromise_Check.sig = "ie";
    function JsvPromise_Resolve(obj) {
      try {
        return Promise.resolve(obj);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvPromise_Resolve.sig = "ee";
    function JsvPromise_Syncify_handleError() {
      if (!Module.syncify_error) {
        return;
      }
      Module.handle_js_error(Module.syncify_error);
      delete Module.syncify_error;
    }
    JsvPromise_Syncify_handleError.sig = "v";
    function jslib_init_buffers_js() {
      try {
        const dtypes_str = ["b", "B", "h", "H", "i", "I", "f", "d"].join(
          String.fromCharCode(0),
        );
        const dtypes_ptr = stringToNewUTF8(dtypes_str);
        const dtypes_map = Object.fromEntries(
          Object.entries(dtypes_str).map(([idx, val]) => [
            val,
            dtypes_ptr + +idx,
          ]),
        );
        const buffer_datatype_map = new Map([
          ["Int8Array", [dtypes_map["b"], 1, true]],
          ["Uint8Array", [dtypes_map["B"], 1, true]],
          ["Uint8ClampedArray", [dtypes_map["B"], 1, true]],
          ["Int16Array", [dtypes_map["h"], 2, true]],
          ["Uint16Array", [dtypes_map["H"], 2, true]],
          ["Int32Array", [dtypes_map["i"], 4, true]],
          ["Uint32Array", [dtypes_map["I"], 4, true]],
          ["Float32Array", [dtypes_map["f"], 4, true]],
          ["Float64Array", [dtypes_map["d"], 8, true]],
          ["DataView", [dtypes_map["B"], 1, false]],
          ["ArrayBuffer", [dtypes_map["B"], 1, false]],
        ]);
        Module.get_buffer_datatype = function (jsobj) {
          return (
            buffer_datatype_map.get(jsobj.constructor.name) || [0, 0, false]
          );
        };
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    jslib_init_buffers_js.sig = "i";
    function JsvBuffer_assignToPtr(buf, ptr) {
      try {
        Module.HEAPU8.set(bufferAsUint8Array(buf), ptr);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvBuffer_assignToPtr.sig = "iei";
    function JsvBuffer_assignFromPtr(buf, ptr) {
      try {
        bufferAsUint8Array(buf).set(
          Module.HEAPU8.subarray(ptr, ptr + buf.byteLength),
        );
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvBuffer_assignFromPtr.sig = "iei";
    function JsvBuffer_readFromFile(buf, fd) {
      try {
        let uint8_buf = bufferAsUint8Array(buf);
        let stream = Module.FS.streams[fd];
        Module.FS.read(stream, uint8_buf, 0, uint8_buf.byteLength);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvBuffer_readFromFile.sig = "iei";
    function JsvBuffer_writeToFile(buf, fd) {
      try {
        let uint8_buf = bufferAsUint8Array(buf);
        let stream = Module.FS.streams[fd];
        Module.FS.write(stream, uint8_buf, 0, uint8_buf.byteLength);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvBuffer_writeToFile.sig = "iei";
    function JsvBuffer_intoFile(buf, fd) {
      try {
        let uint8_buf = bufferAsUint8Array(buf);
        let stream = Module.FS.streams[fd];
        Module.FS.write(
          stream,
          uint8_buf,
          0,
          uint8_buf.byteLength,
          undefined,
          true,
        );
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvBuffer_intoFile.sig = "iei";
    function JsvGenerator_Check(obj) {
      try {
        return getTypeTag(obj) === "[object Generator]";
      } catch (e) {
        return false;
      }
    }
    JsvGenerator_Check.sig = "ie";
    function JsvAsyncGenerator_Check(obj) {
      try {
        return getTypeTag(obj) === "[object AsyncGenerator]";
      } catch (e) {
        return false;
      }
    }
    JsvAsyncGenerator_Check.sig = "ie";
    function JsvError_Throw(e) {
      throw e;
    }
    JsvError_Throw.sig = "ve";
    function Jsv_less_than(a, b) {
      try {
        return !!(a < b);
      } catch (e) {
        return false;
      }
    }
    Jsv_less_than.sig = "iee";
    function Jsv_less_than_equal(a, b) {
      try {
        return !!(a <= b);
      } catch (e) {
        return false;
      }
    }
    Jsv_less_than_equal.sig = "iee";
    function Jsv_equal(a, b) {
      try {
        return !!(a === b);
      } catch (e) {
        return false;
      }
    }
    Jsv_equal.sig = "iee";
    function Jsv_not_equal(a, b) {
      try {
        return !!(a !== b);
      } catch (e) {
        return false;
      }
    }
    Jsv_not_equal.sig = "iee";
    function Jsv_greater_than(a, b) {
      try {
        return !!(a > b);
      } catch (e) {
        return false;
      }
    }
    Jsv_greater_than.sig = "iee";
    function Jsv_greater_than_equal(a, b) {
      try {
        return !!(a >= b);
      } catch (e) {
        return false;
      }
    }
    Jsv_greater_than_equal.sig = "iee";
    function JsvMap_New() {
      try {
        return new Map();
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvMap_New.sig = "e";
    function JsvMap_Set(map, key, val) {
      try {
        map.set(key, val);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvMap_Set.sig = "ieee";
    function JsvSet_New() {
      try {
        return new Set();
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    JsvSet_New.sig = "e";
    function JsvSet_Add(set, val) {
      try {
        set.add(val);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    JsvSet_Add.sig = "iee";
    function _python2js_addto_postprocess_list(list, parent, key, value) {
      list.push([parent, key, value]);
    }
    _python2js_addto_postprocess_list.sig = "veeei";
    function _python2js_handle_postprocess_list(list, cache) {
      for (const [parent, key, ptr] of list) {
        let val = cache.get(ptr);
        if (parent.constructor.name === "Map") {
          parent.set(key, val);
        } else {
          parent[key] = val;
        }
      }
    }
    _python2js_handle_postprocess_list.sig = "vee";
    function _python2js_ucs1(ptr, len) {
      try {
        let jsstr = "";
        for (let i = 0; i < len; ++i) {
          jsstr += String.fromCharCode(HEAPU8[ptr + i]);
        }
        return jsstr;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    _python2js_ucs1.sig = "eii";
    function _python2js_ucs2(ptr, len) {
      try {
        let jsstr = "";
        for (let i = 0; i < len; ++i) {
          jsstr += String.fromCharCode(HEAPU16[(ptr >> 1) + i]);
        }
        return jsstr;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    _python2js_ucs2.sig = "eii";
    function _python2js_ucs4(ptr, len) {
      try {
        let jsstr = "";
        for (let i = 0; i < len; ++i) {
          jsstr += String.fromCodePoint(HEAPU32[(ptr >> 2) + i]);
        }
        return jsstr;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    _python2js_ucs4.sig = "eii";
    function _python2js_add_to_cache(cache, pyparent, jsparent) {
      try {
        cache.set(pyparent, jsparent);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    _python2js_add_to_cache.sig = "ieie";
    function _python2js_cache_lookup(cache, pyparent) {
      return cache.get(pyparent) || null;
    }
    _python2js_cache_lookup.sig = "eei";
    function _JsArray_PushEntry_helper(array, key, value) {
      try {
        array.push([key, value]);
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    _JsArray_PushEntry_helper.sig = "ieee";
    function _JsArray_PostProcess_helper(jscontext, array) {
      try {
        return jscontext.dict_converter(array);
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    _JsArray_PostProcess_helper.sig = "eee";
    function python2js__default_converter_js(jscontext, object) {
      try {
        let proxy = Module.pyproxy_new(object);
        let result = jscontext.default_converter(
          proxy,
          jscontext.converter,
          jscontext.cacheConversion,
        );
        proxy.destroy();
        return result;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    python2js__default_converter_js.sig = "eei";
    function python2js_custom__create_jscontext(
      context,
      cache,
      dict_converter,
      default_converter,
    ) {
      try {
        let jscontext = {};
        if (dict_converter) {
          jscontext.dict_converter = dict_converter;
        }
        if (default_converter) {
          jscontext.default_converter = default_converter;
          jscontext.cacheConversion = function (input, output) {
            if (!API.isPyProxy(input)) {
              throw new TypeError(
                "The first argument to cacheConversion must be a PyProxy.",
              );
            }
            let input_ptr = Module.PyProxy_getPtr(input);
            cache.set(input_ptr, output);
          };
          jscontext.converter = function (x) {
            if (!API.isPyProxy(x)) {
              return x;
            }
            let ptr = Module.PyProxy_getPtr(x);
            return __python2js(context, ptr);
          };
        }
        return jscontext;
      } catch (e) {
        Module.handle_js_error(e);
        return null;
      }
      errNoRet();
    }
    python2js_custom__create_jscontext.sig = "eieee";
    function destroy_proxies_js(proxies_id) {
      try {
        for (const proxy of proxies_id) {
          proxy.destroy();
        }
      } catch (e) {
        Module.handle_js_error(e);
        return -1;
      }
      return 0;
    }
    destroy_proxies_js.sig = "ie";
    function pyodide_js_init() {
      "use strict";
      (() => {
        var Zr = Object.create;
        var Ue = Object.defineProperty;
        var et = Object.getOwnPropertyDescriptor;
        var rt = Object.getOwnPropertyNames;
        var tt = Object.getPrototypeOf,
          nt = Object.prototype.hasOwnProperty;
        var o = (r, e) => Ue(r, "name", { value: e, configurable: !0 }),
          v = ((r) =>
            typeof require < "u"
              ? require
              : typeof Proxy < "u"
                ? new Proxy(r, {
                    get: (e, t) => (typeof require < "u" ? require : e)[t],
                  })
                : r)(function (r) {
            if (typeof require < "u") return require.apply(this, arguments);
            throw new Error('Dynamic require of "' + r + '" is not supported');
          });
        var ir = (r, e) => () => (
          e || r((e = { exports: {} }).exports, e), e.exports
        );
        var at = (r, e, t, n) => {
          if ((e && typeof e == "object") || typeof e == "function")
            for (let a of rt(e))
              !nt.call(r, a) &&
                a !== t &&
                Ue(r, a, {
                  get: () => e[a],
                  enumerable: !(n = et(e, a)) || n.enumerable,
                });
          return r;
        };
        var w = (r, e, t) => (
          (t = r != null ? Zr(tt(r)) : {}),
          at(
            e || !r || !r.__esModule
              ? Ue(t, "default", { value: r, enumerable: !0 })
              : t,
            r,
          )
        );
        var lr = ir((Be, sr) => {
          (function (r, e) {
            "use strict";
            typeof define == "function" && define.amd
              ? define("stackframe", [], e)
              : typeof Be == "object"
                ? (sr.exports = e())
                : (r.StackFrame = e());
          })(Be, function () {
            "use strict";
            function r(y) {
              return !isNaN(parseFloat(y)) && isFinite(y);
            }
            o(r, "_isNumber");
            function e(y) {
              return y.charAt(0).toUpperCase() + y.substring(1);
            }
            o(e, "_capitalize");
            function t(y) {
              return function () {
                return this[y];
              };
            }
            o(t, "_getter");
            var n = ["isConstructor", "isEval", "isNative", "isToplevel"],
              a = ["columnNumber", "lineNumber"],
              i = ["fileName", "functionName", "source"],
              s = ["args"],
              c = ["evalOrigin"],
              l = n.concat(a, i, s, c);
            function u(y) {
              if (y)
                for (var g = 0; g < l.length; g++)
                  y[l[g]] !== void 0 && this["set" + e(l[g])](y[l[g]]);
            }
            o(u, "StackFrame"),
              (u.prototype = {
                getArgs: function () {
                  return this.args;
                },
                setArgs: function (y) {
                  if (Object.prototype.toString.call(y) !== "[object Array]")
                    throw new TypeError("Args must be an Array");
                  this.args = y;
                },
                getEvalOrigin: function () {
                  return this.evalOrigin;
                },
                setEvalOrigin: function (y) {
                  if (y instanceof u) this.evalOrigin = y;
                  else if (y instanceof Object) this.evalOrigin = new u(y);
                  else
                    throw new TypeError(
                      "Eval Origin must be an Object or StackFrame",
                    );
                },
                toString: function () {
                  var y = this.getFileName() || "",
                    g = this.getLineNumber() || "",
                    A = this.getColumnNumber() || "",
                    k = this.getFunctionName() || "";
                  return this.getIsEval()
                    ? y
                      ? "[eval] (" + y + ":" + g + ":" + A + ")"
                      : "[eval]:" + g + ":" + A
                    : k
                      ? k + " (" + y + ":" + g + ":" + A + ")"
                      : y + ":" + g + ":" + A;
                },
              }),
              (u.fromString = o(function (g) {
                var A = g.indexOf("("),
                  k = g.lastIndexOf(")"),
                  x = g.substring(0, A),
                  I = g.substring(A + 1, k).split(","),
                  F = g.substring(k + 1);
                if (F.indexOf("@") === 0)
                  var C = /@(.+?)(?::(\d+))?(?::(\d+))?$/.exec(F, ""),
                    je = C[1],
                    j = C[2],
                    or = C[3];
                return new u({
                  functionName: x,
                  args: I || void 0,
                  fileName: je,
                  lineNumber: j || void 0,
                  columnNumber: or || void 0,
                });
              }, "StackFrame$$fromString"));
            for (var d = 0; d < n.length; d++)
              (u.prototype["get" + e(n[d])] = t(n[d])),
                (u.prototype["set" + e(n[d])] = (function (y) {
                  return function (g) {
                    this[y] = !!g;
                  };
                })(n[d]));
            for (var f = 0; f < a.length; f++)
              (u.prototype["get" + e(a[f])] = t(a[f])),
                (u.prototype["set" + e(a[f])] = (function (y) {
                  return function (g) {
                    if (!r(g)) throw new TypeError(y + " must be a Number");
                    this[y] = Number(g);
                  };
                })(a[f]));
            for (var p = 0; p < i.length; p++)
              (u.prototype["get" + e(i[p])] = t(i[p])),
                (u.prototype["set" + e(i[p])] = (function (y) {
                  return function (g) {
                    this[y] = String(g);
                  };
                })(i[p]));
            return u;
          });
        });
        var He = ir((We, cr) => {
          (function (r, e) {
            "use strict";
            typeof define == "function" && define.amd
              ? define("error-stack-parser", ["stackframe"], e)
              : typeof We == "object"
                ? (cr.exports = e(lr()))
                : (r.ErrorStackParser = e(r.StackFrame));
          })(
            We,
            o(function (e) {
              "use strict";
              var t = /(^|@)\S+:\d+/,
                n = /^\s*at .*(\S+:\d+|\(native\))/m,
                a = /^(eval@)?(\[native code])?$/;
              return {
                parse: o(function (s) {
                  if (
                    typeof s.stacktrace < "u" ||
                    typeof s["opera#sourceloc"] < "u"
                  )
                    return this.parseOpera(s);
                  if (s.stack && s.stack.match(n)) return this.parseV8OrIE(s);
                  if (s.stack) return this.parseFFOrSafari(s);
                  throw new Error("Cannot parse given Error object");
                }, "ErrorStackParser$$parse"),
                extractLocation: o(function (s) {
                  if (s.indexOf(":") === -1) return [s];
                  var c = /(.+?)(?::(\d+))?(?::(\d+))?$/,
                    l = c.exec(s.replace(/[()]/g, ""));
                  return [l[1], l[2] || void 0, l[3] || void 0];
                }, "ErrorStackParser$$extractLocation"),
                parseV8OrIE: o(function (s) {
                  var c = s.stack.split(`\n`).filter(function (l) {
                    return !!l.match(n);
                  }, this);
                  return c.map(function (l) {
                    l.indexOf("(eval ") > -1 &&
                      (l = l
                        .replace(/eval code/g, "eval")
                        .replace(/(\(eval at [^()]*)|(,.*$)/g, ""));
                    var u = l
                        .replace(/^\s+/, "")
                        .replace(/\(eval code/g, "(")
                        .replace(/^.*?\s+/, ""),
                      d = u.match(/ (\(.+\)$)/);
                    u = d ? u.replace(d[0], "") : u;
                    var f = this.extractLocation(d ? d[1] : u),
                      p = (d && u) || void 0,
                      y =
                        ["eval", "<anonymous>"].indexOf(f[0]) > -1
                          ? void 0
                          : f[0];
                    return new e({
                      functionName: p,
                      fileName: y,
                      lineNumber: f[1],
                      columnNumber: f[2],
                      source: l,
                    });
                  }, this);
                }, "ErrorStackParser$$parseV8OrIE"),
                parseFFOrSafari: o(function (s) {
                  var c = s.stack.split(`\n`).filter(function (l) {
                    return !l.match(a);
                  }, this);
                  return c.map(function (l) {
                    if (
                      (l.indexOf(" > eval") > -1 &&
                        (l = l.replace(
                          / line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g,
                          ":$1",
                        )),
                      l.indexOf("@") === -1 && l.indexOf(":") === -1)
                    )
                      return new e({ functionName: l });
                    var u = /((.*".+"[^@]*)?[^@]*)(?:@)/,
                      d = l.match(u),
                      f = d && d[1] ? d[1] : void 0,
                      p = this.extractLocation(l.replace(u, ""));
                    return new e({
                      functionName: f,
                      fileName: p[0],
                      lineNumber: p[1],
                      columnNumber: p[2],
                      source: l,
                    });
                  }, this);
                }, "ErrorStackParser$$parseFFOrSafari"),
                parseOpera: o(function (s) {
                  return !s.stacktrace ||
                    (s.message.indexOf(`\n`) > -1 &&
                      s.message.split(`\n`).length >
                        s.stacktrace.split(`\n`).length)
                    ? this.parseOpera9(s)
                    : s.stack
                      ? this.parseOpera11(s)
                      : this.parseOpera10(s);
                }, "ErrorStackParser$$parseOpera"),
                parseOpera9: o(function (s) {
                  for (
                    var c = /Line (\d+).*script (?:in )?(\S+)/i,
                      l = s.message.split(`\n`),
                      u = [],
                      d = 2,
                      f = l.length;
                    d < f;
                    d += 2
                  ) {
                    var p = c.exec(l[d]);
                    p &&
                      u.push(
                        new e({
                          fileName: p[2],
                          lineNumber: p[1],
                          source: l[d],
                        }),
                      );
                  }
                  return u;
                }, "ErrorStackParser$$parseOpera9"),
                parseOpera10: o(function (s) {
                  for (
                    var c =
                        /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i,
                      l = s.stacktrace.split(`\n`),
                      u = [],
                      d = 0,
                      f = l.length;
                    d < f;
                    d += 2
                  ) {
                    var p = c.exec(l[d]);
                    p &&
                      u.push(
                        new e({
                          functionName: p[3] || void 0,
                          fileName: p[2],
                          lineNumber: p[1],
                          source: l[d],
                        }),
                      );
                  }
                  return u;
                }, "ErrorStackParser$$parseOpera10"),
                parseOpera11: o(function (s) {
                  var c = s.stack.split(`\n`).filter(function (l) {
                    return !!l.match(t) && !l.match(/^Error created at/);
                  }, this);
                  return c.map(function (l) {
                    var u = l.split("@"),
                      d = this.extractLocation(u.pop()),
                      f = u.shift() || "",
                      p =
                        f
                          .replace(/<anonymous function(: (\w+))?>/, "$2")
                          .replace(/\([^)]*\)/g, "") || void 0,
                      y;
                    f.match(/\(([^)]*)\)/) &&
                      (y = f.replace(/^[^(]+\(([^)]*)\)$/, "$1"));
                    var g =
                      y === void 0 || y === "[arguments not available]"
                        ? void 0
                        : y.split(",");
                    return new e({
                      functionName: p,
                      args: g,
                      fileName: d[0],
                      lineNumber: d[1],
                      columnNumber: d[2],
                      source: l,
                    });
                  }, this);
                }, "ErrorStackParser$$parseOpera11"),
              };
            }, "ErrorStackParser"),
          );
        });
        var st = w(He());
        var h =
            typeof process == "object" &&
            typeof process.versions == "object" &&
            typeof process.versions.node == "string" &&
            typeof process.browser > "u",
          ot =
            h &&
            typeof module < "u" &&
            typeof module.exports < "u" &&
            typeof v < "u" &&
            typeof __dirname < "u";
        var it = typeof Deno < "u",
          ur = !h && !it,
          dr =
            ur &&
            typeof window < "u" &&
            typeof document < "u" &&
            typeof document.createElement < "u" &&
            typeof sessionStorage < "u",
          yr = ur && typeof importScripts < "u" && typeof self < "u";
        var pr,
          de,
          Ge,
          fr,
          U,
          lt = `"fetch" is not defined, maybe you're using node < 18? From Pyodide >= 0.25.0, node >= 18 is required. Older versions of Node.js may work, but it is not guaranteed or supported. Falling back to "node-fetch".`;
        async function mr() {
          if (
            !h ||
            ((pr = (await import("url")).default),
            (U = await import("fs/promises")),
            globalThis.fetch
              ? (de = fetch)
              : (console.warn(lt), (de = (await import("node-fetch")).default)),
            (fr = (await import("vm")).default),
            (Ge = await import("path")),
            (_r = Ge.sep),
            typeof v < "u")
          )
            return;
          let r = await import("fs"),
            e = await import("crypto"),
            t = await import("ws"),
            n = await import("child_process"),
            a = { fs: r, crypto: e, ws: t, child_process: n };
          globalThis.require = function (i) {
            return a[i];
          };
        }
        o(mr, "initNodeModules");
        function ct(r, e) {
          return Ge.resolve(e || ".", r);
        }
        o(ct, "node_resolvePath");
        function ut(r, e) {
          return e === void 0 && (e = location), new URL(r, e).toString();
        }
        o(ut, "browser_resolvePath");
        var ye;
        h ? (ye = ct) : (ye = ut);
        var _r;
        h || (_r = "/");
        function dt(r, e) {
          return (
            r.startsWith("file://") && (r = r.slice(7)),
            r.includes("://")
              ? { response: de(r) }
              : {
                  binary: U.readFile(r).then(
                    (t) => new Uint8Array(t.buffer, t.byteOffset, t.byteLength),
                  ),
                }
          );
        }
        o(dt, "node_getBinaryResponse");
        function yt(r, e) {
          let t = new URL(r, location);
          return { response: fetch(t, e ? { integrity: e } : {}) };
        }
        o(yt, "browser_getBinaryResponse");
        var pe;
        h ? (pe = dt) : (pe = yt);
        async function D(r, e) {
          let { response: t, binary: n } = pe(r, e);
          if (n) return n;
          let a = await t;
          if (!a.ok) throw new Error(`Failed to load '${r}': request failed.`);
          return new Uint8Array(await a.arrayBuffer());
        }
        o(D, "loadBinaryFile");
        var ze;
        if (dr) ze = o(async (r) => await import(r), "loadScript");
        else if (yr)
          ze = o(async (r) => {
            try {
              globalThis.importScripts(r);
            } catch (e) {
              if (e instanceof TypeError) await import(r);
              else throw e;
            }
          }, "loadScript");
        else if (h) ze = pt;
        else throw new Error("Cannot determine runtime environment");
        async function pt(r) {
          r.startsWith("file://") && (r = r.slice(7)),
            r.includes("://")
              ? fr.runInThisContext(await (await de(r)).text())
              : await import(pr.pathToFileURL(r).href);
        }
        o(pt, "nodeLoadScript");
        function ft(r) {
          return Buffer.from(r, "hex").toString("base64");
        }
        o(ft, "nodeBase16ToBase64");
        function mt(r) {
          return btoa(
            r
              .match(/\w{2}/g)
              .map(function (e) {
                return String.fromCharCode(parseInt(e, 16));
              })
              .join(""),
          );
        }
        o(mt, "browserBase16ToBase64");
        var gr = h ? ft : mt;
        function _t(r) {
          try {
            return r instanceof _;
          } catch {
            return !1;
          }
        }
        o(_t, "isPyProxy");
        API.isPyProxy = _t;
        globalThis.FinalizationRegistry
          ? (Module.finalizationRegistry = new FinalizationRegistry(
              ({ ptr: r, cache: e }) => {
                e && ((e.leaked = !0), wr(e));
                try {
                  _check_gil();
                  let t = Module.validSuspender.value;
                  (Module.validSuspender.value = !1),
                    _Py_DecRef(r),
                    (Module.validSuspender.value = t);
                } catch (t) {
                  API.fatal_error(t);
                }
              },
            ))
          : (Module.finalizationRegistry = { register() {}, unregister() {} });
        var Ve = new Map();
        Module.pyproxy_alloc_map = Ve;
        var qe, Je;
        Module.enable_pyproxy_allocation_tracing = function () {
          (qe = o(function (r) {
            Ve.set(r, Error().stack);
          }, "trace_pyproxy_alloc")),
            (Je = o(function (r) {
              Ve.delete(r);
            }, "trace_pyproxy_dealloc"));
        };
        Module.disable_pyproxy_allocation_tracing = function () {
          (qe = o(function (r) {}, "trace_pyproxy_alloc")),
            (Je = o(function (r) {}, "trace_pyproxy_dealloc"));
        };
        Module.disable_pyproxy_allocation_tracing();
        var xr = Symbol("pyproxy.attrs");
        function gt(r) {
          _check_gil();
          let e = Module.validSuspender.value;
          Module.validSuspender.value = !1;
          try {
            return _pyproxy_getflags(r);
          } finally {
            Module.validSuspender.value = e;
          }
        }
        o(gt, "pyproxy_getflags");
        function ke(
          r,
          { flags: e, cache: t, props: n, shared: a, gcRegister: i } = {},
        ) {
          i === void 0 && (i = !0);
          let s = e !== void 0 ? e : gt(r);
          s === -1 && _pythonexc2js();
          let c = s & (1 << 13),
            l = Module.getPyProxyClass(s),
            u;
          s & (1 << 8)
            ? ((u = o(function () {}, "target")),
              Object.setPrototypeOf(u, l.prototype),
              delete u.length,
              delete u.name,
              (u.prototype = void 0))
            : (u = Object.create(l.prototype));
          let d = !!a;
          a ||
            (t || (t = { map: new Map(), refcnt: 0 }),
            t.refcnt++,
            (a = {
              ptr: r,
              cache: t,
              flags: s,
              promise: void 0,
              destroyed_msg: void 0,
              gcRegistered: !1,
            }),
            _Py_IncRef(r)),
            (n = Object.assign(
              { isBound: !1, captureThis: !1, boundArgs: [], roundtrip: !1 },
              n,
            ));
          let f = new Proxy(u, c ? Et : T);
          !d && i && Sr(a), d || qe(f);
          let p = { shared: a, props: n };
          return (u[xr] = p), f;
        }
        o(ke, "pyproxy_new");
        Module.pyproxy_new = ke;
        function Sr(r) {
          let e = Object.assign({}, r);
          (r.gcRegistered = !0), Module.finalizationRegistry.register(r, e, r);
        }
        o(Sr, "gc_register_proxy");
        Module.gc_register_proxy = Sr;
        function Ee(r) {
          return r[xr];
        }
        o(Ee, "_getAttrsQuiet");
        Module.PyProxy_getAttrsQuiet = Ee;
        function E(r) {
          let e = Ee(r);
          if (!e.shared.ptr) throw new Error(e.shared.destroyed_msg);
          return e;
        }
        o(E, "_getAttrs");
        Module.PyProxy_getAttrs = E;
        function m(r) {
          return E(r).shared.ptr;
        }
        o(m, "_getPtr");
        function b(r) {
          return Object.getPrototypeOf(r).$$flags;
        }
        o(b, "_getFlags");
        function hr(r, e, t) {
          let {
            captureThis: n,
            boundArgs: a,
            boundThis: i,
            isBound: s,
          } = E(r).props;
          return n
            ? s
              ? [i].concat(a, t)
              : [e].concat(t)
            : s
              ? a.concat(t)
              : t;
        }
        o(hr, "_adjustArgs");
        var br = new Map();
        Module.getPyProxyClass = function (r) {
          let e = [
              [1, me],
              [2, H],
              [4, R],
              [8, _e],
              [16, ge],
              [32, be],
              [2048, Pe],
              [512, he],
              [1024, ve],
              [4096, xe],
              [64, Ae],
              [128, Ie],
              [256, te],
              [8192, Se],
              [16384, we],
            ],
            t = br.get(r);
          if (t) return t;
          let n = {};
          for (let [c, l] of e)
            r & c &&
              Object.assign(n, Object.getOwnPropertyDescriptors(l.prototype));
          (n.constructor = Object.getOwnPropertyDescriptor(
            _.prototype,
            "constructor",
          )),
            Object.assign(n, Object.getOwnPropertyDescriptors({ $$flags: r }));
          let a = r & (1 << 8) ? Ir : Ar,
            i = Object.create(a, n);
          function s() {}
          return o(s, "NewPyProxyClass"), (s.prototype = i), br.set(r, s), s;
        };
        Module.PyProxy_getPtr = m;
        var ht =
          "This borrowed attribute proxy was automatically destroyed in the process of destroying the proxy it was borrowed from. Try using the 'copy' method.";
        function wr(r) {
          if (r && (r.refcnt--, r.refcnt === 0))
            for (let e of r.map.values())
              r.leaked || Module.pyproxy_destroy(e, ht, !0);
        }
        o(wr, "pyproxy_decref_cache");
        function bt(r, e) {
          if (((e = e || "Object has already been destroyed"), API.debug_ffi)) {
            let t = r.type,
              n;
            try {
              n = r.toString();
            } catch (a) {
              if (a.pyodide_fatal_error) throw a;
            }
            (e += `\nThe object was of type "${t}" and `),
              n
                ? (e += `had repr "${n}"`)
                : (e += "an error was raised when trying to generate its repr");
          } else
            e +=
              "\nFor more information about the cause of this error, use `pyodide.setDebug(true)`";
          return e;
        }
        o(bt, "generateDestroyedMessage");
        Module.pyproxy_destroy = function (r, e, t) {
          let { shared: n, props: a } = Ee(r);
          if (!n.ptr || (!t && a.roundtrip)) return;
          n.destroyed_msg = bt(r, e);
          let i = n.ptr;
          (n.ptr = 0),
            n.gcRegistered && Module.finalizationRegistry.unregister(n),
            wr(n.cache);
          try {
            _check_gil();
            let s = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              _Py_DecRef(i),
              Je(r),
              (Module.validSuspender.value = s);
          } catch (s) {
            API.fatal_error(s);
          }
        };
        Module.callPyObjectKwargs = function (r, e, t) {
          let n = e.length,
            a = Object.keys(t),
            i = Object.values(t),
            s = a.length;
          e.push(...i);
          let c;
          try {
            _check_gil();
            let l = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (c = __pyproxy_apply(r, e, n, a, s)),
              (Module.validSuspender.value = l);
          } catch (l) {
            API.maybe_fatal_error(l);
            return;
          }
          if (
            (c === null && _pythonexc2js(),
            c && c.type === "coroutine" && c._ensure_future)
          ) {
            _check_gil();
            let l = Module.validSuspender.value;
            Module.validSuspender.value = !1;
            let u = __iscoroutinefunction(r);
            (Module.validSuspender.value = l), u && c._ensure_future();
          }
          return c;
        };
        async function Pr(r, e, t) {
          if (!Module.jspiSupported)
            throw new Error(
              "WebAssembly stack switching not supported in this JavaScript runtime",
            );
          let n = e.length,
            a = Object.keys(t),
            i = Object.values(t),
            s = a.length;
          e.push(...i);
          let c;
          try {
            _check_gil();
            let l = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (c = await Module.promisingApply(r, e, n, a, s)),
              (Module.validSuspender.value = l);
          } catch (l) {
            API.fatal_error(l);
          }
          if (
            (c === null && _pythonexc2js(),
            c && c.type === "coroutine" && c._ensure_future)
          ) {
            _check_gil();
            let l = Module.validSuspender.value;
            Module.validSuspender.value = !1;
            let u = __iscoroutinefunction(r);
            (Module.validSuspender.value = l), u && c._ensure_future();
          }
          return c;
        }
        o(Pr, "callPyObjectKwargsSuspending");
        Module.callPyObject = function (r, e) {
          return Module.callPyObjectKwargs(r, e, {});
        };
        var _ = class {
          static [Symbol.hasInstance](e) {
            return [_, Ye].some((t) =>
              Function.prototype[Symbol.hasInstance].call(t, e),
            );
          }
          constructor() {
            throw new TypeError("PyProxy is not a constructor");
          }
          get [Symbol.toStringTag]() {
            return "PyProxy";
          }
          get type() {
            let e = m(this);
            return __pyproxy_type(e);
          }
          toString() {
            let e = m(this),
              t;
            try {
              _check_gil();
              let n = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxy_repr(e)),
                (Module.validSuspender.value = n);
            } catch (n) {
              API.fatal_error(n);
            }
            return t === null && _pythonexc2js(), t;
          }
          destroy(e = {}) {
            e = Object.assign({ message: "", destroyRoundtrip: !0 }, e);
            let { message: t, destroyRoundtrip: n } = e;
            Module.pyproxy_destroy(this, t, n);
          }
          copy() {
            let e = E(this);
            return ke(e.shared.ptr, {
              flags: b(this),
              cache: e.shared.cache,
              props: e.props,
            });
          }
          toJs({
            depth: e = -1,
            pyproxies: t = void 0,
            create_pyproxies: n = !0,
            dict_converter: a = void 0,
            default_converter: i = void 0,
          } = {}) {
            let s = m(this),
              c,
              l;
            n ? (t ? (l = t) : (l = [])) : (l = null);
            try {
              _check_gil();
              let u = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (c = _python2js_custom(s, e, l, a || null, i || null)),
                (Module.validSuspender.value = u);
            } catch (u) {
              API.fatal_error(u);
            }
            return c === null && _pythonexc2js(), c;
          }
        };
        o(_, "PyProxy");
        var Ar = _.prototype;
        Tests.Function = Function;
        var Ir = Object.create(
          Function.prototype,
          Object.getOwnPropertyDescriptors(Ar),
        );
        function Ye() {}
        o(Ye, "PyProxyFunction");
        Ye.prototype = Ir;
        globalThis.PyProxyFunction = Ye;
        var B = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 0));
          }
        };
        o(B, "PyProxyWithLength");
        var me = class {
          get length() {
            let e = m(this),
              t;
            try {
              _check_gil();
              let n = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = _PyObject_Size(e)),
                (Module.validSuspender.value = n);
            } catch (n) {
              API.fatal_error(n);
            }
            return t === -1 && _pythonexc2js(), t;
          }
        };
        o(me, "PyLengthMethods");
        var W = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 1));
          }
        };
        o(W, "PyProxyWithGet");
        var H = class {
          get(e) {
            let t = m(this),
              n;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (n = __pyproxy_getitem(t, e)),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            if (n === null)
              if (_PyErr_Occurred()) _pythonexc2js();
              else return;
            return n;
          }
        };
        o(H, "PyGetItemMethods");
        var z = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 2));
          }
        };
        o(z, "PyProxyWithSet");
        var R = class {
          set(e, t) {
            let n = m(this),
              a;
            try {
              _check_gil();
              let i = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (a = __pyproxy_setitem(n, e, t)),
                (Module.validSuspender.value = i);
            } catch (i) {
              API.fatal_error(i);
            }
            a === -1 && _pythonexc2js();
          }
          delete(e) {
            let t = m(this),
              n;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (n = __pyproxy_delitem(t, e)),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            n === -1 && _pythonexc2js();
          }
        };
        o(R, "PySetItemMethods");
        var G = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 3));
          }
        };
        o(G, "PyProxyWithHas");
        var _e = class {
          has(e) {
            let t = m(this),
              n;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (n = __pyproxy_contains(t, e)),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            return n === -1 && _pythonexc2js(), n === 1;
          }
        };
        o(_e, "PyContainsMethods");
        function* Pt(r, e) {
          try {
            for (;;) {
              _check_gil();
              let t = Module.validSuspender.value;
              Module.validSuspender.value = !1;
              let n = __pyproxy_iter_next(r);
              if (n === null) break;
              (Module.validSuspender.value = t), yield n;
            }
          } catch (t) {
            API.fatal_error(t);
          } finally {
            Module.finalizationRegistry.unregister(e), _Py_DecRef(r);
          }
          _PyErr_Occurred() && _pythonexc2js();
        }
        o(Pt, "iter_helper");
        var K = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & ((1 << 4) | (1 << 5)));
          }
        };
        o(K, "PyIterable");
        var ge = class {
          [Symbol.iterator]() {
            let e = m(this),
              t = {},
              n;
            try {
              _check_gil();
              let i = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (n = _PyObject_GetIter(e)),
                (Module.validSuspender.value = i);
            } catch (i) {
              API.fatal_error(i);
            }
            n === 0 && _pythonexc2js();
            let a = Pt(n, t);
            return Module.finalizationRegistry.register(a, [n, void 0], t), a;
          }
        };
        o(ge, "PyIterableMethods");
        async function* vt(r, e) {
          try {
            for (;;) {
              let t;
              try {
                _check_gil();
                let n = Module.validSuspender.value;
                if (
                  ((Module.validSuspender.value = !1),
                  (t = __pyproxy_aiter_next(r)),
                  (Module.validSuspender.value = n),
                  t === null)
                )
                  break;
              } catch (n) {
                API.fatal_error(n);
              }
              try {
                yield await t;
              } catch (n) {
                if (
                  n &&
                  typeof n == "object" &&
                  n.type === "StopAsyncIteration"
                )
                  return;
                throw n;
              } finally {
                t.destroy();
              }
            }
          } finally {
            Module.finalizationRegistry.unregister(e), _Py_DecRef(r);
          }
          _PyErr_Occurred() && _pythonexc2js();
        }
        o(vt, "aiter_helper");
        var V = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & ((1 << 9) | (1 << 10)));
          }
        };
        o(V, "PyAsyncIterable");
        var he = class {
          [Symbol.asyncIterator]() {
            let e = m(this),
              t = {},
              n;
            try {
              _check_gil();
              let i = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (n = _PyObject_GetAIter(e)),
                (Module.validSuspender.value = i);
            } catch (i) {
              API.fatal_error(i);
            }
            n === 0 && _pythonexc2js();
            let a = vt(n, t);
            return Module.finalizationRegistry.register(a, [n, void 0], t), a;
          }
        };
        o(he, "PyAsyncIterableMethods");
        var q = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 5));
          }
        };
        o(q, "PyIterator");
        var be = class {
          [Symbol.iterator]() {
            return this;
          }
          next(e = void 0) {
            let t, n;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxyGen_Send(m(this), e)),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            return t === null && _pythonexc2js(), t;
          }
        };
        o(be, "PyIteratorMethods");
        var J = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 11));
          }
        };
        o(J, "PyGenerator");
        var Pe = class {
          throw(e) {
            let t;
            try {
              _check_gil();
              let n = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxyGen_throw(m(this), e)),
                (Module.validSuspender.value = n);
            } catch (n) {
              API.fatal_error(n);
            }
            return t === null && _pythonexc2js(), t;
          }
          return(e) {
            let t;
            try {
              _check_gil();
              let n = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxyGen_return(m(this), e)),
                (Module.validSuspender.value = n);
            } catch (n) {
              API.fatal_error(n);
            }
            return t === null && _pythonexc2js(), t;
          }
        };
        o(Pe, "PyGeneratorMethods");
        var Y = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 10));
          }
        };
        o(Y, "PyAsyncIterator");
        var ve = class {
          [Symbol.asyncIterator]() {
            return this;
          }
          async next(e = void 0) {
            let t;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxyGen_asend(m(this), e)),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            t === null && _pythonexc2js();
            let n;
            try {
              n = await t;
            } catch (a) {
              if (a && typeof a == "object" && a.type === "StopAsyncIteration")
                return { done: !0, value: n };
              throw a;
            } finally {
              t.destroy();
            }
            return { done: !1, value: n };
          }
        };
        o(ve, "PyAsyncIteratorMethods");
        var X = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 12));
          }
        };
        o(X, "PyAsyncGenerator");
        var xe = class {
          async throw(e) {
            let t;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxyGen_athrow(m(this), e)),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            t === null && _pythonexc2js();
            let n;
            try {
              n = await t;
            } catch (a) {
              if (a && typeof a == "object") {
                if (a.type === "StopAsyncIteration")
                  return { done: !0, value: n };
                if (a.type === "GeneratorExit") return { done: !0, value: n };
              }
              throw a;
            } finally {
              t.destroy();
            }
            return { done: !1, value: n };
          }
          async return(e) {
            let t;
            try {
              _check_gil();
              let a = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxyGen_areturn(m(this))),
                (Module.validSuspender.value = a);
            } catch (a) {
              API.fatal_error(a);
            }
            t === null && _pythonexc2js();
            let n;
            try {
              n = await t;
            } catch (a) {
              if (a && typeof a == "object") {
                if (a.type === "StopAsyncIteration")
                  return { done: !0, value: n };
                if (a.type === "GeneratorExit") return { done: !0, value: e };
              }
              throw a;
            } finally {
              t.destroy();
            }
            return { done: !1, value: n };
          }
        };
        o(xe, "PyAsyncGeneratorMethods");
        var Q = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 13));
          }
        };
        o(Q, "PySequence");
        function xt(r, e) {
          let t = r.toString(),
            n = e.toString();
          return t === n ? 0 : t < n ? -1 : 1;
        }
        o(xt, "defaultCompareFunc");
        var Se = class {
          get [Symbol.isConcatSpreadable]() {
            return !0;
          }
          join(e) {
            return Array.prototype.join.call(this, e);
          }
          slice(e, t) {
            return Array.prototype.slice.call(this, e, t);
          }
          lastIndexOf(e, t) {
            return (
              t === void 0 && (t = this.length),
              Array.prototype.lastIndexOf.call(this, e, t)
            );
          }
          indexOf(e, t) {
            return Array.prototype.indexOf.call(this, e, t);
          }
          forEach(e, t) {
            Array.prototype.forEach.call(this, e, t);
          }
          map(e, t) {
            return Array.prototype.map.call(this, e, t);
          }
          filter(e, t) {
            return Array.prototype.filter.call(this, e, t);
          }
          some(e, t) {
            return Array.prototype.some.call(this, e, t);
          }
          every(e, t) {
            return Array.prototype.every.call(this, e, t);
          }
          reduce(...e) {
            return Array.prototype.reduce.apply(this, e);
          }
          reduceRight(...e) {
            return Array.prototype.reduceRight.apply(this, e);
          }
          at(e) {
            return Array.prototype.at.call(this, e);
          }
          concat(...e) {
            return Array.prototype.concat.apply(this, e);
          }
          includes(e) {
            return this.has(e);
          }
          entries() {
            return Array.prototype.entries.call(this);
          }
          keys() {
            return Array.prototype.keys.call(this);
          }
          values() {
            return Array.prototype.values.call(this);
          }
          find(e, t) {
            return Array.prototype.find.call(this, e, t);
          }
          findIndex(e, t) {
            return Array.prototype.findIndex.call(this, e, t);
          }
        };
        o(Se, "PySequenceMethods");
        var Z = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 13));
          }
        };
        o(Z, "PyMutableSequence");
        var we = class {
          reverse() {
            return this.$reverse(), this;
          }
          sort(e) {
            let t = API.public_api.pyimport("functools"),
              n = t.cmp_to_key,
              a;
            e ? (a = e) : (a = xt);
            function i(c, l) {
              return c === void 0 && l === void 0
                ? 0
                : c === void 0
                  ? 1
                  : l === void 0
                    ? -1
                    : a(c, l);
            }
            o(i, "wrapper");
            let s;
            try {
              (s = n(i)), this.$sort.callKwargs({ key: s });
            } finally {
              s?.destroy(), n.destroy(), t.destroy();
            }
            return this;
          }
          splice(e, t, ...n) {
            return t === void 0 && (t = 1 << (31 - 1)), kt(this, e, e + t, n);
          }
          push(...e) {
            for (let t of e) this.append(t);
            return this.length;
          }
          pop() {
            return vr(this, !1);
          }
          shift() {
            return vr(this, !0);
          }
          unshift(...e) {
            return (
              e.forEach((t, n) => {
                this.insert(n, t);
              }),
              this.length
            );
          }
          copyWithin(...e) {
            return Array.prototype.copyWithin.apply(this, e), this;
          }
          fill(...e) {
            return Array.prototype.fill.apply(this, e), this;
          }
        };
        o(we, "PyMutableSequenceMethods");
        function St(r, e) {
          let t = m(r),
            n;
          try {
            _check_gil();
            let a = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (n = __pyproxy_hasattr(t, e)),
              (Module.validSuspender.value = a);
          } catch (a) {
            API.fatal_error(a);
          }
          return n === -1 && _pythonexc2js(), n !== 0;
        }
        o(St, "python_hasattr");
        function wt(r, e) {
          let { shared: t } = E(r),
            n = t.cache.map,
            a;
          try {
            _check_gil();
            let i = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (a = __pyproxy_getattr(t.ptr, e, n)),
              (Module.validSuspender.value = i);
          } catch (i) {
            API.fatal_error(i);
          }
          if (a === null) {
            _PyErr_Occurred() && _pythonexc2js();
            return;
          }
          return a;
        }
        o(wt, "python_getattr");
        function At(r, e, t) {
          let n = m(r),
            a;
          try {
            _check_gil();
            let i = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (a = __pyproxy_setattr(n, e, t)),
              (Module.validSuspender.value = i);
          } catch (i) {
            API.fatal_error(i);
          }
          a === -1 && _pythonexc2js();
        }
        o(At, "python_setattr");
        function It(r, e) {
          let t = m(r),
            n;
          try {
            _check_gil();
            let a = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (n = __pyproxy_delattr(t, e)),
              (Module.validSuspender.value = a);
          } catch (a) {
            API.fatal_error(a);
          }
          n === -1 && _pythonexc2js();
        }
        o(It, "python_delattr");
        function kt(r, e, t, n) {
          let a = m(r),
            i;
          try {
            _check_gil();
            let s = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (i = __pyproxy_slice_assign(a, e, t, n)),
              (Module.validSuspender.value = s);
          } catch (s) {
            API.fatal_error(s);
          }
          return i === null && _pythonexc2js(), i;
        }
        o(kt, "python_slice_assign");
        function vr(r, e) {
          let t = m(r),
            n;
          try {
            _check_gil();
            let a = Module.validSuspender.value;
            (Module.validSuspender.value = !1),
              (n = __pyproxy_pop(t, e)),
              (Module.validSuspender.value = a);
          } catch (a) {
            API.fatal_error(a);
          }
          return n === null && _pythonexc2js(), n;
        }
        o(vr, "python_pop");
        function fe(r, e, t) {
          return r instanceof Function
            ? e in r &&
                ![
                  "name",
                  "length",
                  "caller",
                  "arguments",
                  t ? "prototype" : void 0,
                ].includes(e)
            : e in r;
        }
        o(fe, "filteredHasKey");
        var T = {
          isExtensible() {
            return !0;
          },
          has(r, e) {
            return fe(r, e, !1)
              ? !0
              : typeof e == "symbol"
                ? !1
                : (e.startsWith("$") && (e = e.slice(1)), St(r, e));
          },
          get(r, e) {
            return typeof e == "symbol" || fe(r, e, !0)
              ? Reflect.get(r, e)
              : (e.startsWith("$") && (e = e.slice(1)), wt(r, e));
          },
          set(r, e, t) {
            let n = Object.getOwnPropertyDescriptor(r, e);
            return n && !n.writable && !n.set
              ? !1
              : typeof e == "symbol" || fe(r, e, !0)
                ? Reflect.set(r, e, t)
                : (e.startsWith("$") && (e = e.slice(1)), At(r, e, t), !0);
          },
          deleteProperty(r, e) {
            let t = Object.getOwnPropertyDescriptor(r, e);
            return t && !t.configurable
              ? !1
              : typeof e == "symbol" || fe(r, e, !0)
                ? Reflect.deleteProperty(r, e)
                : (e.startsWith("$") && (e = e.slice(1)), It(r, e), !0);
          },
          ownKeys(r) {
            let e = m(r),
              t;
            try {
              _check_gil();
              let n = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (t = __pyproxy_ownKeys(e)),
                (Module.validSuspender.value = n);
            } catch (n) {
              API.fatal_error(n);
            }
            return (
              t === null && _pythonexc2js(), t.push(...Reflect.ownKeys(r)), t
            );
          },
          apply(r, e, t) {
            return r.apply(e, t);
          },
        };
        function Ke(r) {
          return (
            r &&
            typeof r == "object" &&
            r.constructor &&
            r.constructor.name === "PythonError"
          );
        }
        o(Ke, "isPythonError");
        var Et = {
            isExtensible() {
              return !0;
            },
            has(r, e) {
              return typeof e == "string" && /^[0-9]*$/.test(e)
                ? Number(e) < r.length
                : T.has(r, e);
            },
            get(r, e) {
              if (e === "length") return r.length;
              if (typeof e == "string" && /^[0-9]*$/.test(e))
                try {
                  return H.prototype.get.call(r, Number(e));
                } catch (t) {
                  if (Ke(t)) return;
                  throw t;
                }
              return T.get(r, e);
            },
            set(r, e, t) {
              if (typeof e == "string" && /^[0-9]*$/.test(e))
                try {
                  return R.prototype.set.call(r, Number(e), t), !0;
                } catch (n) {
                  if (Ke(n)) return !1;
                  throw n;
                }
              return T.set(r, e, t);
            },
            deleteProperty(r, e) {
              if (typeof e == "string" && /^[0-9]*$/.test(e))
                try {
                  return R.prototype.delete.call(r, Number(e)), !0;
                } catch (t) {
                  if (Ke(t)) return !1;
                  throw t;
                }
              return T.deleteProperty(r, e);
            },
            ownKeys(r) {
              let e = T.ownKeys(r);
              return (
                e.push(
                  ...Array.from({ length: r.length }, (t, n) => n.toString()),
                ),
                e.push("length"),
                e
              );
            },
          },
          ee = class extends _ {
            static [Symbol.hasInstance](e) {
              return API.isPyProxy(e) && !!(b(e) & (1 << 6));
            }
          };
        o(ee, "PyAwaitable");
        var Ae = class {
          _ensure_future() {
            let { shared: e } = Ee(this);
            if (e.promise) return e.promise;
            let t = e.ptr;
            t || E(this);
            let n,
              a,
              i = new Promise((c, l) => {
                (n = c), (a = l);
              }),
              s;
            try {
              _check_gil();
              let c = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (s = __pyproxy_ensure_future(t, n, a)),
                (Module.validSuspender.value = c);
            } catch (c) {
              API.fatal_error(c);
            }
            return (
              s === -1 && _pythonexc2js(), (e.promise = i), this.destroy(), i
            );
          }
          then(e, t) {
            return this._ensure_future().then(e, t);
          }
          catch(e) {
            return this._ensure_future().catch(e);
          }
          finally(e) {
            return this._ensure_future().finally(e);
          }
        };
        o(Ae, "PyAwaitableMethods");
        var re = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && !!(b(e) & (1 << 8));
          }
        };
        o(re, "PyCallable");
        var te = class {
          apply(e, t) {
            return (
              (t = function (...n) {
                return n;
              }.apply(void 0, t)),
              (t = hr(this, e, t)),
              Module.callPyObject(m(this), t)
            );
          }
          call(e, ...t) {
            return (t = hr(this, e, t)), Module.callPyObject(m(this), t);
          }
          callKwargs(...e) {
            if (e.length === 0)
              throw new TypeError(
                "callKwargs requires at least one argument (the key word argument object)",
              );
            let t = e.pop();
            if (t.constructor !== void 0 && t.constructor.name !== "Object")
              throw new TypeError("kwargs argument is not an object");
            return Module.callPyObjectKwargs(m(this), e, t);
          }
          callSyncifying(...e) {
            return Pr(m(this), e, {});
          }
          callSyncifyingKwargs(...e) {
            if (e.length === 0)
              throw new TypeError(
                "callKwargs requires at least one argument (the key word argument object)",
              );
            let t = e.pop();
            if (t.constructor !== void 0 && t.constructor.name !== "Object")
              throw new TypeError("kwargs argument is not an object");
            return Pr(m(this), e, t);
          }
          bind(e, ...t) {
            let { shared: n, props: a } = E(this),
              { boundArgs: i, boundThis: s, isBound: c } = a,
              l = e;
            c && (l = s);
            let u = i.concat(t);
            return (
              (a = Object.assign({}, a, {
                boundArgs: u,
                isBound: !0,
                boundThis: l,
              })),
              ke(n.ptr, { shared: n, flags: b(this), props: a })
            );
          }
          captureThis() {
            let { props: e, shared: t } = E(this);
            return (
              (e = Object.assign({}, e, { captureThis: !0 })),
              ke(t.ptr, { shared: t, flags: b(this), props: e })
            );
          }
        };
        o(te, "PyCallableMethods");
        te.prototype.prototype = Function.prototype;
        var Mt = new Map([
            ["i8", Int8Array],
            ["u8", Uint8Array],
            ["u8clamped", Uint8ClampedArray],
            ["i16", Int16Array],
            ["u16", Uint16Array],
            ["i32", Int32Array],
            ["u32", Uint32Array],
            ["i32", Int32Array],
            ["u32", Uint32Array],
            ["i64", globalThis.BigInt64Array],
            ["u64", globalThis.BigUint64Array],
            ["f32", Float32Array],
            ["f64", Float64Array],
            ["dataview", DataView],
          ]),
          ne = class extends _ {
            static [Symbol.hasInstance](e) {
              return API.isPyProxy(e) && !!(b(e) & (1 << 7));
            }
          };
        o(ne, "PyBuffer");
        var Ie = class {
          getBuffer(e) {
            let t;
            if (e && ((t = Mt.get(e)), t === void 0))
              throw new Error(`Unknown type ${e}`);
            let n = m(this),
              a;
            try {
              _check_gil();
              let x = Module.validSuspender.value;
              (Module.validSuspender.value = !1),
                (a = __pyproxy_get_buffer(n)),
                (Module.validSuspender.value = x);
            } catch (x) {
              API.fatal_error(x);
            }
            a === null && _pythonexc2js();
            let {
                start_ptr: i,
                smallest_ptr: s,
                largest_ptr: c,
                readonly: l,
                format: u,
                itemsize: d,
                shape: f,
                strides: p,
                view: y,
                c_contiguous: g,
                f_contiguous: A,
              } = a,
              k = !1;
            try {
              let x = !1;
              t === void 0 &&
                ([t, x] = Module.processBufferFormatString(
                  u,
                  " In this case, you can pass an explicit type argument.",
                ));
              let I = parseInt(t.name.replace(/[^0-9]/g, "")) / 8 || 1;
              if (x && I > 1)
                throw new Error(
                  "Javascript has no native support for big endian buffers. In this case, you can pass an explicit type argument. For instance, `getBuffer('dataview')` will return a `DataView`which has native support for reading big endian data. Alternatively, toJs will automatically convert the buffer to little endian.",
                );
              let F = c - s;
              if (F !== 0 && (i % I !== 0 || s % I !== 0 || c % I !== 0))
                throw new Error(
                  `Buffer does not have valid alignment for a ${t.name}`,
                );
              let C = F / I,
                je = (i - s) / I,
                j;
              F === 0 ? (j = new t()) : (j = new t(HEAPU32.buffer, s, C));
              for (let Qr of p.keys()) p[Qr] /= I;
              return (
                (k = !0),
                Object.create(
                  N.prototype,
                  Object.getOwnPropertyDescriptors({
                    offset: je,
                    readonly: l,
                    format: u,
                    itemsize: d,
                    ndim: f.length,
                    nbytes: F,
                    shape: f,
                    strides: p,
                    data: j,
                    c_contiguous: g,
                    f_contiguous: A,
                    _view_ptr: y,
                    _released: !1,
                  }),
                )
              );
            } finally {
              if (!k)
                try {
                  _check_gil();
                  let x = Module.validSuspender.value;
                  (Module.validSuspender.value = !1),
                    _PyBuffer_Release(y),
                    _PyMem_Free(y),
                    (Module.validSuspender.value = x);
                } catch (x) {
                  API.fatal_error(x);
                }
            }
          }
        };
        o(Ie, "PyBufferMethods");
        var ae = class extends _ {
          static [Symbol.hasInstance](e) {
            return API.isPyProxy(e) && e.type === "dict";
          }
        };
        o(ae, "PyDict");
        var N = class {
          constructor() {
            throw new TypeError("PyBufferView is not a constructor");
          }
          release() {
            if (!this._released) {
              try {
                _check_gil();
                let e = Module.validSuspender.value;
                (Module.validSuspender.value = !1),
                  _PyBuffer_Release(this._view_ptr),
                  _PyMem_Free(this._view_ptr),
                  (Module.validSuspender.value = e);
              } catch (e) {
                API.fatal_error(e);
              }
              (this._released = !0), (this.data = null);
            }
          }
        };
        o(N, "PyBufferView");
        var Mr = w(He());
        function Fr(r) {
          if (typeof r == "string") r = new Error(r);
          else if (r && typeof r == "object" && r.name === "ExitStatus") {
            let e = r.status;
            (r = new $(r.message)), (r.status = e);
          } else if (
            typeof r != "object" ||
            r === null ||
            typeof r.stack != "string" ||
            typeof r.message != "string"
          ) {
            let e = API.getTypeTag(r),
              t = `A value of type ${typeof r} with tag ${e} was thrown as an error!`;
            try {
              t += `\nString interpolation of the thrown value gives """${r}""".`;
            } catch {
              t += `\nString interpolation of the thrown value fails.`;
            }
            try {
              t += `\nThe thrown value's toString method returns """${r.toString()}""".`;
            } catch {
              t += `\nThe thrown value's toString method fails.`;
            }
            r = new Error(t);
          }
          return r;
        }
        o(Fr, "ensureCaughtObjectIsError");
        var oe = class extends Error {
          constructor(t, n, a) {
            n ||
              (n = `The exception is an object of type ${t} at address ${a} which does not inherit from std::exception`);
            super(n);
            this.ty = t;
          }
        };
        o(oe, "CppException");
        Object.defineProperty(oe.prototype, "name", {
          get() {
            return `${this.constructor.name} ${this.ty}`;
          },
        });
        var Ft = WebAssembly.Exception || function () {},
          Or = o((r) => r instanceof Ft, "isWasmException");
        function Dr(r) {
          if (Or(r))
            if (r.is(Module.jsWrapperTag)) r = r.getArg(Module.jsWrapperTag, 0);
            else return r;
          let [e, t] = Module.getExceptionMessage(r);
          return new oe(e, t, r);
        }
        o(Dr, "convertCppException");
        Tests.convertCppException = Dr;
        var kr = !1;
        API.fatal_error = function (r) {
          if (r && r.pyodide_fatal_error) return;
          if (kr) {
            console.error("Recursive call to fatal_error. Inner error was:"),
              console.error(r);
            return;
          }
          if (r instanceof L) throw r;
          typeof r == "number" || Or(r) ? (r = Dr(r)) : (r = Fr(r)),
            (r.pyodide_fatal_error = !0),
            (kr = !0);
          let e = r instanceof $;
          e ||
            (console.error(
              "Pyodide has suffered a fatal error. Please report this to the Pyodide maintainers.",
            ),
            console.error("The cause of the fatal error was:"),
            API.inTestHoist
              ? (console.error(r.toString()), console.error(r.stack))
              : console.error(r));
          try {
            e || _dump_traceback();
            let n = `Pyodide already ${e ? "exited" : "fatally failed"} and can no longer be used.`;
            for (let a of Reflect.ownKeys(API.public_api))
              (typeof a == "string" && a.startsWith("_")) ||
                a === "version" ||
                Object.defineProperty(API.public_api, a, {
                  enumerable: !0,
                  configurable: !0,
                  get: () => {
                    throw new Error(n);
                  },
                });
            API.on_fatal && API.on_fatal(r);
          } catch (t) {
            console.error(
              "Another error occurred while handling the fatal error:",
            ),
              console.error(t);
          }
          throw r;
        };
        API.maybe_fatal_error = function (r) {
          (API._skip_unwind_fatal_error && r === "unwind") ||
            API.fatal_error(r);
        };
        var Xe = [];
        API.capture_stderr = function () {
          (Xe = []),
            FS.createDevice("/dev", "capture_stderr", null, (r) => Xe.push(r)),
            FS.closeStream(2),
            FS.open("/dev/capture_stderr", 1);
        };
        API.restore_stderr = function () {
          return (
            FS.closeStream(2),
            FS.unlink("/dev/capture_stderr"),
            FS.open("/dev/stderr", 1),
            new TextDecoder().decode(new Uint8Array(Xe))
          );
        };
        API.fatal_loading_error = function (...r) {
          let e = r.join(" ");
          if (_PyErr_Occurred()) {
            API.capture_stderr(), _PyErr_Print();
            let t = API.restore_stderr();
            e += `\n` + t;
          }
          throw new se(e);
        };
        function Qe(r) {
          if (!r) return !1;
          let e = r.fileName || "";
          if (e.includes("wasm-function")) return !0;
          if (!e.includes("pyodide.asm.js")) return !1;
          let t = r.functionName || "";
          return (
            t.startsWith("Object.") && (t = t.slice(7)),
            API.public_api && t in API.public_api && t !== "PythonError"
              ? ((r.functionName = t), !1)
              : !0
          );
        }
        o(Qe, "isPyodideFrame");
        function Er(r) {
          return Qe(r) && r.functionName === "new_error";
        }
        o(Er, "isErrorStart");
        Module.handle_js_error = function (r) {
          if (r && r.pyodide_fatal_error) throw r;
          if (r instanceof Module._PropagatePythonError) return;
          let e = !1;
          r instanceof M &&
            (e = _restore_sys_last_exception(r.__error_address));
          let t, n;
          try {
            t = Mr.default.parse(r);
          } catch {
            n = !0;
          }
          if ((n && (r = Fr(r)), !e)) {
            let a = _JsProxy_create(r);
            _set_error(a), _Py_DecRef(a);
          }
          if (!n) {
            if (Er(t[0]) || Er(t[1])) for (; Qe(t[0]); ) t.shift();
            for (let a of t) {
              if (Qe(a)) break;
              let i = stringToNewUTF8(a.functionName || "???"),
                s = stringToNewUTF8(a.fileName || "???.js");
              __PyTraceback_Add(i, s, a.lineNumber), _free(i), _free(s);
            }
          }
        };
        var M = class extends Error {
          constructor(t, n, a) {
            let i = Error.stackTraceLimit;
            Error.stackTraceLimit = 1 / 0;
            super(n);
            (Error.stackTraceLimit = i),
              (this.type = t),
              (this.__error_address = a);
          }
        };
        o(M, "PythonError");
        API.PythonError = M;
        var ie = class extends Error {
          constructor() {
            super(
              "If you are seeing this message, an internal Pyodide error has occurred. Please report it to the Pyodide maintainers.",
            );
          }
        };
        o(ie, "_PropagatePythonError");
        function Ot(r) {
          Object.defineProperty(r.prototype, "name", { value: r.name });
        }
        o(Ot, "setName");
        var se = class extends Error {};
        o(se, "FatalPyodideError");
        var $ = class extends Error {};
        o($, "Exit");
        var L = class extends Error {};
        o(L, "NoGilError");
        [ie, se, $, M, L].forEach(Ot);
        API.NoGilError = L;
        Module._PropagatePythonError = ie;
        API.errorConstructors = new Map(
          [
            EvalError,
            RangeError,
            ReferenceError,
            SyntaxError,
            TypeError,
            URIError,
            globalThis.DOMException,
            globalThis.AssertionError,
            globalThis.SystemError,
          ]
            .filter((r) => r)
            .map((r) => [r.constructor.name, r]),
        );
        API.deserializeError = function (r, e, t) {
          let n = API.errorConstructors.get(r) || Error,
            a = new n(e);
          return (
            API.errorConstructors.has(r) || (a.name = r),
            (a.message = e),
            (a.stack = t),
            a
          );
        };
        var Tr = {
          PyProxy: _,
          PyProxyWithLength: B,
          PyProxyWithGet: W,
          PyProxyWithSet: z,
          PyProxyWithHas: G,
          PyDict: ae,
          PyIterable: K,
          PyAsyncIterable: V,
          PyIterator: q,
          PyAsyncIterator: Y,
          PyGenerator: J,
          PyAsyncGenerator: X,
          PyAwaitable: ee,
          PyCallable: re,
          PyBuffer: ne,
          PyBufferView: N,
          PythonError: M,
          PySequence: Q,
          PyMutableSequence: Z,
        };
        var Rr = o((r) => {
            r.id !== "canvas" &&
              console.warn(
                "If you are using canvas element for SDL library, it should have id 'canvas' to work properly.",
              ),
              (Module.canvas = r);
          }, "setCanvas2D"),
          Nr = o(() => Module.canvas, "getCanvas2D"),
          Dt = o((r) => {
            Rr(r);
          }, "setCanvas3D"),
          Tt = o(() => Nr(), "getCanvas3D"),
          $r = {
            setCanvas2D: Rr,
            getCanvas2D: Nr,
            setCanvas3D: Dt,
            getCanvas3D: Tt,
          };
        function Me() {
          let r = Promise.resolve();
          async function e() {
            let t = r,
              n;
            return (r = new Promise((a) => (n = a))), await t, n;
          }
          return o(e, "acquireLock"), e;
        }
        o(Me, "createLock");
        var Lr = o((r) => {
          let e = {};
          return (...t) => {
            let n = t[0];
            if (n in e) return e[n];
            {
              let a = r(n);
              return (e[n] = a), a;
            }
          };
        }, "memoize");
        function Rt(r, e, t) {
          let n = r.substring(0, r.lastIndexOf("/")),
            a = e || [];
          a = a.concat(API.defaultLdLibraryPath, [n]);
          let i = o((l) => {
              for (let u of a) {
                let d = Module.PATH.join2(u, l);
                if (Module.FS.findObject(d) !== null) return d;
              }
              return l;
            }, "resolvePath"),
            s = o((l) => Module.FS.readFile(i(l)), "readFile");
          return (
            t !== void 0 && (s = o((l) => t(i(l)), "readFile")),
            { findObject: (l, u) => Module.FS.findObject(i(l), u), readFile: s }
          );
        }
        o(Rt, "createDynlibFS");
        var Nt = Me();
        async function Cr(r, e, t, n) {
          let a = await Nt(),
            i = Rt(r, t, n);
          try {
            if (
              (await Module.loadDynamicLibrary(r, {
                loadAsync: !0,
                nodelete: !0,
                allowUndefined: !0,
                global: e,
                fs: i,
              }),
              e && Module.PATH.isAbs(r))
            ) {
              let s = Module.PATH.basename(r);
              Module.LDSO.loadedLibsByName[s] ||
                (Module.LDSO.loadedLibsByName[s] =
                  Module.LDSO.loadedLibsByName[r]);
            }
          } catch (s) {
            if (
              s &&
              s.message &&
              s.message.includes("need to see wasm magic number")
            ) {
              console.warn(
                `Failed to load dynlib ${r}. We probably just tried to load a linux .so file or something.`,
              );
              return;
            }
            throw s;
          } finally {
            a();
          }
        }
        o(Cr, "loadDynlib");
        async function Ze(r, e) {
          let t = `${API.sitepackages}/${r.file_name.split("-")[0]}.libs`,
            n = Lr(Module.FS.readFile),
            a = !!r.shared_library,
            i;
          if (a) i = e.map((s) => ({ path: s, global: !0 }));
          else {
            let s = $t(e, n);
            i = e.map((c) => {
              let l = s.has(Module.PATH.basename(c));
              return { path: c, global: l || !!r.shared_library };
            });
          }
          i.sort((s, c) => Number(c.global) - Number(s.global));
          for (let { path: s, global: c } of i) await Cr(s, c, [t], n);
        }
        o(Ze, "loadDynlibsFromPackage");
        function $t(r, e) {
          let t = Module.FS.readFile;
          e !== void 0 && (t = e);
          let n = new Set();
          return (
            r.forEach((a) => {
              let i = t(a);
              Module.getDylinkMetadata(i).neededDynlibs.forEach((c) => {
                n.add(c);
              });
            }),
            n
          );
        }
        o($t, "calculateGlobalLibs");
        API.loadDynlib = Cr;
        API.loadDynlibsFromPackage = Ze;
        var Lt = /[-_.]+/g;
        function jr(r) {
          return r.replace(Lt, "-").toLowerCase();
        }
        o(jr, "canonicalizePackageName");
        var Ct = /^.*?([^\/]*)\.whl$/;
        function Ur(r) {
          let e = Ct.exec(r);
          if (e) {
            let t = e[1].toLowerCase().split("-");
            return {
              name: t[0],
              version: t[1],
              fileName: t.join("-") + ".whl",
            };
          }
        }
        o(Ur, "uriToPackageData");
        async function jt(r) {
          await mr();
          let e = await r;
          if (!e.packages)
            throw new Error(
              "Loaded pyodide lock file does not contain the expected key 'packages'.",
            );
          (API.lockfile_info = e.info),
            (API.lockfile_packages = e.packages),
            (API.lockfile_unvendored_stdlibs_and_test = []),
            (API.repodata_info = e.info),
            (API.repodata_packages = e.packages),
            (API._import_name_to_package_name = new Map());
          for (let t of Object.keys(API.lockfile_packages)) {
            let n = API.lockfile_packages[t];
            for (let a of n.imports) API._import_name_to_package_name.set(a, t);
            n.package_type === "cpython_module" &&
              API.lockfile_unvendored_stdlibs_and_test.push(t);
          }
          (API.lockfile_unvendored_stdlibs =
            API.lockfile_unvendored_stdlibs_and_test.filter(
              (t) => t !== "test",
            )),
            await Oe(API.config.packages, { messageCallback() {} });
        }
        o(jt, "initializePackageIndex");
        API.lockFilePromise &&
          (API.packageIndexReady = jt(API.lockFilePromise));
        var Fe;
        API.setCdnUrl = function (r) {
          Fe = r;
        };
        var le = "default channel";
        function Br() {
          let r = o(() => {}, "_resolve"),
            e = o(() => {}, "_reject"),
            t = new Promise((n, a) => {
              (r = n), (e = a);
            });
          return (t.resolve = r), (t.reject = e), t;
        }
        o(Br, "createDonePromise");
        function Wr(r, e) {
          let t = jr(r);
          if (e.has(t)) return;
          let n = API.lockfile_packages[t];
          if (!n) throw new Error(`No known package with name '${r}'`);
          if (
            (e.set(t, {
              name: n.name,
              normalizedName: t,
              channel: le,
              depends: n.depends,
              installPromise: void 0,
              done: Br(),
              packageData: n,
            }),
            O[n.name] === void 0)
          )
            for (let a of n.depends) Wr(a, e);
        }
        o(Wr, "addPackageToLoad");
        function Ut(r, e) {
          let t = new Map();
          for (let n of r) {
            let a = Ur(n);
            if (a === void 0) {
              Wr(n, t);
              continue;
            }
            let { name: i, version: s, fileName: c } = a,
              l = n;
            if (t.has(i) && t.get(i).channel !== l) {
              e(`Loading same package ${i} from ${l} and ${t.get(i).channel}`);
              continue;
            }
            t.set(i, {
              name: i,
              normalizedName: i,
              channel: l,
              depends: [],
              installPromise: void 0,
              done: Br(),
              packageData: {
                name: i,
                version: s,
                file_name: c,
                install_dir: "site",
                sha256: "",
                package_type: "package",
                imports: [],
                depends: [],
                shared_library: !1,
              },
            });
          }
          return t;
        }
        o(Ut, "recursiveDependencies");
        async function Bt(r, e = !0) {
          let t;
          h
            ? ((t = API.config.packageCacheDir),
              await U.mkdir(API.config.packageCacheDir, { recursive: !0 }))
            : (t = API.config.indexURL);
          let n, a, i;
          if (r.channel === le) {
            if (!(r.normalizedName in API.lockfile_packages))
              throw new Error(
                `Internal error: no entry for package named ${name}`,
              );
            let c = API.lockfile_packages[r.normalizedName];
            (n = c.file_name), (a = ye(n, t)), (i = "sha256-" + gr(c.sha256));
          } else (a = r.channel), (i = void 0);
          e || (i = void 0);
          try {
            return await D(a, i);
          } catch (c) {
            if (!h || r.channel !== le) throw c;
          }
          console.log(
            `Didn't find package ${n} locally, attempting to load from ${Fe}`,
          );
          let s = await D(Fe + n);
          return (
            console.log(
              `Package ${n} loaded from ${Fe}, caching the wheel in node_modules for future use.`,
            ),
            await U.writeFile(a, s),
            s
          );
        }
        o(Bt, "downloadPackage");
        async function Wt(r, e, t) {
          let n = API.lockfile_packages[r];
          n ||
            (n = {
              name: "",
              version: "",
              file_name: ".whl",
              install_dir: "site",
              sha256: "",
              package_type: "package",
              imports: [],
              depends: [],
              shared_library: !1,
            });
          let a = n.file_name,
            i = API.package_loader.unpack_buffer.callKwargs({
              buffer: e,
              filename: a,
              target: n.install_dir,
              calculate_dynlibs: !0,
              installer: "pyodide.loadPackage",
              source: t === le ? "pyodide" : t,
            });
          await Ze(n, i);
        }
        o(Wt, "installPackage");
        async function Ht(r, e, t, n, a = !0) {
          if (O[r.name] === void 0)
            try {
              let i = await Bt(r, a),
                s = r.depends.map((c) =>
                  e.has(c) ? e.get(c).done : Promise.resolve(),
                );
              await API.bootstrapFinalizedPromise,
                await Promise.all(s),
                await Wt(r.normalizedName, i, r.channel),
                t.add(r.packageData),
                (O[r.name] = r.channel);
            } catch (i) {
              n.set(r.name, i);
            } finally {
              r.done.resolve();
            }
        }
        o(Ht, "downloadAndInstall");
        var zt = Me();
        function Gt({ name: r, version: e, file_name: t, package_type: n }) {
          return { name: r, version: e, fileName: t, packageType: n };
        }
        o(Gt, "filterPackageData");
        async function Oe(r, e = { checkIntegrity: !0 }) {
          let t = new Set(),
            n = e.messageCallback || console.log,
            a = e.errorCallback || console.error;
          r instanceof _ && (r = r.toJs()), Array.isArray(r) || (r = [r]);
          let i = Ut(r, a);
          for (let [u, { name: d, normalizedName: f, channel: p }] of i) {
            let y = O[d];
            y !== void 0 &&
              (i.delete(f),
              y === p || p === le
                ? n(`${d} already loaded from ${y}`)
                : a(
                    `URI mismatch, attempting to load package ${d} from ${p} while it is already loaded from ${y}. To override a dependency, load the custom package first.`,
                  ));
          }
          if (i.size === 0) return n("No new packages to load"), [];
          let s = Array.from(i.values(), ({ name: u }) => u).join(", "),
            c = new Map(),
            l = await zt();
          try {
            n(`Loading ${s}`);
            for (let [u, d] of i) {
              if (O[d.name]) {
                i.delete(d.normalizedName);
                continue;
              }
              d.installPromise = Ht(d, i, t, c, e.checkIntegrity);
            }
            if (
              (await Promise.all(
                Array.from(i.values()).map(({ installPromise: u }) => u),
              ),
              Module.reportUndefinedSymbols(),
              t.size > 0)
            ) {
              let u = Array.from(t, (d) => d.name)
                .sort()
                .join(", ");
              n(`Loaded ${u}`);
            }
            if (c.size > 0) {
              let u = Array.from(c.keys()).join(", ");
              n(`Failed to load ${u}`);
              for (let [d, f] of c)
                a(`The following error occurred while loading ${d}:`),
                  a(f.message);
            }
            return API.importlib.invalidate_caches(), Array.from(t, Gt);
          } finally {
            l();
          }
        }
        o(Oe, "loadPackage");
        var O = {};
        var Hr = "0.25.1";
        var tr = h ? v("fs") : void 0,
          Vr = h ? v("tty") : void 0;
        function qr(r) {
          try {
            tr.fsyncSync(r);
          } catch (e) {
            if (e && e.code === "EINVAL") return;
            throw e;
          }
        }
        o(qr, "nodeFsync");
        var Jr = !1,
          Le = {},
          S = {};
        function rr(r) {
          Le[S.stdin] = r;
        }
        o(rr, "_setStdinOps");
        function Kt(r) {
          Le[S.stdout] = r;
        }
        o(Kt, "_setStdoutOps");
        function Vt(r) {
          Le[S.stderr] = r;
        }
        o(Vt, "_setStderrOps");
        function qt(r) {
          return r && typeof r == "object" && "errno" in r;
        }
        o(qt, "isErrnoError");
        var Jt = new Int32Array(
          new WebAssembly.Memory({ shared: !0, initial: 1, maximum: 1 }).buffer,
        );
        function Yt(r) {
          try {
            return Atomics.wait(Jt, 0, 0, r), !0;
          } catch {
            return !1;
          }
        }
        o(Yt, "syncSleep");
        function Xt(r) {
          for (;;)
            try {
              return r();
            } catch (e) {
              if (e && e.code === "EAGAIN" && Yt(100)) continue;
              throw e;
            }
        }
        o(Xt, "handleEAGAIN");
        function zr(r, e, t) {
          let n;
          try {
            n = Xt(e);
          } catch (a) {
            throw a && a.code && Module.ERRNO_CODES[a.code]
              ? new FS.ErrnoError(Module.ERRNO_CODES[a.code])
              : qt(a)
                ? a
                : (console.error("Error thrown in read:"),
                  console.error(a),
                  new FS.ErrnoError(29));
          }
          if (n === void 0)
            throw (
              (console.warn(
                `${t} returned undefined; a correct implementation must return a number`,
              ),
              new FS.ErrnoError(29))
            );
          return n !== 0 && (r.node.timestamp = Date.now()), n;
        }
        o(zr, "readWriteHelper");
        var Gr = o(
            (r, e, t) => API.typedArrayAsUint8Array(r).subarray(e, e + t),
            "prepareBuffer",
          ),
          er = {
            open: function (r) {
              let e = Le[r.node.rdev];
              if (!e) throw new FS.ErrnoError(43);
              (r.devops = e), (r.tty = r.devops.isatty), (r.seekable = !1);
            },
            close: function (r) {
              r.stream_ops.fsync(r);
            },
            fsync: function (r) {
              let e = r.devops;
              e.fsync && e.fsync();
            },
            read: function (r, e, t, n, a) {
              return (e = Gr(e, t, n)), zr(r, () => r.devops.read(e), "read");
            },
            write: function (r, e, t, n, a) {
              return (e = Gr(e, t, n)), zr(r, () => r.devops.write(e), "write");
            },
          };
        function Ce() {
          Jr &&
            (FS.closeStream(0),
            FS.closeStream(1),
            FS.closeStream(2),
            FS.open("/dev/stdin", 0),
            FS.open("/dev/stdout", 1),
            FS.open("/dev/stderr", 1));
        }
        o(Ce, "refreshStreams");
        API.initializeStreams = function (r, e, t) {
          let n = FS.createDevice.major++;
          (S.stdin = FS.makedev(n, 0)),
            (S.stdout = FS.makedev(n, 1)),
            (S.stderr = FS.makedev(n, 2)),
            FS.registerDevice(S.stdin, er),
            FS.registerDevice(S.stdout, er),
            FS.registerDevice(S.stderr, er),
            FS.unlink("/dev/stdin"),
            FS.unlink("/dev/stdout"),
            FS.unlink("/dev/stderr"),
            FS.mkdev("/dev/stdin", S.stdin),
            FS.mkdev("/dev/stdout", S.stdout),
            FS.mkdev("/dev/stderr", S.stderr),
            ue({ stdin: r }),
            nr({ batched: e }),
            ar({ batched: t }),
            (Jr = !0),
            Ce();
        };
        function Qt() {
          ue(h ? new Te(process.stdin.fd) : { stdin: () => prompt() });
        }
        o(Qt, "setDefaultStdin");
        function Zt() {
          rr(new De()), Ce();
        }
        o(Zt, "setStdinError");
        function ue(r = {}) {
          let { stdin: e, error: t, isatty: n, autoEOF: a, read: i } = r,
            s = +!!e + +!!t + +!!i;
          if (s > 1)
            throw new TypeError(
              "At most one of stdin, read, and error must be provided.",
            );
          if (!e && a !== void 0)
            throw new TypeError(
              "The 'autoEOF' option can only be used with the 'stdin' option",
            );
          if (s === 0) {
            Qt();
            return;
          }
          t && Zt(),
            e && ((a = a === void 0 ? !0 : a), rr(new Re(e.bind(r), !!n, a))),
            i && rr(r),
            Ce();
        }
        o(ue, "setStdin");
        function Yr(r, e, t) {
          let { raw: n, isatty: a, batched: i, write: s } = r,
            c = +!!n + +!!i + +!!s;
          if (
            (c === 0 &&
              ((r = t()), ({ raw: n, isatty: a, batched: i, write: s } = r)),
            c > 1)
          )
            throw new TypeError(
              "At most one of 'raw', 'batched', and 'write' must be passed",
            );
          if (!n && !s && a)
            throw new TypeError(
              "Cannot set 'isatty' to true unless 'raw' or 'write' is provided",
            );
          n && e(new Ne(n.bind(r), !!a)),
            i && e(new $e(i.bind(r))),
            s && e(r),
            Ce();
        }
        o(Yr, "_setStdwrite");
        function en() {
          return h
            ? new ce(process.stdout.fd)
            : { batched: (r) => console.log(r) };
        }
        o(en, "_getStdoutDefaults");
        function rn() {
          return h
            ? new ce(process.stderr.fd)
            : { batched: (r) => console.warn(r) };
        }
        o(rn, "_getStderrDefaults");
        function nr(r = {}) {
          Yr(r, Kt, en);
        }
        o(nr, "setStdout");
        function ar(r = {}) {
          Yr(r, Vt, rn);
        }
        o(ar, "setStderr");
        var tn = new TextEncoder(),
          Kr = new TextDecoder(),
          De = class {
            read(e) {
              throw new FS.ErrnoError(29);
            }
          };
        o(De, "ErrorReader");
        var Te = class {
          constructor(e) {
            (this.fd = e), (this.isatty = Vr.isatty(e));
          }
          read(e) {
            try {
              return tr.readSync(this.fd, e);
            } catch (t) {
              if (t.toString().includes("EOF")) return 0;
              throw t;
            }
          }
          fsync() {
            qr(this.fd);
          }
        };
        o(Te, "NodeReader");
        var Re = class {
          constructor(e, t, n) {
            (this.infunc = e),
              (this.isatty = t),
              (this.autoEOF = n),
              (this.index = 0),
              (this.saved = void 0),
              (this.insertEOF = !1);
          }
          _getInput() {
            if (this.saved) return this.saved;
            let e = this.infunc();
            if (typeof e == "number") return e;
            if (e != null) {
              if (ArrayBuffer.isView(e)) {
                if (e.BYTES_PER_ELEMENT !== 1)
                  throw (
                    (console.warn(
                      `Expected BYTES_PER_ELEMENT to be 1, infunc gave ${e.constructor}`,
                    ),
                    new FS.ErrnoError(29))
                  );
                return e;
              }
              if (typeof e == "string")
                return e.endsWith(`\n`) || (e += `\n`), e;
              if (Object.prototype.toString.call(e) === "[object ArrayBuffer]")
                return new Uint8Array(e);
              throw (
                (console.warn(
                  "Expected result to be undefined, null, string, array buffer, or array buffer view",
                ),
                new FS.ErrnoError(29))
              );
            }
          }
          read(e) {
            if (this.insertEOF) return (this.insertEOF = !1), 0;
            let t = 0;
            for (;;) {
              let n = this._getInput();
              if (typeof n == "number") {
                (e[0] = n), (e = e.subarray(1)), t++;
                continue;
              }
              let a;
              if (n && n.length > 0)
                if (typeof n == "string") {
                  let { read: i, written: s } = tn.encodeInto(n, e);
                  (this.saved = n.slice(i)),
                    (t += s),
                    (a = e[s - 1]),
                    (e = e.subarray(s));
                } else {
                  let i;
                  n.length > e.length
                    ? (e.set(n.subarray(0, e.length)),
                      (this.saved = n.subarray(e.length)),
                      (i = e.length))
                    : (e.set(n), (this.saved = void 0), (i = n.length)),
                    (t += i),
                    (a = e[i - 1]),
                    (e = e.subarray(i));
                }
              if (!(n && n.length > 0) || this.autoEOF || e.length === 0)
                return (this.insertEOF = t > 0 && this.autoEOF && a !== 10), t;
            }
          }
          fsync() {}
        };
        o(Re, "LegacyReader");
        var Ne = class {
          constructor(e, t) {
            (this.out = e), (this.isatty = t);
          }
          write(e) {
            for (let t of e) this.out(t);
            return e.length;
          }
        };
        o(Ne, "CharacterCodeWriter");
        var $e = class {
          constructor(e) {
            this.isatty = !1;
            (this.out = e), (this.output = []);
          }
          write(e) {
            for (let t of e)
              t === 10
                ? (this.out(Kr.decode(new Uint8Array(this.output))),
                  (this.output = []))
                : t !== 0 && this.output.push(t);
            return e.length;
          }
          fsync() {
            this.output &&
              this.output.length > 0 &&
              (this.out(Kr.decode(new Uint8Array(this.output))),
              (this.output = []));
          }
        };
        o($e, "StringWriter");
        var ce = class {
          constructor(e) {
            (this.fd = e), (this.isatty = Vr.isatty(e));
          }
          write(e) {
            return tr.writeSync(this.fd, e);
          }
          fsync() {
            qr(this.fd);
          }
        };
        o(ce, "NodeWriter");
        API.loadBinaryFile = D;
        API.rawRun = o(function (e) {
          let t = Module.stringToNewUTF8(e);
          Module.API.capture_stderr();
          let n = _PyRun_SimpleString(t);
          _free(t);
          let a = Module.API.restore_stderr().trim();
          return [n, a];
        }, "rawRun");
        API.runPythonInternal = function (r) {
          return API._pyodide._base.eval_code(r, API.runPythonInternal_dict);
        };
        API.setPyProxyToStringMethod = function (r) {
          Module.HEAP8[Module._compat_to_string_repr] = +r;
        };
        API.saveState = () => API.pyodide_py._state.save_state();
        API.restoreState = (r) => API.pyodide_py._state.restore_state(r);
        var P = class {
          static async loadPackagesFromImports(e, t = { checkIntegrity: !0 }) {
            let n = API.pyodide_code.find_imports(e),
              a;
            try {
              a = n.toJs();
            } finally {
              n.destroy();
            }
            if (a.length === 0) return [];
            let i = API._import_name_to_package_name,
              s = new Set();
            for (let c of a) i.has(c) && s.add(i.get(c));
            return s.size ? await Oe(Array.from(s), t) : [];
          }
          static runPython(e, t = {}) {
            return (
              t.globals || (t.globals = API.globals),
              API.pyodide_code.eval_code.callKwargs(e, t)
            );
          }
          static async runPythonAsync(e, t = {}) {
            return (
              t.globals || (t.globals = API.globals),
              await API.pyodide_code.eval_code_async.callKwargs(e, t)
            );
          }
          static async runPythonSyncifying(e, t = {}) {
            return (
              t.globals || (t.globals = API.globals),
              API.pyodide_code.eval_code.callSyncifyingKwargs(e, t)
            );
          }
          static registerJsModule(e, t) {
            API.pyodide_ffi.register_js_module(e, t);
          }
          static unregisterJsModule(e) {
            API.pyodide_ffi.unregister_js_module(e);
          }
          static toPy(e, { depth: t, defaultConverter: n } = { depth: -1 }) {
            switch (typeof e) {
              case "string":
              case "number":
              case "boolean":
              case "bigint":
              case "undefined":
                return e;
            }
            if (!e || API.isPyProxy(e)) return e;
            let a = 0,
              i = 0;
            try {
              a = Module.js2python_convert(e, {
                depth: t,
                defaultConverter: n,
              });
            } catch (s) {
              throw (
                (s instanceof Module._PropagatePythonError && _pythonexc2js(),
                s)
              );
            }
            try {
              if (_JsProxy_Check(a)) return e;
              (i = _python2js(a)), i === null && _pythonexc2js();
            } finally {
              _Py_DecRef(a);
            }
            return i;
          }
          static pyimport(e) {
            return API.importlib.import_module(e);
          }
          static unpackArchive(e, t, n = {}) {
            if (
              !ArrayBuffer.isView(e) &&
              API.getTypeTag(e) !== "[object ArrayBuffer]"
            )
              throw new TypeError(
                "Expected argument 'buffer' to be an ArrayBuffer or an ArrayBuffer view",
              );
            API.typedArrayAsUint8Array(e);
            let a = n.extractDir;
            API.package_loader.unpack_buffer.callKwargs({
              buffer: e,
              format: t,
              extract_dir: a,
              installer: "pyodide.unpackArchive",
            });
          }
          static async mountNativeFS(e, t) {
            if (t.constructor.name !== "FileSystemDirectoryHandle")
              throw new TypeError(
                "Expected argument 'fileSystemHandle' to be a FileSystemDirectoryHandle",
              );
            return (
              Module.FS.findObject(e) == null && Module.FS.mkdirTree(e),
              Module.FS.mount(
                Module.FS.filesystems.NATIVEFS_ASYNC,
                { fileSystemHandle: t },
                e,
              ),
              await new Promise((n, a) => Module.FS.syncfs(!0, n)),
              {
                syncfs: async () =>
                  new Promise((n, a) => Module.FS.syncfs(!1, n)),
              }
            );
          }
          static registerComlink(e) {
            API._Comlink = e;
          }
          static setInterruptBuffer(e) {
            (Module.HEAP8[Module._Py_EMSCRIPTEN_SIGNAL_HANDLING] = !!e),
              (Module.Py_EmscriptenSignalBuffer = e);
          }
          static checkInterrupt() {
            if (_PyGILState_Check()) {
              __PyErr_CheckSignals() && _pythonexc2js();
              return;
            } else {
              let e = Module.Py_EmscriptenSignalBuffer;
              if (e && e[0] === 2) throw new Module.FS.ErrnoError(27);
            }
          }
          static setDebug(e) {
            let t = !!API.debug_ffi;
            return (API.debug_ffi = e), t;
          }
        };
        o(P, "PyodideAPI"),
          (P.version = Hr),
          (P.loadPackage = Oe),
          (P.loadedPackages = O),
          (P.ffi = Tr),
          (P.setStdin = ue),
          (P.setStdout = nr),
          (P.setStderr = ar),
          (P.globals = {}),
          (P.FS = {}),
          (P.PATH = {}),
          (P.canvas = $r),
          (P.ERRNO_CODES = {}),
          (P.pyodide_py = {});
        function nn() {
          let r = Object.getOwnPropertyDescriptors(P);
          delete r.prototype;
          let e = Object.create({}, r);
          return (
            (API.public_api = e),
            (e.FS = Module.FS),
            (e.PATH = Module.PATH),
            (e.ERRNO_CODES = Module.ERRNO_CODES),
            (e._module = Module),
            (e._api = API),
            e
          );
        }
        o(nn, "makePublicAPI");
        function an(r, e) {
          return new Proxy(r, {
            get(t, n) {
              return n === "get"
                ? (a) => {
                    let i = t.get(a);
                    return i === void 0 && (i = e.get(a)), i;
                  }
                : n === "has"
                  ? (a) => t.has(a) || e.has(a)
                  : Reflect.get(t, n);
            },
          });
        }
        o(an, "wrapPythonGlobals");
        var Xr;
        API.bootstrapFinalizedPromise = new Promise((r) => (Xr = r));
        API.finalizeBootstrap = function () {
          let [r, e] = API.rawRun("import _pyodide_core");
          r && API.fatal_loading_error(`Failed to import _pyodide_core\n`, e),
            (API.runPythonInternal_dict = API._pyodide._base.eval_code("{}")),
            (API.importlib = API.runPythonInternal(
              "import importlib; importlib",
            ));
          let t = API.importlib.import_module;
          (API.sys = t("sys")),
            API.sys.path.insert(0, API.config.env.HOME),
            (API.os = t("os"));
          let n = API.runPythonInternal("import __main__; __main__.__dict__"),
            a = API.runPythonInternal("import builtins; builtins.__dict__");
          API.globals = an(n, a);
          let i = API._pyodide._importhook;
          function s(l) {
            "__all__" in l ||
              Object.defineProperty(l, "__all__", {
                get: () =>
                  c.toPy(
                    Object.getOwnPropertyNames(l).filter(
                      (u) => u !== "__all__",
                    ),
                  ),
                enumerable: !1,
                configurable: !0,
              });
          }
          o(s, "jsFinderHook"),
            i.register_js_finder.callKwargs({ hook: s }),
            i.register_js_module("js", API.config.jsglobals);
          let c = nn();
          return (
            i.register_js_module("pyodide_js", c),
            (API.pyodide_py = t("pyodide")),
            (API.pyodide_code = t("pyodide.code")),
            (API.pyodide_ffi = t("pyodide.ffi")),
            (API.package_loader = t("pyodide._package_loader")),
            (API.sitepackages = API.package_loader.SITE_PACKAGES.__str__()),
            (API.dsodir = API.package_loader.DSO_DIR.__str__()),
            (API.defaultLdLibraryPath = [API.dsodir, API.sitepackages]),
            API.os.environ.__setitem__(
              "LD_LIBRARY_PATH",
              API.defaultLdLibraryPath.join(":"),
            ),
            (c.pyodide_py = API.pyodide_py),
            (c.globals = API.globals),
            Xr(),
            c
          );
        };
      })();
    }
    var StackSwitching = (() => {
      var __defProp = Object.defineProperty;
      var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames = Object.getOwnPropertyNames;
      var __hasOwnProp = Object.prototype.hasOwnProperty;
      var __export = (target, all) => {
        for (var name in all)
          __defProp(target, name, { get: all[name], enumerable: true });
      };
      var __copyProps = (to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames(from))
            if (!__hasOwnProp.call(to, key) && key !== except)
              __defProp(to, key, {
                get: () => from[key],
                enumerable:
                  !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
              });
        }
        return to;
      };
      var __toCommonJS = (mod) =>
        __copyProps(__defProp({}, "__esModule", { value: true }), mod);
      var __toBinary = (() => {
        var table = new Uint8Array(128);
        for (var i = 0; i < 64; i++)
          table[
            i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205
          ] = i;
        return (base64) => {
          var n = base64.length,
            bytes = new Uint8Array(
              (((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3) /
                4) |
                0,
            );
          for (var i2 = 0, j = 0; i2 < n; ) {
            var c0 = table[base64.charCodeAt(i2++)],
              c1 = table[base64.charCodeAt(i2++)];
            var c2 = table[base64.charCodeAt(i2++)],
              c3 = table[base64.charCodeAt(i2++)];
            bytes[j++] = (c0 << 2) | (c1 >> 4);
            bytes[j++] = (c1 << 4) | (c2 >> 2);
            bytes[j++] = (c2 << 6) | c3;
          }
          return bytes;
        };
      })();
      var stack_switching_exports = {};
      __export(stack_switching_exports, {
        createPromising: () => createPromising,
        jsWrapperTag: () => jsWrapperTag,
        promisingApply: () => promisingApply,
      });
      var WASM_PRELUDE = [0, 97, 115, 109, 1, 0, 0, 0];
      function insertSectionPrefix(sectionCode, sectionBody) {
        var section = [sectionCode];
        uleb128Encode(sectionBody.length, section);
        section.push(...sectionBody);
        return section;
      }
      var typeCodes = {
        i32: 127,
        i64: 126,
        f32: 125,
        f64: 124,
        externref: 111,
        void: 64,
      };
      var constCodes = { i32: 65, i64: 66, f32: 67, f64: 68 };
      function emscriptenSigToWasm(sig) {
        const lookup = {
          i: "i32",
          j: "i64",
          f: "f32",
          d: "f64",
          e: "externref",
          v: "",
        };
        const parameters = sig.split("").map((x) => lookup[x]);
        const result = parameters.shift();
        const results = result ? [result] : [];
        return { parameters: parameters, results: results };
      }
      var TypeSection = class {
        constructor() {
          this._numTypes = 0;
          this._section = [0];
        }
        addEmscripten(sig) {
          return this.addWasm(emscriptenSigToWasm(sig));
        }
        addWasm({ parameters: parameters, results: results }) {
          this._section.push(96);
          uleb128Encode(parameters.length, this._section);
          for (let p of parameters) {
            this._section.push(typeCodes[p]);
          }
          uleb128Encode(results.length, this._section);
          for (let p of results) {
            this._section.push(typeCodes[p]);
          }
          return this._numTypes++;
        }
        generate() {
          this._section[0] = this._numTypes;
          return insertSectionPrefix(1, this._section);
        }
      };
      function encodeStr(s) {
        const buf = new TextEncoder().encode(s);
        return [buf.length, ...buf];
      }
      var ImportSection = class {
        constructor() {
          this._numImports = 0;
          this.numGlobals = 0;
          this.numFuncs = 0;
          this._section = [0];
        }
        _addName(name) {
          this._section.push(...ImportSection._module);
          this._section.push(...encodeStr(name));
        }
        addFunction(name, sig) {
          this._addName(name);
          this._section.push(ImportSection.descr.func, sig);
          this._numImports++;
          return this.numFuncs++;
        }
        addTable(name) {
          this._addName(name);
          this._section.push(ImportSection.descr.table, 112, 0, 0);
          this._numImports++;
        }
        addGlobal(name, type) {
          this._addName(name);
          this._section.push(ImportSection.descr.global, typeCodes[type], 1);
          this._numImports++;
          return this.numGlobals++;
        }
        addTag(name, sig) {
          this._addName(name);
          this._section.push(ImportSection.descr.tag, 0, sig);
          this._numImports++;
        }
        generate() {
          this._section[0] = this._numImports;
          return insertSectionPrefix(2, this._section);
        }
      };
      ImportSection._module = encodeStr("e");
      ImportSection.descr = { func: 0, table: 1, mem: 2, global: 3, tag: 4 };
      var CodeSection = class {
        constructor(...locals) {
          this._section = [];
          this.add(locals.length);
          for (let l of locals) {
            this.add(1, typeCodes[l]);
          }
        }
        add(...args) {
          this._section.push(...args);
        }
        local_get(idx) {
          this.add(32, idx);
        }
        local_set(idx) {
          this.add(33, idx);
        }
        local_tee(idx) {
          this.add(34, idx);
        }
        global_get(idx) {
          this.add(35, idx);
        }
        global_set(idx) {
          this.add(36, idx);
        }
        call(func) {
          this.add(16, func);
        }
        call_indirect(func) {
          this.add(17, func, 0);
        }
        const(type, ...val) {
          this.add(constCodes[type], ...val);
        }
        end() {
          this.add(11);
        }
        generate() {
          this.end();
          return insertSectionPrefix(10, insertSectionPrefix(1, this._section));
        }
      };
      var WasmModule = class {
        constructor() {
          this._sections = [WASM_PRELUDE];
        }
        addSection(section) {
          this._sections.push(section.generate());
        }
        addSectionBody(sectionCode, sectionBody) {
          this._sections.push(insertSectionPrefix(sectionCode, sectionBody));
        }
        addImportSection(imports) {
          this.addSection(imports);
          this._numImportFuncs = imports.numFuncs;
        }
        setExportType(type) {
          const functionSection = [1, type];
          this.addSectionBody(3, functionSection);
          const exportSection = [1, ...encodeStr("o"), 0, this._numImportFuncs];
          this.addSectionBody(7, exportSection);
        }
        generate() {
          const bytes = new Uint8Array(this._sections.flat());
          return new WebAssembly.Module(bytes);
        }
      };
      function createInvokeModule(sig) {
        const mod = new WasmModule();
        const types = new TypeSection();
        const invoke_sig = emscriptenSigToWasm(sig);
        const export_sig = structuredClone(invoke_sig);
        export_sig.parameters.unshift("i32");
        const invoke_tidx = types.addWasm(invoke_sig);
        const export_tidx = types.addWasm(export_sig);
        const try_tidx = typeCodes[invoke_sig.results[0] || "void"];
        const tag_tidx = types.addEmscripten("ve");
        const save_tidx = types.addEmscripten("i");
        const restore_tidx = types.addEmscripten("vi");
        const setThrew_tidx = types.addEmscripten("vii");
        mod.addSection(types);
        const imports = new ImportSection();
        imports.addTable("t");
        imports.addTag("tag", tag_tidx);
        const save_stack_func = imports.addFunction("s", save_tidx);
        const restore_stack_func = imports.addFunction("r", restore_tidx);
        const set_threw_func = imports.addFunction("q", setThrew_tidx);
        mod.addImportSection(imports);
        mod.setExportType(export_tidx);
        const code = new CodeSection(["i32"]);
        const stackLocal = export_sig.parameters.length;
        code.call(save_stack_func);
        code.local_set(stackLocal);
        code.add(6, try_tidx);
        for (let i = 1; i < export_sig.parameters.length; i++) {
          code.local_get(i);
        }
        code.local_get(0);
        code.call_indirect(invoke_tidx);
        code.add(7, 0);
        code.add(26);
        code.local_get(stackLocal);
        code.call(restore_stack_func);
        code.const("i32", 1);
        code.const("i32", 0);
        code.call(set_threw_func);
        const sizes = { i32: 1, i64: 1, f32: 4, f64: 8 };
        for (let x of export_sig.results) {
          code.const(x, ...Array(sizes[x]).fill(0));
        }
        code.end();
        mod.addSection(code);
        return mod.generate();
      }
      var jsWrapperTag;
      try {
        jsWrapperTag = new WebAssembly.Tag({ parameters: ["externref"] });
      } catch (e) {}
      var wrapException = (e) => new WebAssembly.Exception(jsWrapperTag, [e]);
      function createInvoke(sig) {
        if (!jsWrapperTag) {
          return createInvokeFunction(sig);
        }
        const module = createInvokeModule(sig);
        const instance = new WebAssembly.Instance(module, {
          e: {
            t: wasmTable,
            s: () => stackSave(),
            r: (x) => stackRestore(x),
            q: (x, y) => _setThrew(x, y),
            tag: jsWrapperTag,
          },
        });
        return instance.exports["o"];
      }
      function adjustWasmImports(wasmImports) {
        const i = "invoke_";
        for (let name of Object.keys(wasmImports)) {
          if (!name.startsWith(i)) {
            continue;
          }
          wasmImports[name] = createInvoke(name.slice(i.length));
        }
      }
      var wrap_syncifying_exports = {};
      __export(wrap_syncifying_exports, {
        default: () => wrap_syncifying_default,
      });
      var wrap_syncifying_default = __toBinary(
        "AGFzbQEAAAABFARgAm9vAW9gAAFvYAFvAGABbwFvAioFAWUBcwNvAQFlAWMDfwEBZQFpAAABZQRzYXZlAAEBZQdyZXN0b3JlAAIDAgEDBwUBAW8AAwodARsBAW8jAUUEQNBvDwsQASEBIwAgABAAIAEQAgs=",
      );
      var stackStates = [];
      var StackState = class {
        constructor() {
          this.start = stackSave();
          this.stop = Module.stackStop;
          this._copy = new Uint8Array(0);
          if (this.start !== this.stop) {
            stackStates.push(this);
          }
        }
        restore() {
          let total = 0;
          while (
            stackStates.length > 0 &&
            stackStates[stackStates.length - 1].stop < this.stop
          ) {
            total += stackStates.pop()._save();
          }
          const last = stackStates[stackStates.length - 1];
          if (last && last !== this) {
            total += last._save_up_to(this.stop);
          }
          if (last && last.stop === this.stop) {
            stackStates.pop();
          }
          if (this._copy.length !== 0) {
            Module.HEAP8.set(this._copy, this.start);
            total += this._copy.length;
            this._copy = new Uint8Array(0);
          }
          Module.stackStop = this.stop;
          stackRestore(this.start);
          return total;
        }
        _save_up_to(stop) {
          let sz1 = this._copy.length;
          let sz2 = stop - this.start;
          if (sz2 <= sz1) {
            return 0;
          }
          const new_segment = HEAP8.subarray(
            this.start + sz1,
            this.start + sz2,
          );
          const c = new Uint8Array(sz2);
          c.set(this._copy);
          c.set(new_segment, sz1);
          this._copy = c;
          return sz2;
        }
        _save() {
          return this._save_up_to(this.stop);
        }
      };
      function save_state() {
        const stackState = new StackState();
        const threadState = _captureThreadState();
        const origCframe = Module.origCframe;
        _restore_cframe(origCframe);
        return {
          threadState: threadState,
          stackState: stackState,
          suspender: suspenderGlobal.value,
          origCframe: origCframe,
        };
      }
      function restore_state(state) {
        state.stackState.restore();
        Module.origCframe = state.origCframe;
        _restoreThreadState(state.threadState);
        suspenderGlobal.value = state.suspender;
        Module.validSuspender.value = true;
      }
      function setSyncifyHandler() {
        const suspending_f = new WebAssembly.Function(
          { parameters: ["externref", "externref"], results: ["externref"] },
          async (x) => {
            try {
              return nullToUndefined(await x);
            } catch (e) {
              if (e && e.pyodide_fatal_error) {
                throw e;
              }
              Module.syncify_error = e;
              return null;
            }
          },
          { suspending: "first" },
        );
        const module = new WebAssembly.Module(
          new Uint8Array(wrap_syncifying_default),
        );
        const instance = new WebAssembly.Instance(module, {
          e: {
            s: suspenderGlobal,
            i: suspending_f,
            c: validSuspender,
            save: save_state,
            restore: restore_state,
          },
        });
        HEAP32[_syncifyHandler / 4] = addFunction(instance.exports.o);
      }
      var promisingApplyHandler;
      function promisingApply(...args) {
        validSuspender.value = true;
        Module.stackStop = stackSave();
        Module.origCframe = _get_cframe();
        const cframe = stackAlloc(HEAP32[_size_of_cframe / 4]);
        _set_new_cframe(cframe);
        return promisingApplyHandler(...args);
      }
      function wasmTypeToString(ty) {
        return `params:${ty.parameters};results:${ty.results}`;
      }
      function createPromisingModule(orig_type) {
        const mod = new WasmModule();
        const ts = new TypeSection();
        const wrapped_type = structuredClone(orig_type);
        wrapped_type.parameters.unshift("externref");
        const orig_sig = ts.addWasm(orig_type);
        const wrapped_sig = ts.addWasm(wrapped_type);
        mod.addSection(ts);
        const imports = new ImportSection();
        imports.addGlobal("s", "externref");
        const orig = imports.addFunction("i", orig_sig);
        mod.addImportSection(imports);
        mod.setExportType(wrapped_sig);
        const code = new CodeSection();
        code.local_get(0);
        code.global_set(0);
        for (let i = 1; i < wrapped_type.parameters.length; i++) {
          code.local_get(i);
        }
        code.call(orig);
        mod.addSection(code);
        return mod.generate();
      }
      var promisingModuleMap = new Map();
      function getPromisingModule(orig_type) {
        const type_str = wasmTypeToString(orig_type);
        if (promisingModuleMap.has(type_str)) {
          return promisingModuleMap.get(type_str);
        }
        const module = createPromisingModule(orig_type);
        promisingModuleMap.set(type_str, module);
        return module;
      }
      var promisingFunctionMap = new WeakMap();
      function createPromising(wasm_func) {
        if (promisingFunctionMap.has(wasm_func)) {
          return promisingFunctionMap.get(wasm_func);
        }
        const type = wasmFunctionType(wasm_func);
        const module = getPromisingModule(type);
        const instance = new WebAssembly.Instance(module, {
          e: { i: wasm_func, s: suspenderGlobal },
        });
        const result = new WebAssembly.Function(
          { parameters: type.parameters, results: ["externref"] },
          instance.exports.o,
          { promising: "first" },
        );
        promisingFunctionMap.set(wasm_func, result);
        return result;
      }
      var suspenderGlobal;
      try {
        suspenderGlobal = new WebAssembly.Global(
          { value: "externref", mutable: true },
          null,
        );
      } catch (e) {}
      var validSuspender;
      function initSuspenders() {
        validSuspender = new WebAssembly.Global(
          { value: "i32", mutable: true },
          0,
        );
        promisingApplyHandler = createPromising(wasmExports._pyproxy_apply);
        Module.validSuspender = validSuspender;
        setSyncifyHandler();
      }
      Module.jspiSupported = false;
      Module.validSuspender = { value: 0 };
      if ("Suspender" in WebAssembly) {
        try {
          new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0]));
          Module.jspiSupported = true;
        } catch (e) {}
      }
      if (Module.jspiSupported) {
        Module.preRun.push(initSuspenders);
        Module.adjustWasmImports = adjustWasmImports;
        Module.wrapException = wrapException;
      }
      return __toCommonJS(stack_switching_exports);
    })();
    const {
      createPromising: createPromising,
      jsWrapperTag: jsWrapperTag,
      promisingApply: promisingApply,
    } = StackSwitching;
    Object.assign(Module, StackSwitching);
    const API = Module.API;
    const Hiwire = {};
    const Tests = {};
    API.tests = Tests;
    API.version = "0.25.1";
    Module.hiwire = Hiwire;
    function getTypeTag(x) {
      try {
        return Object.prototype.toString.call(x);
      } catch (e) {
        return "";
      }
    }
    API.getTypeTag = getTypeTag;
    function hasProperty(obj, prop) {
      try {
        while (obj) {
          if (Object.getOwnPropertyDescriptor(obj, prop)) {
            return true;
          }
          obj = Object.getPrototypeOf(obj);
        }
      } catch (e) {}
      return false;
    }
    function hasMethod(obj, prop) {
      try {
        return typeof obj[prop] === "function";
      } catch (e) {
        return false;
      }
    }
    const pyproxyIsAlive = (px) =>
      !!Module.PyProxy_getAttrsQuiet(px).shared.ptr;
    API.pyproxyIsAlive = pyproxyIsAlive;
    const errNoRet = () => {
      throw new Error(
        "Assertion error: control reached end of function without return",
      );
    };
    Module.reportUndefinedSymbols = () => {};
    const nullToUndefined = (x) => (x === null ? undefined : x);
    function isPromise(obj) {
      try {
        return !!obj && typeof obj.then === "function";
      } catch (e) {
        return false;
      }
    }
    API.isPromise = isPromise;
    function bufferAsUint8Array(arg) {
      if (ArrayBuffer.isView(arg)) {
        return new Uint8Array(arg.buffer, arg.byteOffset, arg.byteLength);
      } else {
        return new Uint8Array(arg);
      }
    }
    API.typedArrayAsUint8Array = bufferAsUint8Array;
    Module.iterObject = function* (object) {
      for (let k in object) {
        if (Object.prototype.hasOwnProperty.call(object, k)) {
          yield k;
        }
      }
    };
    function wasmFunctionType(wasm_func) {
      if (!WebAssembly.Function) {
        throw new Error("No type reflection");
      }
      if (WebAssembly.Function.type) {
        return WebAssembly.Function.type(wasm_func);
      }
      return wasm_func.type();
    }
    pyodide_js_init();
    pyodide_js_init.sig = "v";
    function _PyImport_InitFunc_TrampolineCall(func) {
      return wasmTable.get(func)();
    }
    _PyImport_InitFunc_TrampolineCall.sig = "ii";
    function _Py_emscripten_runtime() {
      var info;
      if (typeof navigator == "object") {
        info = navigator.userAgent;
      } else if (typeof process == "object") {
        info = "Node.js ".concat(process.version);
      } else {
        info = "UNKNOWN";
      }
      var len = lengthBytesUTF8(info) + 1;
      var res = _malloc(len);
      if (res) stringToUTF8(info, res, len);
      return res;
    }
    _Py_emscripten_runtime.sig = "i";
    function _Py_CheckEmscriptenSignals_Helper() {
      if (!Module.Py_EmscriptenSignalBuffer) {
        return 0;
      }
      try {
        let result = Module.Py_EmscriptenSignalBuffer[0];
        Module.Py_EmscriptenSignalBuffer[0] = 0;
        return result;
      } catch (e) {
        return 0;
      }
    }
    _Py_CheckEmscriptenSignals_Helper.sig = "i";
    function _PyEM_detect_type_reflection() {
      return "Function" in WebAssembly;
    }
    _PyEM_detect_type_reflection.sig = "i";
    function _PyEM_TrampolineCall_JS(func, arg1, arg2, arg3) {
      return wasmTable.get(func)(arg1, arg2, arg3);
    }
    _PyEM_TrampolineCall_JS.sig = "iiiii";
    function _PyEM_CountFuncParams(func) {
      let n = _PyEM_CountFuncParams.cache.get(func);
      if (n !== undefined) {
        return n;
      }
      n = wasmFunctionType(wasmTable.get(func)).parameters.length;
      _PyEM_CountFuncParams.cache.set(func, n);
      return n;
    }
    _PyEM_CountFuncParams.cache = new Map();
    _PyEM_CountFuncParams.sig = "ii";
    function unbox_small_structs(type_ptr) {
      var type_id = HEAPU16[((type_ptr + 6) >> 1) + 0];
      while (type_id === 13) {
        var elements = HEAPU32[((type_ptr + 8) >> 2) + 0];
        var first_element = HEAPU32[(elements >> 2) + 0];
        if (first_element === 0) {
          type_id = 0;
          break;
        } else if (HEAPU32[(elements >> 2) + 1] === 0) {
          type_ptr = first_element;
          type_id = HEAPU16[((first_element + 6) >> 1) + 0];
        } else {
          break;
        }
      }
      return [type_ptr, type_id];
    }
    function ffi_call_js(cif, fn, rvalue, avalue) {
      var abi = HEAPU32[(cif >> 2) + 0];
      var nargs = HEAPU32[(cif >> 2) + 1];
      var nfixedargs = HEAPU32[(cif >> 2) + 6];
      var arg_types_ptr = HEAPU32[(cif >> 2) + 2];
      var rtype_unboxed = unbox_small_structs(HEAPU32[(cif >> 2) + 3]);
      var rtype_ptr = rtype_unboxed[0];
      var rtype_id = rtype_unboxed[1];
      var orig_stack_ptr = stackSave();
      var cur_stack_ptr = orig_stack_ptr;
      var args = [];
      var ret_by_arg = false;
      if (rtype_id === 15) {
        throw new Error("complex ret marshalling nyi");
      }
      if (rtype_id < 0 || rtype_id > 15) {
        throw new Error("Unexpected rtype " + rtype_id);
      }
      if (rtype_id === 4 || rtype_id === 13) {
        args.push(rvalue);
        ret_by_arg = true;
      }
      for (var i = 0; i < nfixedargs; i++) {
        var arg_ptr = HEAPU32[(avalue >> 2) + i];
        var arg_unboxed = unbox_small_structs(
          HEAPU32[(arg_types_ptr >> 2) + i],
        );
        var arg_type_ptr = arg_unboxed[0];
        var arg_type_id = arg_unboxed[1];
        switch (arg_type_id) {
          case 1:
          case 10:
          case 9:
          case 14:
            args.push(HEAPU32[(arg_ptr >> 2) + 0]);
            break;
          case 2:
            args.push(HEAPF32[(arg_ptr >> 2) + 0]);
            break;
          case 3:
            args.push(HEAPF64[(arg_ptr >> 3) + 0]);
            break;
          case 5:
            args.push(HEAPU8[arg_ptr + 0]);
            break;
          case 6:
            args.push(HEAP8[arg_ptr + 0]);
            break;
          case 7:
            args.push(HEAPU16[(arg_ptr >> 1) + 0]);
            break;
          case 8:
            args.push(HEAP16[(arg_ptr >> 1) + 0]);
            break;
          case 11:
          case 12:
            args.push(HEAPU64[(arg_ptr >> 3) + 0]);
            break;
          case 4:
            args.push(HEAPU64[(arg_ptr >> 3) + 0]);
            args.push(HEAPU64[(arg_ptr >> 3) + 1]);
            break;
          case 13:
            var size = HEAPU32[(arg_type_ptr >> 2) + 0];
            var align = HEAPU16[((arg_type_ptr + 4) >> 1) + 0];
            (cur_stack_ptr -= size), (cur_stack_ptr &= ~(align - 1));
            HEAP8.subarray(cur_stack_ptr, cur_stack_ptr + size).set(
              HEAP8.subarray(arg_ptr, arg_ptr + size),
            );
            args.push(cur_stack_ptr);
            break;
          case 15:
            throw new Error("complex marshalling nyi");
          default:
            throw new Error("Unexpected type " + arg_type_id);
        }
      }
      if (nfixedargs != nargs) {
        var struct_arg_info = [];
        for (var i = nargs - 1; i >= nfixedargs; i--) {
          var arg_ptr = HEAPU32[(avalue >> 2) + i];
          var arg_unboxed = unbox_small_structs(
            HEAPU32[(arg_types_ptr >> 2) + i],
          );
          var arg_type_ptr = arg_unboxed[0];
          var arg_type_id = arg_unboxed[1];
          switch (arg_type_id) {
            case 5:
            case 6:
              (cur_stack_ptr -= 1), (cur_stack_ptr &= ~(1 - 1));
              HEAPU8[cur_stack_ptr + 0] = HEAPU8[arg_ptr + 0];
              break;
            case 7:
            case 8:
              (cur_stack_ptr -= 2), (cur_stack_ptr &= ~(2 - 1));
              HEAPU16[(cur_stack_ptr >> 1) + 0] = HEAPU16[(arg_ptr >> 1) + 0];
              break;
            case 1:
            case 9:
            case 10:
            case 14:
            case 2:
              (cur_stack_ptr -= 4), (cur_stack_ptr &= ~(4 - 1));
              HEAPU32[(cur_stack_ptr >> 2) + 0] = HEAPU32[(arg_ptr >> 2) + 0];
              break;
            case 3:
            case 11:
            case 12:
              (cur_stack_ptr -= 8), (cur_stack_ptr &= ~(8 - 1));
              HEAPU32[(cur_stack_ptr >> 2) + 0] = HEAPU32[(arg_ptr >> 2) + 0];
              HEAPU32[(cur_stack_ptr >> 2) + 1] = HEAPU32[(arg_ptr >> 2) + 1];
              break;
            case 4:
              (cur_stack_ptr -= 16), (cur_stack_ptr &= ~(8 - 1));
              HEAPU32[(cur_stack_ptr >> 2) + 0] = HEAPU32[(arg_ptr >> 2) + 0];
              HEAPU32[(cur_stack_ptr >> 2) + 1] = HEAPU32[(arg_ptr >> 2) + 1];
              HEAPU32[(cur_stack_ptr >> 2) + 2] = HEAPU32[(arg_ptr >> 2) + 2];
              HEAPU32[(cur_stack_ptr >> 2) + 3] = HEAPU32[(arg_ptr >> 2) + 3];
              break;
            case 13:
              (cur_stack_ptr -= 4), (cur_stack_ptr &= ~(4 - 1));
              struct_arg_info.push([
                cur_stack_ptr,
                arg_ptr,
                HEAPU32[(arg_type_ptr >> 2) + 0],
                HEAPU16[((arg_type_ptr + 4) >> 1) + 0],
              ]);
              break;
            case 15:
              throw new Error("complex arg marshalling nyi");
            default:
              throw new Error("Unexpected argtype " + arg_type_id);
          }
        }
        args.push(cur_stack_ptr);
        for (var i = 0; i < struct_arg_info.length; i++) {
          var struct_info = struct_arg_info[i];
          var arg_target = struct_info[0];
          var arg_ptr = struct_info[1];
          var size = struct_info[2];
          var align = struct_info[3];
          (cur_stack_ptr -= size), (cur_stack_ptr &= ~(align - 1));
          HEAP8.subarray(cur_stack_ptr, cur_stack_ptr + size).set(
            HEAP8.subarray(arg_ptr, arg_ptr + size),
          );
          HEAPU32[(arg_target >> 2) + 0] = cur_stack_ptr;
        }
      }
      stackRestore(cur_stack_ptr);
      stackAlloc(0);
      var result = (0, getWasmTableEntry(fn).apply(null, args));
      stackRestore(orig_stack_ptr);
      if (ret_by_arg) {
        return;
      }
      switch (rtype_id) {
        case 0:
          break;
        case 1:
        case 9:
        case 10:
        case 14:
          HEAPU32[(rvalue >> 2) + 0] = result;
          break;
        case 2:
          HEAPF32[(rvalue >> 2) + 0] = result;
          break;
        case 3:
          HEAPF64[(rvalue >> 3) + 0] = result;
          break;
        case 5:
        case 6:
          HEAPU8[rvalue + 0] = result;
          break;
        case 7:
        case 8:
          HEAPU16[(rvalue >> 1) + 0] = result;
          break;
        case 11:
        case 12:
          HEAPU64[(rvalue >> 3) + 0] = result;
          break;
        case 15:
          throw new Error("complex ret marshalling nyi");
        default:
          throw new Error("Unexpected rtype " + rtype_id);
      }
    }
    ffi_call_js.sig = "viiii";
    function ffi_closure_alloc_js(size, code) {
      var closure = _malloc(size);
      var index = getEmptyTableSlot();
      HEAPU32[(code >> 2) + 0] = index;
      HEAPU32[(closure >> 2) + 0] = index;
      return closure;
    }
    ffi_closure_alloc_js.sig = "iii";
    function ffi_closure_free_js(closure) {
      var index = HEAPU32[(closure >> 2) + 0];
      freeTableIndexes.push(index);
      _free(closure);
    }
    ffi_closure_free_js.sig = "vi";
    function ffi_prep_closure_loc_js(closure, cif, fun, user_data, codeloc) {
      var abi = HEAPU32[(cif >> 2) + 0];
      var nargs = HEAPU32[(cif >> 2) + 1];
      var nfixedargs = HEAPU32[(cif >> 2) + 6];
      var arg_types_ptr = HEAPU32[(cif >> 2) + 2];
      var rtype_unboxed = unbox_small_structs(HEAPU32[(cif >> 2) + 3]);
      var rtype_ptr = rtype_unboxed[0];
      var rtype_id = rtype_unboxed[1];
      var sig;
      var ret_by_arg = false;
      switch (rtype_id) {
        case 0:
          sig = "v";
          break;
        case 13:
        case 4:
          sig = "vi";
          ret_by_arg = true;
          break;
        case 1:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 14:
          sig = "i";
          break;
        case 2:
          sig = "f";
          break;
        case 3:
          sig = "d";
          break;
        case 11:
        case 12:
          sig = "j";
          break;
        case 15:
          throw new Error("complex ret marshalling nyi");
        default:
          throw new Error("Unexpected rtype " + rtype_id);
      }
      var unboxed_arg_type_id_list = [];
      var unboxed_arg_type_info_list = [];
      for (var i = 0; i < nargs; i++) {
        var arg_unboxed = unbox_small_structs(
          HEAPU32[(arg_types_ptr >> 2) + i],
        );
        var arg_type_ptr = arg_unboxed[0];
        var arg_type_id = arg_unboxed[1];
        unboxed_arg_type_id_list.push(arg_type_id);
        unboxed_arg_type_info_list.push([
          HEAPU32[(arg_type_ptr >> 2) + 0],
          HEAPU16[((arg_type_ptr + 4) >> 1) + 0],
        ]);
      }
      for (var i = 0; i < nfixedargs; i++) {
        switch (unboxed_arg_type_id_list[i]) {
          case 1:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 14:
          case 13:
            sig += "i";
            break;
          case 2:
            sig += "f";
            break;
          case 3:
            sig += "d";
            break;
          case 4:
            sig += "jj";
            break;
          case 11:
          case 12:
            sig += "j";
            break;
          case 15:
            throw new Error("complex marshalling nyi");
          default:
            throw new Error("Unexpected argtype " + arg_type_id);
        }
      }
      if (nfixedargs < nargs) {
        sig += "i";
      }
      0;
      function trampoline() {
        var args = Array.prototype.slice.call(arguments);
        var size = 0;
        var orig_stack_ptr = stackSave();
        var cur_ptr = orig_stack_ptr;
        var ret_ptr;
        var jsarg_idx = 0;
        if (ret_by_arg) {
          ret_ptr = args[jsarg_idx++];
        } else {
          (cur_ptr -= 8), (cur_ptr &= ~(8 - 1));
          ret_ptr = cur_ptr;
        }
        cur_ptr -= 4 * nargs;
        var args_ptr = cur_ptr;
        var carg_idx = 0;
        for (; carg_idx < nfixedargs; carg_idx++) {
          var cur_arg = args[jsarg_idx++];
          var arg_type_info = unboxed_arg_type_info_list[carg_idx];
          var arg_size = arg_type_info[0];
          var arg_align = arg_type_info[1];
          var arg_type_id = unboxed_arg_type_id_list[carg_idx];
          switch (arg_type_id) {
            case 5:
            case 6:
              (cur_ptr -= 1), (cur_ptr &= ~(4 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPU8[cur_ptr + 0] = cur_arg;
              break;
            case 7:
            case 8:
              (cur_ptr -= 2), (cur_ptr &= ~(4 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPU16[(cur_ptr >> 1) + 0] = cur_arg;
              break;
            case 1:
            case 9:
            case 10:
            case 14:
              (cur_ptr -= 4), (cur_ptr &= ~(4 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPU32[(cur_ptr >> 2) + 0] = cur_arg;
              break;
            case 13:
              (cur_ptr -= arg_size), (cur_ptr &= ~(arg_align - 1));
              HEAP8.subarray(cur_ptr, cur_ptr + arg_size).set(
                HEAP8.subarray(cur_arg, cur_arg + arg_size),
              );
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              break;
            case 2:
              (cur_ptr -= 4), (cur_ptr &= ~(4 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPF32[(cur_ptr >> 2) + 0] = cur_arg;
              break;
            case 3:
              (cur_ptr -= 8), (cur_ptr &= ~(8 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPF64[(cur_ptr >> 3) + 0] = cur_arg;
              break;
            case 11:
            case 12:
              (cur_ptr -= 8), (cur_ptr &= ~(8 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPU64[(cur_ptr >> 3) + 0] = cur_arg;
              break;
            case 4:
              (cur_ptr -= 16), (cur_ptr &= ~(8 - 1));
              HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
              HEAPU64[(cur_ptr >> 3) + 0] = cur_arg;
              cur_arg = args[jsarg_idx++];
              HEAPU64[(cur_ptr >> 3) + 1] = cur_arg;
              break;
          }
        }
        var varargs = args[args.length - 1];
        for (; carg_idx < nargs; carg_idx++) {
          var arg_type_id = unboxed_arg_type_id_list[carg_idx];
          var arg_type_info = unboxed_arg_type_info_list[carg_idx];
          var arg_size = arg_type_info[0];
          var arg_align = arg_type_info[1];
          if (arg_type_id === 13) {
            var struct_ptr = HEAPU32[(varargs >> 2) + 0];
            (cur_ptr -= arg_size), (cur_ptr &= ~(arg_align - 1));
            HEAP8.subarray(cur_ptr, cur_ptr + arg_size).set(
              HEAP8.subarray(struct_ptr, struct_ptr + arg_size),
            );
            HEAPU32[(args_ptr >> 2) + carg_idx] = cur_ptr;
          } else {
            HEAPU32[(args_ptr >> 2) + carg_idx] = varargs;
          }
          varargs += 4;
        }
        stackRestore(cur_ptr);
        stackAlloc(0);
        0;
        getWasmTableEntry(HEAPU32[(closure >> 2) + 2])(
          HEAPU32[(closure >> 2) + 1],
          ret_ptr,
          args_ptr,
          HEAPU32[(closure >> 2) + 3],
        );
        stackRestore(orig_stack_ptr);
        if (!ret_by_arg) {
          switch (sig[0]) {
            case "i":
              return HEAPU32[(ret_ptr >> 2) + 0];
            case "j":
              return HEAPU64[(ret_ptr >> 3) + 0];
            case "d":
              return HEAPF64[(ret_ptr >> 3) + 0];
            case "f":
              return HEAPF32[(ret_ptr >> 2) + 0];
          }
        }
      }
      try {
        var wasm_trampoline = convertJsFunctionToWasm(trampoline, sig);
      } catch (e) {
        return 1;
      }
      setWasmTableEntry(codeloc, wasm_trampoline);
      HEAPU32[(closure >> 2) + 1] = cif;
      HEAPU32[(closure >> 2) + 2] = fun;
      HEAPU32[(closure >> 2) + 3] = user_data;
      return 0;
    }
    ffi_prep_closure_loc_js.sig = "iiiiii";
    function __hiwire_deduplicate_new() {
      return new Map();
    }
    __hiwire_deduplicate_new.sig = "e";
    function __hiwire_deduplicate_get(map, value) {
      return map.get(value);
    }
    __hiwire_deduplicate_get.sig = "iee";
    function __hiwire_deduplicate_set(map, value, ref) {
      map.set(value, ref);
    }
    __hiwire_deduplicate_set.sig = "veei";
    function __hiwire_deduplicate_delete(map, value) {
      map.delete(value);
    }
    __hiwire_deduplicate_delete.sig = "vee";
    function ExitStatus(status) {
      this.name = "ExitStatus";
      this.message = `Program terminated with exit(${status})`;
      this.status = status;
    }
    Module["ExitStatus"] = ExitStatus;
    var GOT = {};
    Module["GOT"] = GOT;
    var currentModuleWeakSymbols = new Set([]);
    Module["currentModuleWeakSymbols"] = currentModuleWeakSymbols;
    var GOTHandler = {
      get(obj, symName) {
        var rtn = GOT[symName];
        if (!rtn) {
          rtn = GOT[symName] = new WebAssembly.Global({
            value: "i32",
            mutable: true,
          });
        }
        if (!currentModuleWeakSymbols.has(symName)) {
          rtn.required = true;
        }
        return rtn;
      },
    };
    Module["GOTHandler"] = GOTHandler;
    var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        callbacks.shift()(Module);
      }
    };
    Module["callRuntimeCallbacks"] = callRuntimeCallbacks;
    var decrementExceptionRefcount = (ptr) =>
      ___cxa_decrement_exception_refcount(ptr);
    Module["decrementExceptionRefcount"] = decrementExceptionRefcount;
    var withStackSave = (f) => {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    };
    Module["withStackSave"] = withStackSave;
    var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var c = str.charCodeAt(i);
        if (c <= 127) {
          len++;
        } else if (c <= 2047) {
          len += 2;
        } else if (c >= 55296 && c <= 57343) {
          len += 4;
          ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
    Module["lengthBytesUTF8"] = lengthBytesUTF8;
    var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      if (!(maxBytesToWrite > 0)) return 0;
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1;
      for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) {
          var u1 = str.charCodeAt(++i);
          u = (65536 + ((u & 1023) << 10)) | (u1 & 1023);
        }
        if (u <= 127) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 2047) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 192 | (u >> 6);
          heap[outIdx++] = 128 | (u & 63);
        } else if (u <= 65535) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 224 | (u >> 12);
          heap[outIdx++] = 128 | ((u >> 6) & 63);
          heap[outIdx++] = 128 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          heap[outIdx++] = 240 | (u >> 18);
          heap[outIdx++] = 128 | ((u >> 12) & 63);
          heap[outIdx++] = 128 | ((u >> 6) & 63);
          heap[outIdx++] = 128 | (u & 63);
        }
      }
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
    Module["stringToUTF8Array"] = stringToUTF8Array;
    var stringToUTF8 = (str, outPtr, maxBytesToWrite) =>
      stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    Module["stringToUTF8"] = stringToUTF8;
    var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
    Module["stringToUTF8OnStack"] = stringToUTF8OnStack;
    var UTF8Decoder =
      typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;
    Module["UTF8Decoder"] = UTF8Decoder;
    var UTF8ArrayToString = (heapOrArray, idx, maxBytesToRead) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = "";
      while (idx < endPtr) {
        var u0 = heapOrArray[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode(((u0 & 31) << 6) | u1);
          continue;
        }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          u0 =
            ((u0 & 7) << 18) |
            (u1 << 12) |
            (u2 << 6) |
            (heapOrArray[idx++] & 63);
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
        }
      }
      return str;
    };
    Module["UTF8ArrayToString"] = UTF8ArrayToString;
    var UTF8ToString = (ptr, maxBytesToRead) =>
      ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
    Module["UTF8ToString"] = UTF8ToString;
    var demangle = (func) => {
      demangle.recursionGuard = (demangle.recursionGuard | 0) + 1;
      if (demangle.recursionGuard > 1) return func;
      return withStackSave(() => {
        try {
          var s = func;
          if (s.startsWith("__Z")) s = s.substr(1);
          var buf = stringToUTF8OnStack(s);
          var status = stackAlloc(4);
          var ret = ___cxa_demangle(buf, 0, 0, status);
          if (HEAP32[status >> 2] === 0 && ret) {
            return UTF8ToString(ret);
          }
        } catch (e) {
        } finally {
          _free(ret);
          if (demangle.recursionGuard < 2) --demangle.recursionGuard;
        }
        return func;
      });
    };
    Module["demangle"] = demangle;
    var getDylinkMetadata = (binary) => {
      var offset = 0;
      var end = 0;
      function getU8() {
        return binary[offset++];
      }
      function getLEB() {
        var ret = 0;
        var mul = 1;
        while (1) {
          var byte = binary[offset++];
          ret += (byte & 127) * mul;
          mul *= 128;
          if (!(byte & 128)) break;
        }
        return ret;
      }
      function getString() {
        var len = getLEB();
        offset += len;
        return UTF8ArrayToString(binary, offset - len, len);
      }
      function failIf(condition, message) {
        if (condition) throw new Error(message);
      }
      var name = "dylink.0";
      if (binary instanceof WebAssembly.Module) {
        var dylinkSection = WebAssembly.Module.customSections(binary, name);
        if (dylinkSection.length === 0) {
          name = "dylink";
          dylinkSection = WebAssembly.Module.customSections(binary, name);
        }
        failIf(dylinkSection.length === 0, "need dylink section");
        binary = new Uint8Array(dylinkSection[0]);
        end = binary.length;
      } else {
        var int32View = new Uint32Array(
          new Uint8Array(binary.subarray(0, 24)).buffer,
        );
        var magicNumberFound = int32View[0] == 1836278016;
        failIf(!magicNumberFound, "need to see wasm magic number");
        failIf(binary[8] !== 0, "need the dylink section to be first");
        offset = 9;
        var section_size = getLEB();
        end = offset + section_size;
        name = getString();
      }
      var customSection = {
        neededDynlibs: [],
        tlsExports: new Set(),
        weakImports: new Set(),
      };
      if (name == "dylink") {
        customSection.memorySize = getLEB();
        customSection.memoryAlign = getLEB();
        customSection.tableSize = getLEB();
        customSection.tableAlign = getLEB();
        var neededDynlibsCount = getLEB();
        for (var i = 0; i < neededDynlibsCount; ++i) {
          var libname = getString();
          customSection.neededDynlibs.push(libname);
        }
      } else {
        failIf(name !== "dylink.0");
        var WASM_DYLINK_MEM_INFO = 1;
        var WASM_DYLINK_NEEDED = 2;
        var WASM_DYLINK_EXPORT_INFO = 3;
        var WASM_DYLINK_IMPORT_INFO = 4;
        var WASM_SYMBOL_TLS = 256;
        var WASM_SYMBOL_BINDING_MASK = 3;
        var WASM_SYMBOL_BINDING_WEAK = 1;
        while (offset < end) {
          var subsectionType = getU8();
          var subsectionSize = getLEB();
          if (subsectionType === WASM_DYLINK_MEM_INFO) {
            customSection.memorySize = getLEB();
            customSection.memoryAlign = getLEB();
            customSection.tableSize = getLEB();
            customSection.tableAlign = getLEB();
          } else if (subsectionType === WASM_DYLINK_NEEDED) {
            var neededDynlibsCount = getLEB();
            for (var i = 0; i < neededDynlibsCount; ++i) {
              libname = getString();
              customSection.neededDynlibs.push(libname);
            }
          } else if (subsectionType === WASM_DYLINK_EXPORT_INFO) {
            var count = getLEB();
            while (count--) {
              var symname = getString();
              var flags = getLEB();
              if (flags & WASM_SYMBOL_TLS) {
                customSection.tlsExports.add(symname);
              }
            }
          } else if (subsectionType === WASM_DYLINK_IMPORT_INFO) {
            var count = getLEB();
            while (count--) {
              var modname = getString();
              var symname = getString();
              var flags = getLEB();
              if (
                (flags & WASM_SYMBOL_BINDING_MASK) ==
                WASM_SYMBOL_BINDING_WEAK
              ) {
                customSection.weakImports.add(symname);
              }
            }
          } else {
            offset += subsectionSize;
          }
        }
      }
      return customSection;
    };
    Module["getDylinkMetadata"] = getDylinkMetadata;
    var getExceptionMessageCommon = (ptr) =>
      withStackSave(() => {
        var type_addr_addr = stackAlloc(4);
        var message_addr_addr = stackAlloc(4);
        ___get_exception_message(ptr, type_addr_addr, message_addr_addr);
        var type_addr = HEAPU32[type_addr_addr >> 2];
        var message_addr = HEAPU32[message_addr_addr >> 2];
        var type = UTF8ToString(type_addr);
        _free(type_addr);
        var message;
        if (message_addr) {
          message = UTF8ToString(message_addr);
          _free(message_addr);
        }
        return [type, message];
      });
    Module["getExceptionMessageCommon"] = getExceptionMessageCommon;
    var getExceptionMessage = (ptr) => getExceptionMessageCommon(ptr);
    Module["getExceptionMessage"] = getExceptionMessage;
    function getValue(ptr, type = "i8") {
      if (type.endsWith("*")) type = "*";
      switch (type) {
        case "i1":
          return HEAP8[ptr >> 0];
        case "i8":
          return HEAP8[ptr >> 0];
        case "i16":
          return HEAP16[ptr >> 1];
        case "i32":
          return HEAP32[ptr >> 2];
        case "i64":
          return HEAP64[ptr >> 3];
        case "float":
          return HEAPF32[ptr >> 2];
        case "double":
          return HEAPF64[ptr >> 3];
        case "*":
          return HEAPU32[ptr >> 2];
        default:
          abort(`invalid type for getValue: ${type}`);
      }
    }
    Module["getValue"] = getValue;
    var incrementExceptionRefcount = (ptr) =>
      ___cxa_increment_exception_refcount(ptr);
    Module["incrementExceptionRefcount"] = incrementExceptionRefcount;
    var newDSO = (name, handle, syms) => {
      var dso = { refcount: Infinity, name: name, exports: syms, global: true };
      LDSO.loadedLibsByName[name] = dso;
      if (handle != undefined) {
        LDSO.loadedLibsByHandle[handle] = dso;
      }
      return dso;
    };
    Module["newDSO"] = newDSO;
    var LDSO = {
      loadedLibsByName: {},
      loadedLibsByHandle: {},
      init() {
        newDSO("__main__", 0, wasmImports);
      },
    };
    Module["LDSO"] = LDSO;
    var ___heap_base = 9191456;
    Module["___heap_base"] = ___heap_base;
    var zeroMemory = (address, size) => {
      HEAPU8.fill(0, address, address + size);
      return address;
    };
    Module["zeroMemory"] = zeroMemory;
    var alignMemory = (size, alignment) =>
      Math.ceil(size / alignment) * alignment;
    Module["alignMemory"] = alignMemory;
    var getMemory = (size) => {
      if (runtimeInitialized) {
        return zeroMemory(_malloc(size), size);
      }
      var ret = ___heap_base;
      var end = ret + alignMemory(size, 16);
      ___heap_base = end;
      GOT["__heap_base"].value = end;
      return ret;
    };
    Module["getMemory"] = getMemory;
    var isInternalSym = (symName) =>
      [
        "__cpp_exception",
        "__c_longjmp",
        "__wasm_apply_data_relocs",
        "__dso_handle",
        "__tls_size",
        "__tls_align",
        "__set_stack_limits",
        "_emscripten_tls_init",
        "__wasm_init_tls",
        "__wasm_call_ctors",
        "__start_em_asm",
        "__stop_em_asm",
        "__start_em_js",
        "__stop_em_js",
      ].includes(symName) || symName.startsWith("__em_js__");
    Module["isInternalSym"] = isInternalSym;
    var uleb128Encode = (n, target) => {
      if (n < 128) {
        target.push(n);
      } else {
        target.push(n % 128 | 128, n >> 7);
      }
    };
    Module["uleb128Encode"] = uleb128Encode;
    var sigToWasmTypes = (sig) => {
      var typeNames = {
        i: "i32",
        j: "i64",
        f: "f32",
        d: "f64",
        e: "externref",
        p: "i32",
      };
      var type = {
        parameters: [],
        results: sig[0] == "v" ? [] : [typeNames[sig[0]]],
      };
      for (var i = 1; i < sig.length; ++i) {
        type.parameters.push(typeNames[sig[i]]);
      }
      return type;
    };
    Module["sigToWasmTypes"] = sigToWasmTypes;
    var generateFuncType = (sig, target) => {
      var sigRet = sig.slice(0, 1);
      var sigParam = sig.slice(1);
      var typeCodes = { i: 127, p: 127, j: 126, f: 125, d: 124 };
      target.push(96);
      uleb128Encode(sigParam.length, target);
      for (var i = 0; i < sigParam.length; ++i) {
        target.push(typeCodes[sigParam[i]]);
      }
      if (sigRet == "v") {
        target.push(0);
      } else {
        target.push(1, typeCodes[sigRet]);
      }
    };
    Module["generateFuncType"] = generateFuncType;
    var convertJsFunctionToWasm = (func, sig) => {
      if (typeof WebAssembly.Function == "function") {
        return new WebAssembly.Function(sigToWasmTypes(sig), func);
      }
      var typeSectionBody = [1];
      generateFuncType(sig, typeSectionBody);
      var bytes = [0, 97, 115, 109, 1, 0, 0, 0, 1];
      uleb128Encode(typeSectionBody.length, bytes);
      bytes.push.apply(bytes, typeSectionBody);
      bytes.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
      var module = new WebAssembly.Module(new Uint8Array(bytes));
      var instance = new WebAssembly.Instance(module, { e: { f: func } });
      var wrappedFunc = instance.exports["f"];
      return wrappedFunc;
    };
    Module["convertJsFunctionToWasm"] = convertJsFunctionToWasm;
    var wasmTableMirror = [];
    Module["wasmTableMirror"] = wasmTableMirror;
    var wasmTable = new WebAssembly.Table({
      initial: 6424,
      element: "anyfunc",
    });
    Module["wasmTable"] = wasmTable;
    var getWasmTableEntry = (funcPtr) => {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length)
          wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      return func;
    };
    Module["getWasmTableEntry"] = getWasmTableEntry;
    var updateTableMap = (offset, count) => {
      if (functionsInTableMap) {
        for (var i = offset; i < offset + count; i++) {
          var item = getWasmTableEntry(i);
          if (item) {
            functionsInTableMap.set(item, i);
          }
        }
      }
    };
    Module["updateTableMap"] = updateTableMap;
    var functionsInTableMap;
    Module["functionsInTableMap"] = functionsInTableMap;
    var getFunctionAddress = (func) => {
      if (!functionsInTableMap) {
        functionsInTableMap = new WeakMap();
        updateTableMap(0, wasmTable.length);
      }
      return functionsInTableMap.get(func) || 0;
    };
    Module["getFunctionAddress"] = getFunctionAddress;
    var freeTableIndexes = [];
    Module["freeTableIndexes"] = freeTableIndexes;
    var getEmptyTableSlot = () => {
      if (freeTableIndexes.length) {
        return freeTableIndexes.pop();
      }
      try {
        wasmTable.grow(1);
      } catch (err) {
        if (!(err instanceof RangeError)) {
          throw err;
        }
        throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
      }
      return wasmTable.length - 1;
    };
    Module["getEmptyTableSlot"] = getEmptyTableSlot;
    var setWasmTableEntry = (idx, func) => {
      wasmTable.set(idx, func);
      wasmTableMirror[idx] = wasmTable.get(idx);
    };
    Module["setWasmTableEntry"] = setWasmTableEntry;
    var addFunction = (func, sig) => {
      var rtn = getFunctionAddress(func);
      if (rtn) {
        return rtn;
      }
      var ret = getEmptyTableSlot();
      try {
        setWasmTableEntry(ret, func);
      } catch (err) {
        if (!(err instanceof TypeError)) {
          throw err;
        }
        var wrapped = convertJsFunctionToWasm(func, sig);
        setWasmTableEntry(ret, wrapped);
      }
      functionsInTableMap.set(func, ret);
      return ret;
    };
    Module["addFunction"] = addFunction;
    var updateGOT = (exports, replace) => {
      for (var symName in exports) {
        if (isInternalSym(symName)) {
          continue;
        }
        var value = exports[symName];
        if (!GOT[symName]) {
          GOT[symName] = new WebAssembly.Global({
            value: "i32",
            mutable: true,
          });
        }
        if (replace || GOT[symName].value == 0) {
          if (typeof value == "function") {
            GOT[symName].value = addFunction(value);
          } else if (typeof value == "number") {
            GOT[symName].value = value;
          } else {
            err(`unhandled export type for '${symName}': ${typeof value}`);
          }
        }
      }
    };
    Module["updateGOT"] = updateGOT;
    var relocateExports = (exports, memoryBase, replace) => {
      var relocated = {};
      for (var e in exports) {
        var value = exports[e];
        if (typeof value == "object") {
          value = value.value;
        }
        if (typeof value == "number") {
          value += memoryBase;
        }
        relocated[e] = value;
      }
      updateGOT(relocated, replace);
      return relocated;
    };
    Module["relocateExports"] = relocateExports;
    var isSymbolDefined = (symName) => {
      var existing = wasmImports[symName];
      if (!existing || existing.stub) {
        return false;
      }
      return true;
    };
    Module["isSymbolDefined"] = isSymbolDefined;
    var dynCall = (sig, ptr, args) => {
      var rtn = getWasmTableEntry(ptr).apply(null, args);
      return rtn;
    };
    Module["dynCall"] = dynCall;
    var createInvokeFunction = (sig) =>
      function () {
        var sp = stackSave();
        try {
          return dynCall(
            sig,
            arguments[0],
            Array.prototype.slice.call(arguments, 1),
          );
        } catch (e) {
          stackRestore(sp);
          if (e !== e + 0) throw e;
          _setThrew(1, 0);
          if(sig[0]=="j")return BigInt(0);
        }
      };
    Module["createInvokeFunction"] = createInvokeFunction;
    var resolveGlobalSymbol = (symName, direct = false) => {
      var sym;
      if (isSymbolDefined(symName)) {
        sym = wasmImports[symName];
      } else if (symName.startsWith("invoke_")) {
        sym = wasmImports[symName] = Module.createInvoke(symName.split("_")[1]);
      } else if (symName.startsWith("__cxa_find_matching_catch_")) {
        sym = wasmImports[symName] = function () {
          var args = Array.from(arguments);
          var rtn = findMatchingCatch(args);
          return rtn;
        };
      }
      return { sym: sym, name: symName };
    };
    Module["resolveGlobalSymbol"] = resolveGlobalSymbol;
    var loadWebAssemblyModule = (
      binary,
      flags,
      libName,
      localScope,
      handle,
    ) => {
      var metadata = getDylinkMetadata(binary);
      currentModuleWeakSymbols = metadata.weakImports;
      function loadModule() {
        var firstLoad = !handle || !HEAP8[(handle + 8) >> 0];
        if (firstLoad) {
          var memAlign = Math.pow(2, metadata.memoryAlign);
          var memoryBase = metadata.memorySize
            ? alignMemory(getMemory(metadata.memorySize + memAlign), memAlign)
            : 0;
          var tableBase = metadata.tableSize ? wasmTable.length : 0;
          if (handle) {
            HEAP8[(handle + 8) >> 0] = 1;
            HEAPU32[(handle + 12) >> 2] = memoryBase;
            HEAP32[(handle + 16) >> 2] = metadata.memorySize;
            HEAPU32[(handle + 20) >> 2] = tableBase;
            HEAP32[(handle + 24) >> 2] = metadata.tableSize;
          }
        } else {
          memoryBase = HEAPU32[(handle + 12) >> 2];
          tableBase = HEAPU32[(handle + 20) >> 2];
        }
        var tableGrowthNeeded =
          tableBase + metadata.tableSize - wasmTable.length;
        if (tableGrowthNeeded > 0) {
          wasmTable.grow(tableGrowthNeeded);
        }
        var moduleExports;
        function resolveSymbol(sym) {
          var resolved = resolveGlobalSymbol(sym).sym;
          if (!resolved && localScope) {
            resolved = localScope[sym];
          }
          if (!resolved) {
            resolved = moduleExports[sym];
          }
          return resolved;
        }
        var proxyHandler = {
          get(stubs, prop) {
            switch (prop) {
              case "__memory_base":
                return memoryBase;
              case "__table_base":
                return tableBase;
            }
            if (prop in wasmImports && !wasmImports[prop].stub) {
              return wasmImports[prop];
            }
            if (!(prop in stubs)) {
              var resolved;
              stubs[prop] = function () {
                if (!resolved) resolved = resolveSymbol(prop);
                if (!resolved) {
                  throw new Error(
                    `Dynamic linking error: cannot resolve symbol ${prop}`,
                  );
                }
                return resolved.apply(null, arguments);
              };
            }
            return stubs[prop];
          },
        };
        var proxy = new Proxy({}, proxyHandler);
        var info = {
          "GOT.mem": new Proxy({}, GOTHandler),
          "GOT.func": new Proxy({}, GOTHandler),
          env: proxy,
          wasi_snapshot_preview1: proxy,
        };
        function postInstantiation(module, instance) {
          updateTableMap(tableBase, metadata.tableSize);
          moduleExports = relocateExports(instance.exports, memoryBase);
          if (!flags.allowUndefined) {
            reportUndefinedSymbols();
          }
          function addEmAsm(addr, body) {
            var args = [];
            var arity = 0;
            for (; arity < 16; arity++) {
              if (body.indexOf("$" + arity) != -1) {
                args.push("$" + arity);
              } else {
                break;
              }
            }
            args = args.join(",");
            var func = `(${args}) => { ${body} };`;
            ASM_CONSTS[start] = eval(func);
          }
          if ("__start_em_asm" in moduleExports) {
            var start = moduleExports["__start_em_asm"];
            var stop = moduleExports["__stop_em_asm"];
            while (start < stop) {
              var jsString = UTF8ToString(start);
              addEmAsm(start, jsString);
              start = HEAPU8.indexOf(0, start) + 1;
            }
          }
          function addEmJs(name, cSig, body) {
            var jsArgs = [];
            cSig = cSig.slice(1, -1);
            if (cSig != "void") {
              cSig = cSig.split(",");
              for (var i in cSig) {
                var jsArg = cSig[i].split(" ").pop();
                jsArgs.push(jsArg.replace("*", ""));
              }
            }
            var func = `(${jsArgs}) => ${body};`;
            moduleExports[name] = eval(func);
          }
          for (var name in moduleExports) {
            if (name.startsWith("__em_js__")) {
              var start = moduleExports[name];
              var jsString = UTF8ToString(start);
              var parts = jsString.split("<::>");
              addEmJs(name.replace("__em_js__", ""), parts[0], parts[1]);
              delete moduleExports[name];
            }
          }
          var applyRelocs = moduleExports["__wasm_apply_data_relocs"];
          if (applyRelocs) {
            if (runtimeInitialized) {
              applyRelocs();
            } else {
              __RELOC_FUNCS__.push(applyRelocs);
            }
          }
          var init = moduleExports["__wasm_call_ctors"];
          if (init) {
            if (runtimeInitialized) {
              init();
            } else {
              __ATINIT__.push(init);
            }
          }
          return moduleExports;
        }
        if (flags.loadAsync) {
          if (binary instanceof WebAssembly.Module) {
            var instance = new WebAssembly.Instance(binary, info);
            return Promise.resolve(postInstantiation(binary, instance));
          }
          return WebAssembly.instantiate(binary, info).then((result) =>
            postInstantiation(result.module, result.instance),
          );
        }
        var module =
          binary instanceof WebAssembly.Module
            ? binary
            : new WebAssembly.Module(binary);
        var instance = new WebAssembly.Instance(module, info);
        return postInstantiation(module, instance);
      }
      if (flags.loadAsync) {
        return metadata.neededDynlibs
          .reduce(
            (chain, dynNeeded) =>
              chain.then(() => loadDynamicLibrary(dynNeeded, flags)),
            Promise.resolve(),
          )
          .then(loadModule);
      }
      metadata.neededDynlibs.forEach((needed) =>
        loadDynamicLibrary(needed, flags, localScope),
      );
      return loadModule();
    };
    Module["loadWebAssemblyModule"] = loadWebAssemblyModule;
    var mergeLibSymbols = (exports, libName) => {
      for (var sym in exports) {
        if (!exports.hasOwnProperty(sym)) {
          continue;
        }
        const setImport = (target) => {
          if (!isSymbolDefined(target)) {
            wasmImports[target] = exports[sym];
          }
        };
        setImport(sym);
        const main_alias = "__main_argc_argv";
        if (sym == "main") {
          setImport(main_alias);
        }
        if (sym == main_alias) {
          setImport("main");
        }
        if (sym.startsWith("dynCall_") && !Module.hasOwnProperty(sym)) {
          Module[sym] = exports[sym];
        }
      }
    };
    Module["mergeLibSymbols"] = mergeLibSymbols;
    var asyncLoad = (url, onload, onerror, noRunDep) => {
      var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : "";
      readAsync(
        url,
        (arrayBuffer) => {
          assert(
            arrayBuffer,
            `Loading data file "${url}" failed (no arrayBuffer).`,
          );
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        },
        (event) => {
          if (onerror) {
            onerror();
          } else {
            throw `Loading data file "${url}" failed.`;
          }
        },
      );
      if (dep) addRunDependency(dep);
    };
    Module["asyncLoad"] = asyncLoad;
    var preloadPlugins = Module["preloadPlugins"] || [];
    Module["preloadPlugins"] = preloadPlugins;
    var registerWasmPlugin = () => {
      var wasmPlugin = {
        promiseChainEnd: Promise.resolve(),
        canHandle: (name) => !Module.noWasmDecoding && name.endsWith(".so"),
        handle: (byteArray, name, onload, onerror) => {
          wasmPlugin["promiseChainEnd"] = wasmPlugin["promiseChainEnd"]
            .then(() =>
              loadWebAssemblyModule(
                byteArray,
                { loadAsync: true, nodelete: true },
                name,
              ),
            )
            .then(
              (exports) => {
                preloadedWasm[name] = exports;
                onload(byteArray);
              },
              (error) => {
                err(`failed to instantiate wasm: ${name}: ${error}`);
                onerror();
              },
            );
        },
      };
      preloadPlugins.push(wasmPlugin);
    };
    Module["registerWasmPlugin"] = registerWasmPlugin;
    var preloadedWasm = {};
    Module["preloadedWasm"] = preloadedWasm;
    function loadDynamicLibrary(
      libName,
      flags = { global: true, nodelete: true },
      localScope,
      handle,
    ) {
      var dso = LDSO.loadedLibsByName[libName];
      if (dso) {
        if (!flags.global) {
          if (localScope) {
            Object.assign(localScope, dso.exports);
          }
        } else if (!dso.global) {
          dso.global = true;
          mergeLibSymbols(dso.exports, libName);
        }
        if (flags.nodelete && dso.refcount !== Infinity) {
          dso.refcount = Infinity;
        }
        dso.refcount++;
        if (handle) {
          LDSO.loadedLibsByHandle[handle] = dso;
        }
        return flags.loadAsync ? Promise.resolve(true) : true;
      }
      dso = newDSO(libName, handle, "loading");
      dso.refcount = flags.nodelete ? Infinity : 1;
      dso.global = flags.global;
      function loadLibData() {
        var libData;
        if (handle) {
          var data = HEAPU32[(handle + 28) >> 2];
          var dataSize = HEAPU32[(handle + 32) >> 2];
          if (data && dataSize) {
            libData = HEAP8.slice(data, data + dataSize);
          }
        }
        if (!libData && flags.fs && flags.fs.findObject(libName)) {
          libData = flags.fs.readFile(libName, { encoding: "binary" });
          if (!(libData instanceof Uint8Array)) {
            libData = new Uint8Array(libData);
          }
        }
        if (libData) {
          return flags.loadAsync ? Promise.resolve(libData) : libData;
        }
        var libFile = locateFile(libName);
        if (flags.loadAsync) {
          return new Promise(function (resolve, reject) {
            asyncLoad(libFile, (data) => resolve(data), reject);
          });
        }
        if (!readBinary) {
          throw new Error(
            `${libFile}: file not found, and synchronous loading of external files is not available`,
          );
        }
        return readBinary(libFile);
      }
      function getExports() {
        var preloaded = preloadedWasm[libName];
        if (preloaded) {
          return flags.loadAsync ? Promise.resolve(preloaded) : preloaded;
        }
        if (flags.loadAsync) {
          return loadLibData().then((libData) =>
            loadWebAssemblyModule(libData, flags, libName, localScope, handle),
          );
        }
        return loadWebAssemblyModule(
          loadLibData(),
          flags,
          libName,
          localScope,
          handle,
        );
      }
      function moduleLoaded(exports) {
        if (dso.global) {
          mergeLibSymbols(exports, libName);
        } else if (localScope) {
          Object.assign(localScope, exports);
        }
        dso.exports = exports;
      }
      if (flags.loadAsync) {
        return getExports().then((exports) => {
          moduleLoaded(exports);
          return true;
        });
      }
      moduleLoaded(getExports());
      return true;
    }
    Module["loadDynamicLibrary"] = loadDynamicLibrary;
    var reportUndefinedSymbols = () => {
      for (var symName in GOT) {
        if (GOT[symName].value == 0) {
          var value = resolveGlobalSymbol(symName, true).sym;
          if (!value && !GOT[symName].required) {
            continue;
          }
          if (typeof value == "function") {
            GOT[symName].value = addFunction(value, value.sig);
          } else if (typeof value == "number") {
            GOT[symName].value = value;
          } else {
            console.log(`bad export type for '${symName}': ${typeof value}`);
          }
        }
      }
    };
    Module["reportUndefinedSymbols"] = reportUndefinedSymbols;
    var loadDylibs = () => {
      if (!dynamicLibraries.length) {
        reportUndefinedSymbols();
        return;
      }
      addRunDependency("loadDylibs");
      dynamicLibraries
        .reduce(
          (chain, lib) =>
            chain.then(() =>
              loadDynamicLibrary(lib, {
                loadAsync: true,
                global: true,
                nodelete: true,
                allowUndefined: true,
              }),
            ),
          Promise.resolve(),
        )
        .then(() => {
          reportUndefinedSymbols();
          removeRunDependency("loadDylibs");
        });
    };
    Module["loadDylibs"] = loadDylibs;
    function setValue(ptr, value, type = "i8") {
      if (type.endsWith("*")) type = "*";
      switch (type) {
        case "i1":
          HEAP8[ptr >> 0] = value;
          break;
        case "i8":
          HEAP8[ptr >> 0] = value;
          break;
        case "i16":
          HEAP16[ptr >> 1] = value;
          break;
        case "i32":
          HEAP32[ptr >> 2] = value;
          break;
        case "i64":
          HEAP64[ptr >> 3] = BigInt(value);
          break;
        case "float":
          HEAPF32[ptr >> 2] = value;
          break;
        case "double":
          HEAPF64[ptr >> 3] = value;
          break;
        case "*":
          HEAPU32[ptr >> 2] = value;
          break;
        default:
          abort(`invalid type for setValue: ${type}`);
      }
    }
    Module["setValue"] = setValue;
    function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        try {
          throw new Error();
        } catch (e) {
          error = e;
        }
        if (!error.stack) {
          return "(no stack trace available)";
        }
      }
      return error.stack.toString();
    }
    Module["jsStackTrace"] = jsStackTrace;
    var demangleAll = (text) => {
      var regex = /\b_Z[\w\d_]+/g;
      return text.replace(regex, function (x) {
        var y = demangle(x);
        return x === y ? x : y + " [" + x + "]";
      });
    };
    Module["demangleAll"] = demangleAll;
    function stackTrace() {
      var js = jsStackTrace();
      if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
      return demangleAll(js);
    }
    Module["stackTrace"] = stackTrace;
    var ___assert_fail = (condition, filename, line, func) => {
      abort(
        `Assertion failed: ${UTF8ToString(condition)}, at: ` +
          [
            filename ? UTF8ToString(filename) : "unknown filename",
            line,
            func ? UTF8ToString(func) : "unknown function",
          ],
      );
    };
    Module["___assert_fail"] = ___assert_fail;
    ___assert_fail.sig = "vppip";
    var ___call_sighandler = (fp, sig) => getWasmTableEntry(fp)(sig);
    Module["___call_sighandler"] = ___call_sighandler;
    ___call_sighandler.sig = "vpi";
    var exceptionCaught = [];
    Module["exceptionCaught"] = exceptionCaught;
    var uncaughtExceptionCount = 0;
    Module["uncaughtExceptionCount"] = uncaughtExceptionCount;
    var ___cxa_begin_catch = (ptr) => {
      var info = new ExceptionInfo(ptr);
      if (!info.get_caught()) {
        info.set_caught(true);
        uncaughtExceptionCount--;
      }
      info.set_rethrown(false);
      exceptionCaught.push(info);
      ___cxa_increment_exception_refcount(info.excPtr);
      return info.get_exception_ptr();
    };
    Module["___cxa_begin_catch"] = ___cxa_begin_catch;
    ___cxa_begin_catch.sig = "pp";
    var ___cxa_current_primary_exception = () => {
      if (!exceptionCaught.length) {
        return 0;
      }
      var info = exceptionCaught[exceptionCaught.length - 1];
      ___cxa_increment_exception_refcount(info.excPtr);
      return info.excPtr;
    };
    Module["___cxa_current_primary_exception"] =
      ___cxa_current_primary_exception;
    ___cxa_current_primary_exception.sig = "p";
    var exceptionLast = 0;
    Module["exceptionLast"] = exceptionLast;
    var ___cxa_end_catch = () => {
      _setThrew(0, 0);
      var info = exceptionCaught.pop();
      ___cxa_decrement_exception_refcount(info.excPtr);
      exceptionLast = 0;
    };
    Module["___cxa_end_catch"] = ___cxa_end_catch;
    ___cxa_end_catch.sig = "v";
    function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 24;
      this.set_type = function (type) {
        HEAPU32[(this.ptr + 4) >> 2] = type;
      };
      this.get_type = function () {
        return HEAPU32[(this.ptr + 4) >> 2];
      };
      this.set_destructor = function (destructor) {
        HEAPU32[(this.ptr + 8) >> 2] = destructor;
      };
      this.get_destructor = function () {
        return HEAPU32[(this.ptr + 8) >> 2];
      };
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(this.ptr + 12) >> 0] = caught;
      };
      this.get_caught = function () {
        return HEAP8[(this.ptr + 12) >> 0] != 0;
      };
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(this.ptr + 13) >> 0] = rethrown;
      };
      this.get_rethrown = function () {
        return HEAP8[(this.ptr + 13) >> 0] != 0;
      };
      this.init = function (type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
      };
      this.set_adjusted_ptr = function (adjustedPtr) {
        HEAPU32[(this.ptr + 16) >> 2] = adjustedPtr;
      };
      this.get_adjusted_ptr = function () {
        return HEAPU32[(this.ptr + 16) >> 2];
      };
      this.get_exception_ptr = function () {
        var isPointer = ___cxa_is_pointer_type(this.get_type());
        if (isPointer) {
          return HEAPU32[this.excPtr >> 2];
        }
        var adjusted = this.get_adjusted_ptr();
        if (adjusted !== 0) return adjusted;
        return this.excPtr;
      };
    }
    Module["ExceptionInfo"] = ExceptionInfo;
    var ___resumeException = (ptr) => {
      if (!exceptionLast) {
        exceptionLast = ptr;
      }
      throw Module.wrapException(exceptionLast);
    };
    Module["___resumeException"] = ___resumeException;
    ___resumeException.sig = "vp";
    var findMatchingCatch = (args) => {
      var thrown = exceptionLast;
      if (!thrown) {
        setTempRet0(0);
        return 0;
      }
      var info = new ExceptionInfo(thrown);
      info.set_adjusted_ptr(thrown);
      var thrownType = info.get_type();
      if (!thrownType) {
        setTempRet0(0);
        return thrown;
      }
      for (var arg in args) {
        var caughtType = args[arg];
        if (caughtType === 0 || caughtType === thrownType) {
          break;
        }
        var adjusted_ptr_addr = info.ptr + 16;
        if (___cxa_can_catch(caughtType, thrownType, adjusted_ptr_addr)) {
          setTempRet0(caughtType);
          return thrown;
        }
      }
      setTempRet0(thrownType);
      return thrown;
    };
    Module["findMatchingCatch"] = findMatchingCatch;
    var ___cxa_find_matching_catch_2 = () => findMatchingCatch([]);
    Module["___cxa_find_matching_catch_2"] = ___cxa_find_matching_catch_2;
    ___cxa_find_matching_catch_2.sig = "p";
    var ___cxa_find_matching_catch_3 = (arg0) => findMatchingCatch([arg0]);
    Module["___cxa_find_matching_catch_3"] = ___cxa_find_matching_catch_3;
    ___cxa_find_matching_catch_3.sig = "pp";
    var ___cxa_rethrow = () => {
      var info = exceptionCaught.pop();
      if (!info) {
        abort("no exception to throw");
      }
      var ptr = info.excPtr;
      if (!info.get_rethrown()) {
        exceptionCaught.push(info);
        info.set_rethrown(true);
        info.set_caught(false);
        uncaughtExceptionCount++;
      }
      exceptionLast = ptr;
      throw Module.wrapException(exceptionLast);
    };
    Module["___cxa_rethrow"] = ___cxa_rethrow;
    ___cxa_rethrow.sig = "v";
    var ___cxa_rethrow_primary_exception = (ptr) => {
      if (!ptr) return;
      var info = new ExceptionInfo(ptr);
      exceptionCaught.push(info);
      info.set_rethrown(true);
      ___cxa_rethrow();
    };
    Module["___cxa_rethrow_primary_exception"] =
      ___cxa_rethrow_primary_exception;
    ___cxa_rethrow_primary_exception.sig = "vp";
    var ___cxa_throw = (ptr, type, destructor) => {
      var info = new ExceptionInfo(ptr);
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw Module.wrapException(exceptionLast);
    };
    Module["___cxa_throw"] = ___cxa_throw;
    ___cxa_throw.sig = "vppp";
    var ___cxa_uncaught_exceptions = () => uncaughtExceptionCount;
    Module["___cxa_uncaught_exceptions"] = ___cxa_uncaught_exceptions;
    ___cxa_uncaught_exceptions.sig = "i";
    var ___memory_base = new WebAssembly.Global(
      { value: "i32", mutable: false },
      1024,
    );
    Module["___memory_base"] = ___memory_base;
    var ___stack_high = 9191456;
    Module["___stack_high"] = ___stack_high;
    var ___stack_low = 3948576;
    Module["___stack_low"] = ___stack_low;
    var ___stack_pointer = new WebAssembly.Global(
      { value: "i32", mutable: true },
      9191456,
    );
    Module["___stack_pointer"] = ___stack_pointer;
    var PATH = {
      isAbs: (path) => path.charAt(0) === "/",
      splitPath: (filename) => {
        var splitPathRe =
          /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
      normalizeArray: (parts, allowAboveRoot) => {
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === ".") {
            parts.splice(i, 1);
          } else if (last === "..") {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift("..");
          }
        }
        return parts;
      },
      normalize: (path) => {
        var isAbsolute = PATH.isAbs(path),
          trailingSlash = path.substr(-1) === "/";
        path = PATH.normalizeArray(
          path.split("/").filter((p) => !!p),
          !isAbsolute,
        ).join("/");
        if (!path && !isAbsolute) {
          path = ".";
        }
        if (path && trailingSlash) {
          path += "/";
        }
        return (isAbsolute ? "/" : "") + path;
      },
      dirname: (path) => {
        var result = PATH.splitPath(path),
          root = result[0],
          dir = result[1];
        if (!root && !dir) {
          return ".";
        }
        if (dir) {
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },
      basename: (path) => {
        if (path === "/") return "/";
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf("/");
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1);
      },
      join: function () {
        var paths = Array.prototype.slice.call(arguments);
        return PATH.normalize(paths.join("/"));
      },
      join2: (l, r) => PATH.normalize(l + "/" + r),
    };
    Module["PATH"] = PATH;
    var initRandomFill = () => {
      if (
        typeof crypto == "object" &&
        typeof crypto["getRandomValues"] == "function"
      ) {
        return (view) => crypto.getRandomValues(view);
      } else if (ENVIRONMENT_IS_NODE) {
        try {
          var crypto_module = require("crypto");
          var randomFillSync = crypto_module["randomFillSync"];
          if (randomFillSync) {
            return (view) => crypto_module["randomFillSync"](view);
          }
          var randomBytes = crypto_module["randomBytes"];
          return (view) => (view.set(randomBytes(view.byteLength)), view);
        } catch (e) {}
      }
      abort("initRandomDevice");
    };
    Module["initRandomFill"] = initRandomFill;
    var randomFill = (view) => (randomFill = initRandomFill())(view);
    Module["randomFill"] = randomFill;
    var PATH_FS = {
      resolve: function () {
        var resolvedPath = "",
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = i >= 0 ? arguments[i] : FS.cwd();
          if (typeof path != "string") {
            throw new TypeError("Arguments to path.resolve must be strings");
          } else if (!path) {
            return "";
          }
          resolvedPath = path + "/" + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        resolvedPath = PATH.normalizeArray(
          resolvedPath.split("/").filter((p) => !!p),
          !resolvedAbsolute,
        ).join("/");
        return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
      },
      relative: (from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== "") break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== "") break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split("/"));
        var toParts = trim(to.split("/"));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push("..");
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join("/");
      },
    };
    Module["PATH_FS"] = PATH_FS;
    var FS_stdin_getChar_buffer = [];
    Module["FS_stdin_getChar_buffer"] = FS_stdin_getChar_buffer;
    function intArrayFromString(stringy, dontAddNull, length) {
      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(
        stringy,
        u8array,
        0,
        u8array.length,
      );
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    }
    Module["intArrayFromString"] = intArrayFromString;
    var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (ENVIRONMENT_IS_NODE) {
          var BUFSIZE = 256;
          var buf = Buffer.alloc(BUFSIZE);
          var bytesRead = 0;
          var fd = process.stdin.fd;
          try {
            bytesRead = fs.readSync(fd, buf);
          } catch (e) {
            if (e.toString().includes("EOF")) bytesRead = 0;
            else throw e;
          }
          if (bytesRead > 0) {
            result = buf.slice(0, bytesRead).toString("utf-8");
          } else {
            result = null;
          }
        } else if (
          typeof window != "undefined" &&
          typeof window.prompt == "function"
        ) {
          result = window.prompt("Input: ");
          if (result !== null) {
            result += "\n";
          }
        } else if (typeof readline == "function") {
          result = readline();
          if (result !== null) {
            result += "\n";
          }
        }
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
    Module["FS_stdin_getChar"] = FS_stdin_getChar;
    var TTY = {
      ttys: [],
      init() {},
      shutdown() {},
      register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
      stream_ops: {
        open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
        close(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
        fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
        read(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset + i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },
        write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        },
      },
      default_tty_ops: {
        get_char(tty) {
          return FS_stdin_getChar();
        },
        put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
        fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        },
        ioctl_tcgets(tty) {
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
          };
        },
        ioctl_tcsets(tty, optional_actions, data) {
          return 0;
        },
        ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
      },
      default_tty1_ops: {
        put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
        fsync(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        },
      },
    };
    Module["TTY"] = TTY;
    var mmapAlloc = (size) => {
      size = alignMemory(size, 65536);
      var ptr = _emscripten_builtin_memalign(65536, size);
      if (!ptr) return 0;
      return zeroMemory(ptr, size);
    };
    Module["mmapAlloc"] = mmapAlloc;
    var MEMFS = {
      ops_table: null,
      mount(mount) {
        return MEMFS.createNode(null, "/", 16384 | 511, 0);
      },
      createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink,
              },
              stream: { llseek: MEMFS.stream_ops.llseek },
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync,
              },
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink,
              },
              stream: {},
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
              },
              stream: FS.chrdev_stream_ops,
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0;
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },
      getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray)
          return node.contents.subarray(0, node.usedBytes);
        return new Uint8Array(node.contents);
      },
      expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return;
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(
          newCapacity,
          (prevCapacity *
            (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125)) >>>
            0,
        );
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity);
        if (node.usedBytes > 0)
          node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
      },
      resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null;
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize);
          if (oldContents) {
            node.contents.set(
              oldContents.subarray(0, Math.min(newSize, node.usedBytes)),
            );
          }
          node.usedBytes = newSize;
        }
      },
      node_ops: {
        getattr(node) {
          var attr = {};
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
        setattr(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
        lookup(parent, name) {
          throw FS.genericErrors[44];
        },
        mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
        rename(old_node, new_dir, new_name) {
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {}
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now();
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },
        unlink(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
        rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },
        readdir(node) {
          var entries = [".", ".."];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },
        symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
          node.link = oldpath;
          return node;
        },
        readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
      },
      stream_ops: {
        read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) {
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++)
              buffer[offset + i] = contents[position + i];
          }
          return size;
        },
        write(stream, buffer, offset, length, position, canOwn) {
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
          if (buffer.subarray && (!node.contents || node.contents.subarray)) {
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) {
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) {
              node.contents.set(
                buffer.subarray(offset, offset + length),
                position,
              );
              return length;
            }
          }
          MEMFS.expandFileStorage(node, position + length);
          if (node.contents.subarray && buffer.subarray) {
            node.contents.set(
              buffer.subarray(offset, offset + length),
              position,
            );
          } else {
            for (var i = 0; i < length; i++) {
              node.contents[position + i] = buffer[offset + i];
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
        llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
        allocate(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(
            stream.node.usedBytes,
            offset + length,
          );
        },
        mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          if (!(flags & 2) && contents.buffer === HEAP8.buffer) {
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(
                  contents,
                  position,
                  position + length,
                );
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },
        msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          return 0;
        },
      },
    };
    Module["MEMFS"] = MEMFS;
    var FS_createDataFile = (
      parent,
      name,
      fileData,
      canRead,
      canWrite,
      canOwn,
    ) => FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
    Module["FS_createDataFile"] = FS_createDataFile;
    var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      if (typeof Browser != "undefined") Browser.init();
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin["canHandle"](fullname)) {
          plugin["handle"](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
    Module["FS_handledByPreloadPlugin"] = FS_handledByPreloadPlugin;
    var FS_createPreloadedFile = (
      parent,
      name,
      url,
      canRead,
      canWrite,
      onload,
      onerror,
      dontCreateFile,
      canOwn,
      preFinish,
    ) => {
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`);
      function processData(byteArray) {
        function finish(byteArray) {
          if (preFinish) preFinish();
          if (!dontCreateFile) {
            FS_createDataFile(
              parent,
              name,
              byteArray,
              canRead,
              canWrite,
              canOwn,
            );
          }
          if (onload) onload();
          removeRunDependency(dep);
        }
        if (
          FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
            if (onerror) onerror();
            removeRunDependency(dep);
          })
        ) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == "string") {
        asyncLoad(url, (byteArray) => processData(byteArray), onerror);
      } else {
        processData(url);
      }
    };
    Module["FS_createPreloadedFile"] = FS_createPreloadedFile;
    var FS_modeStringToFlags = (str) => {
      var flagModes = {
        r: 0,
        "r+": 2,
        w: 512 | 64 | 1,
        "w+": 512 | 64 | 2,
        a: 1024 | 64 | 1,
        "a+": 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == "undefined") {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
    Module["FS_modeStringToFlags"] = FS_modeStringToFlags;
    var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
    Module["FS_getMode"] = FS_getMode;
    var IDBFS = {
      dbs: {},
      indexedDB: () => {
        if (typeof indexedDB != "undefined") return indexedDB;
        var ret = null;
        if (typeof window == "object")
          ret =
            window.indexedDB ||
            window.mozIndexedDB ||
            window.webkitIndexedDB ||
            window.msIndexedDB;
        assert(ret, "IDBFS used, but indexedDB not supported");
        return ret;
      },
      DB_VERSION: 21,
      DB_STORE_NAME: "FILE_DATA",
      mount: function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },
      syncfs: (mount, populate, callback) => {
        IDBFS.getLocalSet(mount, (err, local) => {
          if (err) return callback(err);
          IDBFS.getRemoteSet(mount, (err, remote) => {
            if (err) return callback(err);
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },
      quit: () => {
        Object.values(IDBFS.dbs).forEach((value) => value.close());
        IDBFS.dbs = {};
      },
      getDB: (name, callback) => {
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = (e) => {
          var db = e.target.result;
          var transaction = e.target.transaction;
          var fileStore;
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
          if (!fileStore.indexNames.contains("timestamp")) {
            fileStore.createIndex("timestamp", "timestamp", { unique: false });
          }
        };
        req.onsuccess = () => {
          db = req.result;
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
      getLocalSet: (mount, callback) => {
        var entries = {};
        function isRealDir(p) {
          return p !== "." && p !== "..";
        }
        function toAbsolute(root) {
          return (p) => PATH.join2(root, p);
        }
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
        while (check.length) {
          var path = check.pop();
          var stat;
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
          if (FS.isDir(stat.mode)) {
            check.push.apply(
              check,
              FS.readdir(path).filter(isRealDir).map(toAbsolute(path)),
            );
          }
          entries[path] = { timestamp: stat.mtime };
        }
        return callback(null, { type: "local", entries: entries });
      },
      getRemoteSet: (mount, callback) => {
        var entries = {};
        IDBFS.getDB(mount.mountpoint, (err, db) => {
          if (err) return callback(err);
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readonly");
            transaction.onerror = (e) => {
              callback(e.target.error);
              e.preventDefault();
            };
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index("timestamp");
            index.openKeyCursor().onsuccess = (event) => {
              var cursor = event.target.result;
              if (!cursor) {
                return callback(null, {
                  type: "remote",
                  db: db,
                  entries: entries,
                });
              }
              entries[cursor.primaryKey] = { timestamp: cursor.key };
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },
      loadLocalEntry: (path, callback) => {
        var stat, node;
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, {
            timestamp: stat.mtime,
            mode: stat.mode,
            contents: node.contents,
          });
        } else {
          return callback(new Error("node type not supported"));
        }
      },
      storeLocalEntry: (path, entry, callback) => {
        try {
          if (FS.isDir(entry["mode"])) {
            FS.mkdirTree(path, entry["mode"]);
          } else if (FS.isFile(entry["mode"])) {
            FS.writeFile(path, entry["contents"], { canOwn: true });
          } else {
            return callback(new Error("node type not supported"));
          }
          FS.chmod(path, entry["mode"]);
          FS.utime(path, entry["timestamp"], entry["timestamp"]);
        } catch (e) {
          return callback(e);
        }
        callback(null);
      },
      removeLocalEntry: (path, callback) => {
        try {
          var stat = FS.stat(path);
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
        callback(null);
      },
      loadRemoteEntry: (store, path, callback) => {
        var req = store.get(path);
        req.onsuccess = (event) => {
          callback(null, event.target.result);
        };
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
      storeRemoteEntry: (store, path, entry, callback) => {
        try {
          var req = store.put(entry, path);
        } catch (e) {
          callback(e);
          return;
        }
        req.onsuccess = () => {
          callback(null);
        };
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
      removeRemoteEntry: (store, path, callback) => {
        var req = store.delete(path);
        req.onsuccess = () => {
          callback(null);
        };
        req.onerror = (e) => {
          callback(e.target.error);
          e.preventDefault();
        };
      },
      reconcile: (src, dst, callback) => {
        var total = 0;
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e["timestamp"].getTime() != e2["timestamp"].getTime()) {
            create.push(key);
            total++;
          }
        });
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          if (!src.entries[key]) {
            remove.push(key);
            total++;
          }
        });
        if (!total) {
          return callback(null);
        }
        var errored = false;
        var db = src.type === "remote" ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readwrite");
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
        function done(err) {
          if (err && !errored) {
            errored = true;
            return callback(err);
          }
        }
        transaction.onerror = (e) => {
          done(this.error);
          e.preventDefault();
        };
        transaction.oncomplete = (e) => {
          if (!errored) {
            callback(null);
          }
        };
        create.sort().forEach((path) => {
          if (dst.type === "local") {
            IDBFS.loadRemoteEntry(store, path, (err, entry) => {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, (err, entry) => {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
        remove
          .sort()
          .reverse()
          .forEach((path) => {
            if (dst.type === "local") {
              IDBFS.removeLocalEntry(path, done);
            } else {
              IDBFS.removeRemoteEntry(store, path, done);
            }
          });
      },
    };
    Module["IDBFS"] = IDBFS;
    var ERRNO_CODES = {};
    Module["ERRNO_CODES"] = ERRNO_CODES;
    var NODEFS = {
      isWindows: false,
      staticInit() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process.binding("constants");
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          1024: flags["O_APPEND"],
          64: flags["O_CREAT"],
          128: flags["O_EXCL"],
          256: flags["O_NOCTTY"],
          0: flags["O_RDONLY"],
          2: flags["O_RDWR"],
          4096: flags["O_SYNC"],
          512: flags["O_TRUNC"],
          1: flags["O_WRONLY"],
          131072: flags["O_NOFOLLOW"],
        };
      },
      convertNodeCode(e) {
        var code = e.code;
        return ERRNO_CODES[code];
      },
      mount(mount) {
        return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
      },
      createNode(parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(28);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },
      getMode(path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
        }
        return stat.mode;
      },
      realPath(node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },
      flagsForNode(flags) {
        flags &= ~2097152;
        flags &= ~2048;
        flags &= ~32768;
        flags &= ~524288;
        flags &= ~65536;
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
        if (flags) {
          throw new FS.ErrnoError(28);
        }
        return newFlags;
      },
      node_ops: {
        getattr(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = ((stat.size + stat.blksize - 1) / stat.blksize) | 0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks,
          };
        },
        setattr(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        lookup(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },
        mknod(parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, "", { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          return node;
        },
        rename(oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          oldNode.name = newName;
        },
        unlink(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        rmdir(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        readdir(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        symlink(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        readlink(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = nodePath.relative(
              nodePath.resolve(node.mount.opts.root),
              path,
            );
            return path;
          } catch (e) {
            if (!e.code) throw e;
            if (e.code === "UNKNOWN") throw new FS.ErrnoError(28);
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
      },
      stream_ops: {
        open(stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        close(stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        read(stream, buffer, offset, length, position) {
          if (length === 0) return 0;
          try {
            return fs.readSync(
              stream.nfd,
              new Int8Array(buffer.buffer, offset, length),
              { position: position },
            );
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        write(stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(
              stream.nfd,
              new Int8Array(buffer.buffer, offset, length),
              { position: position },
            );
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },
        llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
        mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr = mmapAlloc(length);
          NODEFS.stream_ops.read(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        },
        msync(stream, buffer, offset, length, mmapFlags) {
          NODEFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          return 0;
        },
      },
    };
    Module["NODEFS"] = NODEFS;
    var WORKERFS = {
      DIR_MODE: 16895,
      FILE_MODE: 33279,
      reader: null,
      mount(mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          var parts = path.split("/");
          var parent = root;
          for (var i = 0; i < parts.length - 1; i++) {
            var curr = parts.slice(0, i + 1).join("/");
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(
                parent,
                parts[i],
                WORKERFS.DIR_MODE,
                0,
              );
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split("/");
          return parts[parts.length - 1];
        }
        Array.prototype.forEach.call(
          mount.opts["files"] || [],
          function (file) {
            WORKERFS.createNode(
              ensureParent(file.name),
              base(file.name),
              WORKERFS.FILE_MODE,
              0,
              file,
              file.lastModifiedDate,
            );
          },
        );
        (mount.opts["blobs"] || []).forEach(function (obj) {
          WORKERFS.createNode(
            ensureParent(obj["name"]),
            base(obj["name"]),
            WORKERFS.FILE_MODE,
            0,
            obj["data"],
          );
        });
        (mount.opts["packages"] || []).forEach(function (pack) {
          pack["metadata"].files.forEach(function (file) {
            var name = file.filename.substr(1);
            WORKERFS.createNode(
              ensureParent(name),
              base(name),
              WORKERFS.FILE_MODE,
              0,
              pack["blob"].slice(file.start, file.end),
            );
          });
        });
        return root;
      },
      createNode(parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date()).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },
      node_ops: {
        getattr(node) {
          return {
            dev: 1,
            ino: node.id,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: 0,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },
        setattr(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },
        lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
        mknod(parent, name, mode, dev) {
          throw new FS.ErrnoError(63);
        },
        rename(oldNode, newDir, newName) {
          throw new FS.ErrnoError(63);
        },
        unlink(parent, name) {
          throw new FS.ErrnoError(63);
        },
        rmdir(parent, name) {
          throw new FS.ErrnoError(63);
        },
        readdir(node) {
          var entries = [".", ".."];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },
        symlink(parent, newName, oldPath) {
          throw new FS.ErrnoError(63);
        },
      },
      stream_ops: {
        read(stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },
        write(stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(29);
        },
        llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
      },
    };
    Module["WORKERFS"] = WORKERFS;
    var PROXYFS = {
      mount(mount) {
        return PROXYFS.createNode(
          null,
          "/",
          mount.opts.fs.lstat(mount.opts.root).mode,
          0,
        );
      },
      createNode(parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = PROXYFS.node_ops;
        node.stream_ops = PROXYFS.stream_ops;
        return node;
      },
      realPath(node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },
      node_ops: {
        getattr(node) {
          var path = PROXYFS.realPath(node);
          var stat;
          try {
            stat = node.mount.opts.fs.lstat(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks,
          };
        },
        setattr(node, attr) {
          var path = PROXYFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              node.mount.opts.fs.chmod(path, attr.mode);
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              node.mount.opts.fs.utime(path, date, date);
            }
            if (attr.size !== undefined) {
              node.mount.opts.fs.truncate(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        lookup(parent, name) {
          try {
            var path = PATH.join2(PROXYFS.realPath(parent), name);
            var mode = parent.mount.opts.fs.lstat(path).mode;
            var node = PROXYFS.createNode(parent, name, mode);
            return node;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        mknod(parent, name, mode, dev) {
          var node = PROXYFS.createNode(parent, name, mode, dev);
          var path = PROXYFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              node.mount.opts.fs.mkdir(path, node.mode);
            } else {
              node.mount.opts.fs.writeFile(path, "", { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },
        rename(oldNode, newDir, newName) {
          var oldPath = PROXYFS.realPath(oldNode);
          var newPath = PATH.join2(PROXYFS.realPath(newDir), newName);
          try {
            oldNode.mount.opts.fs.rename(oldPath, newPath);
            oldNode.name = newName;
            oldNode.parent = newDir;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        unlink(parent, name) {
          var path = PATH.join2(PROXYFS.realPath(parent), name);
          try {
            parent.mount.opts.fs.unlink(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        rmdir(parent, name) {
          var path = PATH.join2(PROXYFS.realPath(parent), name);
          try {
            parent.mount.opts.fs.rmdir(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        readdir(node) {
          var path = PROXYFS.realPath(node);
          try {
            return node.mount.opts.fs.readdir(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        symlink(parent, newName, oldPath) {
          var newPath = PATH.join2(PROXYFS.realPath(parent), newName);
          try {
            parent.mount.opts.fs.symlink(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        readlink(node) {
          var path = PROXYFS.realPath(node);
          try {
            return node.mount.opts.fs.readlink(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
      },
      stream_ops: {
        open(stream) {
          var path = PROXYFS.realPath(stream.node);
          try {
            stream.nfd = stream.node.mount.opts.fs.open(path, stream.flags);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        close(stream) {
          try {
            stream.node.mount.opts.fs.close(stream.nfd);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        read(stream, buffer, offset, length, position) {
          try {
            return stream.node.mount.opts.fs.read(
              stream.nfd,
              buffer,
              offset,
              length,
              position,
            );
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        write(stream, buffer, offset, length, position) {
          try {
            return stream.node.mount.opts.fs.write(
              stream.nfd,
              buffer,
              offset,
              length,
              position,
            );
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },
        llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = stream.node.node_ops.getattr(stream.node);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },
      },
    };
    Module["PROXYFS"] = PROXYFS;
    var LZ4 = {
      DIR_MODE: 16895,
      FILE_MODE: 33279,
      CHUNK_SIZE: -1,
      codec: null,
      init() {
        if (LZ4.codec) return;
        LZ4.codec = (function () {
          var MiniLZ4 = (function () {
            var exports = {};
            exports.uncompress = function (input, output, sIdx, eIdx) {
              sIdx = sIdx || 0;
              eIdx = eIdx || input.length - sIdx;
              for (var i = sIdx, n = eIdx, j = 0; i < n; ) {
                var token = input[i++];
                var literals_length = token >> 4;
                if (literals_length > 0) {
                  var l = literals_length + 240;
                  while (l === 255) {
                    l = input[i++];
                    literals_length += l;
                  }
                  var end = i + literals_length;
                  while (i < end) output[j++] = input[i++];
                  if (i === n) return j;
                }
                var offset = input[i++] | (input[i++] << 8);
                if (offset === 0) return j;
                if (offset > j) return -(i - 2);
                var match_length = token & 15;
                var l = match_length + 240;
                while (l === 255) {
                  l = input[i++];
                  match_length += l;
                }
                var pos = j - offset;
                var end = j + match_length + 4;
                while (j < end) output[j++] = output[pos++];
              }
              return j;
            };
            var maxInputSize = 2113929216,
              minMatch = 4,
              hashLog = 16,
              hashShift = minMatch * 8 - hashLog,
              hashSize = 1 << hashLog,
              copyLength = 8,
              lastLiterals = 5,
              mfLimit = copyLength + minMatch,
              skipStrength = 6,
              mlBits = 4,
              mlMask = (1 << mlBits) - 1,
              runBits = 8 - mlBits,
              runMask = (1 << runBits) - 1,
              hasher = 2654435761;
            assert(hashShift === 16);
            var hashTable = new Int16Array(1 << 16);
            var empty = new Int16Array(hashTable.length);
            exports.compressBound = function (isize) {
              return isize > maxInputSize ? 0 : (isize + isize / 255 + 16) | 0;
            };
            exports.compress = function (src, dst, sIdx, eIdx) {
              hashTable.set(empty);
              return compressBlock(src, dst, 0, sIdx || 0, eIdx || dst.length);
            };
            function compressBlock(src, dst, pos, sIdx, eIdx) {
              var dpos = sIdx;
              var dlen = eIdx - sIdx;
              var anchor = 0;
              if (src.length >= maxInputSize)
                throw new Error("input too large");
              if (src.length > mfLimit) {
                var n = exports.compressBound(src.length);
                if (dlen < n)
                  throw Error("output too small: " + dlen + " < " + n);
                var step = 1,
                  findMatchAttempts = (1 << skipStrength) + 3,
                  srcLength = src.length - mfLimit;
                while (pos + minMatch < srcLength) {
                  var sequenceLowBits = (src[pos + 1] << 8) | src[pos];
                  var sequenceHighBits = (src[pos + 3] << 8) | src[pos + 2];
                  var hash =
                    Math.imul(
                      sequenceLowBits | (sequenceHighBits << 16),
                      hasher,
                    ) >>> hashShift;
                  var ref = hashTable[hash] - 1;
                  hashTable[hash] = pos + 1;
                  if (
                    ref < 0 ||
                    (pos - ref) >>> 16 > 0 ||
                    ((src[ref + 3] << 8) | src[ref + 2]) != sequenceHighBits ||
                    ((src[ref + 1] << 8) | src[ref]) != sequenceLowBits
                  ) {
                    step = findMatchAttempts++ >> skipStrength;
                    pos += step;
                    continue;
                  }
                  findMatchAttempts = (1 << skipStrength) + 3;
                  var literals_length = pos - anchor;
                  var offset = pos - ref;
                  pos += minMatch;
                  ref += minMatch;
                  var match_length = pos;
                  while (pos < srcLength && src[pos] == src[ref]) {
                    pos++;
                    ref++;
                  }
                  match_length = pos - match_length;
                  var token = match_length < mlMask ? match_length : mlMask;
                  if (literals_length >= runMask) {
                    dst[dpos++] = (runMask << mlBits) + token;
                    for (
                      var len = literals_length - runMask;
                      len > 254;
                      len -= 255
                    ) {
                      dst[dpos++] = 255;
                    }
                    dst[dpos++] = len;
                  } else {
                    dst[dpos++] = (literals_length << mlBits) + token;
                  }
                  for (var i = 0; i < literals_length; i++) {
                    dst[dpos++] = src[anchor + i];
                  }
                  dst[dpos++] = offset;
                  dst[dpos++] = offset >> 8;
                  if (match_length >= mlMask) {
                    match_length -= mlMask;
                    while (match_length >= 255) {
                      match_length -= 255;
                      dst[dpos++] = 255;
                    }
                    dst[dpos++] = match_length;
                  }
                  anchor = pos;
                }
              }
              if (anchor == 0) return 0;
              literals_length = src.length - anchor;
              if (literals_length >= runMask) {
                dst[dpos++] = runMask << mlBits;
                for (var ln = literals_length - runMask; ln > 254; ln -= 255) {
                  dst[dpos++] = 255;
                }
                dst[dpos++] = ln;
              } else {
                dst[dpos++] = literals_length << mlBits;
              }
              pos = anchor;
              while (pos < src.length) {
                dst[dpos++] = src[pos++];
              }
              return dpos;
            }
            exports.CHUNK_SIZE = 2048;
            exports.compressPackage = function (data, verify) {
              if (verify) {
                var temp = new Uint8Array(exports.CHUNK_SIZE);
              }
              assert(data instanceof ArrayBuffer);
              data = new Uint8Array(data);
              console.log("compressing package of size " + data.length);
              var compressedChunks = [];
              var successes = [];
              var offset = 0;
              var total = 0;
              while (offset < data.length) {
                var chunk = data.subarray(offset, offset + exports.CHUNK_SIZE);
                offset += exports.CHUNK_SIZE;
                var bound = exports.compressBound(chunk.length);
                var compressed = new Uint8Array(bound);
                var compressedSize = exports.compress(chunk, compressed);
                if (compressedSize > 0) {
                  assert(compressedSize <= bound);
                  compressed = compressed.subarray(0, compressedSize);
                  compressedChunks.push(compressed);
                  total += compressedSize;
                  successes.push(1);
                  if (verify) {
                    var back = exports.uncompress(compressed, temp);
                    assert(back === chunk.length, [back, chunk.length]);
                    for (var i = 0; i < chunk.length; i++) {
                      assert(chunk[i] === temp[i]);
                    }
                  }
                } else {
                  assert(compressedSize === 0);
                  compressedChunks.push(chunk);
                  total += chunk.length;
                  successes.push(0);
                }
              }
              data = null;
              var compressedData = {
                data: new Uint8Array(total + exports.CHUNK_SIZE * 2),
                cachedOffset: total,
                cachedIndexes: [-1, -1],
                cachedChunks: [null, null],
                offsets: [],
                sizes: [],
                successes: successes,
              };
              offset = 0;
              for (var i = 0; i < compressedChunks.length; i++) {
                compressedData["data"].set(compressedChunks[i], offset);
                compressedData["offsets"][i] = offset;
                compressedData["sizes"][i] = compressedChunks[i].length;
                offset += compressedChunks[i].length;
              }
              console.log(
                "compressed package into " + [compressedData["data"].length],
              );
              assert(offset === total);
              return compressedData;
            };
            assert(exports.CHUNK_SIZE < 1 << 15);
            return exports;
          })();
          return MiniLZ4;
        })();
        LZ4.CHUNK_SIZE = LZ4.codec.CHUNK_SIZE;
      },
      loadPackage(pack, preloadPlugin) {
        LZ4.init();
        var compressedData = pack["compressedData"];
        if (!compressedData)
          compressedData = LZ4.codec.compressPackage(pack["data"]);
        assert(
          compressedData["cachedIndexes"].length ===
            compressedData["cachedChunks"].length,
        );
        for (var i = 0; i < compressedData["cachedIndexes"].length; i++) {
          compressedData["cachedIndexes"][i] = -1;
          compressedData["cachedChunks"][i] = compressedData["data"].subarray(
            compressedData["cachedOffset"] + i * LZ4.CHUNK_SIZE,
            compressedData["cachedOffset"] + (i + 1) * LZ4.CHUNK_SIZE,
          );
          assert(compressedData["cachedChunks"][i].length === LZ4.CHUNK_SIZE);
        }
        pack["metadata"].files.forEach((file) => {
          var dir = PATH.dirname(file.filename);
          var name = PATH.basename(file.filename);
          FS.createPath("", dir, true, true);
          var parent = FS.analyzePath(dir).object;
          LZ4.createNode(parent, name, LZ4.FILE_MODE, 0, {
            compressedData: compressedData,
            start: file.start,
            end: file.end,
          });
        });
        if (preloadPlugin) {
          Browser.init();
          pack["metadata"].files.forEach((file) => {
            var handled = false;
            var fullname = file.filename;
            preloadPlugins.forEach((plugin) => {
              if (handled) return;
              if (plugin["canHandle"](fullname)) {
                var dep = getUniqueRunDependency("fp " + fullname);
                addRunDependency(dep);
                var finish = () => removeRunDependency(dep);
                var byteArray = FS.readFile(fullname);
                plugin["handle"](byteArray, fullname, finish, finish);
                handled = true;
              }
            });
          });
        }
      },
      createNode(parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = LZ4.node_ops;
        node.stream_ops = LZ4.stream_ops;
        node.timestamp = (mtime || new Date()).getTime();
        assert(LZ4.FILE_MODE !== LZ4.DIR_MODE);
        if (mode === LZ4.FILE_MODE) {
          node.size = contents.end - contents.start;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },
      node_ops: {
        getattr(node) {
          return {
            dev: 1,
            ino: node.id,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: 0,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },
        setattr(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },
        lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
        mknod(parent, name, mode, dev) {
          throw new FS.ErrnoError(63);
        },
        rename(oldNode, newDir, newName) {
          throw new FS.ErrnoError(63);
        },
        unlink(parent, name) {
          throw new FS.ErrnoError(63);
        },
        rmdir(parent, name) {
          throw new FS.ErrnoError(63);
        },
        readdir(node) {
          throw new FS.ErrnoError(63);
        },
        symlink(parent, newName, oldPath) {
          throw new FS.ErrnoError(63);
        },
      },
      stream_ops: {
        read(stream, buffer, offset, length, position) {
          length = Math.min(length, stream.node.size - position);
          if (length <= 0) return 0;
          var contents = stream.node.contents;
          var compressedData = contents.compressedData;
          var written = 0;
          while (written < length) {
            var start = contents.start + position + written;
            var desired = length - written;
            var chunkIndex = Math.floor(start / LZ4.CHUNK_SIZE);
            var compressedStart = compressedData["offsets"][chunkIndex];
            var compressedSize = compressedData["sizes"][chunkIndex];
            var currChunk;
            if (compressedData["successes"][chunkIndex]) {
              var found = compressedData["cachedIndexes"].indexOf(chunkIndex);
              if (found >= 0) {
                currChunk = compressedData["cachedChunks"][found];
              } else {
                compressedData["cachedIndexes"].pop();
                compressedData["cachedIndexes"].unshift(chunkIndex);
                currChunk = compressedData["cachedChunks"].pop();
                compressedData["cachedChunks"].unshift(currChunk);
                if (compressedData["debug"]) {
                  out("decompressing chunk " + chunkIndex);
                  Module["decompressedChunks"] =
                    (Module["decompressedChunks"] || 0) + 1;
                }
                var compressed = compressedData["data"].subarray(
                  compressedStart,
                  compressedStart + compressedSize,
                );
                var originalSize = LZ4.codec.uncompress(compressed, currChunk);
                if (chunkIndex < compressedData["successes"].length - 1)
                  assert(originalSize === LZ4.CHUNK_SIZE);
              }
            } else {
              currChunk = compressedData["data"].subarray(
                compressedStart,
                compressedStart + LZ4.CHUNK_SIZE,
              );
            }
            var startInChunk = start % LZ4.CHUNK_SIZE;
            var endInChunk = Math.min(startInChunk + desired, LZ4.CHUNK_SIZE);
            buffer.set(
              currChunk.subarray(startInChunk, endInChunk),
              offset + written,
            );
            var currWritten = endInChunk - startInChunk;
            written += currWritten;
          }
          return written;
        },
        write(stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(29);
        },
        llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
      },
    };
    Module["LZ4"] = LZ4;
    var FS = {
      root: null,
      mounts: [],
      devices: {},
      streams: [],
      nextInode: 1,
      nameTable: null,
      currentPath: "/",
      initialized: false,
      ignorePermissions: true,
      ErrnoError: null,
      genericErrors: {},
      filesystems: null,
      syncFSRequests: 0,
      lookupPath(path, opts = {}) {
        path = PATH_FS.resolve(path);
        if (!path) return { path: "", node: null };
        var defaults = { follow_mount: true, recurse_count: 0 };
        opts = Object.assign(defaults, opts);
        if (opts.recurse_count > 8) {
          throw new FS.ErrnoError(32);
        }
        var parts = path.split("/").filter((p) => !!p);
        var current = FS.root;
        var current_path = "/";
        for (var i = 0; i < parts.length; i++) {
          var islast = i === parts.length - 1;
          if (islast && opts.parent) {
            break;
          }
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
              var lookup = FS.lookupPath(current_path, {
                recurse_count: opts.recurse_count + 1,
              });
              current = lookup.node;
              if (count++ > 40) {
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
        return { path: current_path, node: current };
      },
      getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length - 1] !== "/"
              ? `${mount}/${path}`
              : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
      hashName(parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
      hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
      hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
      lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        return FS.lookup(parent, name);
      },
      createNode(parent, name, mode, rdev) {
        var node = new FS.FSNode(parent, name, mode, rdev);
        FS.hashAddNode(node);
        return node;
      },
      destroyNode(node) {
        FS.hashRemoveNode(node);
      },
      isRoot(node) {
        return node === node.parent;
      },
      isMountpoint(node) {
        return !!node.mounted;
      },
      isFile(mode) {
        return (mode & 61440) === 32768;
      },
      isDir(mode) {
        return (mode & 61440) === 16384;
      },
      isLink(mode) {
        return (mode & 61440) === 40960;
      },
      isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
      isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
      isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
      isSocket(mode) {
        return (mode & 49152) === 49152;
      },
      flagsToPermissionString(flag) {
        var perms = ["r", "w", "rw"][flag & 3];
        if (flag & 512) {
          perms += "w";
        }
        return perms;
      },
      nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        if (perms.includes("r") && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes("w") && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes("x") && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
      mayLookup(dir) {
        var errCode = FS.nodePermissions(dir, "x");
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
      mayCreate(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {}
        return FS.nodePermissions(dir, "wx");
      },
      mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, "wx");
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
      mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
      MAX_OPEN_FDS: 4096,
      nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
      getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
      getStream: (fd) => FS.streams[fd],
      createStream(stream, fd = -1) {
        if (!FS.FSStream) {
          FS.FSStream = function () {
            this.shared = {};
          };
          FS.FSStream.prototype = {};
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get() {
                return this.node;
              },
              set(val) {
                this.node = val;
              },
            },
            isRead: {
              get() {
                return (this.flags & 2097155) !== 1;
              },
            },
            isWrite: {
              get() {
                return (this.flags & 2097155) !== 0;
              },
            },
            isAppend: {
              get() {
                return this.flags & 1024;
              },
            },
            flags: {
              get() {
                return this.shared.flags;
              },
              set(val) {
                this.shared.flags = val;
              },
            },
            position: {
              get() {
                return this.shared.position;
              },
              set(val) {
                this.shared.position = val;
              },
            },
          });
        }
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
      closeStream(fd) {
        FS.streams[fd] = null;
      },
      chrdev_stream_ops: {
        open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          stream.stream_ops = device.stream_ops;
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },
        llseek() {
          throw new FS.ErrnoError(70);
        },
      },
      major: (dev) => dev >> 8,
      minor: (dev) => dev & 255,
      makedev: (ma, mi) => (ma << 8) | mi,
      registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
      getDevice: (dev) => FS.devices[dev],
      getMounts(mount) {
        var mounts = [];
        var check = [mount];
        while (check.length) {
          var m = check.pop();
          mounts.push(m);
          check.push.apply(check, m.mounts);
        }
        return mounts;
      },
      syncfs(populate, callback) {
        if (typeof populate == "function") {
          callback = populate;
          populate = false;
        }
        FS.syncFSRequests++;
        if (FS.syncFSRequests > 1) {
          err(
            `warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`,
          );
        }
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
        function doCallback(errCode) {
          FS.syncFSRequests--;
          return callback(errCode);
        }
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        }
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
      mount(type, opts, mountpoint) {
        var root = mountpoint === "/";
        var pseudo = !mountpoint;
        var node;
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
          mountpoint = lookup.path;
          node = lookup.node;
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: [],
        };
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          node.mounted = mount;
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
        return mountRoot;
      },
      unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
          while (current) {
            var next = current.name_next;
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
            current = next;
          }
        });
        node.mounted = null;
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },
      lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
      mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === "." || name === "..") {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
      create(path, mode) {
        mode = mode !== undefined ? mode : 438;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
      mkdir(path, mode) {
        mode = mode !== undefined ? mode : 511;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
      mkdirTree(path, mode) {
        var dirs = path.split("/");
        var d = "";
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += "/" + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch (e) {
            if (e.errno != 20) throw e;
          }
        }
      },
      mkdev(path, mode, dev) {
        if (typeof dev == "undefined") {
          dev = mode;
          mode = 438;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
      symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
      rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        var lookup, old_dir, new_dir;
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        var old_node = FS.lookupNode(old_dir, old_name);
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== ".") {
          throw new FS.ErrnoError(28);
        }
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== ".") {
          throw new FS.ErrnoError(55);
        }
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {}
        if (old_node === new_node) {
          return;
        }
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        errCode = new_node
          ? FS.mayDelete(new_dir, new_name, isdir)
          : FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (
          FS.isMountpoint(old_node) ||
          (new_node && FS.isMountpoint(new_node))
        ) {
          throw new FS.ErrnoError(10);
        }
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, "w");
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        FS.hashRemoveNode(old_node);
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          FS.hashAddNode(old_node);
        }
      },
      rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
      readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },
      unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
      readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(
          FS.getPath(link.parent),
          link.node_ops.readlink(link),
        );
      },
      stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },
      lstat(path) {
        return FS.stat(path, true);
      },
      chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == "string") {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now(),
        });
      },
      lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
      fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.chmod(stream.node, mode);
      },
      chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == "string") {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, { timestamp: Date.now() });
      },
      lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
      fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.chown(stream.node, uid, gid);
      },
      truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == "string") {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, "w");
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, { size: len, timestamp: Date.now() });
      },
      ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },
      utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, { timestamp: Math.max(atime, mtime) });
      },
      open(path, flags, mode) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == "string" ? FS_modeStringToFlags(flags) : flags;
        mode = typeof mode == "undefined" ? 438 : mode;
        if (flags & 64) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path == "object") {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, { follow: !(flags & 131072) });
            node = lookup.node;
          } catch (e) {}
        }
        var created = false;
        if (flags & 64) {
          if (node) {
            if (flags & 128) {
              throw new FS.ErrnoError(20);
            }
          } else {
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        if (flags & 65536 && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        if (flags & 512 && !created) {
          FS.truncate(node, 0);
        }
        flags &= ~(128 | 512 | 131072);
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          ungotten: [],
          error: false,
        });
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module["logReadFiles"] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
      close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null;
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
      isClosed(stream) {
        return stream.fd === null;
      },
      llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
      read(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != "undefined";
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(
          stream,
          buffer,
          offset,
          length,
          position,
        );
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
      write(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != "undefined";
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(
          stream,
          buffer,
          offset,
          length,
          position,
          canOwn,
        );
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
      allocate(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },
      mmap(stream, length, position, prot, flags) {
        if (
          (prot & 2) !== 0 &&
          (flags & 2) === 0 &&
          (stream.flags & 2097155) !== 2
        ) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
      msync(stream, buffer, offset, length, mmapFlags) {
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(
          stream,
          buffer,
          offset,
          length,
          mmapFlags,
        );
      },
      munmap: (stream) => 0,
      ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
      readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || "binary";
        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === "utf8") {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === "binary") {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
      writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == "string") {
          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error("Unsupported data type");
        }
        FS.close(stream);
      },
      cwd: () => FS.currentPath,
      chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, "x");
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
      createDefaultDirectories() {
        FS.mkdir("/tmp");
        FS.mkdir("/home");
        FS.mkdir("/home/web_user");
      },
      createDefaultDevices() {
        FS.mkdir("/dev");
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
        });
        FS.mkdev("/dev/null", FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev("/dev/tty", FS.makedev(5, 0));
        FS.mkdev("/dev/tty1", FS.makedev(6, 0));
        var randomBuffer = new Uint8Array(1024),
          randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomLeft = randomFill(randomBuffer).byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice("/dev", "random", randomByte);
        FS.createDevice("/dev", "urandom", randomByte);
        FS.mkdir("/dev/shm");
        FS.mkdir("/dev/shm/tmp");
      },
      createSpecialDirectories() {
        FS.mkdir("/proc");
        var proc_self = FS.mkdir("/proc/self");
        FS.mkdir("/proc/self/fd");
        FS.mount(
          {
            mount() {
              var node = FS.createNode(proc_self, "fd", 16384 | 511, 73);
              node.node_ops = {
                lookup(parent, name) {
                  var fd = +name;
                  var stream = FS.getStreamChecked(fd);
                  var ret = {
                    parent: null,
                    mount: { mountpoint: "fake" },
                    node_ops: { readlink: () => stream.path },
                  };
                  ret.parent = ret;
                  return ret;
                },
              };
              return node;
            },
          },
          {},
          "/proc/self/fd",
        );
      },
      createStandardStreams() {
        if (Module["stdin"]) {
          FS.createDevice("/dev", "stdin", Module["stdin"]);
        } else {
          FS.symlink("/dev/tty", "/dev/stdin");
        }
        if (Module["stdout"]) {
          FS.createDevice("/dev", "stdout", null, Module["stdout"]);
        } else {
          FS.symlink("/dev/tty", "/dev/stdout");
        }
        if (Module["stderr"]) {
          FS.createDevice("/dev", "stderr", null, Module["stderr"]);
        } else {
          FS.symlink("/dev/tty1", "/dev/stderr");
        }
        var stdin = FS.open("/dev/stdin", 0);
        var stdout = FS.open("/dev/stdout", 1);
        var stderr = FS.open("/dev/stderr", 1);
      },
      ensureErrnoError() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.name = "ErrnoError";
          this.node = node;
          this.setErrno = function (errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = "FS error";
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        [44].forEach((code) => {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = "<generic error, no stack>";
        });
      },
      staticInit() {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.mount(MEMFS, {}, "/");
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
        FS.filesystems = {
          MEMFS: MEMFS,
          IDBFS: IDBFS,
          NODEFS: NODEFS,
          WORKERFS: WORKERFS,
          PROXYFS: PROXYFS,
        };
      },
      init(input, output, error) {
        FS.init.initialized = true;
        FS.ensureErrnoError();
        Module["stdin"] = input || Module["stdin"];
        Module["stdout"] = output || Module["stdout"];
        Module["stderr"] = error || Module["stderr"];
        FS.createStandardStreams();
      },
      quit() {
        FS.init.initialized = false;
        _fflush(0);
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },
      findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
      analyzePath(path, dontResolveLastLink) {
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {}
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null,
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === "/";
        } catch (e) {
          ret.error = e.errno;
        }
        return ret;
      },
      createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == "string" ? parent : FS.getPath(parent);
        var parts = path.split("/").reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {}
          parent = current;
        }
        return current;
      },
      createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(
          typeof parent == "string" ? parent : FS.getPath(parent),
          name,
        );
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
      createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == "string" ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == "string") {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i)
              arr[i] = data.charCodeAt(i);
            data = arr;
          }
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },
      createDevice(parent, name, input, output) {
        var path = PATH.join2(
          typeof parent == "string" ? parent : FS.getPath(parent),
          name,
        );
        var mode = FS_getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset + i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset + i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          },
        });
        return FS.mkdev(path, mode, dev);
      },
      forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents)
          return true;
        if (typeof XMLHttpRequest != "undefined") {
          throw new Error(
            "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.",
          );
        } else if (read_) {
          try {
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error("Cannot load without read() or XMLHttpRequest.");
        }
      },
      createLazyFile(parent, name, url, canRead, canWrite) {
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = [];
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length - 1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize) | 0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter =
          function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          };
        LazyUint8Array.prototype.cacheLength =
          function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest();
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (
              !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)
            )
              throw new Error(
                "Couldn't load " + url + ". Status: " + xhr.status,
              );
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing =
              (header = xhr.getResponseHeader("Accept-Ranges")) &&
              header === "bytes";
            var usesGzip =
              (header = xhr.getResponseHeader("Content-Encoding")) &&
              header === "gzip";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing) chunkSize = datalength;
            var doXHR = (from, to) => {
              if (from > to)
                throw new Error(
                  "invalid range (" +
                    from +
                    ", " +
                    to +
                    ") or no bytes requested!",
                );
              if (to > datalength - 1)
                throw new Error(
                  "only " + datalength + " bytes available! programmer error!",
                );
              var xhr = new XMLHttpRequest();
              xhr.open("GET", url, false);
              if (datalength !== chunkSize)
                xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
              xhr.responseType = "arraybuffer";
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType("text/plain; charset=x-user-defined");
              }
              xhr.send(null);
              if (
                !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)
              )
                throw new Error(
                  "Couldn't load " + url + ". Status: " + xhr.status,
                );
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              }
              return intArrayFromString(xhr.responseText || "", true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum + 1) * chunkSize - 1;
              end = Math.min(end, datalength - 1);
              if (typeof lazyArray.chunks[chunkNum] == "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == "undefined")
                throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
            if (usesGzip || !datalength) {
              chunkSize = datalength = 1;
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out(
                "LazyFiles on gzip forces download of the whole file when length is accessed",
              );
            }
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          };
        if (typeof XMLHttpRequest != "undefined") {
          if (!ENVIRONMENT_IS_WORKER)
            throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function () {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              },
            },
            chunkSize: {
              get: function () {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              },
            },
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        Object.defineProperties(node, {
          usedBytes: {
            get: function () {
              return this.contents.length;
            },
          },
        });
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length) return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position);
        };
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
    };
    Module["FS"] = FS;
    var SYSCALLS = {
      DEFAULT_POLLMASK: 5,
      calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },
      doStat(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (
            e &&
            e.node &&
            PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))
          ) {
            return -54;
          }
          throw e;
        }
        HEAP32[buf >> 2] = stat.dev;
        HEAP32[(buf + 4) >> 2] = stat.mode;
        HEAPU32[(buf + 8) >> 2] = stat.nlink;
        HEAP32[(buf + 12) >> 2] = stat.uid;
        HEAP32[(buf + 16) >> 2] = stat.gid;
        HEAP32[(buf + 20) >> 2] = stat.rdev;
        HEAP64[(buf + 24) >> 3] = BigInt(stat.size);
        HEAP32[(buf + 32) >> 2] = 4096;
        HEAP32[(buf + 36) >> 2] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        HEAP64[(buf + 40) >> 3] = BigInt(Math.floor(atime / 1e3));
        HEAPU32[(buf + 48) >> 2] = (atime % 1e3) * 1e3;
        HEAP64[(buf + 56) >> 3] = BigInt(Math.floor(mtime / 1e3));
        HEAPU32[(buf + 64) >> 2] = (mtime % 1e3) * 1e3;
        HEAP64[(buf + 72) >> 3] = BigInt(Math.floor(ctime / 1e3));
        HEAPU32[(buf + 80) >> 2] = (ctime % 1e3) * 1e3;
        HEAP64[(buf + 88) >> 3] = BigInt(stat.ino);
        return 0;
      },
      doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
      varargs: undefined,
      get() {
        var ret = HEAP32[+SYSCALLS.varargs >> 2];
        SYSCALLS.varargs += 4;
        return ret;
      },
      getp() {
        return SYSCALLS.get();
      },
      getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
      getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
    };
    Module["SYSCALLS"] = SYSCALLS;
    function ___syscall__newselect(
      nfds,
      readfds,
      writefds,
      exceptfds,
      timeout,
    ) {
      try {
        var total = 0;
        var srcReadLow = readfds ? HEAP32[readfds >> 2] : 0,
          srcReadHigh = readfds ? HEAP32[(readfds + 4) >> 2] : 0;
        var srcWriteLow = writefds ? HEAP32[writefds >> 2] : 0,
          srcWriteHigh = writefds ? HEAP32[(writefds + 4) >> 2] : 0;
        var srcExceptLow = exceptfds ? HEAP32[exceptfds >> 2] : 0,
          srcExceptHigh = exceptfds ? HEAP32[(exceptfds + 4) >> 2] : 0;
        var dstReadLow = 0,
          dstReadHigh = 0;
        var dstWriteLow = 0,
          dstWriteHigh = 0;
        var dstExceptLow = 0,
          dstExceptHigh = 0;
        var allLow =
          (readfds ? HEAP32[readfds >> 2] : 0) |
          (writefds ? HEAP32[writefds >> 2] : 0) |
          (exceptfds ? HEAP32[exceptfds >> 2] : 0);
        var allHigh =
          (readfds ? HEAP32[(readfds + 4) >> 2] : 0) |
          (writefds ? HEAP32[(writefds + 4) >> 2] : 0) |
          (exceptfds ? HEAP32[(exceptfds + 4) >> 2] : 0);
        var check = function (fd, low, high, val) {
          return fd < 32 ? low & val : high & val;
        };
        for (var fd = 0; fd < nfds; fd++) {
          var mask = 1 << fd % 32;
          if (!check(fd, allLow, allHigh, mask)) {
            continue;
          }
          var stream = SYSCALLS.getStreamFromFD(fd);
          var flags = SYSCALLS.DEFAULT_POLLMASK;
          if (stream.stream_ops.poll) {
            var timeoutInMillis = -1;
            if (timeout) {
              var tv_sec = readfds ? HEAP32[timeout >> 2] : 0,
                tv_usec = readfds ? HEAP32[(timeout + 8) >> 2] : 0;
              timeoutInMillis = (tv_sec + tv_usec / 1e6) * 1e3;
            }
            flags = stream.stream_ops.poll(stream, timeoutInMillis);
          }
          if (flags & 1 && check(fd, srcReadLow, srcReadHigh, mask)) {
            fd < 32
              ? (dstReadLow = dstReadLow | mask)
              : (dstReadHigh = dstReadHigh | mask);
            total++;
          }
          if (flags & 4 && check(fd, srcWriteLow, srcWriteHigh, mask)) {
            fd < 32
              ? (dstWriteLow = dstWriteLow | mask)
              : (dstWriteHigh = dstWriteHigh | mask);
            total++;
          }
          if (flags & 2 && check(fd, srcExceptLow, srcExceptHigh, mask)) {
            fd < 32
              ? (dstExceptLow = dstExceptLow | mask)
              : (dstExceptHigh = dstExceptHigh | mask);
            total++;
          }
        }
        if (readfds) {
          HEAP32[readfds >> 2] = dstReadLow;
          HEAP32[(readfds + 4) >> 2] = dstReadHigh;
        }
        if (writefds) {
          HEAP32[writefds >> 2] = dstWriteLow;
          HEAP32[(writefds + 4) >> 2] = dstWriteHigh;
        }
        if (exceptfds) {
          HEAP32[exceptfds >> 2] = dstExceptLow;
          HEAP32[(exceptfds + 4) >> 2] = dstExceptHigh;
        }
        return total;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall__newselect"] = ___syscall__newselect;
    ___syscall__newselect.sig = "iipppp";
    var SOCKFS = {
      mount(mount) {
        Module["websocket"] =
          Module["websocket"] && "object" === typeof Module["websocket"]
            ? Module["websocket"]
            : {};
        Module["websocket"]._callbacks = {};
        Module["websocket"]["on"] = function (event, callback) {
          if ("function" === typeof callback) {
            this._callbacks[event] = callback;
          }
          return this;
        };
        Module["websocket"].emit = function (event, param) {
          if ("function" === typeof this._callbacks[event]) {
            this._callbacks[event].call(this, param);
          }
        };
        return FS.createNode(null, "/", 16384 | 511, 0);
      },
      createSocket(family, type, protocol) {
        type &= ~526336;
        var streaming = type == 1;
        if (streaming && protocol && protocol != 6) {
          throw new FS.ErrnoError(66);
        }
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops,
        };
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: 2,
          seekable: false,
          stream_ops: SOCKFS.stream_ops,
        });
        sock.stream = stream;
        return sock;
      },
      getSocket(fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },
      stream_ops: {
        poll(stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },
        ioctl(stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },
        read(stream, buffer, offset, length, position) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },
        write(stream, buffer, offset, length, position) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },
        close(stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        },
      },
      nextname() {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return "socket[" + SOCKFS.nextname.current++ + "]";
      },
      websocket_sock_ops: {
        createPeer(sock, addr, port) {
          var ws;
          if (typeof addr == "object") {
            ws = addr;
            addr = null;
            port = null;
          }
          if (ws) {
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            } else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error(
                  "WebSocket URL must be in the format ws(s)://address:port",
                );
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            try {
              var runtimeConfig =
                Module["websocket"] && "object" === typeof Module["websocket"];
              var url = "ws:#".replace("#", "//");
              if (runtimeConfig) {
                if ("string" === typeof Module["websocket"]["url"]) {
                  url = Module["websocket"]["url"];
                }
              }
              if (url === "ws://" || url === "wss://") {
                var parts = addr.split("/");
                url =
                  url + parts[0] + ":" + port + "/" + parts.slice(1).join("/");
              }
              var subProtocols = "binary";
              if (runtimeConfig) {
                if ("string" === typeof Module["websocket"]["subprotocol"]) {
                  subProtocols = Module["websocket"]["subprotocol"];
                }
              }
              var opts = undefined;
              if (subProtocols !== "null") {
                subProtocols = subProtocols
                  .replace(/^ +| +$/g, "")
                  .split(/ *, */);
                opts = subProtocols;
              }
              if (
                runtimeConfig &&
                null === Module["websocket"]["subprotocol"]
              ) {
                subProtocols = "null";
                opts = undefined;
              }
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require("ws");
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = "arraybuffer";
            } catch (e) {
              throw new FS.ErrnoError(23);
            }
          }
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: [],
          };
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
          if (sock.type === 2 && typeof sock.sport != "undefined") {
            peer.dgram_send_queue.push(
              new Uint8Array([
                255,
                255,
                255,
                255,
                "p".charCodeAt(0),
                "o".charCodeAt(0),
                "r".charCodeAt(0),
                "t".charCodeAt(0),
                (sock.sport & 65280) >> 8,
                sock.sport & 255,
              ]),
            );
          }
          return peer;
        },
        getPeer(sock, addr, port) {
          return sock.peers[addr + ":" + port];
        },
        addPeer(sock, peer) {
          sock.peers[peer.addr + ":" + peer.port] = peer;
        },
        removePeer(sock, peer) {
          delete sock.peers[peer.addr + ":" + peer.port];
        },
        handlePeerEvents(sock, peer) {
          var first = true;
          var handleOpen = function () {
            Module["websocket"].emit("open", sock.stream.fd);
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              peer.socket.close();
            }
          };
          function handleMessage(data) {
            if (typeof data == "string") {
              var encoder = new TextEncoder();
              data = encoder.encode(data);
            } else {
              assert(data.byteLength !== undefined);
              if (data.byteLength == 0) {
                return;
              }
              data = new Uint8Array(data);
            }
            var wasfirst = first;
            first = false;
            if (
              wasfirst &&
              data.length === 10 &&
              data[0] === 255 &&
              data[1] === 255 &&
              data[2] === 255 &&
              data[3] === 255 &&
              data[4] === "p".charCodeAt(0) &&
              data[5] === "o".charCodeAt(0) &&
              data[6] === "r".charCodeAt(0) &&
              data[7] === "t".charCodeAt(0)
            ) {
              var newport = (data[8] << 8) | data[9];
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
            sock.recv_queue.push({
              addr: peer.addr,
              port: peer.port,
              data: data,
            });
            Module["websocket"].emit("message", sock.stream.fd);
          }
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on("open", handleOpen);
            peer.socket.on("message", function (data, isBinary) {
              if (!isBinary) {
                return;
              }
              handleMessage(new Uint8Array(data).buffer);
            });
            peer.socket.on("close", function () {
              Module["websocket"].emit("close", sock.stream.fd);
            });
            peer.socket.on("error", function (error) {
              sock.error = 14;
              Module["websocket"].emit("error", [
                sock.stream.fd,
                sock.error,
                "ECONNREFUSED: Connection refused",
              ]);
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function () {
              Module["websocket"].emit("close", sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function (error) {
              sock.error = 14;
              Module["websocket"].emit("error", [
                sock.stream.fd,
                sock.error,
                "ECONNREFUSED: Connection refused",
              ]);
            };
          }
        },
        poll(sock) {
          if (sock.type === 1 && sock.server) {
            return sock.pending.length ? 64 | 1 : 0;
          }
          var mask = 0;
          var dest =
            sock.type === 1
              ? SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport)
              : null;
          if (
            sock.recv_queue.length ||
            !dest ||
            (dest && dest.socket.readyState === dest.socket.CLOSING) ||
            (dest && dest.socket.readyState === dest.socket.CLOSED)
          ) {
            mask |= 64 | 1;
          }
          if (!dest || (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
          if (
            (dest && dest.socket.readyState === dest.socket.CLOSING) ||
            (dest && dest.socket.readyState === dest.socket.CLOSED)
          ) {
            mask |= 16;
          }
          return mask;
        },
        ioctl(sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[arg >> 2] = bytes;
              return 0;
            default:
              return 28;
          }
        },
        close(sock) {
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {}
            sock.server = null;
          }
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {}
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },
        bind(sock, addr, port) {
          if (
            typeof sock.saddr != "undefined" ||
            typeof sock.sport != "undefined"
          ) {
            throw new FS.ErrnoError(28);
          }
          sock.saddr = addr;
          sock.sport = port;
          if (sock.type === 2) {
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e.name === "ErrnoError")) throw e;
              if (e.errno !== 138) throw e;
            }
          }
        },
        connect(sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(138);
          }
          if (
            typeof sock.daddr != "undefined" &&
            typeof sock.dport != "undefined"
          ) {
            var dest = SOCKFS.websocket_sock_ops.getPeer(
              sock,
              sock.daddr,
              sock.dport,
            );
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(7);
              } else {
                throw new FS.ErrnoError(30);
              }
            }
          }
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
          throw new FS.ErrnoError(26);
        },
        listen(sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(138);
          }
          if (sock.server) {
            throw new FS.ErrnoError(28);
          }
          var WebSocketServer = require("ws").Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({ host: host, port: sock.sport });
          Module["websocket"].emit("listen", sock.stream.fd);
          sock.server.on("connection", function (ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(
                sock.family,
                sock.type,
                sock.protocol,
              );
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
              sock.pending.push(newsock);
              Module["websocket"].emit("connection", newsock.stream.fd);
            } else {
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module["websocket"].emit("connection", sock.stream.fd);
            }
          });
          sock.server.on("close", function () {
            Module["websocket"].emit("close", sock.stream.fd);
            sock.server = null;
          });
          sock.server.on("error", function (error) {
            sock.error = 23;
            Module["websocket"].emit("error", [
              sock.stream.fd,
              sock.error,
              "EHOSTUNREACH: Host is unreachable",
            ]);
          });
        },
        accept(listensock) {
          if (!listensock.server || !listensock.pending.length) {
            throw new FS.ErrnoError(28);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },
        getname(sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(53);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },
        sendmsg(sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(17);
            }
          } else {
            addr = sock.daddr;
            port = sock.dport;
          }
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
          if (sock.type === 1) {
            if (
              !dest ||
              dest.socket.readyState === dest.socket.CLOSING ||
              dest.socket.readyState === dest.socket.CLOSED
            ) {
              throw new FS.ErrnoError(53);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(6);
            }
          }
          if (ArrayBuffer.isView(buffer)) {
            offset += buffer.byteOffset;
            buffer = buffer.buffer;
          }
          var data;
          data = buffer.slice(offset, offset + length);
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              if (
                !dest ||
                dest.socket.readyState === dest.socket.CLOSING ||
                dest.socket.readyState === dest.socket.CLOSED
              ) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
          try {
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(28);
          }
        },
        recvmsg(sock, length) {
          if (sock.type === 1 && sock.server) {
            throw new FS.ErrnoError(53);
          }
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(
                sock,
                sock.daddr,
                sock.dport,
              );
              if (!dest) {
                throw new FS.ErrnoError(53);
              }
              if (
                dest.socket.readyState === dest.socket.CLOSING ||
                dest.socket.readyState === dest.socket.CLOSED
              ) {
                return null;
              }
              throw new FS.ErrnoError(6);
            }
            throw new FS.ErrnoError(6);
          }
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port,
          };
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(
              queuedBuffer,
              queuedOffset + bytesRead,
              bytesRemaining,
            );
            sock.recv_queue.unshift(queued);
          }
          return res;
        },
      },
    };
    Module["SOCKFS"] = SOCKFS;
    var getSocketFromFD = (fd) => {
      var socket = SOCKFS.getSocket(fd);
      if (!socket) throw new FS.ErrnoError(8);
      return socket;
    };
    Module["getSocketFromFD"] = getSocketFromFD;
    var setErrNo = (value) => {
      HEAP32[___errno_location() >> 2] = value;
      return value;
    };
    Module["setErrNo"] = setErrNo;
    var Sockets = {
      BUFFER_SIZE: 10240,
      MAX_BUFFER_SIZE: 10485760,
      nextFd: 1,
      fds: {},
      nextport: 1,
      maxport: 65535,
      peer: null,
      connections: {},
      portmap: {},
      localAddr: 4261412874,
      addrPool: [
        33554442, 50331658, 67108874, 83886090, 100663306, 117440522, 134217738,
        150994954, 167772170, 184549386, 201326602, 218103818, 234881034,
      ],
    };
    Module["Sockets"] = Sockets;
    var inetPton4 = (str) => {
      var b = str.split(".");
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    };
    Module["inetPton4"] = inetPton4;
    var jstoi_q = (str) => parseInt(str);
    Module["jstoi_q"] = jstoi_q;
    var inetPton6 = (str) => {
      var words;
      var w, offset, z, i;
      var valid6regx =
        /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i;
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      if (str.startsWith("::")) {
        str = str.replace("::", "Z:");
      } else {
        str = str.replace("::", ":Z:");
      }
      if (str.indexOf(".") > 0) {
        str = str.replace(new RegExp("[.]", "g"), ":");
        words = str.split(":");
        words[words.length - 4] =
          jstoi_q(words[words.length - 4]) +
          jstoi_q(words[words.length - 3]) * 256;
        words[words.length - 3] =
          jstoi_q(words[words.length - 2]) +
          jstoi_q(words[words.length - 1]) * 256;
        words = words.slice(0, words.length - 2);
      } else {
        words = str.split(":");
      }
      offset = 0;
      z = 0;
      for (w = 0; w < words.length; w++) {
        if (typeof words[w] == "string") {
          if (words[w] === "Z") {
            for (z = 0; z < 8 - words.length + 1; z++) {
              parts[w + z] = 0;
            }
            offset = z - 1;
          } else {
            parts[w + offset] = _htons(parseInt(words[w], 16));
          }
        } else {
          parts[w + offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6],
      ];
    };
    Module["inetPton6"] = inetPton6;
    var writeSockaddr = (sa, family, addr, port, addrlen) => {
      switch (family) {
        case 2:
          addr = inetPton4(addr);
          zeroMemory(sa, 16);
          if (addrlen) {
            HEAP32[addrlen >> 2] = 16;
          }
          HEAP16[sa >> 1] = family;
          HEAP32[(sa + 4) >> 2] = addr;
          HEAP16[(sa + 2) >> 1] = _htons(port);
          break;
        case 10:
          addr = inetPton6(addr);
          zeroMemory(sa, 28);
          if (addrlen) {
            HEAP32[addrlen >> 2] = 28;
          }
          HEAP32[sa >> 2] = family;
          HEAP32[(sa + 8) >> 2] = addr[0];
          HEAP32[(sa + 12) >> 2] = addr[1];
          HEAP32[(sa + 16) >> 2] = addr[2];
          HEAP32[(sa + 20) >> 2] = addr[3];
          HEAP16[(sa + 2) >> 1] = _htons(port);
          break;
        default:
          return 5;
      }
      return 0;
    };
    Module["writeSockaddr"] = writeSockaddr;
    var DNS = {
      address_map: { id: 1, addrs: {}, names: {} },
      lookup_name(name) {
        var res = inetPton4(name);
        if (res !== null) {
          return name;
        }
        res = inetPton6(name);
        if (res !== null) {
          return name;
        }
        var addr;
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, "exceeded max address mappings of 65535");
          addr = "172.29." + (id & 255) + "." + (id & 65280);
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
        return addr;
      },
      lookup_addr(addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
        return null;
      },
    };
    Module["DNS"] = DNS;
    function ___syscall_accept4(fd, addr, addrlen, flags, d1, d2) {
      try {
        var sock = getSocketFromFD(fd);
        var newsock = sock.sock_ops.accept(sock);
        if (addr) {
          var errno = writeSockaddr(
            addr,
            newsock.family,
            DNS.lookup_name(newsock.daddr),
            newsock.dport,
            addrlen,
          );
        }
        return newsock.stream.fd;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_accept4"] = ___syscall_accept4;
    ___syscall_accept4.sig = "iippiii";
    var inetNtop4 = (addr) =>
      (addr & 255) +
      "." +
      ((addr >> 8) & 255) +
      "." +
      ((addr >> 16) & 255) +
      "." +
      ((addr >> 24) & 255);
    Module["inetNtop4"] = inetNtop4;
    var inetNtop6 = (ints) => {
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 65535,
        ints[0] >> 16,
        ints[1] & 65535,
        ints[1] >> 16,
        ints[2] & 65535,
        ints[2] >> 16,
        ints[3] & 65535,
        ints[3] >> 16,
      ];
      var hasipv4 = true;
      var v4part = "";
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) {
          hasipv4 = false;
          break;
        }
      }
      if (hasipv4) {
        v4part = inetNtop4(parts[6] | (parts[7] << 16));
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        if (parts[5] === 0) {
          str = "::";
          if (v4part === "0.0.0.0") v4part = "";
          if (v4part === "0.0.0.1") v4part = "1";
          str += v4part;
          return str;
        }
      }
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          if (parts[word] === 0 && word >= zstart && word < zstart + longest) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":";
            }
            continue;
          }
        }
        str += Number(_ntohs(parts[word] & 65535)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    };
    Module["inetNtop6"] = inetNtop6;
    var readSockaddr = (sa, salen) => {
      var family = HEAP16[sa >> 1];
      var port = _ntohs(HEAPU16[(sa + 2) >> 1]);
      var addr;
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: 28 };
          }
          addr = HEAP32[(sa + 4) >> 2];
          addr = inetNtop4(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: 28 };
          }
          addr = [
            HEAP32[(sa + 8) >> 2],
            HEAP32[(sa + 12) >> 2],
            HEAP32[(sa + 16) >> 2],
            HEAP32[(sa + 20) >> 2],
          ];
          addr = inetNtop6(addr);
          break;
        default:
          return { errno: 5 };
      }
      return { family: family, addr: addr, port: port };
    };
    Module["readSockaddr"] = readSockaddr;
    var getSocketAddress = (addrp, addrlen, allowNull) => {
      if (allowNull && addrp === 0) return null;
      var info = readSockaddr(addrp, addrlen);
      if (info.errno) throw new FS.ErrnoError(info.errno);
      info.addr = DNS.lookup_addr(info.addr) || info.addr;
      return info;
    };
    Module["getSocketAddress"] = getSocketAddress;
    function ___syscall_bind(fd, addr, addrlen, d1, d2, d3) {
      try {
        var sock = getSocketFromFD(fd);
        var info = getSocketAddress(addr, addrlen);
        sock.sock_ops.bind(sock, info.addr, info.port);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_bind"] = ___syscall_bind;
    ___syscall_bind.sig = "iippiii";
    function ___syscall_chdir(path) {
      try {
        path = SYSCALLS.getStr(path);
        FS.chdir(path);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_chdir"] = ___syscall_chdir;
    ___syscall_chdir.sig = "ip";
    function ___syscall_chmod(path, mode) {
      try {
        path = SYSCALLS.getStr(path);
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_chmod"] = ___syscall_chmod;
    ___syscall_chmod.sig = "ipi";
    function ___syscall_connect(fd, addr, addrlen, d1, d2, d3) {
      try {
        var sock = getSocketFromFD(fd);
        var info = getSocketAddress(addr, addrlen);
        sock.sock_ops.connect(sock, info.addr, info.port);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_connect"] = ___syscall_connect;
    ___syscall_connect.sig = "iippiii";
    function ___syscall_dup(fd) {
      try {
        var old = SYSCALLS.getStreamFromFD(fd);
        return FS.createStream(old).fd;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_dup"] = ___syscall_dup;
    ___syscall_dup.sig = "ii";
    function ___syscall_dup3(fd, newfd, flags) {
      try {
        var old = SYSCALLS.getStreamFromFD(fd);
        if (old.fd === newfd) return -28;
        var existing = FS.getStream(newfd);
        if (existing) FS.close(existing);
        return FS.createStream(old, newfd).fd;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_dup3"] = ___syscall_dup3;
    ___syscall_dup3.sig = "iiii";
    function ___syscall_faccessat(dirfd, path, amode, flags) {
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        if (amode & ~7) {
          return -28;
        }
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = "";
        if (amode & 4) perms += "r";
        if (amode & 2) perms += "w";
        if (amode & 1) perms += "x";
        if (perms && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_faccessat"] = ___syscall_faccessat;
    ___syscall_faccessat.sig = "iipii";
    var ___syscall_fadvise64 = (fd, offset, len, advice) => 0;
    Module["___syscall_fadvise64"] = ___syscall_fadvise64;
    ___syscall_fadvise64.sig = "iijji";
    var MAX_INT53 = 9007199254740992;
    Module["MAX_INT53"] = MAX_INT53;
    var MIN_INT53 = -9007199254740992;
    Module["MIN_INT53"] = MIN_INT53;
    var bigintToI53Checked = (num) =>
      num < MIN_INT53 || num > MAX_INT53 ? NaN : Number(num);
    Module["bigintToI53Checked"] = bigintToI53Checked;
    function ___syscall_fallocate(fd, mode, offset, len) {
      offset = bigintToI53Checked(offset);
      len = bigintToI53Checked(len);
      try {
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.allocate(stream, offset, len);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fallocate"] = ___syscall_fallocate;
    ___syscall_fallocate.sig = "iiijj";
    function ___syscall_fchdir(fd) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.chdir(stream.path);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fchdir"] = ___syscall_fchdir;
    ___syscall_fchdir.sig = "ii";
    function ___syscall_fchmod(fd, mode) {
      try {
        FS.fchmod(fd, mode);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fchmod"] = ___syscall_fchmod;
    ___syscall_fchmod.sig = "iii";
    function ___syscall_fchmodat(dirfd, path, mode, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fchmodat"] = ___syscall_fchmodat;
    ___syscall_fchmodat.sig = "iipip";
    function ___syscall_fchown32(fd, owner, group) {
      try {
        FS.fchown(fd, owner, group);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fchown32"] = ___syscall_fchown32;
    ___syscall_fchown32.sig = "iiii";
    function ___syscall_fchownat(dirfd, path, owner, group, flags) {
      try {
        path = SYSCALLS.getStr(path);
        var nofollow = flags & 256;
        flags = flags & ~256;
        path = SYSCALLS.calculateAt(dirfd, path);
        (nofollow ? FS.lchown : FS.chown)(path, owner, group);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fchownat"] = ___syscall_fchownat;
    ___syscall_fchownat.sig = "iipiii";
    function ___syscall_fcntl64(fd, cmd, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        switch (cmd) {
          case 0: {
            var arg = SYSCALLS.get();
            if (arg < 0) {
              return -28;
            }
            while (FS.streams[arg]) {
              arg++;
            }
            var newStream;
            newStream = FS.createStream(stream, arg);
            return newStream.fd;
          }
          case 1:
          case 2:
            return 0;
          case 3:
            return stream.flags;
          case 4: {
            var arg = SYSCALLS.get();
            stream.flags |= arg;
            return 0;
          }
          case 5: {
            var arg = SYSCALLS.getp();
            var offset = 0;
            HEAP16[(arg + offset) >> 1] = 2;
            return 0;
          }
          case 6:
          case 7:
            return 0;
          case 16:
          case 8:
            return -28;
          case 9:
            setErrNo(28);
            return -1;
          default: {
            return -28;
          }
        }
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fcntl64"] = ___syscall_fcntl64;
    ___syscall_fcntl64.sig = "iiip";
    function ___syscall_fdatasync(fd) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fdatasync"] = ___syscall_fdatasync;
    ___syscall_fdatasync.sig = "ii";
    function ___syscall_fstat64(fd, buf) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        return SYSCALLS.doStat(FS.stat, stream.path, buf);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fstat64"] = ___syscall_fstat64;
    ___syscall_fstat64.sig = "iip";
    function ___syscall_statfs64(path, size, buf) {
      try {
        path = SYSCALLS.getStr(path);
        HEAP32[(buf + 4) >> 2] = 4096;
        HEAP32[(buf + 40) >> 2] = 4096;
        HEAP32[(buf + 8) >> 2] = 1e6;
        HEAP32[(buf + 12) >> 2] = 5e5;
        HEAP32[(buf + 16) >> 2] = 5e5;
        HEAP32[(buf + 20) >> 2] = FS.nextInode;
        HEAP32[(buf + 24) >> 2] = 1e6;
        HEAP32[(buf + 28) >> 2] = 42;
        HEAP32[(buf + 44) >> 2] = 2;
        HEAP32[(buf + 36) >> 2] = 255;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_statfs64"] = ___syscall_statfs64;
    ___syscall_statfs64.sig = "ippp";
    function ___syscall_fstatfs64(fd, size, buf) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        return ___syscall_statfs64(0, size, buf);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_fstatfs64"] = ___syscall_fstatfs64;
    ___syscall_fstatfs64.sig = "iipp";
    function ___syscall_ftruncate64(fd, length) {
      length = bigintToI53Checked(length);
      try {
        if (isNaN(length)) return 61;
        FS.ftruncate(fd, length);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_ftruncate64"] = ___syscall_ftruncate64;
    ___syscall_ftruncate64.sig = "iij";
    function ___syscall_getcwd(buf, size) {
      try {
        if (size === 0) return -28;
        var cwd = FS.cwd();
        var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;
        if (size < cwdLengthInBytes) return -68;
        stringToUTF8(cwd, buf, size);
        return cwdLengthInBytes;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_getcwd"] = ___syscall_getcwd;
    ___syscall_getcwd.sig = "ipp";
    function ___syscall_getdents64(fd, dirp, count) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        if (!stream.getdents) {
          stream.getdents = FS.readdir(stream.path);
        }
        var struct_size = 280;
        var pos = 0;
        var off = FS.llseek(stream, 0, 1);
        var idx = Math.floor(off / struct_size);
        while (idx < stream.getdents.length && pos + struct_size <= count) {
          var id;
          var type;
          var name = stream.getdents[idx];
          if (name === ".") {
            id = stream.node.id;
            type = 4;
          } else if (name === "..") {
            var lookup = FS.lookupPath(stream.path, { parent: true });
            id = lookup.node.id;
            type = 4;
          } else {
            var child = FS.lookupNode(stream.node, name);
            id = child.id;
            type = FS.isChrdev(child.mode)
              ? 2
              : FS.isDir(child.mode)
                ? 4
                : FS.isLink(child.mode)
                  ? 10
                  : 8;
          }
          HEAP64[(dirp + pos) >> 3] = BigInt(id);
          HEAP64[(dirp + pos + 8) >> 3] = BigInt((idx + 1) * struct_size);
          HEAP16[(dirp + pos + 16) >> 1] = 280;
          HEAP8[(dirp + pos + 18) >> 0] = type;
          stringToUTF8(name, dirp + pos + 19, 256);
          pos += struct_size;
          idx += 1;
        }
        FS.llseek(stream, idx * struct_size, 0);
        return pos;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_getdents64"] = ___syscall_getdents64;
    ___syscall_getdents64.sig = "iipp";
    function ___syscall_getpeername(fd, addr, addrlen, d1, d2, d3) {
      try {
        var sock = getSocketFromFD(fd);
        if (!sock.daddr) {
          return -53;
        }
        var errno = writeSockaddr(
          addr,
          sock.family,
          DNS.lookup_name(sock.daddr),
          sock.dport,
          addrlen,
        );
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_getpeername"] = ___syscall_getpeername;
    ___syscall_getpeername.sig = "iippiii";
    function ___syscall_getsockname(fd, addr, addrlen, d1, d2, d3) {
      try {
        var sock = getSocketFromFD(fd);
        var errno = writeSockaddr(
          addr,
          sock.family,
          DNS.lookup_name(sock.saddr || "0.0.0.0"),
          sock.sport,
          addrlen,
        );
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_getsockname"] = ___syscall_getsockname;
    ___syscall_getsockname.sig = "iippiii";
    function ___syscall_getsockopt(fd, level, optname, optval, optlen, d1) {
      try {
        var sock = getSocketFromFD(fd);
        if (level === 1) {
          if (optname === 4) {
            HEAP32[optval >> 2] = sock.error;
            HEAP32[optlen >> 2] = 4;
            sock.error = null;
            return 0;
          }
        }
        return -50;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_getsockopt"] = ___syscall_getsockopt;
    ___syscall_getsockopt.sig = "iiiippi";
    function ___syscall_ioctl(fd, op, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        switch (op) {
          case 21509: {
            if (!stream.tty) return -59;
            return 0;
          }
          case 21505: {
            if (!stream.tty) return -59;
            if (stream.tty.ops.ioctl_tcgets) {
              var termios = stream.tty.ops.ioctl_tcgets(stream);
              var argp = SYSCALLS.getp();
              HEAP32[argp >> 2] = termios.c_iflag || 0;
              HEAP32[(argp + 4) >> 2] = termios.c_oflag || 0;
              HEAP32[(argp + 8) >> 2] = termios.c_cflag || 0;
              HEAP32[(argp + 12) >> 2] = termios.c_lflag || 0;
              for (var i = 0; i < 32; i++) {
                HEAP8[(argp + i + 17) >> 0] = termios.c_cc[i] || 0;
              }
              return 0;
            }
            return 0;
          }
          case 21510:
          case 21511:
          case 21512: {
            if (!stream.tty) return -59;
            return 0;
          }
          case 21506:
          case 21507:
          case 21508: {
            if (!stream.tty) return -59;
            if (stream.tty.ops.ioctl_tcsets) {
              var argp = SYSCALLS.getp();
              var c_iflag = HEAP32[argp >> 2];
              var c_oflag = HEAP32[(argp + 4) >> 2];
              var c_cflag = HEAP32[(argp + 8) >> 2];
              var c_lflag = HEAP32[(argp + 12) >> 2];
              var c_cc = [];
              for (var i = 0; i < 32; i++) {
                c_cc.push(HEAP8[(argp + i + 17) >> 0]);
              }
              return stream.tty.ops.ioctl_tcsets(stream.tty, op, {
                c_iflag: c_iflag,
                c_oflag: c_oflag,
                c_cflag: c_cflag,
                c_lflag: c_lflag,
                c_cc: c_cc,
              });
            }
            return 0;
          }
          case 21519: {
            if (!stream.tty) return -59;
            var argp = SYSCALLS.getp();
            HEAP32[argp >> 2] = 0;
            return 0;
          }
          case 21520: {
            if (!stream.tty) return -59;
            return -28;
          }
          case 21531: {
            var argp = SYSCALLS.getp();
            return FS.ioctl(stream, op, argp);
          }
          case 21523: {
            if (!stream.tty) return -59;
            if (stream.tty.ops.ioctl_tiocgwinsz) {
              var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);
              var argp = SYSCALLS.getp();
              HEAP16[argp >> 1] = winsize[0];
              HEAP16[(argp + 2) >> 1] = winsize[1];
            }
            return 0;
          }
          case 21524: {
            if (!stream.tty) return -59;
            return 0;
          }
          case 21515: {
            if (!stream.tty) return -59;
            return 0;
          }
          default:
            return -28;
        }
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_ioctl"] = ___syscall_ioctl;
    ___syscall_ioctl.sig = "iiip";
    function ___syscall_listen(fd, backlog) {
      try {
        var sock = getSocketFromFD(fd);
        sock.sock_ops.listen(sock, backlog);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_listen"] = ___syscall_listen;
    ___syscall_listen.sig = "iiiiiii";
    function ___syscall_lstat64(path, buf) {
      try {
        path = SYSCALLS.getStr(path);
        return SYSCALLS.doStat(FS.lstat, path, buf);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_lstat64"] = ___syscall_lstat64;
    ___syscall_lstat64.sig = "ipp";
    function ___syscall_mkdirat(dirfd, path, mode) {
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        path = PATH.normalize(path);
        if (path[path.length - 1] === "/")
          path = path.substr(0, path.length - 1);
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_mkdirat"] = ___syscall_mkdirat;
    ___syscall_mkdirat.sig = "iipi";
    function ___syscall_mknodat(dirfd, path, mode, dev) {
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default:
            return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_mknodat"] = ___syscall_mknodat;
    ___syscall_mknodat.sig = "iipii";
    function ___syscall_newfstatat(dirfd, path, buf, flags) {
      try {
        path = SYSCALLS.getStr(path);
        var nofollow = flags & 256;
        var allowEmpty = flags & 4096;
        flags = flags & ~6400;
        path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);
        return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_newfstatat"] = ___syscall_newfstatat;
    ___syscall_newfstatat.sig = "iippi";
    function ___syscall_openat(dirfd, path, flags, varargs) {
      SYSCALLS.varargs = varargs;
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        var mode = varargs ? SYSCALLS.get() : 0;
        return FS.open(path, flags, mode).fd;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_openat"] = ___syscall_openat;
    ___syscall_openat.sig = "iipip";
    var PIPEFS = {
      BUCKET_BUFFER_SIZE: 8192,
      mount(mount) {
        return FS.createNode(null, "/", 16384 | 511, 0);
      },
      createPipe() {
        var pipe = { buckets: [], refcnt: 2 };
        pipe.buckets.push({
          buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
          offset: 0,
          roffset: 0,
        });
        var rName = PIPEFS.nextname();
        var wName = PIPEFS.nextname();
        var rNode = FS.createNode(PIPEFS.root, rName, 4096, 0);
        var wNode = FS.createNode(PIPEFS.root, wName, 4096, 0);
        rNode.pipe = pipe;
        wNode.pipe = pipe;
        var readableStream = FS.createStream({
          path: rName,
          node: rNode,
          flags: 0,
          seekable: false,
          stream_ops: PIPEFS.stream_ops,
        });
        rNode.stream = readableStream;
        var writableStream = FS.createStream({
          path: wName,
          node: wNode,
          flags: 1,
          seekable: false,
          stream_ops: PIPEFS.stream_ops,
        });
        wNode.stream = writableStream;
        return {
          readable_fd: readableStream.fd,
          writable_fd: writableStream.fd,
        };
      },
      stream_ops: {
        poll(stream) {
          var pipe = stream.node.pipe;
          if ((stream.flags & 2097155) === 1) {
            return 256 | 4;
          }
          if (pipe.buckets.length > 0) {
            for (var i = 0; i < pipe.buckets.length; i++) {
              var bucket = pipe.buckets[i];
              if (bucket.offset - bucket.roffset > 0) {
                return 64 | 1;
              }
            }
          }
          return 0;
        },
        ioctl(stream, request, varargs) {
          return 28;
        },
        fsync(stream) {
          return 28;
        },
        read(stream, buffer, offset, length, position) {
          var pipe = stream.node.pipe;
          var currentLength = 0;
          for (var i = 0; i < pipe.buckets.length; i++) {
            var bucket = pipe.buckets[i];
            currentLength += bucket.offset - bucket.roffset;
          }
          var data = buffer.subarray(offset, offset + length);
          if (length <= 0) {
            return 0;
          }
          if (currentLength == 0) {
            throw new FS.ErrnoError(6);
          }
          var toRead = Math.min(currentLength, length);
          var totalRead = toRead;
          var toRemove = 0;
          for (var i = 0; i < pipe.buckets.length; i++) {
            var currBucket = pipe.buckets[i];
            var bucketSize = currBucket.offset - currBucket.roffset;
            if (toRead <= bucketSize) {
              var tmpSlice = currBucket.buffer.subarray(
                currBucket.roffset,
                currBucket.offset,
              );
              if (toRead < bucketSize) {
                tmpSlice = tmpSlice.subarray(0, toRead);
                currBucket.roffset += toRead;
              } else {
                toRemove++;
              }
              data.set(tmpSlice);
              break;
            } else {
              var tmpSlice = currBucket.buffer.subarray(
                currBucket.roffset,
                currBucket.offset,
              );
              data.set(tmpSlice);
              data = data.subarray(tmpSlice.byteLength);
              toRead -= tmpSlice.byteLength;
              toRemove++;
            }
          }
          if (toRemove && toRemove == pipe.buckets.length) {
            toRemove--;
            pipe.buckets[toRemove].offset = 0;
            pipe.buckets[toRemove].roffset = 0;
          }
          pipe.buckets.splice(0, toRemove);
          return totalRead;
        },
        write(stream, buffer, offset, length, position) {
          var pipe = stream.node.pipe;
          var data = buffer.subarray(offset, offset + length);
          var dataLen = data.byteLength;
          if (dataLen <= 0) {
            return 0;
          }
          var currBucket = null;
          if (pipe.buckets.length == 0) {
            currBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: 0,
              roffset: 0,
            };
            pipe.buckets.push(currBucket);
          } else {
            currBucket = pipe.buckets[pipe.buckets.length - 1];
          }
          assert(currBucket.offset <= PIPEFS.BUCKET_BUFFER_SIZE);
          var freeBytesInCurrBuffer =
            PIPEFS.BUCKET_BUFFER_SIZE - currBucket.offset;
          if (freeBytesInCurrBuffer >= dataLen) {
            currBucket.buffer.set(data, currBucket.offset);
            currBucket.offset += dataLen;
            return dataLen;
          } else if (freeBytesInCurrBuffer > 0) {
            currBucket.buffer.set(
              data.subarray(0, freeBytesInCurrBuffer),
              currBucket.offset,
            );
            currBucket.offset += freeBytesInCurrBuffer;
            data = data.subarray(freeBytesInCurrBuffer, data.byteLength);
          }
          var numBuckets = (data.byteLength / PIPEFS.BUCKET_BUFFER_SIZE) | 0;
          var remElements = data.byteLength % PIPEFS.BUCKET_BUFFER_SIZE;
          for (var i = 0; i < numBuckets; i++) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: PIPEFS.BUCKET_BUFFER_SIZE,
              roffset: 0,
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data.subarray(0, PIPEFS.BUCKET_BUFFER_SIZE));
            data = data.subarray(PIPEFS.BUCKET_BUFFER_SIZE, data.byteLength);
          }
          if (remElements > 0) {
            var newBucket = {
              buffer: new Uint8Array(PIPEFS.BUCKET_BUFFER_SIZE),
              offset: data.byteLength,
              roffset: 0,
            };
            pipe.buckets.push(newBucket);
            newBucket.buffer.set(data);
          }
          return dataLen;
        },
        close(stream) {
          var pipe = stream.node.pipe;
          pipe.refcnt--;
          if (pipe.refcnt === 0) {
            pipe.buckets = null;
          }
        },
      },
      nextname() {
        if (!PIPEFS.nextname.current) {
          PIPEFS.nextname.current = 0;
        }
        return "pipe[" + PIPEFS.nextname.current++ + "]";
      },
    };
    Module["PIPEFS"] = PIPEFS;
    function ___syscall_pipe(fdPtr) {
      try {
        if (fdPtr == 0) {
          throw new FS.ErrnoError(21);
        }
        var res = PIPEFS.createPipe();
        HEAP32[fdPtr >> 2] = res.readable_fd;
        HEAP32[(fdPtr + 4) >> 2] = res.writable_fd;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_pipe"] = ___syscall_pipe;
    ___syscall_pipe.sig = "ip";
    function ___syscall_poll(fds, nfds, timeout) {
      try {
        var nonzero = 0;
        for (var i = 0; i < nfds; i++) {
          var pollfd = fds + 8 * i;
          var fd = HEAP32[pollfd >> 2];
          var events = HEAP16[(pollfd + 4) >> 1];
          var mask = 32;
          var stream = FS.getStream(fd);
          if (stream) {
            mask = SYSCALLS.DEFAULT_POLLMASK;
            if (stream.stream_ops.poll) {
              mask = stream.stream_ops.poll(stream, -1);
            }
          }
          mask &= events | 8 | 16;
          if (mask) nonzero++;
          HEAP16[(pollfd + 6) >> 1] = mask;
        }
        return nonzero;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_poll"] = ___syscall_poll;
    ___syscall_poll.sig = "ipii";
    function ___syscall_readlinkat(dirfd, path, buf, bufsize) {
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf + len];
        stringToUTF8(ret, buf, bufsize + 1);
        HEAP8[buf + len] = endChar;
        return len;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_readlinkat"] = ___syscall_readlinkat;
    ___syscall_readlinkat.sig = "iippp";
    function ___syscall_recvfrom(fd, buf, len, flags, addr, addrlen) {
      try {
        var sock = getSocketFromFD(fd);
        var msg = sock.sock_ops.recvmsg(sock, len);
        if (!msg) return 0;
        if (addr) {
          var errno = writeSockaddr(
            addr,
            sock.family,
            DNS.lookup_name(msg.addr),
            msg.port,
            addrlen,
          );
        }
        HEAPU8.set(msg.buffer, buf);
        return msg.buffer.byteLength;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_recvfrom"] = ___syscall_recvfrom;
    ___syscall_recvfrom.sig = "iippipp";
    function ___syscall_recvmsg(fd, message, flags, d1, d2, d3) {
      try {
        var sock = getSocketFromFD(fd);
        var iov = HEAPU32[(message + 8) >> 2];
        var num = HEAP32[(message + 12) >> 2];
        var total = 0;
        for (var i = 0; i < num; i++) {
          total += HEAP32[(iov + (8 * i + 4)) >> 2];
        }
        var msg = sock.sock_ops.recvmsg(sock, total);
        if (!msg) return 0;
        var name = HEAPU32[message >> 2];
        if (name) {
          var errno = writeSockaddr(
            name,
            sock.family,
            DNS.lookup_name(msg.addr),
            msg.port,
          );
        }
        var bytesRead = 0;
        var bytesRemaining = msg.buffer.byteLength;
        for (var i = 0; bytesRemaining > 0 && i < num; i++) {
          var iovbase = HEAPU32[(iov + (8 * i + 0)) >> 2];
          var iovlen = HEAP32[(iov + (8 * i + 4)) >> 2];
          if (!iovlen) {
            continue;
          }
          var length = Math.min(iovlen, bytesRemaining);
          var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
          HEAPU8.set(buf, iovbase + bytesRead);
          bytesRead += length;
          bytesRemaining -= length;
        }
        return bytesRead;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_recvmsg"] = ___syscall_recvmsg;
    ___syscall_recvmsg.sig = "iipiiii";
    function ___syscall_renameat(olddirfd, oldpath, newdirfd, newpath) {
      try {
        oldpath = SYSCALLS.getStr(oldpath);
        newpath = SYSCALLS.getStr(newpath);
        oldpath = SYSCALLS.calculateAt(olddirfd, oldpath);
        newpath = SYSCALLS.calculateAt(newdirfd, newpath);
        FS.rename(oldpath, newpath);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_renameat"] = ___syscall_renameat;
    ___syscall_renameat.sig = "iipip";
    function ___syscall_rmdir(path) {
      try {
        path = SYSCALLS.getStr(path);
        FS.rmdir(path);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_rmdir"] = ___syscall_rmdir;
    ___syscall_rmdir.sig = "ip";
    function ___syscall_sendmsg(fd, message, flags, d1, d2, d3) {
      try {
        var sock = getSocketFromFD(fd);
        var iov = HEAPU32[(message + 8) >> 2];
        var num = HEAP32[(message + 12) >> 2];
        var addr, port;
        var name = HEAPU32[message >> 2];
        var namelen = HEAP32[(message + 4) >> 2];
        if (name) {
          var info = readSockaddr(name, namelen);
          if (info.errno) return -info.errno;
          port = info.port;
          addr = DNS.lookup_addr(info.addr) || info.addr;
        }
        var total = 0;
        for (var i = 0; i < num; i++) {
          total += HEAP32[(iov + (8 * i + 4)) >> 2];
        }
        var view = new Uint8Array(total);
        var offset = 0;
        for (var i = 0; i < num; i++) {
          var iovbase = HEAPU32[(iov + (8 * i + 0)) >> 2];
          var iovlen = HEAP32[(iov + (8 * i + 4)) >> 2];
          for (var j = 0; j < iovlen; j++) {
            view[offset++] = HEAP8[(iovbase + j) >> 0];
          }
        }
        return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_sendmsg"] = ___syscall_sendmsg;
    ___syscall_sendmsg.sig = "iipippi";
    function ___syscall_sendto(fd, message, length, flags, addr, addr_len) {
      try {
        var sock = getSocketFromFD(fd);
        var dest = getSocketAddress(addr, addr_len, true);
        if (!dest) {
          return FS.write(sock.stream, HEAP8, message, length);
        }
        return sock.sock_ops.sendmsg(
          sock,
          HEAP8,
          message,
          length,
          dest.addr,
          dest.port,
        );
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_sendto"] = ___syscall_sendto;
    ___syscall_sendto.sig = "iippipp";
    function ___syscall_socket(domain, type, protocol) {
      try {
        var sock = SOCKFS.createSocket(domain, type, protocol);
        return sock.stream.fd;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_socket"] = ___syscall_socket;
    ___syscall_socket.sig = "iiiiiii";
    function ___syscall_stat64(path, buf) {
      try {
        path = SYSCALLS.getStr(path);
        return SYSCALLS.doStat(FS.stat, path, buf);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_stat64"] = ___syscall_stat64;
    ___syscall_stat64.sig = "ipp";
    function ___syscall_symlink(target, linkpath) {
      try {
        target = SYSCALLS.getStr(target);
        linkpath = SYSCALLS.getStr(linkpath);
        FS.symlink(target, linkpath);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_symlink"] = ___syscall_symlink;
    ___syscall_symlink.sig = "ipp";
    function ___syscall_symlinkat(target, newdirfd, linkpath) {
      try {
        linkpath = SYSCALLS.calculateAt(newdirfd, linkpath);
        FS.symlink(target, linkpath);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_symlinkat"] = ___syscall_symlinkat;
    ___syscall_symlinkat.sig = "ipip";
    function ___syscall_truncate64(path, length) {
      length = bigintToI53Checked(length);
      try {
        if (isNaN(length)) return 61;
        path = SYSCALLS.getStr(path);
        FS.truncate(path, length);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_truncate64"] = ___syscall_truncate64;
    ___syscall_truncate64.sig = "ipj";
    function ___syscall_unlinkat(dirfd, path, flags) {
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path);
        if (flags === 0) {
          FS.unlink(path);
        } else if (flags === 512) {
          FS.rmdir(path);
        } else {
          abort("Invalid flags passed to unlinkat");
        }
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_unlinkat"] = ___syscall_unlinkat;
    ___syscall_unlinkat.sig = "iipi";
    var readI53FromI64 = (ptr) =>
      HEAPU32[ptr >> 2] + HEAP32[(ptr + 4) >> 2] * 4294967296;
    Module["readI53FromI64"] = readI53FromI64;
    function ___syscall_utimensat(dirfd, path, times, flags) {
      try {
        path = SYSCALLS.getStr(path);
        path = SYSCALLS.calculateAt(dirfd, path, true);
        if (!times) {
          var atime = Date.now();
          var mtime = atime;
        } else {
          var seconds = readI53FromI64(times);
          var nanoseconds = HEAP32[(times + 8) >> 2];
          atime = seconds * 1e3 + nanoseconds / (1e3 * 1e3);
          times += 16;
          seconds = readI53FromI64(times);
          nanoseconds = HEAP32[(times + 8) >> 2];
          mtime = seconds * 1e3 + nanoseconds / (1e3 * 1e3);
        }
        FS.utime(path, atime, mtime);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["___syscall_utimensat"] = ___syscall_utimensat;
    ___syscall_utimensat.sig = "iippi";
    var ___table_base = new WebAssembly.Global(
      { value: "i32", mutable: false },
      1,
    );
    Module["___table_base"] = ___table_base;
    var ENV = {};
    Module["ENV"] = ENV;
    var dlSetError = (msg) => {
      withStackSave(() => {
        var cmsg = stringToUTF8OnStack(msg);
        ___dl_seterr(cmsg, 0);
      });
    };
    Module["dlSetError"] = dlSetError;
    var dlopenInternal = (handle, jsflags) => {
      var filename = UTF8ToString(handle + 36);
      var flags = HEAP32[(handle + 4) >> 2];
      filename = PATH.normalize(filename);
      var searchpaths = [];
      var global = Boolean(flags & 256);
      var localScope = global ? null : {};
      var combinedFlags = {
        global: global,
        nodelete: Boolean(flags & 4096),
        loadAsync: jsflags.loadAsync,
      };
      if (jsflags.loadAsync) {
        return loadDynamicLibrary(filename, combinedFlags, localScope, handle);
      }
      try {
        return loadDynamicLibrary(filename, combinedFlags, localScope, handle);
      } catch (e) {
        dlSetError(`Could not load dynamic lib: ${filename}\n${e}`);
        return 0;
      }
    };
    Module["dlopenInternal"] = dlopenInternal;
    var __dlopen_js = (handle) => dlopenInternal(handle, { loadAsync: false });
    Module["__dlopen_js"] = __dlopen_js;
    __dlopen_js.sig = "pp";
    var __dlsym_js = (handle, symbol, symbolIndex) => {
      symbol = UTF8ToString(symbol);
      var result;
      var newSymIndex;
      var lib = LDSO.loadedLibsByHandle[handle];
      if (!lib.exports.hasOwnProperty(symbol) || lib.exports[symbol].stub) {
        dlSetError(
          `Tried to lookup unknown symbol "${symbol}" in dynamic lib: ${lib.name}`,
        );
        return 0;
      }
      newSymIndex = Object.keys(lib.exports).indexOf(symbol);
      result = lib.exports[symbol];
      if (typeof result == "function") {
        var addr = getFunctionAddress(result);
        if (addr) {
          result = addr;
        } else {
          result = addFunction(result, result.sig);
          HEAPU32[symbolIndex >> 2] = newSymIndex;
        }
      }
      return result;
    };
    Module["__dlsym_js"] = __dlsym_js;
    __dlsym_js.sig = "pppp";
    var handleException = (e) => {
      if (e instanceof ExitStatus || e == "unwind") {
        return EXITSTATUS;
      }
      quit_(1, e);
    };
    Module["handleException"] = handleException;
    var _proc_exit = (code) => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        if (Module["onExit"]) Module["onExit"](code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
    Module["_proc_exit"] = _proc_exit;
    _proc_exit.sig = "vi";
    var exitJS = (status, implicit) => {
      EXITSTATUS = status;
      _proc_exit(status);
    };
    Module["exitJS"] = exitJS;
    var _exit = exitJS;
    Module["_exit"] = _exit;
    _exit.sig = "vi";
    var maybeExit = () => {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          handleException(e);
        }
      }
    };
    Module["maybeExit"] = maybeExit;
    var callUserCallback = (func) => {
      if (ABORT) {
        return;
      }
      try {
        func();
        maybeExit();
      } catch (e) {
        handleException(e);
      }
    };
    Module["callUserCallback"] = callUserCallback;
    var __emscripten_dlopen_js = (handle, onsuccess, onerror, user_data) => {
      function errorCallback(e) {
        var filename = UTF8ToString(handle + 36);
        dlSetError(`'Could not load dynamic lib: ${filename}\n${e}`);
        callUserCallback(() => getWasmTableEntry(onerror)(handle, user_data));
      }
      function successCallback() {
        callUserCallback(() => getWasmTableEntry(onsuccess)(handle, user_data));
      }
      var promise = dlopenInternal(handle, { loadAsync: true });
      if (promise) {
        promise.then(successCallback, errorCallback);
      } else {
        errorCallback();
      }
    };
    Module["__emscripten_dlopen_js"] = __emscripten_dlopen_js;
    __emscripten_dlopen_js.sig = "vpppp";
    var nowIsMonotonic = true;
    Module["nowIsMonotonic"] = nowIsMonotonic;
    var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;
    Module["__emscripten_get_now_is_monotonic"] =
      __emscripten_get_now_is_monotonic;
    __emscripten_get_now_is_monotonic.sig = "i";
    var __emscripten_get_progname = (str, len) => {
      stringToUTF8(thisProgram, str, len);
    };
    Module["__emscripten_get_progname"] = __emscripten_get_progname;
    __emscripten_get_progname.sig = "vpi";
    var __emscripten_throw_longjmp = () => {
      throw Module.wrapException(Infinity);
    };
    Module["__emscripten_throw_longjmp"] = __emscripten_throw_longjmp;
    __emscripten_throw_longjmp.sig = "v";
    function __gmtime_js(time, tmPtr) {
      time = bigintToI53Checked(time);
      var date = new Date(time * 1e3);
      HEAP32[tmPtr >> 2] = date.getUTCSeconds();
      HEAP32[(tmPtr + 4) >> 2] = date.getUTCMinutes();
      HEAP32[(tmPtr + 8) >> 2] = date.getUTCHours();
      HEAP32[(tmPtr + 12) >> 2] = date.getUTCDate();
      HEAP32[(tmPtr + 16) >> 2] = date.getUTCMonth();
      HEAP32[(tmPtr + 20) >> 2] = date.getUTCFullYear() - 1900;
      HEAP32[(tmPtr + 24) >> 2] = date.getUTCDay();
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1e3 * 60 * 60 * 24)) | 0;
      HEAP32[(tmPtr + 28) >> 2] = yday;
    }
    Module["__gmtime_js"] = __gmtime_js;
    __gmtime_js.sig = "vjp";
    var isLeapYear = (year) =>
      year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    Module["isLeapYear"] = isLeapYear;
    var MONTH_DAYS_LEAP_CUMULATIVE = [
      0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335,
    ];
    Module["MONTH_DAYS_LEAP_CUMULATIVE"] = MONTH_DAYS_LEAP_CUMULATIVE;
    var MONTH_DAYS_REGULAR_CUMULATIVE = [
      0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,
    ];
    Module["MONTH_DAYS_REGULAR_CUMULATIVE"] = MONTH_DAYS_REGULAR_CUMULATIVE;
    var ydayFromDate = (date) => {
      var leap = isLeapYear(date.getFullYear());
      var monthDaysCumulative = leap
        ? MONTH_DAYS_LEAP_CUMULATIVE
        : MONTH_DAYS_REGULAR_CUMULATIVE;
      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;
      return yday;
    };
    Module["ydayFromDate"] = ydayFromDate;
    function __localtime_js(time, tmPtr) {
      time = bigintToI53Checked(time);
      var date = new Date(time * 1e3);
      HEAP32[tmPtr >> 2] = date.getSeconds();
      HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();
      HEAP32[(tmPtr + 8) >> 2] = date.getHours();
      HEAP32[(tmPtr + 12) >> 2] = date.getDate();
      HEAP32[(tmPtr + 16) >> 2] = date.getMonth();
      HEAP32[(tmPtr + 20) >> 2] = date.getFullYear() - 1900;
      HEAP32[(tmPtr + 24) >> 2] = date.getDay();
      var yday = ydayFromDate(date) | 0;
      HEAP32[(tmPtr + 28) >> 2] = yday;
      HEAP32[(tmPtr + 36) >> 2] = -(date.getTimezoneOffset() * 60);
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst =
        (summerOffset != winterOffset &&
          date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
      HEAP32[(tmPtr + 32) >> 2] = dst;
    }
    Module["__localtime_js"] = __localtime_js;
    __localtime_js.sig = "vjp";
    var __mktime_js = function (tmPtr) {
      var ret = (() => {
        var date = new Date(
          HEAP32[(tmPtr + 20) >> 2] + 1900,
          HEAP32[(tmPtr + 16) >> 2],
          HEAP32[(tmPtr + 12) >> 2],
          HEAP32[(tmPtr + 8) >> 2],
          HEAP32[(tmPtr + 4) >> 2],
          HEAP32[tmPtr >> 2],
          0,
        );
        var dst = HEAP32[(tmPtr + 32) >> 2];
        var guessedOffset = date.getTimezoneOffset();
        var start = new Date(date.getFullYear(), 0, 1);
        var summerOffset = new Date(
          date.getFullYear(),
          6,
          1,
        ).getTimezoneOffset();
        var winterOffset = start.getTimezoneOffset();
        var dstOffset = Math.min(winterOffset, summerOffset);
        if (dst < 0) {
          HEAP32[(tmPtr + 32) >> 2] = Number(
            summerOffset != winterOffset && dstOffset == guessedOffset,
          );
        } else if (dst > 0 != (dstOffset == guessedOffset)) {
          var nonDstOffset = Math.max(winterOffset, summerOffset);
          var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
          date.setTime(date.getTime() + (trueOffset - guessedOffset) * 6e4);
        }
        HEAP32[(tmPtr + 24) >> 2] = date.getDay();
        var yday = ydayFromDate(date) | 0;
        HEAP32[(tmPtr + 28) >> 2] = yday;
        HEAP32[tmPtr >> 2] = date.getSeconds();
        HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();
        HEAP32[(tmPtr + 8) >> 2] = date.getHours();
        HEAP32[(tmPtr + 12) >> 2] = date.getDate();
        HEAP32[(tmPtr + 16) >> 2] = date.getMonth();
        HEAP32[(tmPtr + 20) >> 2] = date.getYear();
        return date.getTime() / 1e3;
      })();
      return BigInt(ret);
    };
    Module["__mktime_js"] = __mktime_js;
    __mktime_js.sig = "jp";
    function __mmap_js(len, prot, flags, fd, offset, allocated, addr) {
      offset = bigintToI53Checked(offset);
      try {
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        var res = FS.mmap(stream, len, offset, prot, flags);
        var ptr = res.ptr;
        HEAP32[allocated >> 2] = res.allocated;
        HEAPU32[addr >> 2] = ptr;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["__mmap_js"] = __mmap_js;
    __mmap_js.sig = "ipiiijpp";
    function __msync_js(addr, len, prot, flags, fd, offset) {
      offset = bigintToI53Checked(offset);
      try {
        if (isNaN(offset)) return 61;
        SYSCALLS.doMsync(
          addr,
          SYSCALLS.getStreamFromFD(fd),
          len,
          flags,
          offset,
        );
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["__msync_js"] = __msync_js;
    __msync_js.sig = "ippiiij";
    function __munmap_js(addr, len, prot, flags, fd, offset) {
      offset = bigintToI53Checked(offset);
      try {
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        if (prot & 2) {
          SYSCALLS.doMsync(addr, stream, len, flags, offset);
        }
        FS.munmap(stream);
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return -e.errno;
      }
    }
    Module["__munmap_js"] = __munmap_js;
    __munmap_js.sig = "ippiiij";
    var timers = {};
    Module["timers"] = timers;
    var _emscripten_get_now;
    _emscripten_get_now = () => performance.now();
    Module["_emscripten_get_now"] = _emscripten_get_now;
    _emscripten_get_now.sig = "d";
    var __setitimer_js = (which, timeout_ms) => {
      if (timers[which]) {
        clearTimeout(timers[which].id);
        delete timers[which];
      }
      if (!timeout_ms) return 0;
      var id = setTimeout(() => {
        delete timers[which];
        callUserCallback(() =>
          __emscripten_timeout(which, _emscripten_get_now()),
        );
      }, timeout_ms);
      timers[which] = { id: id, timeout_ms: timeout_ms };
      return 0;
    };
    Module["__setitimer_js"] = __setitimer_js;
    __setitimer_js.sig = "iid";
    var __timegm_js = function (tmPtr) {
      var ret = (() => {
        var time = Date.UTC(
          HEAP32[(tmPtr + 20) >> 2] + 1900,
          HEAP32[(tmPtr + 16) >> 2],
          HEAP32[(tmPtr + 12) >> 2],
          HEAP32[(tmPtr + 8) >> 2],
          HEAP32[(tmPtr + 4) >> 2],
          HEAP32[tmPtr >> 2],
          0,
        );
        var date = new Date(time);
        HEAP32[(tmPtr + 24) >> 2] = date.getUTCDay();
        var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
        var yday = ((date.getTime() - start) / (1e3 * 60 * 60 * 24)) | 0;
        HEAP32[(tmPtr + 28) >> 2] = yday;
        return date.getTime() / 1e3;
      })();
      return BigInt(ret);
    };
    Module["__timegm_js"] = __timegm_js;
    __timegm_js.sig = "jp";
    var stringToNewUTF8 = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8(str, ret, size);
      return ret;
    };
    Module["stringToNewUTF8"] = stringToNewUTF8;
    var __tzset_js = (timezone, daylight, tzname) => {
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
      HEAPU32[timezone >> 2] = stdTimezoneOffset * 60;
      HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      }
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = stringToNewUTF8(winterName);
      var summerNamePtr = stringToNewUTF8(summerName);
      if (summerOffset < winterOffset) {
        HEAPU32[tzname >> 2] = winterNamePtr;
        HEAPU32[(tzname + 4) >> 2] = summerNamePtr;
      } else {
        HEAPU32[tzname >> 2] = summerNamePtr;
        HEAPU32[(tzname + 4) >> 2] = winterNamePtr;
      }
    };
    Module["__tzset_js"] = __tzset_js;
    __tzset_js.sig = "vppp";
    var _abort = () => {
      abort("");
    };
    Module["_abort"] = _abort;
    _abort.sig = "v";
    var readEmAsmArgsArray = [];
    Module["readEmAsmArgsArray"] = readEmAsmArgsArray;
    var readEmAsmArgs = (sigPtr, buf) => {
      readEmAsmArgsArray.length = 0;
      var ch;
      while ((ch = HEAPU8[sigPtr++])) {
        var wide = ch != 105;
        wide &= ch != 112;
        buf += wide && buf % 8 ? 4 : 0;
        readEmAsmArgsArray.push(
          ch == 112
            ? HEAPU32[buf >> 2]
            : ch == 106
              ? HEAP64[buf >> 3]
              : ch == 105
                ? HEAP32[buf >> 2]
                : HEAPF64[buf >> 3],
        );
        buf += wide ? 8 : 4;
      }
      return readEmAsmArgsArray;
    };
    Module["readEmAsmArgs"] = readEmAsmArgs;
    var runEmAsmFunction = (code, sigPtr, argbuf) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      return ASM_CONSTS[code].apply(null, args);
    };
    Module["runEmAsmFunction"] = runEmAsmFunction;
    var _emscripten_asm_const_int = (code, sigPtr, argbuf) =>
      runEmAsmFunction(code, sigPtr, argbuf);
    Module["_emscripten_asm_const_int"] = _emscripten_asm_const_int;
    _emscripten_asm_const_int.sig = "ippp";
    var _emscripten_console_error = (str) => {
      console.error(UTF8ToString(str));
    };
    Module["_emscripten_console_error"] = _emscripten_console_error;
    _emscripten_console_error.sig = "vp";
    var _emscripten_console_log = (str) => {
      console.log(UTF8ToString(str));
    };
    Module["_emscripten_console_log"] = _emscripten_console_log;
    _emscripten_console_log.sig = "vp";
    var _emscripten_console_warn = (str) => {
      console.warn(UTF8ToString(str));
    };
    Module["_emscripten_console_warn"] = _emscripten_console_warn;
    _emscripten_console_warn.sig = "vp";
    var _emscripten_date_now = () => Date.now();
    Module["_emscripten_date_now"] = _emscripten_date_now;
    _emscripten_date_now.sig = "d";
    var _emscripten_err = (str) => err(UTF8ToString(str));
    Module["_emscripten_err"] = _emscripten_err;
    _emscripten_err.sig = "vp";
    var _emscripten_exit_with_live_runtime = () => {
      throw "unwind";
    };
    Module["_emscripten_exit_with_live_runtime"] =
      _emscripten_exit_with_live_runtime;
    _emscripten_exit_with_live_runtime.sig = "v";
    var getHeapMax = () => 2147483648;
    Module["getHeapMax"] = getHeapMax;
    var _emscripten_get_heap_max = () => getHeapMax();
    Module["_emscripten_get_heap_max"] = _emscripten_get_heap_max;
    _emscripten_get_heap_max.sig = "p";
    var _emscripten_get_now_res = () => {
      if (ENVIRONMENT_IS_NODE) {
        return 1;
      }
      return 1e3;
    };
    Module["_emscripten_get_now_res"] = _emscripten_get_now_res;
    _emscripten_get_now_res.sig = "d";
    var webgl_enable_ANGLE_instanced_arrays = (ctx) => {
      var ext = ctx.getExtension("ANGLE_instanced_arrays");
      if (ext) {
        ctx["vertexAttribDivisor"] = (index, divisor) =>
          ext["vertexAttribDivisorANGLE"](index, divisor);
        ctx["drawArraysInstanced"] = (mode, first, count, primcount) =>
          ext["drawArraysInstancedANGLE"](mode, first, count, primcount);
        ctx["drawElementsInstanced"] = (
          mode,
          count,
          type,
          indices,
          primcount,
        ) =>
          ext["drawElementsInstancedANGLE"](
            mode,
            count,
            type,
            indices,
            primcount,
          );
        return 1;
      }
    };
    Module["webgl_enable_ANGLE_instanced_arrays"] =
      webgl_enable_ANGLE_instanced_arrays;
    var webgl_enable_OES_vertex_array_object = (ctx) => {
      var ext = ctx.getExtension("OES_vertex_array_object");
      if (ext) {
        ctx["createVertexArray"] = () => ext["createVertexArrayOES"]();
        ctx["deleteVertexArray"] = (vao) => ext["deleteVertexArrayOES"](vao);
        ctx["bindVertexArray"] = (vao) => ext["bindVertexArrayOES"](vao);
        ctx["isVertexArray"] = (vao) => ext["isVertexArrayOES"](vao);
        return 1;
      }
    };
    Module["webgl_enable_OES_vertex_array_object"] =
      webgl_enable_OES_vertex_array_object;
    var webgl_enable_WEBGL_draw_buffers = (ctx) => {
      var ext = ctx.getExtension("WEBGL_draw_buffers");
      if (ext) {
        ctx["drawBuffers"] = (n, bufs) => ext["drawBuffersWEBGL"](n, bufs);
        return 1;
      }
    };
    Module["webgl_enable_WEBGL_draw_buffers"] = webgl_enable_WEBGL_draw_buffers;
    var webgl_enable_WEBGL_multi_draw = (ctx) =>
      !!(ctx.multiDrawWebgl = ctx.getExtension("WEBGL_multi_draw"));
    Module["webgl_enable_WEBGL_multi_draw"] = webgl_enable_WEBGL_multi_draw;
    var GL = {
      counter: 1,
      buffers: [],
      programs: [],
      framebuffers: [],
      renderbuffers: [],
      textures: [],
      shaders: [],
      vaos: [],
      contexts: [],
      offscreenCanvases: {},
      queries: [],
      stringCache: {},
      unpackAlignment: 4,
      recordError: function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },
      getNewId: (table) => {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },
      getSource: (shader, count, string, length) => {
        var source = "";
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(length + i * 4) >> 2] : -1;
          source += UTF8ToString(
            HEAP32[(string + i * 4) >> 2],
            len < 0 ? undefined : len,
          );
        }
        return source;
      },
      createContext: (canvas, webGLContextAttributes) => {
        var ctx = canvas.getContext("webgl", webGLContextAttributes);
        if (!ctx) return 0;
        var handle = GL.registerContext(ctx, webGLContextAttributes);
        return handle;
      },
      registerContext: (ctx, webGLContextAttributes) => {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx,
        };
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (
          typeof webGLContextAttributes.enableExtensionsByDefault ==
            "undefined" ||
          webGLContextAttributes.enableExtensionsByDefault
        ) {
          GL.initExtensions(context);
        }
        return handle;
      },
      makeContextCurrent: (contextHandle) => {
        GL.currentContext = GL.contexts[contextHandle];
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx;
        return !(contextHandle && !GLctx);
      },
      getContext: (contextHandle) => GL.contexts[contextHandle],
      deleteContext: (contextHandle) => {
        if (GL.currentContext === GL.contexts[contextHandle])
          GL.currentContext = null;
        if (typeof JSEvents == "object")
          JSEvents.removeAllHandlersOnTarget(
            GL.contexts[contextHandle].GLctx.canvas,
          );
        if (
          GL.contexts[contextHandle] &&
          GL.contexts[contextHandle].GLctx.canvas
        )
          GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
        GL.contexts[contextHandle] = null;
      },
      initExtensions: (context) => {
        if (!context) context = GL.currentContext;
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
        var GLctx = context.GLctx;
        webgl_enable_ANGLE_instanced_arrays(GLctx);
        webgl_enable_OES_vertex_array_object(GLctx);
        webgl_enable_WEBGL_draw_buffers(GLctx);
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension(
            "EXT_disjoint_timer_query",
          );
        }
        webgl_enable_WEBGL_multi_draw(GLctx);
        var exts = GLctx.getSupportedExtensions() || [];
        exts.forEach((ext) => {
          if (!ext.includes("lose_context") && !ext.includes("debug")) {
            GLctx.getExtension(ext);
          }
        });
      },
    };
    Module["GL"] = GL;
    function _glActiveTexture(x0) {
      GLctx.activeTexture(x0);
    }
    Module["_glActiveTexture"] = _glActiveTexture;
    _glActiveTexture.sig = "vi";
    var _emscripten_glActiveTexture = _glActiveTexture;
    Module["_emscripten_glActiveTexture"] = _emscripten_glActiveTexture;
    var _glAttachShader = (program, shader) => {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    };
    Module["_glAttachShader"] = _glAttachShader;
    _glAttachShader.sig = "vii";
    var _emscripten_glAttachShader = _glAttachShader;
    Module["_emscripten_glAttachShader"] = _emscripten_glAttachShader;
    var _glBeginQueryEXT = (target, id) => {
      GLctx.disjointTimerQueryExt["beginQueryEXT"](target, GL.queries[id]);
    };
    Module["_glBeginQueryEXT"] = _glBeginQueryEXT;
    _glBeginQueryEXT.sig = "vii";
    var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;
    Module["_emscripten_glBeginQueryEXT"] = _emscripten_glBeginQueryEXT;
    var _glBindAttribLocation = (program, index, name) => {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    };
    Module["_glBindAttribLocation"] = _glBindAttribLocation;
    _glBindAttribLocation.sig = "viip";
    var _emscripten_glBindAttribLocation = _glBindAttribLocation;
    Module["_emscripten_glBindAttribLocation"] =
      _emscripten_glBindAttribLocation;
    var _glBindBuffer = (target, buffer) => {
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    };
    Module["_glBindBuffer"] = _glBindBuffer;
    _glBindBuffer.sig = "vii";
    var _emscripten_glBindBuffer = _glBindBuffer;
    Module["_emscripten_glBindBuffer"] = _emscripten_glBindBuffer;
    var _glBindFramebuffer = (target, framebuffer) => {
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
    };
    Module["_glBindFramebuffer"] = _glBindFramebuffer;
    _glBindFramebuffer.sig = "vii";
    var _emscripten_glBindFramebuffer = _glBindFramebuffer;
    Module["_emscripten_glBindFramebuffer"] = _emscripten_glBindFramebuffer;
    var _glBindRenderbuffer = (target, renderbuffer) => {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    };
    Module["_glBindRenderbuffer"] = _glBindRenderbuffer;
    _glBindRenderbuffer.sig = "vii";
    var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;
    Module["_emscripten_glBindRenderbuffer"] = _emscripten_glBindRenderbuffer;
    var _glBindTexture = (target, texture) => {
      GLctx.bindTexture(target, GL.textures[texture]);
    };
    Module["_glBindTexture"] = _glBindTexture;
    _glBindTexture.sig = "vii";
    var _emscripten_glBindTexture = _glBindTexture;
    Module["_emscripten_glBindTexture"] = _emscripten_glBindTexture;
    var _glBindVertexArray = (vao) => {
      GLctx.bindVertexArray(GL.vaos[vao]);
    };
    Module["_glBindVertexArray"] = _glBindVertexArray;
    _glBindVertexArray.sig = "vi";
    var _glBindVertexArrayOES = _glBindVertexArray;
    Module["_glBindVertexArrayOES"] = _glBindVertexArrayOES;
    _glBindVertexArrayOES.sig = "vi";
    var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;
    Module["_emscripten_glBindVertexArrayOES"] =
      _emscripten_glBindVertexArrayOES;
    function _glBlendColor(x0, x1, x2, x3) {
      GLctx.blendColor(x0, x1, x2, x3);
    }
    Module["_glBlendColor"] = _glBlendColor;
    _glBlendColor.sig = "vffff";
    var _emscripten_glBlendColor = _glBlendColor;
    Module["_emscripten_glBlendColor"] = _emscripten_glBlendColor;
    function _glBlendEquation(x0) {
      GLctx.blendEquation(x0);
    }
    Module["_glBlendEquation"] = _glBlendEquation;
    _glBlendEquation.sig = "vi";
    var _emscripten_glBlendEquation = _glBlendEquation;
    Module["_emscripten_glBlendEquation"] = _emscripten_glBlendEquation;
    function _glBlendEquationSeparate(x0, x1) {
      GLctx.blendEquationSeparate(x0, x1);
    }
    Module["_glBlendEquationSeparate"] = _glBlendEquationSeparate;
    _glBlendEquationSeparate.sig = "vii";
    var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;
    Module["_emscripten_glBlendEquationSeparate"] =
      _emscripten_glBlendEquationSeparate;
    function _glBlendFunc(x0, x1) {
      GLctx.blendFunc(x0, x1);
    }
    Module["_glBlendFunc"] = _glBlendFunc;
    _glBlendFunc.sig = "vii";
    var _emscripten_glBlendFunc = _glBlendFunc;
    Module["_emscripten_glBlendFunc"] = _emscripten_glBlendFunc;
    function _glBlendFuncSeparate(x0, x1, x2, x3) {
      GLctx.blendFuncSeparate(x0, x1, x2, x3);
    }
    Module["_glBlendFuncSeparate"] = _glBlendFuncSeparate;
    _glBlendFuncSeparate.sig = "viiii";
    var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;
    Module["_emscripten_glBlendFuncSeparate"] = _emscripten_glBlendFuncSeparate;
    var _glBufferData = (target, size, data, usage) => {
      GLctx.bufferData(
        target,
        data ? HEAPU8.subarray(data, data + size) : size,
        usage,
      );
    };
    Module["_glBufferData"] = _glBufferData;
    _glBufferData.sig = "vippi";
    var _emscripten_glBufferData = _glBufferData;
    Module["_emscripten_glBufferData"] = _emscripten_glBufferData;
    var _glBufferSubData = (target, offset, size, data) => {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size));
    };
    Module["_glBufferSubData"] = _glBufferSubData;
    _glBufferSubData.sig = "vippp";
    var _emscripten_glBufferSubData = _glBufferSubData;
    Module["_emscripten_glBufferSubData"] = _emscripten_glBufferSubData;
    function _glCheckFramebufferStatus(x0) {
      return GLctx.checkFramebufferStatus(x0);
    }
    Module["_glCheckFramebufferStatus"] = _glCheckFramebufferStatus;
    _glCheckFramebufferStatus.sig = "ii";
    var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;
    Module["_emscripten_glCheckFramebufferStatus"] =
      _emscripten_glCheckFramebufferStatus;
    function _glClear(x0) {
      GLctx.clear(x0);
    }
    Module["_glClear"] = _glClear;
    _glClear.sig = "vi";
    var _emscripten_glClear = _glClear;
    Module["_emscripten_glClear"] = _emscripten_glClear;
    function _glClearColor(x0, x1, x2, x3) {
      GLctx.clearColor(x0, x1, x2, x3);
    }
    Module["_glClearColor"] = _glClearColor;
    _glClearColor.sig = "vffff";
    var _emscripten_glClearColor = _glClearColor;
    Module["_emscripten_glClearColor"] = _emscripten_glClearColor;
    function _glClearDepthf(x0) {
      GLctx.clearDepth(x0);
    }
    Module["_glClearDepthf"] = _glClearDepthf;
    _glClearDepthf.sig = "vf";
    var _emscripten_glClearDepthf = _glClearDepthf;
    Module["_emscripten_glClearDepthf"] = _emscripten_glClearDepthf;
    function _glClearStencil(x0) {
      GLctx.clearStencil(x0);
    }
    Module["_glClearStencil"] = _glClearStencil;
    _glClearStencil.sig = "vi";
    var _emscripten_glClearStencil = _glClearStencil;
    Module["_emscripten_glClearStencil"] = _emscripten_glClearStencil;
    var _glColorMask = (red, green, blue, alpha) => {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    };
    Module["_glColorMask"] = _glColorMask;
    _glColorMask.sig = "viiii";
    var _emscripten_glColorMask = _glColorMask;
    Module["_emscripten_glColorMask"] = _emscripten_glColorMask;
    var _glCompileShader = (shader) => {
      GLctx.compileShader(GL.shaders[shader]);
    };
    Module["_glCompileShader"] = _glCompileShader;
    _glCompileShader.sig = "vi";
    var _emscripten_glCompileShader = _glCompileShader;
    Module["_emscripten_glCompileShader"] = _emscripten_glCompileShader;
    var _glCompressedTexImage2D = (
      target,
      level,
      internalFormat,
      width,
      height,
      border,
      imageSize,
      data,
    ) => {
      GLctx.compressedTexImage2D(
        target,
        level,
        internalFormat,
        width,
        height,
        border,
        data ? HEAPU8.subarray(data, data + imageSize) : null,
      );
    };
    Module["_glCompressedTexImage2D"] = _glCompressedTexImage2D;
    _glCompressedTexImage2D.sig = "viiiiiiip";
    var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;
    Module["_emscripten_glCompressedTexImage2D"] =
      _emscripten_glCompressedTexImage2D;
    var _glCompressedTexSubImage2D = (
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      imageSize,
      data,
    ) => {
      GLctx.compressedTexSubImage2D(
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        data ? HEAPU8.subarray(data, data + imageSize) : null,
      );
    };
    Module["_glCompressedTexSubImage2D"] = _glCompressedTexSubImage2D;
    _glCompressedTexSubImage2D.sig = "viiiiiiiip";
    var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;
    Module["_emscripten_glCompressedTexSubImage2D"] =
      _emscripten_glCompressedTexSubImage2D;
    function _glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
      GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
    }
    Module["_glCopyTexImage2D"] = _glCopyTexImage2D;
    _glCopyTexImage2D.sig = "viiiiiiii";
    var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;
    Module["_emscripten_glCopyTexImage2D"] = _emscripten_glCopyTexImage2D;
    function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
      GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7);
    }
    Module["_glCopyTexSubImage2D"] = _glCopyTexSubImage2D;
    _glCopyTexSubImage2D.sig = "viiiiiiii";
    var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;
    Module["_emscripten_glCopyTexSubImage2D"] = _emscripten_glCopyTexSubImage2D;
    var _glCreateProgram = () => {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      program.maxUniformLength =
        program.maxAttributeLength =
        program.maxUniformBlockNameLength =
          0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    };
    Module["_glCreateProgram"] = _glCreateProgram;
    _glCreateProgram.sig = "i";
    var _emscripten_glCreateProgram = _glCreateProgram;
    Module["_emscripten_glCreateProgram"] = _emscripten_glCreateProgram;
    var _glCreateShader = (shaderType) => {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    };
    Module["_glCreateShader"] = _glCreateShader;
    _glCreateShader.sig = "ii";
    var _emscripten_glCreateShader = _glCreateShader;
    Module["_emscripten_glCreateShader"] = _emscripten_glCreateShader;
    function _glCullFace(x0) {
      GLctx.cullFace(x0);
    }
    Module["_glCullFace"] = _glCullFace;
    _glCullFace.sig = "vi";
    var _emscripten_glCullFace = _glCullFace;
    Module["_emscripten_glCullFace"] = _emscripten_glCullFace;
    var _glDeleteBuffers = (n, buffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(buffers + i * 4) >> 2];
        var buffer = GL.buffers[id];
        if (!buffer) continue;
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
      }
    };
    Module["_glDeleteBuffers"] = _glDeleteBuffers;
    _glDeleteBuffers.sig = "vip";
    var _emscripten_glDeleteBuffers = _glDeleteBuffers;
    Module["_emscripten_glDeleteBuffers"] = _emscripten_glDeleteBuffers;
    var _glDeleteFramebuffers = (n, framebuffers) => {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(framebuffers + i * 4) >> 2];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue;
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    };
    Module["_glDeleteFramebuffers"] = _glDeleteFramebuffers;
    _glDeleteFramebuffers.sig = "vip";
    var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;
    Module["_emscripten_glDeleteFramebuffers"] =
      _emscripten_glDeleteFramebuffers;
    var _glDeleteProgram = (id) => {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) {
        GL.recordError(1281);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
    };
    Module["_glDeleteProgram"] = _glDeleteProgram;
    _glDeleteProgram.sig = "vi";
    var _emscripten_glDeleteProgram = _glDeleteProgram;
    Module["_emscripten_glDeleteProgram"] = _emscripten_glDeleteProgram;
    var _glDeleteQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(ids + i * 4) >> 2];
        var query = GL.queries[id];
        if (!query) continue;
        GLctx.disjointTimerQueryExt["deleteQueryEXT"](query);
        GL.queries[id] = null;
      }
    };
    Module["_glDeleteQueriesEXT"] = _glDeleteQueriesEXT;
    _glDeleteQueriesEXT.sig = "vii";
    var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;
    Module["_emscripten_glDeleteQueriesEXT"] = _emscripten_glDeleteQueriesEXT;
    var _glDeleteRenderbuffers = (n, renderbuffers) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(renderbuffers + i * 4) >> 2];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue;
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    };
    Module["_glDeleteRenderbuffers"] = _glDeleteRenderbuffers;
    _glDeleteRenderbuffers.sig = "vip";
    var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;
    Module["_emscripten_glDeleteRenderbuffers"] =
      _emscripten_glDeleteRenderbuffers;
    var _glDeleteShader = (id) => {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) {
        GL.recordError(1281);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    };
    Module["_glDeleteShader"] = _glDeleteShader;
    _glDeleteShader.sig = "vi";
    var _emscripten_glDeleteShader = _glDeleteShader;
    Module["_emscripten_glDeleteShader"] = _emscripten_glDeleteShader;
    var _glDeleteTextures = (n, textures) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(textures + i * 4) >> 2];
        var texture = GL.textures[id];
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    };
    Module["_glDeleteTextures"] = _glDeleteTextures;
    _glDeleteTextures.sig = "vip";
    var _emscripten_glDeleteTextures = _glDeleteTextures;
    Module["_emscripten_glDeleteTextures"] = _emscripten_glDeleteTextures;
    var _glDeleteVertexArrays = (n, vaos) => {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(vaos + i * 4) >> 2];
        GLctx.deleteVertexArray(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    };
    Module["_glDeleteVertexArrays"] = _glDeleteVertexArrays;
    _glDeleteVertexArrays.sig = "vip";
    var _glDeleteVertexArraysOES = _glDeleteVertexArrays;
    Module["_glDeleteVertexArraysOES"] = _glDeleteVertexArraysOES;
    _glDeleteVertexArraysOES.sig = "vip";
    var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;
    Module["_emscripten_glDeleteVertexArraysOES"] =
      _emscripten_glDeleteVertexArraysOES;
    function _glDepthFunc(x0) {
      GLctx.depthFunc(x0);
    }
    Module["_glDepthFunc"] = _glDepthFunc;
    _glDepthFunc.sig = "vi";
    var _emscripten_glDepthFunc = _glDepthFunc;
    Module["_emscripten_glDepthFunc"] = _emscripten_glDepthFunc;
    var _glDepthMask = (flag) => {
      GLctx.depthMask(!!flag);
    };
    Module["_glDepthMask"] = _glDepthMask;
    _glDepthMask.sig = "vi";
    var _emscripten_glDepthMask = _glDepthMask;
    Module["_emscripten_glDepthMask"] = _emscripten_glDepthMask;
    function _glDepthRangef(x0, x1) {
      GLctx.depthRange(x0, x1);
    }
    Module["_glDepthRangef"] = _glDepthRangef;
    _glDepthRangef.sig = "vff";
    var _emscripten_glDepthRangef = _glDepthRangef;
    Module["_emscripten_glDepthRangef"] = _emscripten_glDepthRangef;
    var _glDetachShader = (program, shader) => {
      GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
    };
    Module["_glDetachShader"] = _glDetachShader;
    _glDetachShader.sig = "vii";
    var _emscripten_glDetachShader = _glDetachShader;
    Module["_emscripten_glDetachShader"] = _emscripten_glDetachShader;
    function _glDisable(x0) {
      GLctx.disable(x0);
    }
    Module["_glDisable"] = _glDisable;
    _glDisable.sig = "vi";
    var _emscripten_glDisable = _glDisable;
    Module["_emscripten_glDisable"] = _emscripten_glDisable;
    var _glDisableVertexAttribArray = (index) => {
      GLctx.disableVertexAttribArray(index);
    };
    Module["_glDisableVertexAttribArray"] = _glDisableVertexAttribArray;
    _glDisableVertexAttribArray.sig = "vi";
    var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;
    Module["_emscripten_glDisableVertexAttribArray"] =
      _emscripten_glDisableVertexAttribArray;
    var _glDrawArrays = (mode, first, count) => {
      GLctx.drawArrays(mode, first, count);
    };
    Module["_glDrawArrays"] = _glDrawArrays;
    _glDrawArrays.sig = "viii";
    var _emscripten_glDrawArrays = _glDrawArrays;
    Module["_emscripten_glDrawArrays"] = _emscripten_glDrawArrays;
    var _glDrawArraysInstanced = (mode, first, count, primcount) => {
      GLctx.drawArraysInstanced(mode, first, count, primcount);
    };
    Module["_glDrawArraysInstanced"] = _glDrawArraysInstanced;
    _glDrawArraysInstanced.sig = "viiii";
    var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;
    Module["_glDrawArraysInstancedANGLE"] = _glDrawArraysInstancedANGLE;
    var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;
    Module["_emscripten_glDrawArraysInstancedANGLE"] =
      _emscripten_glDrawArraysInstancedANGLE;
    var tempFixedLengthArray = [];
    Module["tempFixedLengthArray"] = tempFixedLengthArray;
    var _glDrawBuffers = (n, bufs) => {
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(bufs + i * 4) >> 2];
      }
      GLctx.drawBuffers(bufArray);
    };
    Module["_glDrawBuffers"] = _glDrawBuffers;
    _glDrawBuffers.sig = "vip";
    var _glDrawBuffersWEBGL = _glDrawBuffers;
    Module["_glDrawBuffersWEBGL"] = _glDrawBuffersWEBGL;
    var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;
    Module["_emscripten_glDrawBuffersWEBGL"] = _emscripten_glDrawBuffersWEBGL;
    var _glDrawElements = (mode, count, type, indices) => {
      GLctx.drawElements(mode, count, type, indices);
    };
    Module["_glDrawElements"] = _glDrawElements;
    _glDrawElements.sig = "viiip";
    var _emscripten_glDrawElements = _glDrawElements;
    Module["_emscripten_glDrawElements"] = _emscripten_glDrawElements;
    var _glDrawElementsInstanced = (mode, count, type, indices, primcount) => {
      GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
    };
    Module["_glDrawElementsInstanced"] = _glDrawElementsInstanced;
    _glDrawElementsInstanced.sig = "viiipi";
    var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;
    Module["_glDrawElementsInstancedANGLE"] = _glDrawElementsInstancedANGLE;
    var _emscripten_glDrawElementsInstancedANGLE =
      _glDrawElementsInstancedANGLE;
    Module["_emscripten_glDrawElementsInstancedANGLE"] =
      _emscripten_glDrawElementsInstancedANGLE;
    function _glEnable(x0) {
      GLctx.enable(x0);
    }
    Module["_glEnable"] = _glEnable;
    _glEnable.sig = "vi";
    var _emscripten_glEnable = _glEnable;
    Module["_emscripten_glEnable"] = _emscripten_glEnable;
    var _glEnableVertexAttribArray = (index) => {
      GLctx.enableVertexAttribArray(index);
    };
    Module["_glEnableVertexAttribArray"] = _glEnableVertexAttribArray;
    _glEnableVertexAttribArray.sig = "vi";
    var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;
    Module["_emscripten_glEnableVertexAttribArray"] =
      _emscripten_glEnableVertexAttribArray;
    var _glEndQueryEXT = (target) => {
      GLctx.disjointTimerQueryExt["endQueryEXT"](target);
    };
    Module["_glEndQueryEXT"] = _glEndQueryEXT;
    _glEndQueryEXT.sig = "vi";
    var _emscripten_glEndQueryEXT = _glEndQueryEXT;
    Module["_emscripten_glEndQueryEXT"] = _emscripten_glEndQueryEXT;
    function _glFinish() {
      GLctx.finish();
    }
    Module["_glFinish"] = _glFinish;
    _glFinish.sig = "v";
    var _emscripten_glFinish = _glFinish;
    Module["_emscripten_glFinish"] = _emscripten_glFinish;
    function _glFlush() {
      GLctx.flush();
    }
    Module["_glFlush"] = _glFlush;
    _glFlush.sig = "v";
    var _emscripten_glFlush = _glFlush;
    Module["_emscripten_glFlush"] = _emscripten_glFlush;
    var _glFramebufferRenderbuffer = (
      target,
      attachment,
      renderbuffertarget,
      renderbuffer,
    ) => {
      GLctx.framebufferRenderbuffer(
        target,
        attachment,
        renderbuffertarget,
        GL.renderbuffers[renderbuffer],
      );
    };
    Module["_glFramebufferRenderbuffer"] = _glFramebufferRenderbuffer;
    _glFramebufferRenderbuffer.sig = "viiii";
    var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;
    Module["_emscripten_glFramebufferRenderbuffer"] =
      _emscripten_glFramebufferRenderbuffer;
    var _glFramebufferTexture2D = (
      target,
      attachment,
      textarget,
      texture,
      level,
    ) => {
      GLctx.framebufferTexture2D(
        target,
        attachment,
        textarget,
        GL.textures[texture],
        level,
      );
    };
    Module["_glFramebufferTexture2D"] = _glFramebufferTexture2D;
    _glFramebufferTexture2D.sig = "viiiii";
    var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;
    Module["_emscripten_glFramebufferTexture2D"] =
      _emscripten_glFramebufferTexture2D;
    function _glFrontFace(x0) {
      GLctx.frontFace(x0);
    }
    Module["_glFrontFace"] = _glFrontFace;
    _glFrontFace.sig = "vi";
    var _emscripten_glFrontFace = _glFrontFace;
    Module["_emscripten_glFrontFace"] = _emscripten_glFrontFace;
    var __glGenObject = (n, buffers, createFunction, objectTable) => {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(1282);
        }
        HEAP32[(buffers + i * 4) >> 2] = id;
      }
    };
    Module["__glGenObject"] = __glGenObject;
    var _glGenBuffers = (n, buffers) => {
      __glGenObject(n, buffers, "createBuffer", GL.buffers);
    };
    Module["_glGenBuffers"] = _glGenBuffers;
    _glGenBuffers.sig = "vip";
    var _emscripten_glGenBuffers = _glGenBuffers;
    Module["_emscripten_glGenBuffers"] = _emscripten_glGenBuffers;
    var _glGenFramebuffers = (n, ids) => {
      __glGenObject(n, ids, "createFramebuffer", GL.framebuffers);
    };
    Module["_glGenFramebuffers"] = _glGenFramebuffers;
    _glGenFramebuffers.sig = "vip";
    var _emscripten_glGenFramebuffers = _glGenFramebuffers;
    Module["_emscripten_glGenFramebuffers"] = _emscripten_glGenFramebuffers;
    var _glGenQueriesEXT = (n, ids) => {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt["createQueryEXT"]();
        if (!query) {
          GL.recordError(1282);
          while (i < n) HEAP32[(ids + i++ * 4) >> 2] = 0;
          return;
        }
        var id = GL.getNewId(GL.queries);
        query.name = id;
        GL.queries[id] = query;
        HEAP32[(ids + i * 4) >> 2] = id;
      }
    };
    Module["_glGenQueriesEXT"] = _glGenQueriesEXT;
    _glGenQueriesEXT.sig = "vii";
    var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;
    Module["_emscripten_glGenQueriesEXT"] = _emscripten_glGenQueriesEXT;
    var _glGenRenderbuffers = (n, renderbuffers) => {
      __glGenObject(n, renderbuffers, "createRenderbuffer", GL.renderbuffers);
    };
    Module["_glGenRenderbuffers"] = _glGenRenderbuffers;
    _glGenRenderbuffers.sig = "vip";
    var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;
    Module["_emscripten_glGenRenderbuffers"] = _emscripten_glGenRenderbuffers;
    var _glGenTextures = (n, textures) => {
      __glGenObject(n, textures, "createTexture", GL.textures);
    };
    Module["_glGenTextures"] = _glGenTextures;
    _glGenTextures.sig = "vip";
    var _emscripten_glGenTextures = _glGenTextures;
    Module["_emscripten_glGenTextures"] = _emscripten_glGenTextures;
    function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, "createVertexArray", GL.vaos);
    }
    Module["_glGenVertexArrays"] = _glGenVertexArrays;
    _glGenVertexArrays.sig = "vip";
    var _glGenVertexArraysOES = _glGenVertexArrays;
    Module["_glGenVertexArraysOES"] = _glGenVertexArraysOES;
    _glGenVertexArraysOES.sig = "vip";
    var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;
    Module["_emscripten_glGenVertexArraysOES"] =
      _emscripten_glGenVertexArraysOES;
    function _glGenerateMipmap(x0) {
      GLctx.generateMipmap(x0);
    }
    Module["_glGenerateMipmap"] = _glGenerateMipmap;
    _glGenerateMipmap.sig = "vi";
    var _emscripten_glGenerateMipmap = _glGenerateMipmap;
    Module["_emscripten_glGenerateMipmap"] = _emscripten_glGenerateMipmap;
    var __glGetActiveAttribOrUniform = (
      funcName,
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    ) => {
      program = GL.programs[program];
      var info = GLctx[funcName](program, index);
      if (info) {
        var numBytesWrittenExclNull =
          name && stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
        if (size) HEAP32[size >> 2] = info.size;
        if (type) HEAP32[type >> 2] = info.type;
      }
    };
    Module["__glGetActiveAttribOrUniform"] = __glGetActiveAttribOrUniform;
    var _glGetActiveAttrib = (
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    ) => {
      __glGetActiveAttribOrUniform(
        "getActiveAttrib",
        program,
        index,
        bufSize,
        length,
        size,
        type,
        name,
      );
    };
    Module["_glGetActiveAttrib"] = _glGetActiveAttrib;
    _glGetActiveAttrib.sig = "viiipppp";
    var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;
    Module["_emscripten_glGetActiveAttrib"] = _emscripten_glGetActiveAttrib;
    var _glGetActiveUniform = (
      program,
      index,
      bufSize,
      length,
      size,
      type,
      name,
    ) => {
      __glGetActiveAttribOrUniform(
        "getActiveUniform",
        program,
        index,
        bufSize,
        length,
        size,
        type,
        name,
      );
    };
    Module["_glGetActiveUniform"] = _glGetActiveUniform;
    _glGetActiveUniform.sig = "viiipppp";
    var _emscripten_glGetActiveUniform = _glGetActiveUniform;
    Module["_emscripten_glGetActiveUniform"] = _emscripten_glGetActiveUniform;
    var _glGetAttachedShaders = (program, maxCount, count, shaders) => {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[count >> 2] = len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(shaders + i * 4) >> 2] = id;
      }
    };
    Module["_glGetAttachedShaders"] = _glGetAttachedShaders;
    _glGetAttachedShaders.sig = "viipp";
    var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;
    Module["_emscripten_glGetAttachedShaders"] =
      _emscripten_glGetAttachedShaders;
    var _glGetAttribLocation = (program, name) =>
      GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    Module["_glGetAttribLocation"] = _glGetAttribLocation;
    _glGetAttribLocation.sig = "iip";
    var _emscripten_glGetAttribLocation = _glGetAttribLocation;
    Module["_emscripten_glGetAttribLocation"] = _emscripten_glGetAttribLocation;
    var writeI53ToI64 = (ptr, num) => {
      HEAPU32[ptr >> 2] = num;
      var lower = HEAPU32[ptr >> 2];
      HEAPU32[(ptr + 4) >> 2] = (num - lower) / 4294967296;
    };
    Module["writeI53ToI64"] = writeI53ToI64;
    var emscriptenWebGLGet = (name_, p, type) => {
      if (!p) {
        GL.recordError(1281);
        return;
      }
      var ret = undefined;
      switch (name_) {
        case 36346:
          ret = 1;
          break;
        case 36344:
          if (type != 0 && type != 1) {
            GL.recordError(1280);
          }
          return;
        case 36345:
          ret = 0;
          break;
        case 34466:
          var formats = GLctx.getParameter(34467);
          ret = formats ? formats.length : 0;
          break;
      }
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof result) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(1280);
            return;
          case "object":
            if (result === null) {
              switch (name_) {
                case 34964:
                case 35725:
                case 34965:
                case 36006:
                case 36007:
                case 32873:
                case 34229:
                case 34068: {
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(1280);
                  return;
                }
              }
            } else if (
              result instanceof Float32Array ||
              result instanceof Uint32Array ||
              result instanceof Int32Array ||
              result instanceof Array
            ) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0:
                    HEAP32[(p + i * 4) >> 2] = result[i];
                    break;
                  case 2:
                    HEAPF32[(p + i * 4) >> 2] = result[i];
                    break;
                  case 4:
                    HEAP8[(p + i) >> 0] = result[i] ? 1 : 0;
                    break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch (e) {
                GL.recordError(1280);
                err(
                  "GL_INVALID_ENUM in glGet" +
                    type +
                    "v: Unknown object returned from WebGL getParameter(" +
                    name_ +
                    ")! (error: " +
                    e +
                    ")",
                );
                return;
              }
            }
            break;
          default:
            GL.recordError(1280);
            err(
              "GL_INVALID_ENUM in glGet" +
                type +
                "v: Native code calling glGet" +
                type +
                "v(" +
                name_ +
                ") and it returns " +
                result +
                " of type " +
                typeof result +
                "!",
            );
            return;
        }
      }
      switch (type) {
        case 1:
          writeI53ToI64(p, ret);
          break;
        case 0:
          HEAP32[p >> 2] = ret;
          break;
        case 2:
          HEAPF32[p >> 2] = ret;
          break;
        case 4:
          HEAP8[p >> 0] = ret ? 1 : 0;
          break;
      }
    };
    Module["emscriptenWebGLGet"] = emscriptenWebGLGet;
    var _glGetBooleanv = (name_, p) => {
      emscriptenWebGLGet(name_, p, 4);
    };
    Module["_glGetBooleanv"] = _glGetBooleanv;
    _glGetBooleanv.sig = "vip";
    var _emscripten_glGetBooleanv = _glGetBooleanv;
    Module["_emscripten_glGetBooleanv"] = _emscripten_glGetBooleanv;
    var _glGetBufferParameteriv = (target, value, data) => {
      if (!data) {
        GL.recordError(1281);
        return;
      }
      HEAP32[data >> 2] = GLctx.getBufferParameter(target, value);
    };
    Module["_glGetBufferParameteriv"] = _glGetBufferParameteriv;
    _glGetBufferParameteriv.sig = "viip";
    var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;
    Module["_emscripten_glGetBufferParameteriv"] =
      _emscripten_glGetBufferParameteriv;
    var _glGetError = () => {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0;
      return error;
    };
    Module["_glGetError"] = _glGetError;
    _glGetError.sig = "i";
    var _emscripten_glGetError = _glGetError;
    Module["_emscripten_glGetError"] = _emscripten_glGetError;
    var _glGetFloatv = (name_, p) => {
      emscriptenWebGLGet(name_, p, 2);
    };
    Module["_glGetFloatv"] = _glGetFloatv;
    _glGetFloatv.sig = "vip";
    var _emscripten_glGetFloatv = _glGetFloatv;
    Module["_emscripten_glGetFloatv"] = _emscripten_glGetFloatv;
    var _glGetFramebufferAttachmentParameteriv = (
      target,
      attachment,
      pname,
      params,
    ) => {
      var result = GLctx.getFramebufferAttachmentParameter(
        target,
        attachment,
        pname,
      );
      if (
        result instanceof WebGLRenderbuffer ||
        result instanceof WebGLTexture
      ) {
        result = result.name | 0;
      }
      HEAP32[params >> 2] = result;
    };
    Module["_glGetFramebufferAttachmentParameteriv"] =
      _glGetFramebufferAttachmentParameteriv;
    _glGetFramebufferAttachmentParameteriv.sig = "viiip";
    var _emscripten_glGetFramebufferAttachmentParameteriv =
      _glGetFramebufferAttachmentParameteriv;
    Module["_emscripten_glGetFramebufferAttachmentParameteriv"] =
      _emscripten_glGetFramebufferAttachmentParameteriv;
    var _glGetIntegerv = (name_, p) => {
      emscriptenWebGLGet(name_, p, 0);
    };
    Module["_glGetIntegerv"] = _glGetIntegerv;
    _glGetIntegerv.sig = "vip";
    var _emscripten_glGetIntegerv = _glGetIntegerv;
    Module["_emscripten_glGetIntegerv"] = _emscripten_glGetIntegerv;
    var _glGetProgramInfoLog = (program, maxLength, length, infoLog) => {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = "(unknown error)";
      var numBytesWrittenExclNull =
        maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    };
    Module["_glGetProgramInfoLog"] = _glGetProgramInfoLog;
    _glGetProgramInfoLog.sig = "viipp";
    var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;
    Module["_emscripten_glGetProgramInfoLog"] = _emscripten_glGetProgramInfoLog;
    var _glGetProgramiv = (program, pname, p) => {
      if (!p) {
        GL.recordError(1281);
        return;
      }
      if (program >= GL.counter) {
        GL.recordError(1281);
        return;
      }
      program = GL.programs[program];
      if (pname == 35716) {
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1;
      } else if (pname == 35719) {
        if (!program.maxUniformLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
            program.maxUniformLength = Math.max(
              program.maxUniformLength,
              GLctx.getActiveUniform(program, i).name.length + 1,
            );
          }
        }
        HEAP32[p >> 2] = program.maxUniformLength;
      } else if (pname == 35722) {
        if (!program.maxAttributeLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 35721); ++i) {
            program.maxAttributeLength = Math.max(
              program.maxAttributeLength,
              GLctx.getActiveAttrib(program, i).name.length + 1,
            );
          }
        }
        HEAP32[p >> 2] = program.maxAttributeLength;
      } else if (pname == 35381) {
        if (!program.maxUniformBlockNameLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 35382); ++i) {
            program.maxUniformBlockNameLength = Math.max(
              program.maxUniformBlockNameLength,
              GLctx.getActiveUniformBlockName(program, i).length + 1,
            );
          }
        }
        HEAP32[p >> 2] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[p >> 2] = GLctx.getProgramParameter(program, pname);
      }
    };
    Module["_glGetProgramiv"] = _glGetProgramiv;
    _glGetProgramiv.sig = "viip";
    var _emscripten_glGetProgramiv = _glGetProgramiv;
    Module["_emscripten_glGetProgramiv"] = _emscripten_glGetProgramiv;
    var _glGetQueryObjecti64vEXT = (id, pname, params) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      var query = GL.queries[id];
      var param;
      {
        param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](query, pname);
      }
      var ret;
      if (typeof param == "boolean") {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    };
    Module["_glGetQueryObjecti64vEXT"] = _glGetQueryObjecti64vEXT;
    _glGetQueryObjecti64vEXT.sig = "viii";
    var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;
    Module["_emscripten_glGetQueryObjecti64vEXT"] =
      _emscripten_glGetQueryObjecti64vEXT;
    var _glGetQueryObjectivEXT = (id, pname, params) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.disjointTimerQueryExt["getQueryObjectEXT"](
        query,
        pname,
      );
      var ret;
      if (typeof param == "boolean") {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[params >> 2] = ret;
    };
    Module["_glGetQueryObjectivEXT"] = _glGetQueryObjectivEXT;
    _glGetQueryObjectivEXT.sig = "viii";
    var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;
    Module["_emscripten_glGetQueryObjectivEXT"] =
      _emscripten_glGetQueryObjectivEXT;
    var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;
    Module["_glGetQueryObjectui64vEXT"] = _glGetQueryObjectui64vEXT;
    var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;
    Module["_emscripten_glGetQueryObjectui64vEXT"] =
      _emscripten_glGetQueryObjectui64vEXT;
    var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;
    Module["_glGetQueryObjectuivEXT"] = _glGetQueryObjectuivEXT;
    var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;
    Module["_emscripten_glGetQueryObjectuivEXT"] =
      _emscripten_glGetQueryObjectuivEXT;
    var _glGetQueryivEXT = (target, pname, params) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      HEAP32[params >> 2] = GLctx.disjointTimerQueryExt["getQueryEXT"](
        target,
        pname,
      );
    };
    Module["_glGetQueryivEXT"] = _glGetQueryivEXT;
    _glGetQueryivEXT.sig = "viii";
    var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;
    Module["_emscripten_glGetQueryivEXT"] = _emscripten_glGetQueryivEXT;
    var _glGetRenderbufferParameteriv = (target, pname, params) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname);
    };
    Module["_glGetRenderbufferParameteriv"] = _glGetRenderbufferParameteriv;
    _glGetRenderbufferParameteriv.sig = "viip";
    var _emscripten_glGetRenderbufferParameteriv =
      _glGetRenderbufferParameteriv;
    Module["_emscripten_glGetRenderbufferParameteriv"] =
      _emscripten_glGetRenderbufferParameteriv;
    var _glGetShaderInfoLog = (shader, maxLength, length, infoLog) => {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = "(unknown error)";
      var numBytesWrittenExclNull =
        maxLength > 0 && infoLog ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    };
    Module["_glGetShaderInfoLog"] = _glGetShaderInfoLog;
    _glGetShaderInfoLog.sig = "viipp";
    var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;
    Module["_emscripten_glGetShaderInfoLog"] = _emscripten_glGetShaderInfoLog;
    var _glGetShaderPrecisionFormat = (
      shaderType,
      precisionType,
      range,
      precision,
    ) => {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[range >> 2] = result.rangeMin;
      HEAP32[(range + 4) >> 2] = result.rangeMax;
      HEAP32[precision >> 2] = result.precision;
    };
    Module["_glGetShaderPrecisionFormat"] = _glGetShaderPrecisionFormat;
    _glGetShaderPrecisionFormat.sig = "viipp";
    var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;
    Module["_emscripten_glGetShaderPrecisionFormat"] =
      _emscripten_glGetShaderPrecisionFormat;
    var _glGetShaderSource = (shader, bufSize, length, source) => {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return;
      var numBytesWrittenExclNull =
        bufSize > 0 && source ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[length >> 2] = numBytesWrittenExclNull;
    };
    Module["_glGetShaderSource"] = _glGetShaderSource;
    _glGetShaderSource.sig = "viipp";
    var _emscripten_glGetShaderSource = _glGetShaderSource;
    Module["_emscripten_glGetShaderSource"] = _emscripten_glGetShaderSource;
    var _glGetShaderiv = (shader, pname, p) => {
      if (!p) {
        GL.recordError(1281);
        return;
      }
      if (pname == 35716) {
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = "(unknown error)";
        var logLength = log ? log.length + 1 : 0;
        HEAP32[p >> 2] = logLength;
      } else if (pname == 35720) {
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[p >> 2] = sourceLength;
      } else {
        HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    };
    Module["_glGetShaderiv"] = _glGetShaderiv;
    _glGetShaderiv.sig = "viip";
    var _emscripten_glGetShaderiv = _glGetShaderiv;
    Module["_emscripten_glGetShaderiv"] = _emscripten_glGetShaderiv;
    var _glGetString = (name_) => {
      var ret = GL.stringCache[name_];
      if (!ret) {
        switch (name_) {
          case 7939:
            var exts = GLctx.getSupportedExtensions() || [];
            exts = exts.concat(exts.map((e) => "GL_" + e));
            ret = stringToNewUTF8(exts.join(" "));
            break;
          case 7936:
          case 7937:
          case 37445:
          case 37446:
            var s = GLctx.getParameter(name_);
            if (!s) {
              GL.recordError(1280);
            }
            ret = s && stringToNewUTF8(s);
            break;
          case 7938:
            var glVersion = GLctx.getParameter(7938);
            {
              glVersion = "OpenGL ES 2.0 (" + glVersion + ")";
            }
            ret = stringToNewUTF8(glVersion);
            break;
          case 35724:
            var glslVersion = GLctx.getParameter(35724);
            var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
            var ver_num = glslVersion.match(ver_re);
            if (ver_num !== null) {
              if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
              glslVersion =
                "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")";
            }
            ret = stringToNewUTF8(glslVersion);
            break;
          default:
            GL.recordError(1280);
        }
        GL.stringCache[name_] = ret;
      }
      return ret;
    };
    Module["_glGetString"] = _glGetString;
    _glGetString.sig = "pi";
    var _emscripten_glGetString = _glGetString;
    Module["_emscripten_glGetString"] = _emscripten_glGetString;
    var _glGetTexParameterfv = (target, pname, params) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname);
    };
    Module["_glGetTexParameterfv"] = _glGetTexParameterfv;
    _glGetTexParameterfv.sig = "viip";
    var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;
    Module["_emscripten_glGetTexParameterfv"] = _emscripten_glGetTexParameterfv;
    var _glGetTexParameteriv = (target, pname, params) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      HEAP32[params >> 2] = GLctx.getTexParameter(target, pname);
    };
    Module["_glGetTexParameteriv"] = _glGetTexParameteriv;
    _glGetTexParameteriv.sig = "viip";
    var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;
    Module["_emscripten_glGetTexParameteriv"] = _emscripten_glGetTexParameteriv;
    var webglGetLeftBracePos = (name) =>
      name.slice(-1) == "]" && name.lastIndexOf("[");
    Module["webglGetLeftBracePos"] = webglGetLeftBracePos;
    var webglPrepareUniformLocationsBeforeFirstUse = (program) => {
      var uniformLocsById = program.uniformLocsById,
        uniformSizeAndIdsByName = program.uniformSizeAndIdsByName,
        i,
        j;
      if (!uniformLocsById) {
        program.uniformLocsById = uniformLocsById = {};
        program.uniformArrayNamesById = {};
        for (i = 0; i < GLctx.getProgramParameter(program, 35718); ++i) {
          var u = GLctx.getActiveUniform(program, i);
          var nm = u.name;
          var sz = u.size;
          var lb = webglGetLeftBracePos(nm);
          var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
          var id = program.uniformIdCounter;
          program.uniformIdCounter += sz;
          uniformSizeAndIdsByName[arrayName] = [sz, id];
          for (j = 0; j < sz; ++j) {
            uniformLocsById[id] = j;
            program.uniformArrayNamesById[id++] = arrayName;
          }
        }
      }
    };
    Module["webglPrepareUniformLocationsBeforeFirstUse"] =
      webglPrepareUniformLocationsBeforeFirstUse;
    var _glGetUniformLocation = (program, name) => {
      name = UTF8ToString(name);
      if ((program = GL.programs[program])) {
        webglPrepareUniformLocationsBeforeFirstUse(program);
        var uniformLocsById = program.uniformLocsById;
        var arrayIndex = 0;
        var uniformBaseName = name;
        var leftBrace = webglGetLeftBracePos(name);
        if (leftBrace > 0) {
          arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0;
          uniformBaseName = name.slice(0, leftBrace);
        }
        var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName];
        if (sizeAndId && arrayIndex < sizeAndId[0]) {
          arrayIndex += sizeAndId[1];
          if (
            (uniformLocsById[arrayIndex] =
              uniformLocsById[arrayIndex] ||
              GLctx.getUniformLocation(program, name))
          ) {
            return arrayIndex;
          }
        }
      } else {
        GL.recordError(1281);
      }
      return -1;
    };
    Module["_glGetUniformLocation"] = _glGetUniformLocation;
    _glGetUniformLocation.sig = "iip";
    var _emscripten_glGetUniformLocation = _glGetUniformLocation;
    Module["_emscripten_glGetUniformLocation"] =
      _emscripten_glGetUniformLocation;
    var webglGetUniformLocation = (location) => {
      var p = GLctx.currentProgram;
      if (p) {
        var webglLoc = p.uniformLocsById[location];
        if (typeof webglLoc == "number") {
          p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(
            p,
            p.uniformArrayNamesById[location] +
              (webglLoc > 0 ? "[" + webglLoc + "]" : ""),
          );
        }
        return webglLoc;
      } else {
        GL.recordError(1282);
      }
    };
    Module["webglGetUniformLocation"] = webglGetUniformLocation;
    var emscriptenWebGLGetUniform = (program, location, params, type) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      program = GL.programs[program];
      webglPrepareUniformLocationsBeforeFirstUse(program);
      var data = GLctx.getUniform(program, webglGetUniformLocation(location));
      if (typeof data == "number" || typeof data == "boolean") {
        switch (type) {
          case 0:
            HEAP32[params >> 2] = data;
            break;
          case 2:
            HEAPF32[params >> 2] = data;
            break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0:
              HEAP32[(params + i * 4) >> 2] = data[i];
              break;
            case 2:
              HEAPF32[(params + i * 4) >> 2] = data[i];
              break;
          }
        }
      }
    };
    Module["emscriptenWebGLGetUniform"] = emscriptenWebGLGetUniform;
    var _glGetUniformfv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 2);
    };
    Module["_glGetUniformfv"] = _glGetUniformfv;
    _glGetUniformfv.sig = "viip";
    var _emscripten_glGetUniformfv = _glGetUniformfv;
    Module["_emscripten_glGetUniformfv"] = _emscripten_glGetUniformfv;
    var _glGetUniformiv = (program, location, params) => {
      emscriptenWebGLGetUniform(program, location, params, 0);
    };
    Module["_glGetUniformiv"] = _glGetUniformiv;
    _glGetUniformiv.sig = "viip";
    var _emscripten_glGetUniformiv = _glGetUniformiv;
    Module["_emscripten_glGetUniformiv"] = _emscripten_glGetUniformiv;
    var _glGetVertexAttribPointerv = (index, pname, pointer) => {
      if (!pointer) {
        GL.recordError(1281);
        return;
      }
      HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname);
    };
    Module["_glGetVertexAttribPointerv"] = _glGetVertexAttribPointerv;
    _glGetVertexAttribPointerv.sig = "viip";
    var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;
    Module["_emscripten_glGetVertexAttribPointerv"] =
      _emscripten_glGetVertexAttribPointerv;
    var emscriptenWebGLGetVertexAttrib = (index, pname, params, type) => {
      if (!params) {
        GL.recordError(1281);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 34975) {
        HEAP32[params >> 2] = data && data["name"];
      } else if (typeof data == "number" || typeof data == "boolean") {
        switch (type) {
          case 0:
            HEAP32[params >> 2] = data;
            break;
          case 2:
            HEAPF32[params >> 2] = data;
            break;
          case 5:
            HEAP32[params >> 2] = Math.fround(data);
            break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0:
              HEAP32[(params + i * 4) >> 2] = data[i];
              break;
            case 2:
              HEAPF32[(params + i * 4) >> 2] = data[i];
              break;
            case 5:
              HEAP32[(params + i * 4) >> 2] = Math.fround(data[i]);
              break;
          }
        }
      }
    };
    Module["emscriptenWebGLGetVertexAttrib"] = emscriptenWebGLGetVertexAttrib;
    var _glGetVertexAttribfv = (index, pname, params) => {
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    };
    Module["_glGetVertexAttribfv"] = _glGetVertexAttribfv;
    _glGetVertexAttribfv.sig = "viip";
    var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;
    Module["_emscripten_glGetVertexAttribfv"] = _emscripten_glGetVertexAttribfv;
    var _glGetVertexAttribiv = (index, pname, params) => {
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    };
    Module["_glGetVertexAttribiv"] = _glGetVertexAttribiv;
    _glGetVertexAttribiv.sig = "viip";
    var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;
    Module["_emscripten_glGetVertexAttribiv"] = _emscripten_glGetVertexAttribiv;
    function _glHint(x0, x1) {
      GLctx.hint(x0, x1);
    }
    Module["_glHint"] = _glHint;
    _glHint.sig = "vii";
    var _emscripten_glHint = _glHint;
    Module["_emscripten_glHint"] = _emscripten_glHint;
    var _glIsBuffer = (buffer) => {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    };
    Module["_glIsBuffer"] = _glIsBuffer;
    _glIsBuffer.sig = "ii";
    var _emscripten_glIsBuffer = _glIsBuffer;
    Module["_emscripten_glIsBuffer"] = _emscripten_glIsBuffer;
    function _glIsEnabled(x0) {
      return GLctx.isEnabled(x0);
    }
    Module["_glIsEnabled"] = _glIsEnabled;
    _glIsEnabled.sig = "ii";
    var _emscripten_glIsEnabled = _glIsEnabled;
    Module["_emscripten_glIsEnabled"] = _emscripten_glIsEnabled;
    var _glIsFramebuffer = (framebuffer) => {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    };
    Module["_glIsFramebuffer"] = _glIsFramebuffer;
    _glIsFramebuffer.sig = "ii";
    var _emscripten_glIsFramebuffer = _glIsFramebuffer;
    Module["_emscripten_glIsFramebuffer"] = _emscripten_glIsFramebuffer;
    var _glIsProgram = (program) => {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    };
    Module["_glIsProgram"] = _glIsProgram;
    _glIsProgram.sig = "ii";
    var _emscripten_glIsProgram = _glIsProgram;
    Module["_emscripten_glIsProgram"] = _emscripten_glIsProgram;
    var _glIsQueryEXT = (id) => {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt["isQueryEXT"](query);
    };
    Module["_glIsQueryEXT"] = _glIsQueryEXT;
    _glIsQueryEXT.sig = "ii";
    var _emscripten_glIsQueryEXT = _glIsQueryEXT;
    Module["_emscripten_glIsQueryEXT"] = _emscripten_glIsQueryEXT;
    var _glIsRenderbuffer = (renderbuffer) => {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    };
    Module["_glIsRenderbuffer"] = _glIsRenderbuffer;
    _glIsRenderbuffer.sig = "ii";
    var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;
    Module["_emscripten_glIsRenderbuffer"] = _emscripten_glIsRenderbuffer;
    var _glIsShader = (shader) => {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    };
    Module["_glIsShader"] = _glIsShader;
    _glIsShader.sig = "ii";
    var _emscripten_glIsShader = _glIsShader;
    Module["_emscripten_glIsShader"] = _emscripten_glIsShader;
    var _glIsTexture = (id) => {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    };
    Module["_glIsTexture"] = _glIsTexture;
    _glIsTexture.sig = "ii";
    var _emscripten_glIsTexture = _glIsTexture;
    Module["_emscripten_glIsTexture"] = _emscripten_glIsTexture;
    var _glIsVertexArray = (array) => {
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx.isVertexArray(vao);
    };
    Module["_glIsVertexArray"] = _glIsVertexArray;
    _glIsVertexArray.sig = "ii";
    var _glIsVertexArrayOES = _glIsVertexArray;
    Module["_glIsVertexArrayOES"] = _glIsVertexArrayOES;
    _glIsVertexArrayOES.sig = "ii";
    var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;
    Module["_emscripten_glIsVertexArrayOES"] = _emscripten_glIsVertexArrayOES;
    function _glLineWidth(x0) {
      GLctx.lineWidth(x0);
    }
    Module["_glLineWidth"] = _glLineWidth;
    _glLineWidth.sig = "vf";
    var _emscripten_glLineWidth = _glLineWidth;
    Module["_emscripten_glLineWidth"] = _emscripten_glLineWidth;
    var _glLinkProgram = (program) => {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      program.uniformLocsById = 0;
      program.uniformSizeAndIdsByName = {};
    };
    Module["_glLinkProgram"] = _glLinkProgram;
    _glLinkProgram.sig = "vi";
    var _emscripten_glLinkProgram = _glLinkProgram;
    Module["_emscripten_glLinkProgram"] = _emscripten_glLinkProgram;
    var _glPixelStorei = (pname, param) => {
      if (pname == 3317) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    };
    Module["_glPixelStorei"] = _glPixelStorei;
    _glPixelStorei.sig = "vii";
    var _emscripten_glPixelStorei = _glPixelStorei;
    Module["_emscripten_glPixelStorei"] = _emscripten_glPixelStorei;
    function _glPolygonOffset(x0, x1) {
      GLctx.polygonOffset(x0, x1);
    }
    Module["_glPolygonOffset"] = _glPolygonOffset;
    _glPolygonOffset.sig = "vff";
    var _emscripten_glPolygonOffset = _glPolygonOffset;
    Module["_emscripten_glPolygonOffset"] = _emscripten_glPolygonOffset;
    var _glQueryCounterEXT = (id, target) => {
      GLctx.disjointTimerQueryExt["queryCounterEXT"](GL.queries[id], target);
    };
    Module["_glQueryCounterEXT"] = _glQueryCounterEXT;
    _glQueryCounterEXT.sig = "vii";
    var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;
    Module["_emscripten_glQueryCounterEXT"] = _emscripten_glQueryCounterEXT;
    var computeUnpackAlignedImageSize = (
      width,
      height,
      sizePerPixel,
      alignment,
    ) => {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    };
    Module["computeUnpackAlignedImageSize"] = computeUnpackAlignedImageSize;
    var colorChannelsInGlTextureFormat = (format) => {
      var colorChannels = { 5: 3, 6: 4, 8: 2, 29502: 3, 29504: 4 };
      return colorChannels[format - 6402] || 1;
    };
    Module["colorChannelsInGlTextureFormat"] = colorChannelsInGlTextureFormat;
    var heapObjectForWebGLType = (type) => {
      type -= 5120;
      if (type == 1) return HEAPU8;
      if (type == 4) return HEAP32;
      if (type == 6) return HEAPF32;
      if (type == 5 || type == 28922) return HEAPU32;
      return HEAPU16;
    };
    Module["heapObjectForWebGLType"] = heapObjectForWebGLType;
    var heapAccessShiftForWebGLHeap = (heap) =>
      31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    Module["heapAccessShiftForWebGLHeap"] = heapAccessShiftForWebGLHeap;
    var emscriptenWebGLGetTexPixelData = (
      type,
      format,
      width,
      height,
      pixels,
      internalFormat,
    ) => {
      var heap = heapObjectForWebGLType(type);
      var shift = heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1 << shift;
      var sizePerPixel = colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = computeUnpackAlignedImageSize(
        width,
        height,
        sizePerPixel,
        GL.unpackAlignment,
      );
      return heap.subarray(pixels >> shift, (pixels + bytes) >> shift);
    };
    Module["emscriptenWebGLGetTexPixelData"] = emscriptenWebGLGetTexPixelData;
    var _glReadPixels = (x, y, width, height, format, type, pixels) => {
      var pixelData = emscriptenWebGLGetTexPixelData(
        type,
        format,
        width,
        height,
        pixels,
        format,
      );
      if (!pixelData) {
        GL.recordError(1280);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    };
    Module["_glReadPixels"] = _glReadPixels;
    _glReadPixels.sig = "viiiiiip";
    var _emscripten_glReadPixels = _glReadPixels;
    Module["_emscripten_glReadPixels"] = _emscripten_glReadPixels;
    var _glReleaseShaderCompiler = () => {};
    Module["_glReleaseShaderCompiler"] = _glReleaseShaderCompiler;
    _glReleaseShaderCompiler.sig = "v";
    var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;
    Module["_emscripten_glReleaseShaderCompiler"] =
      _emscripten_glReleaseShaderCompiler;
    function _glRenderbufferStorage(x0, x1, x2, x3) {
      GLctx.renderbufferStorage(x0, x1, x2, x3);
    }
    Module["_glRenderbufferStorage"] = _glRenderbufferStorage;
    _glRenderbufferStorage.sig = "viiii";
    var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;
    Module["_emscripten_glRenderbufferStorage"] =
      _emscripten_glRenderbufferStorage;
    var _glSampleCoverage = (value, invert) => {
      GLctx.sampleCoverage(value, !!invert);
    };
    Module["_glSampleCoverage"] = _glSampleCoverage;
    _glSampleCoverage.sig = "vfi";
    var _emscripten_glSampleCoverage = _glSampleCoverage;
    Module["_emscripten_glSampleCoverage"] = _emscripten_glSampleCoverage;
    function _glScissor(x0, x1, x2, x3) {
      GLctx.scissor(x0, x1, x2, x3);
    }
    Module["_glScissor"] = _glScissor;
    _glScissor.sig = "viiii";
    var _emscripten_glScissor = _glScissor;
    Module["_emscripten_glScissor"] = _emscripten_glScissor;
    var _glShaderBinary = (count, shaders, binaryformat, binary, length) => {
      GL.recordError(1280);
    };
    Module["_glShaderBinary"] = _glShaderBinary;
    _glShaderBinary.sig = "vipipi";
    var _emscripten_glShaderBinary = _glShaderBinary;
    Module["_emscripten_glShaderBinary"] = _emscripten_glShaderBinary;
    var _glShaderSource = (shader, count, string, length) => {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    };
    Module["_glShaderSource"] = _glShaderSource;
    _glShaderSource.sig = "viipp";
    var _emscripten_glShaderSource = _glShaderSource;
    Module["_emscripten_glShaderSource"] = _emscripten_glShaderSource;
    function _glStencilFunc(x0, x1, x2) {
      GLctx.stencilFunc(x0, x1, x2);
    }
    Module["_glStencilFunc"] = _glStencilFunc;
    _glStencilFunc.sig = "viii";
    var _emscripten_glStencilFunc = _glStencilFunc;
    Module["_emscripten_glStencilFunc"] = _emscripten_glStencilFunc;
    function _glStencilFuncSeparate(x0, x1, x2, x3) {
      GLctx.stencilFuncSeparate(x0, x1, x2, x3);
    }
    Module["_glStencilFuncSeparate"] = _glStencilFuncSeparate;
    _glStencilFuncSeparate.sig = "viiii";
    var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;
    Module["_emscripten_glStencilFuncSeparate"] =
      _emscripten_glStencilFuncSeparate;
    function _glStencilMask(x0) {
      GLctx.stencilMask(x0);
    }
    Module["_glStencilMask"] = _glStencilMask;
    _glStencilMask.sig = "vi";
    var _emscripten_glStencilMask = _glStencilMask;
    Module["_emscripten_glStencilMask"] = _emscripten_glStencilMask;
    function _glStencilMaskSeparate(x0, x1) {
      GLctx.stencilMaskSeparate(x0, x1);
    }
    Module["_glStencilMaskSeparate"] = _glStencilMaskSeparate;
    _glStencilMaskSeparate.sig = "vii";
    var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;
    Module["_emscripten_glStencilMaskSeparate"] =
      _emscripten_glStencilMaskSeparate;
    function _glStencilOp(x0, x1, x2) {
      GLctx.stencilOp(x0, x1, x2);
    }
    Module["_glStencilOp"] = _glStencilOp;
    _glStencilOp.sig = "viii";
    var _emscripten_glStencilOp = _glStencilOp;
    Module["_emscripten_glStencilOp"] = _emscripten_glStencilOp;
    function _glStencilOpSeparate(x0, x1, x2, x3) {
      GLctx.stencilOpSeparate(x0, x1, x2, x3);
    }
    Module["_glStencilOpSeparate"] = _glStencilOpSeparate;
    _glStencilOpSeparate.sig = "viiii";
    var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;
    Module["_emscripten_glStencilOpSeparate"] = _emscripten_glStencilOpSeparate;
    var _glTexImage2D = (
      target,
      level,
      internalFormat,
      width,
      height,
      border,
      format,
      type,
      pixels,
    ) => {
      GLctx.texImage2D(
        target,
        level,
        internalFormat,
        width,
        height,
        border,
        format,
        type,
        pixels
          ? emscriptenWebGLGetTexPixelData(
              type,
              format,
              width,
              height,
              pixels,
              internalFormat,
            )
          : null,
      );
    };
    Module["_glTexImage2D"] = _glTexImage2D;
    _glTexImage2D.sig = "viiiiiiiip";
    var _emscripten_glTexImage2D = _glTexImage2D;
    Module["_emscripten_glTexImage2D"] = _emscripten_glTexImage2D;
    function _glTexParameterf(x0, x1, x2) {
      GLctx.texParameterf(x0, x1, x2);
    }
    Module["_glTexParameterf"] = _glTexParameterf;
    _glTexParameterf.sig = "viif";
    var _emscripten_glTexParameterf = _glTexParameterf;
    Module["_emscripten_glTexParameterf"] = _emscripten_glTexParameterf;
    var _glTexParameterfv = (target, pname, params) => {
      var param = HEAPF32[params >> 2];
      GLctx.texParameterf(target, pname, param);
    };
    Module["_glTexParameterfv"] = _glTexParameterfv;
    _glTexParameterfv.sig = "viip";
    var _emscripten_glTexParameterfv = _glTexParameterfv;
    Module["_emscripten_glTexParameterfv"] = _emscripten_glTexParameterfv;
    function _glTexParameteri(x0, x1, x2) {
      GLctx.texParameteri(x0, x1, x2);
    }
    Module["_glTexParameteri"] = _glTexParameteri;
    _glTexParameteri.sig = "viii";
    var _emscripten_glTexParameteri = _glTexParameteri;
    Module["_emscripten_glTexParameteri"] = _emscripten_glTexParameteri;
    var _glTexParameteriv = (target, pname, params) => {
      var param = HEAP32[params >> 2];
      GLctx.texParameteri(target, pname, param);
    };
    Module["_glTexParameteriv"] = _glTexParameteriv;
    _glTexParameteriv.sig = "viip";
    var _emscripten_glTexParameteriv = _glTexParameteriv;
    Module["_emscripten_glTexParameteriv"] = _emscripten_glTexParameteriv;
    var _glTexSubImage2D = (
      target,
      level,
      xoffset,
      yoffset,
      width,
      height,
      format,
      type,
      pixels,
    ) => {
      var pixelData = null;
      if (pixels)
        pixelData = emscriptenWebGLGetTexPixelData(
          type,
          format,
          width,
          height,
          pixels,
          0,
        );
      GLctx.texSubImage2D(
        target,
        level,
        xoffset,
        yoffset,
        width,
        height,
        format,
        type,
        pixelData,
      );
    };
    Module["_glTexSubImage2D"] = _glTexSubImage2D;
    _glTexSubImage2D.sig = "viiiiiiiip";
    var _emscripten_glTexSubImage2D = _glTexSubImage2D;
    Module["_emscripten_glTexSubImage2D"] = _emscripten_glTexSubImage2D;
    var _glUniform1f = (location, v0) => {
      GLctx.uniform1f(webglGetUniformLocation(location), v0);
    };
    Module["_glUniform1f"] = _glUniform1f;
    _glUniform1f.sig = "vif";
    var _emscripten_glUniform1f = _glUniform1f;
    Module["_emscripten_glUniform1f"] = _emscripten_glUniform1f;
    var miniTempWebGLFloatBuffers = [];
    Module["miniTempWebGLFloatBuffers"] = miniTempWebGLFloatBuffers;
    var _glUniform1fv = (location, count, value) => {
      if (count <= 288) {
        var view = miniTempWebGLFloatBuffers[count - 1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(value + 4 * i) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 4) >> 2);
      }
      GLctx.uniform1fv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform1fv"] = _glUniform1fv;
    _glUniform1fv.sig = "viip";
    var _emscripten_glUniform1fv = _glUniform1fv;
    Module["_emscripten_glUniform1fv"] = _emscripten_glUniform1fv;
    var _glUniform1i = (location, v0) => {
      GLctx.uniform1i(webglGetUniformLocation(location), v0);
    };
    Module["_glUniform1i"] = _glUniform1i;
    _glUniform1i.sig = "vii";
    var _emscripten_glUniform1i = _glUniform1i;
    Module["_emscripten_glUniform1i"] = _emscripten_glUniform1i;
    var miniTempWebGLIntBuffers = [];
    Module["miniTempWebGLIntBuffers"] = miniTempWebGLIntBuffers;
    var _glUniform1iv = (location, count, value) => {
      if (count <= 288) {
        var view = miniTempWebGLIntBuffers[count - 1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[(value + 4 * i) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, (value + count * 4) >> 2);
      }
      GLctx.uniform1iv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform1iv"] = _glUniform1iv;
    _glUniform1iv.sig = "viip";
    var _emscripten_glUniform1iv = _glUniform1iv;
    Module["_emscripten_glUniform1iv"] = _emscripten_glUniform1iv;
    var _glUniform2f = (location, v0, v1) => {
      GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
    };
    Module["_glUniform2f"] = _glUniform2f;
    _glUniform2f.sig = "viff";
    var _emscripten_glUniform2f = _glUniform2f;
    Module["_emscripten_glUniform2f"] = _emscripten_glUniform2f;
    var _glUniform2fv = (location, count, value) => {
      if (count <= 144) {
        var view = miniTempWebGLFloatBuffers[2 * count - 1];
        for (var i = 0; i < 2 * count; i += 2) {
          view[i] = HEAPF32[(value + 4 * i) >> 2];
          view[i + 1] = HEAPF32[(value + (4 * i + 4)) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 8) >> 2);
      }
      GLctx.uniform2fv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform2fv"] = _glUniform2fv;
    _glUniform2fv.sig = "viip";
    var _emscripten_glUniform2fv = _glUniform2fv;
    Module["_emscripten_glUniform2fv"] = _emscripten_glUniform2fv;
    var _glUniform2i = (location, v0, v1) => {
      GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
    };
    Module["_glUniform2i"] = _glUniform2i;
    _glUniform2i.sig = "viii";
    var _emscripten_glUniform2i = _glUniform2i;
    Module["_emscripten_glUniform2i"] = _emscripten_glUniform2i;
    var _glUniform2iv = (location, count, value) => {
      if (count <= 144) {
        var view = miniTempWebGLIntBuffers[2 * count - 1];
        for (var i = 0; i < 2 * count; i += 2) {
          view[i] = HEAP32[(value + 4 * i) >> 2];
          view[i + 1] = HEAP32[(value + (4 * i + 4)) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, (value + count * 8) >> 2);
      }
      GLctx.uniform2iv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform2iv"] = _glUniform2iv;
    _glUniform2iv.sig = "viip";
    var _emscripten_glUniform2iv = _glUniform2iv;
    Module["_emscripten_glUniform2iv"] = _emscripten_glUniform2iv;
    var _glUniform3f = (location, v0, v1, v2) => {
      GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
    };
    Module["_glUniform3f"] = _glUniform3f;
    _glUniform3f.sig = "vifff";
    var _emscripten_glUniform3f = _glUniform3f;
    Module["_emscripten_glUniform3f"] = _emscripten_glUniform3f;
    var _glUniform3fv = (location, count, value) => {
      if (count <= 96) {
        var view = miniTempWebGLFloatBuffers[3 * count - 1];
        for (var i = 0; i < 3 * count; i += 3) {
          view[i] = HEAPF32[(value + 4 * i) >> 2];
          view[i + 1] = HEAPF32[(value + (4 * i + 4)) >> 2];
          view[i + 2] = HEAPF32[(value + (4 * i + 8)) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 12) >> 2);
      }
      GLctx.uniform3fv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform3fv"] = _glUniform3fv;
    _glUniform3fv.sig = "viip";
    var _emscripten_glUniform3fv = _glUniform3fv;
    Module["_emscripten_glUniform3fv"] = _emscripten_glUniform3fv;
    var _glUniform3i = (location, v0, v1, v2) => {
      GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
    };
    Module["_glUniform3i"] = _glUniform3i;
    _glUniform3i.sig = "viiii";
    var _emscripten_glUniform3i = _glUniform3i;
    Module["_emscripten_glUniform3i"] = _emscripten_glUniform3i;
    var _glUniform3iv = (location, count, value) => {
      if (count <= 96) {
        var view = miniTempWebGLIntBuffers[3 * count - 1];
        for (var i = 0; i < 3 * count; i += 3) {
          view[i] = HEAP32[(value + 4 * i) >> 2];
          view[i + 1] = HEAP32[(value + (4 * i + 4)) >> 2];
          view[i + 2] = HEAP32[(value + (4 * i + 8)) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, (value + count * 12) >> 2);
      }
      GLctx.uniform3iv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform3iv"] = _glUniform3iv;
    _glUniform3iv.sig = "viip";
    var _emscripten_glUniform3iv = _glUniform3iv;
    Module["_emscripten_glUniform3iv"] = _emscripten_glUniform3iv;
    var _glUniform4f = (location, v0, v1, v2, v3) => {
      GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
    Module["_glUniform4f"] = _glUniform4f;
    _glUniform4f.sig = "viffff";
    var _emscripten_glUniform4f = _glUniform4f;
    Module["_emscripten_glUniform4f"] = _emscripten_glUniform4f;
    var _glUniform4fv = (location, count, value) => {
      if (count <= 72) {
        var view = miniTempWebGLFloatBuffers[4 * count - 1];
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 4 * count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 16) >> 2);
      }
      GLctx.uniform4fv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform4fv"] = _glUniform4fv;
    _glUniform4fv.sig = "viip";
    var _emscripten_glUniform4fv = _glUniform4fv;
    Module["_emscripten_glUniform4fv"] = _emscripten_glUniform4fv;
    var _glUniform4i = (location, v0, v1, v2, v3) => {
      GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
    };
    Module["_glUniform4i"] = _glUniform4i;
    _glUniform4i.sig = "viiiii";
    var _emscripten_glUniform4i = _glUniform4i;
    Module["_emscripten_glUniform4i"] = _emscripten_glUniform4i;
    var _glUniform4iv = (location, count, value) => {
      if (count <= 72) {
        var view = miniTempWebGLIntBuffers[4 * count - 1];
        for (var i = 0; i < 4 * count; i += 4) {
          view[i] = HEAP32[(value + 4 * i) >> 2];
          view[i + 1] = HEAP32[(value + (4 * i + 4)) >> 2];
          view[i + 2] = HEAP32[(value + (4 * i + 8)) >> 2];
          view[i + 3] = HEAP32[(value + (4 * i + 12)) >> 2];
        }
      } else {
        var view = HEAP32.subarray(value >> 2, (value + count * 16) >> 2);
      }
      GLctx.uniform4iv(webglGetUniformLocation(location), view);
    };
    Module["_glUniform4iv"] = _glUniform4iv;
    _glUniform4iv.sig = "viip";
    var _emscripten_glUniform4iv = _glUniform4iv;
    Module["_emscripten_glUniform4iv"] = _emscripten_glUniform4iv;
    var _glUniformMatrix2fv = (location, count, transpose, value) => {
      if (count <= 72) {
        var view = miniTempWebGLFloatBuffers[4 * count - 1];
        for (var i = 0; i < 4 * count; i += 4) {
          view[i] = HEAPF32[(value + 4 * i) >> 2];
          view[i + 1] = HEAPF32[(value + (4 * i + 4)) >> 2];
          view[i + 2] = HEAPF32[(value + (4 * i + 8)) >> 2];
          view[i + 3] = HEAPF32[(value + (4 * i + 12)) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 16) >> 2);
      }
      GLctx.uniformMatrix2fv(
        webglGetUniformLocation(location),
        !!transpose,
        view,
      );
    };
    Module["_glUniformMatrix2fv"] = _glUniformMatrix2fv;
    _glUniformMatrix2fv.sig = "viiip";
    var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;
    Module["_emscripten_glUniformMatrix2fv"] = _emscripten_glUniformMatrix2fv;
    var _glUniformMatrix3fv = (location, count, transpose, value) => {
      if (count <= 32) {
        var view = miniTempWebGLFloatBuffers[9 * count - 1];
        for (var i = 0; i < 9 * count; i += 9) {
          view[i] = HEAPF32[(value + 4 * i) >> 2];
          view[i + 1] = HEAPF32[(value + (4 * i + 4)) >> 2];
          view[i + 2] = HEAPF32[(value + (4 * i + 8)) >> 2];
          view[i + 3] = HEAPF32[(value + (4 * i + 12)) >> 2];
          view[i + 4] = HEAPF32[(value + (4 * i + 16)) >> 2];
          view[i + 5] = HEAPF32[(value + (4 * i + 20)) >> 2];
          view[i + 6] = HEAPF32[(value + (4 * i + 24)) >> 2];
          view[i + 7] = HEAPF32[(value + (4 * i + 28)) >> 2];
          view[i + 8] = HEAPF32[(value + (4 * i + 32)) >> 2];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 36) >> 2);
      }
      GLctx.uniformMatrix3fv(
        webglGetUniformLocation(location),
        !!transpose,
        view,
      );
    };
    Module["_glUniformMatrix3fv"] = _glUniformMatrix3fv;
    _glUniformMatrix3fv.sig = "viiip";
    var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;
    Module["_emscripten_glUniformMatrix3fv"] = _emscripten_glUniformMatrix3fv;
    var _glUniformMatrix4fv = (location, count, transpose, value) => {
      if (count <= 18) {
        var view = miniTempWebGLFloatBuffers[16 * count - 1];
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else {
        var view = HEAPF32.subarray(value >> 2, (value + count * 64) >> 2);
      }
      GLctx.uniformMatrix4fv(
        webglGetUniformLocation(location),
        !!transpose,
        view,
      );
    };
    Module["_glUniformMatrix4fv"] = _glUniformMatrix4fv;
    _glUniformMatrix4fv.sig = "viiip";
    var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;
    Module["_emscripten_glUniformMatrix4fv"] = _emscripten_glUniformMatrix4fv;
    var _glUseProgram = (program) => {
      program = GL.programs[program];
      GLctx.useProgram(program);
      GLctx.currentProgram = program;
    };
    Module["_glUseProgram"] = _glUseProgram;
    _glUseProgram.sig = "vi";
    var _emscripten_glUseProgram = _glUseProgram;
    Module["_emscripten_glUseProgram"] = _emscripten_glUseProgram;
    var _glValidateProgram = (program) => {
      GLctx.validateProgram(GL.programs[program]);
    };
    Module["_glValidateProgram"] = _glValidateProgram;
    _glValidateProgram.sig = "vi";
    var _emscripten_glValidateProgram = _glValidateProgram;
    Module["_emscripten_glValidateProgram"] = _emscripten_glValidateProgram;
    function _glVertexAttrib1f(x0, x1) {
      GLctx.vertexAttrib1f(x0, x1);
    }
    Module["_glVertexAttrib1f"] = _glVertexAttrib1f;
    _glVertexAttrib1f.sig = "vif";
    var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;
    Module["_emscripten_glVertexAttrib1f"] = _emscripten_glVertexAttrib1f;
    var _glVertexAttrib1fv = (index, v) => {
      GLctx.vertexAttrib1f(index, HEAPF32[v >> 2]);
    };
    Module["_glVertexAttrib1fv"] = _glVertexAttrib1fv;
    _glVertexAttrib1fv.sig = "vip";
    var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;
    Module["_emscripten_glVertexAttrib1fv"] = _emscripten_glVertexAttrib1fv;
    function _glVertexAttrib2f(x0, x1, x2) {
      GLctx.vertexAttrib2f(x0, x1, x2);
    }
    Module["_glVertexAttrib2f"] = _glVertexAttrib2f;
    _glVertexAttrib2f.sig = "viff";
    var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;
    Module["_emscripten_glVertexAttrib2f"] = _emscripten_glVertexAttrib2f;
    var _glVertexAttrib2fv = (index, v) => {
      GLctx.vertexAttrib2f(index, HEAPF32[v >> 2], HEAPF32[(v + 4) >> 2]);
    };
    Module["_glVertexAttrib2fv"] = _glVertexAttrib2fv;
    _glVertexAttrib2fv.sig = "vip";
    var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;
    Module["_emscripten_glVertexAttrib2fv"] = _emscripten_glVertexAttrib2fv;
    function _glVertexAttrib3f(x0, x1, x2, x3) {
      GLctx.vertexAttrib3f(x0, x1, x2, x3);
    }
    Module["_glVertexAttrib3f"] = _glVertexAttrib3f;
    _glVertexAttrib3f.sig = "vifff";
    var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;
    Module["_emscripten_glVertexAttrib3f"] = _emscripten_glVertexAttrib3f;
    var _glVertexAttrib3fv = (index, v) => {
      GLctx.vertexAttrib3f(
        index,
        HEAPF32[v >> 2],
        HEAPF32[(v + 4) >> 2],
        HEAPF32[(v + 8) >> 2],
      );
    };
    Module["_glVertexAttrib3fv"] = _glVertexAttrib3fv;
    _glVertexAttrib3fv.sig = "vip";
    var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;
    Module["_emscripten_glVertexAttrib3fv"] = _emscripten_glVertexAttrib3fv;
    function _glVertexAttrib4f(x0, x1, x2, x3, x4) {
      GLctx.vertexAttrib4f(x0, x1, x2, x3, x4);
    }
    Module["_glVertexAttrib4f"] = _glVertexAttrib4f;
    _glVertexAttrib4f.sig = "viffff";
    var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;
    Module["_emscripten_glVertexAttrib4f"] = _emscripten_glVertexAttrib4f;
    var _glVertexAttrib4fv = (index, v) => {
      GLctx.vertexAttrib4f(
        index,
        HEAPF32[v >> 2],
        HEAPF32[(v + 4) >> 2],
        HEAPF32[(v + 8) >> 2],
        HEAPF32[(v + 12) >> 2],
      );
    };
    Module["_glVertexAttrib4fv"] = _glVertexAttrib4fv;
    _glVertexAttrib4fv.sig = "vip";
    var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;
    Module["_emscripten_glVertexAttrib4fv"] = _emscripten_glVertexAttrib4fv;
    var _glVertexAttribDivisor = (index, divisor) => {
      GLctx.vertexAttribDivisor(index, divisor);
    };
    Module["_glVertexAttribDivisor"] = _glVertexAttribDivisor;
    _glVertexAttribDivisor.sig = "vii";
    var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;
    Module["_glVertexAttribDivisorANGLE"] = _glVertexAttribDivisorANGLE;
    var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;
    Module["_emscripten_glVertexAttribDivisorANGLE"] =
      _emscripten_glVertexAttribDivisorANGLE;
    var _glVertexAttribPointer = (
      index,
      size,
      type,
      normalized,
      stride,
      ptr,
    ) => {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    };
    Module["_glVertexAttribPointer"] = _glVertexAttribPointer;
    _glVertexAttribPointer.sig = "viiiiip";
    var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;
    Module["_emscripten_glVertexAttribPointer"] =
      _emscripten_glVertexAttribPointer;
    function _glViewport(x0, x1, x2, x3) {
      GLctx.viewport(x0, x1, x2, x3);
    }
    Module["_glViewport"] = _glViewport;
    _glViewport.sig = "viiii";
    var _emscripten_glViewport = _glViewport;
    Module["_emscripten_glViewport"] = _emscripten_glViewport;
    var _emscripten_memcpy_js = (dest, src, num) =>
      HEAPU8.copyWithin(dest, src, src + num);
    Module["_emscripten_memcpy_js"] = _emscripten_memcpy_js;
    _emscripten_memcpy_js.sig = "vppp";
    var _emscripten_out = (str) => out(UTF8ToString(str));
    Module["_emscripten_out"] = _emscripten_out;
    _emscripten_out.sig = "vp";
    function handleAllocatorInit() {
      Object.assign(HandleAllocator.prototype, {
        get(id) {
          return this.allocated[id];
        },
        has(id) {
          return this.allocated[id] !== undefined;
        },
        allocate(handle) {
          var id = this.freelist.pop() || this.allocated.length;
          this.allocated[id] = handle;
          return id;
        },
        free(id) {
          this.allocated[id] = undefined;
          this.freelist.push(id);
        },
      });
    }
    Module["handleAllocatorInit"] = handleAllocatorInit;
    function HandleAllocator() {
      this.allocated = [undefined];
      this.freelist = [];
    }
    Module["HandleAllocator"] = HandleAllocator;
    var promiseMap = new HandleAllocator();
    Module["promiseMap"] = promiseMap;
    var makePromise = () => {
      var promiseInfo = {};
      promiseInfo.promise = new Promise((resolve, reject) => {
        promiseInfo.reject = reject;
        promiseInfo.resolve = resolve;
      });
      promiseInfo.id = promiseMap.allocate(promiseInfo);
      return promiseInfo;
    };
    Module["makePromise"] = makePromise;
    var _emscripten_promise_create = () => makePromise().id;
    Module["_emscripten_promise_create"] = _emscripten_promise_create;
    _emscripten_promise_create.sig = "p";
    var _emscripten_promise_destroy = (id) => {
      promiseMap.free(id);
    };
    Module["_emscripten_promise_destroy"] = _emscripten_promise_destroy;
    _emscripten_promise_destroy.sig = "vp";
    var getPromise = (id) => promiseMap.get(id).promise;
    Module["getPromise"] = getPromise;
    var _emscripten_promise_resolve = (id, result, value) => {
      var info = promiseMap.get(id);
      switch (result) {
        case 0:
          info.resolve(value);
          return;
        case 1:
          info.resolve(getPromise(value));
          return;
        case 2:
          info.resolve(getPromise(value));
          _emscripten_promise_destroy(value);
          return;
        case 3:
          info.reject(value);
          return;
      }
    };
    Module["_emscripten_promise_resolve"] = _emscripten_promise_resolve;
    _emscripten_promise_resolve.sig = "vpip";
    var growMemory = (size) => {
      var b = wasmMemory.buffer;
      var pages = (size - b.byteLength + 65535) / 65536;
      try {
        wasmMemory.grow(pages);
        updateMemoryViews();
        return 1;
      } catch (e) {}
    };
    Module["growMemory"] = growMemory;
    var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      requestedSize >>>= 0;
      var maxHeapSize = getHeapMax();
      if (requestedSize > maxHeapSize) {
        return false;
      }
      var alignUp = (x, multiple) =>
        x + ((multiple - (x % multiple)) % multiple);
      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
        overGrownHeapSize = Math.min(
          overGrownHeapSize,
          requestedSize + 100663296,
        );
        var newSize = Math.min(
          maxHeapSize,
          alignUp(Math.max(requestedSize, overGrownHeapSize), 65536),
        );
        var replacement = growMemory(newSize);
        if (replacement) {
          return true;
        }
      }
      return false;
    };
    Module["_emscripten_resize_heap"] = _emscripten_resize_heap;
    _emscripten_resize_heap.sig = "ip";
    var getExecutableName = () => thisProgram || "./this.program";
    Module["getExecutableName"] = getExecutableName;
    var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        var lang =
          (
            (typeof navigator == "object" &&
              navigator.languages &&
              navigator.languages[0]) ||
            "C"
          ).replace("-", "_") + ".UTF-8";
        var env = {
          USER: "web_user",
          LOGNAME: "web_user",
          PATH: "/",
          PWD: "/",
          HOME: "/home/web_user",
          LANG: lang,
          _: getExecutableName(),
        };
        for (var x in ENV) {
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
    Module["getEnvStrings"] = getEnvStrings;
    var stringToAscii = (str, buffer) => {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
      }
      HEAP8[buffer >> 0] = 0;
    };
    Module["stringToAscii"] = stringToAscii;
    var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      getEnvStrings().forEach((string, i) => {
        var ptr = environ_buf + bufSize;
        HEAPU32[(__environ + i * 4) >> 2] = ptr;
        stringToAscii(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    };
    Module["_environ_get"] = _environ_get;
    _environ_get.sig = "ipp";
    var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[penviron_count >> 2] = strings.length;
      var bufSize = 0;
      strings.forEach((string) => (bufSize += string.length + 1));
      HEAPU32[penviron_buf_size >> 2] = bufSize;
      return 0;
    };
    Module["_environ_sizes_get"] = _environ_sizes_get;
    _environ_sizes_get.sig = "ipp";
    function _fd_close(fd) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.close(stream);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_close"] = _fd_close;
    _fd_close.sig = "ii";
    function _fd_fdstat_get(fd, pbuf) {
      try {
        var rightsBase = 0;
        var rightsInheriting = 0;
        var flags = 0;
        {
          var stream = SYSCALLS.getStreamFromFD(fd);
          var type = stream.tty
            ? 2
            : FS.isDir(stream.mode)
              ? 3
              : FS.isLink(stream.mode)
                ? 7
                : 4;
        }
        HEAP8[pbuf >> 0] = type;
        HEAP16[(pbuf + 2) >> 1] = flags;
        HEAP64[(pbuf + 8) >> 3] = BigInt(rightsBase);
        HEAP64[(pbuf + 16) >> 3] = BigInt(rightsInheriting);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_fdstat_get"] = _fd_fdstat_get;
    _fd_fdstat_get.sig = "iip";
    var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[iov >> 2];
        var len = HEAPU32[(iov + 4) >> 2];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break;
        if (typeof offset !== "undefined") {
          offset += curr;
        }
      }
      return ret;
    };
    Module["doReadv"] = doReadv;
    function _fd_pread(fd, iov, iovcnt, offset, pnum) {
      offset = bigintToI53Checked(offset);
      try {
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = doReadv(stream, iov, iovcnt, offset);
        HEAPU32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_pread"] = _fd_pread;
    _fd_pread.sig = "iippjp";
    var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[iov >> 2];
        var len = HEAPU32[(iov + 4) >> 2];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (typeof offset !== "undefined") {
          offset += curr;
        }
      }
      return ret;
    };
    Module["doWritev"] = doWritev;
    function _fd_pwrite(fd, iov, iovcnt, offset, pnum) {
      offset = bigintToI53Checked(offset);
      try {
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = doWritev(stream, iov, iovcnt, offset);
        HEAPU32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_pwrite"] = _fd_pwrite;
    _fd_pwrite.sig = "iippjp";
    function _fd_read(fd, iov, iovcnt, pnum) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = doReadv(stream, iov, iovcnt);
        HEAPU32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_read"] = _fd_read;
    _fd_read.sig = "iippp";
    function _fd_seek(fd, offset, whence, newOffset) {
      offset = bigintToI53Checked(offset);
      try {
        if (isNaN(offset)) return 61;
        var stream = SYSCALLS.getStreamFromFD(fd);
        FS.llseek(stream, offset, whence);
        HEAP64[newOffset >> 3] = BigInt(stream.position);
        if (stream.getdents && offset === 0 && whence === 0)
          stream.getdents = null;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_seek"] = _fd_seek;
    _fd_seek.sig = "iijip";
    function _fd_sync(fd) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        if (stream.stream_ops && stream.stream_ops.fsync) {
          return stream.stream_ops.fsync(stream);
        }
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_sync"] = _fd_sync;
    _fd_sync.sig = "ii";
    function _fd_write(fd, iov, iovcnt, pnum) {
      try {
        var stream = SYSCALLS.getStreamFromFD(fd);
        var num = doWritev(stream, iov, iovcnt);
        HEAPU32[pnum >> 2] = num;
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_fd_write"] = _fd_write;
    _fd_write.sig = "iippp";
    var _getaddrinfo = (node, service, hint, out) => {
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var errno;
        salen = family === 10 ? 28 : 16;
        addr = family === 10 ? inetNtop6(addr) : inetNtop4(addr);
        sa = _malloc(salen);
        errno = writeSockaddr(sa, family, addr, port);
        assert(!errno);
        ai = _malloc(32);
        HEAP32[(ai + 4) >> 2] = family;
        HEAP32[(ai + 8) >> 2] = type;
        HEAP32[(ai + 12) >> 2] = proto;
        HEAPU32[(ai + 24) >> 2] = canon;
        HEAPU32[(ai + 20) >> 2] = sa;
        if (family === 10) {
          HEAP32[(ai + 16) >> 2] = 28;
        } else {
          HEAP32[(ai + 16) >> 2] = 16;
        }
        HEAP32[(ai + 28) >> 2] = 0;
        return ai;
      }
      if (hint) {
        flags = HEAP32[hint >> 2];
        family = HEAP32[(hint + 4) >> 2];
        type = HEAP32[(hint + 8) >> 2];
        proto = HEAP32[(hint + 12) >> 2];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1 | 2 | 4 | 1024 | 8 | 16 | 32)) {
        return -1;
      }
      if (hint !== 0 && HEAP32[hint >> 2] & 2 && !node) {
        return -1;
      }
      if (flags & 32) {
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
      if (service) {
        service = UTF8ToString(service);
        port = parseInt(service, 10);
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          return -8;
        }
      }
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAPU32[out >> 2] = ai;
        return 0;
      }
      node = UTF8ToString(node);
      addr = inetPton4(node);
      if (addr !== null) {
        if (family === 0 || family === 2) {
          family = 2;
        } else if (family === 10 && flags & 8) {
          addr = [0, 0, _htonl(65535), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = inetPton6(node);
        if (addr !== null) {
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAPU32[out >> 2] = ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
      node = DNS.lookup_name(node);
      addr = inetPton4(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(65535), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAPU32[out >> 2] = ai;
      return 0;
    };
    Module["_getaddrinfo"] = _getaddrinfo;
    _getaddrinfo.sig = "ipppp";
    var _getentropy = (buffer, size) => {
      randomFill(HEAPU8.subarray(buffer, buffer + size));
      return 0;
    };
    Module["_getentropy"] = _getentropy;
    _getentropy.sig = "ipp";
    var getHostByName = (name) => {
      var ret = _malloc(20);
      var nameBuf = stringToNewUTF8(name);
      HEAPU32[ret >> 2] = nameBuf;
      var aliasesBuf = _malloc(4);
      HEAPU32[aliasesBuf >> 2] = 0;
      HEAPU32[(ret + 4) >> 2] = aliasesBuf;
      var afinet = 2;
      HEAP32[(ret + 8) >> 2] = afinet;
      HEAP32[(ret + 12) >> 2] = 4;
      var addrListBuf = _malloc(12);
      HEAPU32[addrListBuf >> 2] = addrListBuf + 8;
      HEAPU32[(addrListBuf + 4) >> 2] = 0;
      HEAP32[(addrListBuf + 8) >> 2] = inetPton4(DNS.lookup_name(name));
      HEAPU32[(ret + 16) >> 2] = addrListBuf;
      return ret;
    };
    Module["getHostByName"] = getHostByName;
    var _gethostbyaddr = (addr, addrlen, type) => {
      if (type !== 2) {
        setErrNo(5);
        return null;
      }
      addr = HEAP32[addr >> 2];
      var host = inetNtop4(addr);
      var lookup = DNS.lookup_addr(host);
      if (lookup) {
        host = lookup;
      }
      return getHostByName(host);
    };
    Module["_gethostbyaddr"] = _gethostbyaddr;
    _gethostbyaddr.sig = "ppii";
    var _gethostbyname = (name) => getHostByName(UTF8ToString(name));
    Module["_gethostbyname"] = _gethostbyname;
    _gethostbyname.sig = "pp";
    var _getnameinfo = (sa, salen, node, nodelen, serv, servlen, flags) => {
      var info = readSockaddr(sa, salen);
      if (info.errno) {
        return -6;
      }
      var port = info.port;
      var addr = info.addr;
      var overflowed = false;
      if (node && nodelen) {
        var lookup;
        if (flags & 1 || !(lookup = DNS.lookup_addr(addr))) {
          if (flags & 8) {
            return -2;
          }
        } else {
          addr = lookup;
        }
        var numBytesWrittenExclNull = stringToUTF8(addr, node, nodelen);
        if (numBytesWrittenExclNull + 1 >= nodelen) {
          overflowed = true;
        }
      }
      if (serv && servlen) {
        port = "" + port;
        var numBytesWrittenExclNull = stringToUTF8(port, serv, servlen);
        if (numBytesWrittenExclNull + 1 >= servlen) {
          overflowed = true;
        }
      }
      if (overflowed) {
        return -12;
      }
      return 0;
    };
    Module["_getnameinfo"] = _getnameinfo;
    _getnameinfo.sig = "ipipipii";
    var Protocols = { list: [], map: {} };
    Module["Protocols"] = Protocols;
    var _setprotoent = (stayopen) => {
      function allocprotoent(name, proto, aliases) {
        var nameBuf = _malloc(name.length + 1);
        stringToAscii(name, nameBuf);
        var j = 0;
        var length = aliases.length;
        var aliasListBuf = _malloc((length + 1) * 4);
        for (var i = 0; i < length; i++, j += 4) {
          var alias = aliases[i];
          var aliasBuf = _malloc(alias.length + 1);
          stringToAscii(alias, aliasBuf);
          HEAPU32[(aliasListBuf + j) >> 2] = aliasBuf;
        }
        HEAPU32[(aliasListBuf + j) >> 2] = 0;
        var pe = _malloc(12);
        HEAPU32[pe >> 2] = nameBuf;
        HEAPU32[(pe + 4) >> 2] = aliasListBuf;
        HEAP32[(pe + 8) >> 2] = proto;
        return pe;
      }
      var list = Protocols.list;
      var map = Protocols.map;
      if (list.length === 0) {
        var entry = allocprotoent("tcp", 6, ["TCP"]);
        list.push(entry);
        map["tcp"] = map["6"] = entry;
        entry = allocprotoent("udp", 17, ["UDP"]);
        list.push(entry);
        map["udp"] = map["17"] = entry;
      }
      _setprotoent.index = 0;
    };
    Module["_setprotoent"] = _setprotoent;
    _setprotoent.sig = "vi";
    var _getprotobyname = (name) => {
      name = UTF8ToString(name);
      _setprotoent(true);
      var result = Protocols.map[name];
      return result;
    };
    Module["_getprotobyname"] = _getprotobyname;
    _getprotobyname.sig = "pp";
    var arraySum = (array, index) => {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {}
      return sum;
    };
    Module["arraySum"] = arraySum;
    var MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    Module["MONTH_DAYS_LEAP"] = MONTH_DAYS_LEAP;
    var MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    Module["MONTH_DAYS_REGULAR"] = MONTH_DAYS_REGULAR;
    var addDays = (date, days) => {
      var newDate = new Date(date.getTime());
      while (days > 0) {
        var leap = isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[
          currentMonth
        ];
        if (days > daysInCurrentMonth - newDate.getDate()) {
          days -= daysInCurrentMonth - newDate.getDate() + 1;
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth + 1);
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear() + 1);
          }
        } else {
          newDate.setDate(newDate.getDate() + days);
          return newDate;
        }
      }
      return newDate;
    };
    Module["addDays"] = addDays;
    var writeArrayToMemory = (array, buffer) => {
      HEAP8.set(array, buffer);
    };
    Module["writeArrayToMemory"] = writeArrayToMemory;
    var _strftime = (s, maxsize, format, tm) => {
      var tm_zone = HEAPU32[(tm + 40) >> 2];
      var date = {
        tm_sec: HEAP32[tm >> 2],
        tm_min: HEAP32[(tm + 4) >> 2],
        tm_hour: HEAP32[(tm + 8) >> 2],
        tm_mday: HEAP32[(tm + 12) >> 2],
        tm_mon: HEAP32[(tm + 16) >> 2],
        tm_year: HEAP32[(tm + 20) >> 2],
        tm_wday: HEAP32[(tm + 24) >> 2],
        tm_yday: HEAP32[(tm + 28) >> 2],
        tm_isdst: HEAP32[(tm + 32) >> 2],
        tm_gmtoff: HEAP32[(tm + 36) >> 2],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : "",
      };
      var pattern = UTF8ToString(format);
      var EXPANSION_RULES_1 = {
        "%c": "%a %b %d %H:%M:%S %Y",
        "%D": "%m/%d/%y",
        "%F": "%Y-%m-%d",
        "%h": "%b",
        "%r": "%I:%M:%S %p",
        "%R": "%H:%M",
        "%T": "%H:%M:%S",
        "%x": "%m/%d/%y",
        "%X": "%H:%M:%S",
        "%Ec": "%c",
        "%EC": "%C",
        "%Ex": "%m/%d/%y",
        "%EX": "%H:%M:%S",
        "%Ey": "%y",
        "%EY": "%Y",
        "%Od": "%d",
        "%Oe": "%e",
        "%OH": "%H",
        "%OI": "%I",
        "%Om": "%m",
        "%OM": "%M",
        "%OS": "%S",
        "%Ou": "%u",
        "%OU": "%U",
        "%OV": "%V",
        "%Ow": "%w",
        "%OW": "%W",
        "%Oy": "%y",
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(
          new RegExp(rule, "g"),
          EXPANSION_RULES_1[rule],
        );
      }
      var WEEKDAYS = [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday",
      ];
      var MONTHS = [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
      ];
      function leadingSomething(value, digits, character) {
        var str = typeof value == "number" ? value.toString() : value || "";
        while (str.length < digits) {
          str = character[0] + str;
        }
        return str;
      }
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, "0");
      }
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : value > 0 ? 1 : 0;
        }
        var compare;
        if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
            compare = sgn(date1.getDate() - date2.getDate());
          }
        }
        return compare;
      }
      function getFirstWeekStartDate(janFourth) {
        switch (janFourth.getDay()) {
          case 0:
            return new Date(janFourth.getFullYear() - 1, 11, 29);
          case 1:
            return janFourth;
          case 2:
            return new Date(janFourth.getFullYear(), 0, 3);
          case 3:
            return new Date(janFourth.getFullYear(), 0, 2);
          case 4:
            return new Date(janFourth.getFullYear(), 0, 1);
          case 5:
            return new Date(janFourth.getFullYear() - 1, 11, 31);
          case 6:
            return new Date(janFourth.getFullYear() - 1, 11, 30);
        }
      }
      function getWeekBasedYear(date) {
        var thisDate = addDays(
          new Date(date.tm_year + 1900, 0, 1),
          date.tm_yday,
        );
        var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
        var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
        var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
        var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
        if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
          if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
            return thisDate.getFullYear() + 1;
          }
          return thisDate.getFullYear();
        }
        return thisDate.getFullYear() - 1;
      }
      var EXPANSION_RULES_2 = {
        "%a": (date) => WEEKDAYS[date.tm_wday].substring(0, 3),
        "%A": (date) => WEEKDAYS[date.tm_wday],
        "%b": (date) => MONTHS[date.tm_mon].substring(0, 3),
        "%B": (date) => MONTHS[date.tm_mon],
        "%C": (date) => {
          var year = date.tm_year + 1900;
          return leadingNulls((year / 100) | 0, 2);
        },
        "%d": (date) => leadingNulls(date.tm_mday, 2),
        "%e": (date) => leadingSomething(date.tm_mday, 2, " "),
        "%g": (date) => getWeekBasedYear(date).toString().substring(2),
        "%G": (date) => getWeekBasedYear(date),
        "%H": (date) => leadingNulls(date.tm_hour, 2),
        "%I": (date) => {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        "%j": (date) =>
          leadingNulls(
            date.tm_mday +
              arraySum(
                isLeapYear(date.tm_year + 1900)
                  ? MONTH_DAYS_LEAP
                  : MONTH_DAYS_REGULAR,
                date.tm_mon - 1,
              ),
            3,
          ),
        "%m": (date) => leadingNulls(date.tm_mon + 1, 2),
        "%M": (date) => leadingNulls(date.tm_min, 2),
        "%n": () => "\n",
        "%p": (date) => {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return "AM";
          }
          return "PM";
        },
        "%S": (date) => leadingNulls(date.tm_sec, 2),
        "%t": () => "\t",
        "%u": (date) => date.tm_wday || 7,
        "%U": (date) => {
          var days = date.tm_yday + 7 - date.tm_wday;
          return leadingNulls(Math.floor(days / 7), 2);
        },
        "%V": (date) => {
          var val = Math.floor(
            (date.tm_yday + 7 - ((date.tm_wday + 6) % 7)) / 7,
          );
          if ((date.tm_wday + 371 - date.tm_yday - 2) % 7 <= 2) {
            val++;
          }
          if (!val) {
            val = 52;
            var dec31 = (date.tm_wday + 7 - date.tm_yday - 1) % 7;
            if (
              dec31 == 4 ||
              (dec31 == 5 && isLeapYear((date.tm_year % 400) - 1))
            ) {
              val++;
            }
          } else if (val == 53) {
            var jan1 = (date.tm_wday + 371 - date.tm_yday) % 7;
            if (jan1 != 4 && (jan1 != 3 || !isLeapYear(date.tm_year))) val = 1;
          }
          return leadingNulls(val, 2);
        },
        "%w": (date) => date.tm_wday,
        "%W": (date) => {
          var days = date.tm_yday + 7 - ((date.tm_wday + 6) % 7);
          return leadingNulls(Math.floor(days / 7), 2);
        },
        "%y": (date) => (date.tm_year + 1900).toString().substring(2),
        "%Y": (date) => date.tm_year + 1900,
        "%z": (date) => {
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          off = (off / 60) * 100 + (off % 60);
          return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
        },
        "%Z": (date) => date.tm_zone,
        "%%": () => "%",
      };
      pattern = pattern.replace(/%%/g, "\0\0");
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.includes(rule)) {
          pattern = pattern.replace(
            new RegExp(rule, "g"),
            EXPANSION_RULES_2[rule](date),
          );
        }
      }
      pattern = pattern.replace(/\0\0/g, "%");
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
      writeArrayToMemory(bytes, s);
      return bytes.length - 1;
    };
    Module["_strftime"] = _strftime;
    _strftime.sig = "ppppp";
    var _strftime_l = (s, maxsize, format, tm, loc) =>
      _strftime(s, maxsize, format, tm);
    Module["_strftime_l"] = _strftime_l;
    _strftime_l.sig = "pppppp";
    var _system = (command) => {
      if (ENVIRONMENT_IS_NODE) {
        if (!command) return 1;
        var cmdstr = UTF8ToString(command);
        if (!cmdstr.length) return 0;
        var cp = require("child_process");
        var ret = cp.spawnSync(cmdstr, [], { shell: true, stdio: "inherit" });
        var _W_EXITCODE = (ret, sig) => (ret << 8) | sig;
        if (ret.status === null) {
          var signalToNumber = (sig) => {
            switch (sig) {
              case "SIGHUP":
                return 1;
              case "SIGINT":
                return 2;
              case "SIGQUIT":
                return 3;
              case "SIGFPE":
                return 8;
              case "SIGKILL":
                return 9;
              case "SIGALRM":
                return 14;
              case "SIGTERM":
                return 15;
            }
            return 2;
          };
          return _W_EXITCODE(0, signalToNumber(ret.signal));
        }
        return _W_EXITCODE(ret.status, 0);
      }
      if (!command) return 0;
      setErrNo(52);
      return -1;
    };
    Module["_system"] = _system;
    _system.sig = "ip";
    var FS_unlink = (path) => FS.unlink(path);
    Module["FS_unlink"] = FS_unlink;
    var writeI53ToI64Clamped = (ptr, num) => {
      if (num > 0x8000000000000000) {
        HEAPU32[ptr >> 2] = 4294967295;
        HEAPU32[(ptr + 4) >> 2] = 2147483647;
      } else if (num < -0x8000000000000000) {
        HEAPU32[ptr >> 2] = 0;
        HEAPU32[(ptr + 4) >> 2] = 2147483648;
      } else {
        writeI53ToI64(ptr, num);
      }
    };
    Module["writeI53ToI64Clamped"] = writeI53ToI64Clamped;
    var writeI53ToI64Signaling = (ptr, num) => {
      if (num > 0x8000000000000000 || num < -0x8000000000000000) {
        throw `RangeError: ${num}`;
      }
      writeI53ToI64(ptr, num);
    };
    Module["writeI53ToI64Signaling"] = writeI53ToI64Signaling;
    var writeI53ToU64Clamped = (ptr, num) => {
      if (num > 0x10000000000000000) {
        HEAPU32[ptr >> 2] = 4294967295;
        HEAPU32[(ptr + 4) >> 2] = 4294967295;
      } else if (num < 0) {
        HEAPU32[ptr >> 2] = 0;
        HEAPU32[(ptr + 4) >> 2] = 0;
      } else {
        writeI53ToI64(ptr, num);
      }
    };
    Module["writeI53ToU64Clamped"] = writeI53ToU64Clamped;
    var writeI53ToU64Signaling = (ptr, num) => {
      if (num < 0 || num > 0x10000000000000000) {
        throw `RangeError: ${num}`;
      }
      writeI53ToI64(ptr, num);
    };
    Module["writeI53ToU64Signaling"] = writeI53ToU64Signaling;
    var readI53FromU64 = (ptr) =>
      HEAPU32[ptr >> 2] + HEAPU32[(ptr + 4) >> 2] * 4294967296;
    Module["readI53FromU64"] = readI53FromU64;
    var convertI32PairToI53 = (lo, hi) => (lo >>> 0) + hi * 4294967296;
    Module["convertI32PairToI53"] = convertI32PairToI53;
    var convertI32PairToI53Checked = (lo, hi) =>
      (hi + 2097152) >>> 0 < 4194305 - !!lo
        ? (lo >>> 0) + hi * 4294967296
        : NaN;
    Module["convertI32PairToI53Checked"] = convertI32PairToI53Checked;
    var convertU32PairToI53 = (lo, hi) => (lo >>> 0) + (hi >>> 0) * 4294967296;
    Module["convertU32PairToI53"] = convertU32PairToI53;
    var ptrToString = (ptr) => {
      ptr >>>= 0;
      return "0x" + ptr.toString(16).padStart(8, "0");
    };
    Module["ptrToString"] = ptrToString;
    var _emscripten_notify_memory_growth = (memoryIndex) => {
      updateMemoryViews();
    };
    Module["_emscripten_notify_memory_growth"] =
      _emscripten_notify_memory_growth;
    _emscripten_notify_memory_growth.sig = "vp";
    var ___asctime_r = (tmPtr, buf) => {
      var date = {
        tm_sec: HEAP32[tmPtr >> 2],
        tm_min: HEAP32[(tmPtr + 4) >> 2],
        tm_hour: HEAP32[(tmPtr + 8) >> 2],
        tm_mday: HEAP32[(tmPtr + 12) >> 2],
        tm_mon: HEAP32[(tmPtr + 16) >> 2],
        tm_year: HEAP32[(tmPtr + 20) >> 2],
        tm_wday: HEAP32[(tmPtr + 24) >> 2],
      };
      var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      var months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ];
      var s =
        days[date.tm_wday] +
        " " +
        months[date.tm_mon] +
        (date.tm_mday < 10 ? "  " : " ") +
        date.tm_mday +
        (date.tm_hour < 10 ? " 0" : " ") +
        date.tm_hour +
        (date.tm_min < 10 ? ":0" : ":") +
        date.tm_min +
        (date.tm_sec < 10 ? ":0" : ":") +
        date.tm_sec +
        " " +
        (1900 + date.tm_year) +
        "\n";
      stringToUTF8(s, buf, 26);
      return buf;
    };
    Module["___asctime_r"] = ___asctime_r;
    ___asctime_r.sig = "ppp";
    var _strptime = (buf, format, tm) => {
      var pattern = UTF8ToString(format);
      var SPECIAL_CHARS = "\\!@#$^&*()+=-[]/{}|:<>?,.";
      for (var i = 0, ii = SPECIAL_CHARS.length; i < ii; ++i) {
        pattern = pattern.replace(
          new RegExp("\\" + SPECIAL_CHARS[i], "g"),
          "\\" + SPECIAL_CHARS[i],
        );
      }
      var EQUIVALENT_MATCHERS = {
        "%A": "%a",
        "%B": "%b",
        "%c": "%a %b %d %H:%M:%S %Y",
        "%D": "%m\\/%d\\/%y",
        "%e": "%d",
        "%F": "%Y-%m-%d",
        "%h": "%b",
        "%R": "%H\\:%M",
        "%r": "%I\\:%M\\:%S\\s%p",
        "%T": "%H\\:%M\\:%S",
        "%x": "%m\\/%d\\/(?:%y|%Y)",
        "%X": "%H\\:%M\\:%S",
      };
      for (var matcher in EQUIVALENT_MATCHERS) {
        pattern = pattern.replace(matcher, EQUIVALENT_MATCHERS[matcher]);
      }
      var DATE_PATTERNS = {
        "%a": "(?:Sun(?:day)?)|(?:Mon(?:day)?)|(?:Tue(?:sday)?)|(?:Wed(?:nesday)?)|(?:Thu(?:rsday)?)|(?:Fri(?:day)?)|(?:Sat(?:urday)?)",
        "%b": "(?:Jan(?:uary)?)|(?:Feb(?:ruary)?)|(?:Mar(?:ch)?)|(?:Apr(?:il)?)|May|(?:Jun(?:e)?)|(?:Jul(?:y)?)|(?:Aug(?:ust)?)|(?:Sep(?:tember)?)|(?:Oct(?:ober)?)|(?:Nov(?:ember)?)|(?:Dec(?:ember)?)",
        "%C": "\\d\\d",
        "%d": "0[1-9]|[1-9](?!\\d)|1\\d|2\\d|30|31",
        "%H": "\\d(?!\\d)|[0,1]\\d|20|21|22|23",
        "%I": "\\d(?!\\d)|0\\d|10|11|12",
        "%j": "00[1-9]|0?[1-9](?!\\d)|0?[1-9]\\d(?!\\d)|[1,2]\\d\\d|3[0-6]\\d",
        "%m": "0[1-9]|[1-9](?!\\d)|10|11|12",
        "%M": "0\\d|\\d(?!\\d)|[1-5]\\d",
        "%n": "\\s",
        "%p": "AM|am|PM|pm|A\\.M\\.|a\\.m\\.|P\\.M\\.|p\\.m\\.",
        "%S": "0\\d|\\d(?!\\d)|[1-5]\\d|60",
        "%U": "0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53",
        "%W": "0\\d|\\d(?!\\d)|[1-4]\\d|50|51|52|53",
        "%w": "[0-6]",
        "%y": "\\d\\d",
        "%Y": "\\d\\d\\d\\d",
        "%%": "%",
        "%t": "\\s",
      };
      var MONTH_NUMBERS = {
        JAN: 0,
        FEB: 1,
        MAR: 2,
        APR: 3,
        MAY: 4,
        JUN: 5,
        JUL: 6,
        AUG: 7,
        SEP: 8,
        OCT: 9,
        NOV: 10,
        DEC: 11,
      };
      var DAY_NUMBERS_SUN_FIRST = {
        SUN: 0,
        MON: 1,
        TUE: 2,
        WED: 3,
        THU: 4,
        FRI: 5,
        SAT: 6,
      };
      var DAY_NUMBERS_MON_FIRST = {
        MON: 0,
        TUE: 1,
        WED: 2,
        THU: 3,
        FRI: 4,
        SAT: 5,
        SUN: 6,
      };
      for (var datePattern in DATE_PATTERNS) {
        pattern = pattern.replace(
          datePattern,
          "(" + datePattern + DATE_PATTERNS[datePattern] + ")",
        );
      }
      var capture = [];
      for (var i = pattern.indexOf("%"); i >= 0; i = pattern.indexOf("%")) {
        capture.push(pattern[i + 1]);
        pattern = pattern.replace(new RegExp("\\%" + pattern[i + 1], "g"), "");
      }
      var matches = new RegExp("^" + pattern, "i").exec(UTF8ToString(buf));
      function initDate() {
        function fixup(value, min, max) {
          return typeof value != "number" || isNaN(value)
            ? min
            : value >= min
              ? value <= max
                ? value
                : max
              : min;
        }
        return {
          year: fixup(HEAP32[(tm + 20) >> 2] + 1900, 1970, 9999),
          month: fixup(HEAP32[(tm + 16) >> 2], 0, 11),
          day: fixup(HEAP32[(tm + 12) >> 2], 1, 31),
          hour: fixup(HEAP32[(tm + 8) >> 2], 0, 23),
          min: fixup(HEAP32[(tm + 4) >> 2], 0, 59),
          sec: fixup(HEAP32[tm >> 2], 0, 59),
        };
      }
      if (matches) {
        var date = initDate();
        var value;
        var getMatch = (symbol) => {
          var pos = capture.indexOf(symbol);
          if (pos >= 0) {
            return matches[pos + 1];
          }
          return;
        };
        if ((value = getMatch("S"))) {
          date.sec = jstoi_q(value);
        }
        if ((value = getMatch("M"))) {
          date.min = jstoi_q(value);
        }
        if ((value = getMatch("H"))) {
          date.hour = jstoi_q(value);
        } else if ((value = getMatch("I"))) {
          var hour = jstoi_q(value);
          if ((value = getMatch("p"))) {
            hour += value.toUpperCase()[0] === "P" ? 12 : 0;
          }
          date.hour = hour;
        }
        if ((value = getMatch("Y"))) {
          date.year = jstoi_q(value);
        } else if ((value = getMatch("y"))) {
          var year = jstoi_q(value);
          if ((value = getMatch("C"))) {
            year += jstoi_q(value) * 100;
          } else {
            year += year < 69 ? 2e3 : 1900;
          }
          date.year = year;
        }
        if ((value = getMatch("m"))) {
          date.month = jstoi_q(value) - 1;
        } else if ((value = getMatch("b"))) {
          date.month = MONTH_NUMBERS[value.substring(0, 3).toUpperCase()] || 0;
        }
        if ((value = getMatch("d"))) {
          date.day = jstoi_q(value);
        } else if ((value = getMatch("j"))) {
          var day = jstoi_q(value);
          var leapYear = isLeapYear(date.year);
          for (var month = 0; month < 12; ++month) {
            var daysUntilMonth = arraySum(
              leapYear ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR,
              month - 1,
            );
            if (
              day <=
              daysUntilMonth +
                (leapYear ? MONTH_DAYS_LEAP : MONTH_DAYS_REGULAR)[month]
            ) {
              date.day = day - daysUntilMonth;
            }
          }
        } else if ((value = getMatch("a"))) {
          var weekDay = value.substring(0, 3).toUpperCase();
          if ((value = getMatch("U"))) {
            var weekDayNumber = DAY_NUMBERS_SUN_FIRST[weekDay];
            var weekNumber = jstoi_q(value);
            var janFirst = new Date(date.year, 0, 1);
            var endDate;
            if (janFirst.getDay() === 0) {
              endDate = addDays(janFirst, weekDayNumber + 7 * (weekNumber - 1));
            } else {
              endDate = addDays(
                janFirst,
                7 - janFirst.getDay() + weekDayNumber + 7 * (weekNumber - 1),
              );
            }
            date.day = endDate.getDate();
            date.month = endDate.getMonth();
          } else if ((value = getMatch("W"))) {
            var weekDayNumber = DAY_NUMBERS_MON_FIRST[weekDay];
            var weekNumber = jstoi_q(value);
            var janFirst = new Date(date.year, 0, 1);
            var endDate;
            if (janFirst.getDay() === 1) {
              endDate = addDays(janFirst, weekDayNumber + 7 * (weekNumber - 1));
            } else {
              endDate = addDays(
                janFirst,
                7 -
                  janFirst.getDay() +
                  1 +
                  weekDayNumber +
                  7 * (weekNumber - 1),
              );
            }
            date.day = endDate.getDate();
            date.month = endDate.getMonth();
          }
        }
        var fullDate = new Date(
          date.year,
          date.month,
          date.day,
          date.hour,
          date.min,
          date.sec,
          0,
        );
        HEAP32[tm >> 2] = fullDate.getSeconds();
        HEAP32[(tm + 4) >> 2] = fullDate.getMinutes();
        HEAP32[(tm + 8) >> 2] = fullDate.getHours();
        HEAP32[(tm + 12) >> 2] = fullDate.getDate();
        HEAP32[(tm + 16) >> 2] = fullDate.getMonth();
        HEAP32[(tm + 20) >> 2] = fullDate.getFullYear() - 1900;
        HEAP32[(tm + 24) >> 2] = fullDate.getDay();
        HEAP32[(tm + 28) >> 2] =
          arraySum(
            isLeapYear(fullDate.getFullYear())
              ? MONTH_DAYS_LEAP
              : MONTH_DAYS_REGULAR,
            fullDate.getMonth() - 1,
          ) +
          fullDate.getDate() -
          1;
        HEAP32[(tm + 32) >> 2] = 0;
        return buf + intArrayFromString(matches[0]).length - 1;
      }
      return 0;
    };
    Module["_strptime"] = _strptime;
    _strptime.sig = "pppp";
    var _strptime_l = (buf, format, tm, locale) => _strptime(buf, format, tm);
    Module["_strptime_l"] = _strptime_l;
    _strptime_l.sig = "ppppp";
    var ERRNO_MESSAGES = {
      0: "Success",
      1: "Arg list too long",
      2: "Permission denied",
      3: "Address already in use",
      4: "Address not available",
      5: "Address family not supported by protocol family",
      6: "No more processes",
      7: "Socket already connected",
      8: "Bad file number",
      9: "Trying to read unreadable message",
      10: "Mount device busy",
      11: "Operation canceled",
      12: "No children",
      13: "Connection aborted",
      14: "Connection refused",
      15: "Connection reset by peer",
      16: "File locking deadlock error",
      17: "Destination address required",
      18: "Math arg out of domain of func",
      19: "Quota exceeded",
      20: "File exists",
      21: "Bad address",
      22: "File too large",
      23: "Host is unreachable",
      24: "Identifier removed",
      25: "Illegal byte sequence",
      26: "Connection already in progress",
      27: "Interrupted system call",
      28: "Invalid argument",
      29: "I/O error",
      30: "Socket is already connected",
      31: "Is a directory",
      32: "Too many symbolic links",
      33: "Too many open files",
      34: "Too many links",
      35: "Message too long",
      36: "Multihop attempted",
      37: "File or path name too long",
      38: "Network interface is not configured",
      39: "Connection reset by network",
      40: "Network is unreachable",
      41: "Too many open files in system",
      42: "No buffer space available",
      43: "No such device",
      44: "No such file or directory",
      45: "Exec format error",
      46: "No record locks available",
      47: "The link has been severed",
      48: "Not enough core",
      49: "No message of desired type",
      50: "Protocol not available",
      51: "No space left on device",
      52: "Function not implemented",
      53: "Socket is not connected",
      54: "Not a directory",
      55: "Directory not empty",
      56: "State not recoverable",
      57: "Socket operation on non-socket",
      59: "Not a typewriter",
      60: "No such device or address",
      61: "Value too large for defined data type",
      62: "Previous owner died",
      63: "Not super-user",
      64: "Broken pipe",
      65: "Protocol error",
      66: "Unknown protocol",
      67: "Protocol wrong type for socket",
      68: "Math result not representable",
      69: "Read only file system",
      70: "Illegal seek",
      71: "No such process",
      72: "Stale file handle",
      73: "Connection timed out",
      74: "Text file busy",
      75: "Cross-device link",
      100: "Device not a stream",
      101: "Bad font file fmt",
      102: "Invalid slot",
      103: "Invalid request code",
      104: "No anode",
      105: "Block device required",
      106: "Channel number out of range",
      107: "Level 3 halted",
      108: "Level 3 reset",
      109: "Link number out of range",
      110: "Protocol driver not attached",
      111: "No CSI structure available",
      112: "Level 2 halted",
      113: "Invalid exchange",
      114: "Invalid request descriptor",
      115: "Exchange full",
      116: "No data (for no delay io)",
      117: "Timer expired",
      118: "Out of streams resources",
      119: "Machine is not on the network",
      120: "Package not installed",
      121: "The object is remote",
      122: "Advertise error",
      123: "Srmount error",
      124: "Communication error on send",
      125: "Cross mount point (not really error)",
      126: "Given log. name not unique",
      127: "f.d. invalid for this operation",
      128: "Remote address changed",
      129: "Can   access a needed shared lib",
      130: "Accessing a corrupted shared lib",
      131: ".lib section in a.out corrupted",
      132: "Attempting to link in too many libs",
      133: "Attempting to exec a shared library",
      135: "Streams pipe error",
      136: "Too many users",
      137: "Socket type not supported",
      138: "Not supported",
      139: "Protocol family not supported",
      140: "Can't send after socket shutdown",
      141: "Too many references",
      142: "Host is down",
      148: "No medium (in tape drive)",
      156: "Level 2 not synchronized",
    };
    Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
    var _gethostbyname_r = (name, ret, buf, buflen, out, err) => {
      var data = _gethostbyname(name);
      _memcpy(ret, data, 20);
      _free(data);
      HEAP32[err >> 2] = 0;
      HEAPU32[out >> 2] = ret;
      return 0;
    };
    Module["_gethostbyname_r"] = _gethostbyname_r;
    _gethostbyname_r.sig = "ipppppp";
    var _endprotoent = () => {};
    Module["_endprotoent"] = _endprotoent;
    _endprotoent.sig = "v";
    var _getprotoent = (number) => {
      if (_setprotoent.index === Protocols.list.length) {
        return 0;
      }
      var result = Protocols.list[_setprotoent.index++];
      return result;
    };
    Module["_getprotoent"] = _getprotoent;
    _getprotoent.sig = "p";
    var _getprotobynumber = (number) => {
      _setprotoent(true);
      var result = Protocols.map[number];
      return result;
    };
    Module["_getprotobynumber"] = _getprotobynumber;
    _getprotobynumber.sig = "pi";
    var _emscripten_run_script = (ptr) => {
      eval(UTF8ToString(ptr));
    };
    Module["_emscripten_run_script"] = _emscripten_run_script;
    _emscripten_run_script.sig = "vp";
    var _emscripten_run_script_int = (ptr) => eval(UTF8ToString(ptr)) | 0;
    Module["_emscripten_run_script_int"] = _emscripten_run_script_int;
    _emscripten_run_script_int.sig = "ip";
    var _emscripten_run_script_string = (ptr) => {
      var s = eval(UTF8ToString(ptr));
      if (s == null) {
        return 0;
      }
      s += "";
      var me = _emscripten_run_script_string;
      var len = lengthBytesUTF8(s);
      if (!me.bufferSize || me.bufferSize < len + 1) {
        if (me.bufferSize) _free(me.buffer);
        me.bufferSize = len + 1;
        me.buffer = _malloc(me.bufferSize);
      }
      stringToUTF8(s, me.buffer, me.bufferSize);
      return me.buffer;
    };
    Module["_emscripten_run_script_string"] = _emscripten_run_script_string;
    _emscripten_run_script_string.sig = "pp";
    var _emscripten_random = () => Math.random();
    Module["_emscripten_random"] = _emscripten_random;
    _emscripten_random.sig = "f";
    var warnOnce = (text) => {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = "warning: " + text;
        err(text);
      }
    };
    Module["warnOnce"] = warnOnce;
    function getCallstack(flags) {
      var callstack = jsStackTrace();
      var iThisFunc = callstack.lastIndexOf("_emscripten_log");
      var iThisFunc2 = callstack.lastIndexOf("_emscripten_get_callstack");
      var iNextLine =
        callstack.indexOf("\n", Math.max(iThisFunc, iThisFunc2)) + 1;
      callstack = callstack.slice(iNextLine);
      if (flags & 8 && typeof emscripten_source_map == "undefined") {
        warnOnce(
          'Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.',
        );
        flags ^= 8;
        flags |= 16;
      }
      var lines = callstack.split("\n");
      callstack = "";
      var newFirefoxRe = new RegExp("\\s*(.*?)@(.*?):([0-9]+):([0-9]+)");
      var firefoxRe = new RegExp("\\s*(.*?)@(.*):(.*)(:(.*))?");
      var chromeRe = new RegExp("\\s*at (.*?) \\((.*):(.*):(.*)\\)");
      for (var l in lines) {
        var line = lines[l];
        var symbolName = "";
        var file = "";
        var lineno = 0;
        var column = 0;
        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
          symbolName = parts[1];
          file = parts[2];
          lineno = parts[3];
          column = parts[4];
        } else {
          parts = newFirefoxRe.exec(line);
          if (!parts) parts = firefoxRe.exec(line);
          if (parts && parts.length >= 4) {
            symbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4] | 0;
          } else {
            callstack += line + "\n";
            continue;
          }
        }
        var haveSourceMap = false;
        if (flags & 8) {
          var orig = emscripten_source_map.originalPositionFor({
            line: lineno,
            column: column,
          });
          haveSourceMap = orig && orig.source;
          if (haveSourceMap) {
            if (flags & 64) {
              orig.source = orig.source.substring(
                orig.source.replace(/\\/g, "/").lastIndexOf("/") + 1,
              );
            }
            callstack += `    at ${symbolName} (${orig.source}:${orig.line}:${orig.column})\n`;
          }
        }
        if (flags & 16 || !haveSourceMap) {
          if (flags & 64) {
            file = file.substring(
              file.replace(/\\/g, "/").lastIndexOf("/") + 1,
            );
          }
          callstack +=
            (haveSourceMap ? `     = ${symbolName}` : `    at ${symbolName}`) +
            ` (${file}:${lineno}:${column})\n`;
        }
      }
      callstack = callstack.replace(/\s+$/, "");
      return callstack;
    }
    Module["getCallstack"] = getCallstack;
    function _emscripten_get_callstack(flags, str, maxbytes) {
      var callstack = getCallstack(flags);
      if (!str || maxbytes <= 0) {
        return lengthBytesUTF8(callstack) + 1;
      }
      var bytesWrittenExcludingNull = stringToUTF8(callstack, str, maxbytes);
      return bytesWrittenExcludingNull + 1;
    }
    Module["_emscripten_get_callstack"] = _emscripten_get_callstack;
    _emscripten_get_callstack.sig = "iipi";
    var emscriptenLog = (flags, str) => {
      if (flags & 24) {
        str = str.replace(/\s+$/, "");
        str += (str.length > 0 ? "\n" : "") + getCallstack(flags);
      }
      if (flags & 1) {
        if (flags & 4) {
          console.error(str);
        } else if (flags & 2) {
          console.warn(str);
        } else if (flags & 512) {
          console.info(str);
        } else if (flags & 256) {
          console.debug(str);
        } else {
          console.log(str);
        }
      } else if (flags & 6) {
        err(str);
      } else {
        out(str);
      }
    };
    Module["emscriptenLog"] = emscriptenLog;
    var reallyNegative = (x) => x < 0 || (x === 0 && 1 / x === -Infinity);
    Module["reallyNegative"] = reallyNegative;
    var reSign = (value, bits) => {
      if (value <= 0) {
        return value;
      }
      var half = bits <= 32 ? Math.abs(1 << (bits - 1)) : Math.pow(2, bits - 1);
      if (value >= half && (bits <= 32 || value > half)) {
        value = -2 * half + value;
      }
      return value;
    };
    Module["reSign"] = reSign;
    var unSign = (value, bits) => {
      if (value >= 0) {
        return value;
      }
      return bits <= 32
        ? 2 * Math.abs(1 << (bits - 1)) + value
        : Math.pow(2, bits) + value;
    };
    Module["unSign"] = unSign;
    var strLen = (ptr) => {
      var end = ptr;
      while (HEAPU8[end]) ++end;
      return end - ptr;
    };
    Module["strLen"] = strLen;
    var formatString = (format, varargs) => {
      var textIndex = format;
      var argIndex = varargs;
      function prepVararg(ptr, type) {
        if (type === "double" || type === "i64") {
          if (ptr & 7) {
            ptr += 4;
          }
        } else {
        }
        return ptr;
      }
      function getNextArg(type) {
        var ret;
        argIndex = prepVararg(argIndex, type);
        if (type === "double") {
          ret = HEAPF64[argIndex >> 3];
          argIndex += 8;
        } else if (type == "i64") {
          ret = [HEAP32[argIndex >> 2], HEAP32[(argIndex + 4) >> 2]];
          argIndex += 8;
        } else {
          type = "i32";
          ret = HEAP32[argIndex >> 2];
          argIndex += 4;
        }
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while (1) {
        var startTextIndex = textIndex;
        curr = HEAP8[textIndex >> 0];
        if (curr === 0) break;
        next = HEAP8[(textIndex + 1) >> 0];
        if (curr == 37) {
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex + 1) >> 0];
          }
          var width = 0;
          if (next == 42) {
            width = getNextArg("i32");
            textIndex++;
            next = HEAP8[(textIndex + 1) >> 0];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[(textIndex + 1) >> 0];
            }
          }
          var precisionSet = false,
            precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex + 1) >> 0];
            if (next == 42) {
              precision = getNextArg("i32");
              textIndex++;
            } else {
              while (1) {
                var precisionChr = HEAP8[(textIndex + 1) >> 0];
                if (precisionChr < 48 || precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[(textIndex + 1) >> 0];
          }
          if (precision < 0) {
            precision = 6;
            precisionSet = false;
          }
          var argSize;
          switch (String.fromCharCode(next)) {
            case "h":
              var nextNext = HEAP8[(textIndex + 2) >> 0];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1;
              } else {
                argSize = 2;
              }
              break;
            case "l":
              var nextNext = HEAP8[(textIndex + 2) >> 0];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8;
              } else {
                argSize = 4;
              }
              break;
            case "L":
            case "q":
            case "j":
              argSize = 8;
              break;
            case "z":
            case "t":
            case "I":
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex + 1) >> 0];
          switch (String.fromCharCode(next)) {
            case "d":
            case "i":
            case "u":
            case "o":
            case "x":
            case "X":
            case "p": {
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              currArg = getNextArg("i" + argSize * 8);
              var argText;
              if (argSize == 8) {
                currArg =
                  next == 117
                    ? convertU32PairToI53(currArg[0], currArg[1])
                    : convertI32PairToI53(currArg[0], currArg[1]);
              }
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(
                  currArg & limit,
                  argSize * 8,
                );
              }
              var currAbsArg = Math.abs(currArg);
              var prefix = "";
              if (next == 100 || next == 105) {
                argText = reSign(currArg, 8 * argSize).toString(10);
              } else if (next == 117) {
                argText = unSign(currArg, 8 * argSize).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? "0" : "") + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = flagAlternative && currArg != 0 ? "0x" : "";
                if (currArg < 0) {
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((15 - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join("");
                  while (argText.length < argSize * 2) argText = "f" + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = "(nil)";
                } else {
                  prefix = "0x";
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = "0" + argText;
                }
              }
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = "+" + prefix;
                } else if (flagPadSign) {
                  prefix = " " + prefix;
                }
              }
              if (argText.charAt(0) == "-") {
                prefix = "-" + prefix;
                argText = argText.substr(1);
              }
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += " ";
                } else {
                  if (flagZeroPad) {
                    argText = "0" + argText;
                  } else {
                    prefix = " " + prefix;
                  }
                }
              }
              argText = prefix + argText;
              argText.split("").forEach(function (chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case "f":
            case "F":
            case "e":
            case "E":
            case "g":
            case "G": {
              currArg = getNextArg("double");
              var argText;
              if (isNaN(currArg)) {
                argText = "nan";
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? "-" : "") + "inf";
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(
                    currArg.toExponential(effectivePrecision).split("e")[1],
                    10,
                  );
                  if (precision > exponent && exponent >= -4) {
                    next = (next == 103 ? "f" : "F").charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = (next == 103 ? "e" : "E").charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + "0" + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && reallyNegative(currArg)) {
                    argText = "-" + argText;
                  }
                }
                var parts = argText.split("e");
                if (isGeneral && !flagAlternative) {
                  while (
                    parts[0].length > 1 &&
                    parts[0].includes(".") &&
                    (parts[0].slice(-1) == "0" || parts[0].slice(-1) == ".")
                  ) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  if (flagAlternative && argText.indexOf(".") == -1)
                    parts[0] += ".";
                  while (precision > effectivePrecision++) parts[0] += "0";
                }
                argText = parts[0] + (parts.length > 1 ? "e" + parts[1] : "");
                if (next == 69) argText = argText.toUpperCase();
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = "+" + argText;
                  } else if (flagPadSign) {
                    argText = " " + argText;
                  }
                }
              }
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += " ";
                } else {
                  if (flagZeroPad && (argText[0] == "-" || argText[0] == "+")) {
                    argText = argText[0] + "0" + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? "0" : " ") + argText;
                  }
                }
              }
              if (next < 97) argText = argText.toUpperCase();
              argText.split("").forEach(function (chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case "s": {
              var arg = getNextArg("i8*");
              var argLength = arg ? strLen(arg) : "(null)".length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[arg++ >> 0]);
                }
              } else {
                ret = ret.concat(
                  intArrayFromString("(null)".substr(0, argLength), true),
                );
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case "c": {
              if (flagLeftAlign) ret.push(getNextArg("i8"));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg("i8"));
              break;
            }
            case "n": {
              var ptr = getNextArg("i32*");
              HEAP32[ptr >> 2] = ret.length;
              break;
            }
            case "%": {
              ret.push(curr);
              break;
            }
            default: {
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[i >> 0]);
              }
            }
          }
          textIndex += 2;
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    };
    Module["formatString"] = formatString;
    var _emscripten_log = (flags, format, varargs) => {
      var result = formatString(format, varargs);
      var str = UTF8ArrayToString(result, 0);
      emscriptenLog(flags, str);
    };
    Module["_emscripten_log"] = _emscripten_log;
    _emscripten_log.sig = "vipp";
    var _emscripten_get_compiler_setting = (name) => {
      throw "You must build with -sRETAIN_COMPILER_SETTINGS for getCompilerSetting or emscripten_get_compiler_setting to work";
    };
    Module["_emscripten_get_compiler_setting"] =
      _emscripten_get_compiler_setting;
    _emscripten_get_compiler_setting.sig = "pp";
    var _emscripten_has_asyncify = () => 0;
    Module["_emscripten_has_asyncify"] = _emscripten_has_asyncify;
    _emscripten_has_asyncify.sig = "i";
    function _emscripten_debugger() {
      debugger;
    }
    Module["_emscripten_debugger"] = _emscripten_debugger;
    _emscripten_debugger.sig = "v";
    var _emscripten_print_double = (x, to, max) => {
      var str = x + "";
      if (to) return stringToUTF8(str, to, max);
      else return lengthBytesUTF8(str);
    };
    Module["_emscripten_print_double"] = _emscripten_print_double;
    _emscripten_print_double.sig = "idpi";
    var convertFrameToPC = (frame) => {
      abort(
        "Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER",
      );
      return 0;
    };
    Module["convertFrameToPC"] = convertFrameToPC;
    var _emscripten_return_address = (level) => {
      var callstack = jsStackTrace().split("\n");
      if (callstack[0] == "Error") {
        callstack.shift();
      }
      var caller = callstack[level + 3];
      return convertFrameToPC(caller);
    };
    Module["_emscripten_return_address"] = _emscripten_return_address;
    _emscripten_return_address.sig = "pi";
    var UNWIND_CACHE = {};
    Module["UNWIND_CACHE"] = UNWIND_CACHE;
    var saveInUnwindCache = (callstack) => {
      callstack.forEach((frame) => {
        var pc = convertFrameToPC(frame);
        if (pc) {
          UNWIND_CACHE[pc] = frame;
        }
      });
    };
    Module["saveInUnwindCache"] = saveInUnwindCache;
    function _emscripten_stack_snapshot() {
      var callstack = jsStackTrace().split("\n");
      if (callstack[0] == "Error") {
        callstack.shift();
      }
      saveInUnwindCache(callstack);
      UNWIND_CACHE.last_addr = convertFrameToPC(callstack[3]);
      UNWIND_CACHE.last_stack = callstack;
      return UNWIND_CACHE.last_addr;
    }
    Module["_emscripten_stack_snapshot"] = _emscripten_stack_snapshot;
    _emscripten_stack_snapshot.sig = "p";
    var _emscripten_stack_unwind_buffer = (addr, buffer, count) => {
      var stack;
      if (UNWIND_CACHE.last_addr == addr) {
        stack = UNWIND_CACHE.last_stack;
      } else {
        stack = jsStackTrace().split("\n");
        if (stack[0] == "Error") {
          stack.shift();
        }
        saveInUnwindCache(stack);
      }
      var offset = 3;
      while (stack[offset] && convertFrameToPC(stack[offset]) != addr) {
        ++offset;
      }
      for (var i = 0; i < count && stack[i + offset]; ++i) {
        HEAP32[(buffer + i * 4) >> 2] = convertFrameToPC(stack[i + offset]);
      }
      return i;
    };
    Module["_emscripten_stack_unwind_buffer"] = _emscripten_stack_unwind_buffer;
    _emscripten_stack_unwind_buffer.sig = "ippi";
    var _emscripten_pc_get_function = (pc) => {
      abort(
        "Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER",
      );
      return 0;
    };
    Module["_emscripten_pc_get_function"] = _emscripten_pc_get_function;
    _emscripten_pc_get_function.sig = "pp";
    var convertPCtoSourceLocation = (pc) => {
      if (UNWIND_CACHE.last_get_source_pc == pc)
        return UNWIND_CACHE.last_source;
      var match;
      var source;
      if (!source) {
        var frame = UNWIND_CACHE[pc];
        if (!frame) return null;
        if ((match = /\((.*):(\d+):(\d+)\)$/.exec(frame))) {
          source = { file: match[1], line: match[2], column: match[3] };
        } else if ((match = /@(.*):(\d+):(\d+)/.exec(frame))) {
          source = { file: match[1], line: match[2], column: match[3] };
        }
      }
      UNWIND_CACHE.last_get_source_pc = pc;
      UNWIND_CACHE.last_source = source;
      return source;
    };
    Module["convertPCtoSourceLocation"] = convertPCtoSourceLocation;
    var _emscripten_pc_get_file = (pc) => {
      var result = convertPCtoSourceLocation(pc);
      if (!result) return 0;
      if (_emscripten_pc_get_file.ret) _free(_emscripten_pc_get_file.ret);
      _emscripten_pc_get_file.ret = stringToNewUTF8(result.file);
      return _emscripten_pc_get_file.ret;
    };
    Module["_emscripten_pc_get_file"] = _emscripten_pc_get_file;
    _emscripten_pc_get_file.sig = "pp";
    var _emscripten_pc_get_line = (pc) => {
      var result = convertPCtoSourceLocation(pc);
      return result ? result.line : 0;
    };
    Module["_emscripten_pc_get_line"] = _emscripten_pc_get_line;
    _emscripten_pc_get_line.sig = "ip";
    var _emscripten_pc_get_column = (pc) => {
      var result = convertPCtoSourceLocation(pc);
      return result ? result.column || 0 : 0;
    };
    Module["_emscripten_pc_get_column"] = _emscripten_pc_get_column;
    _emscripten_pc_get_column.sig = "ip";
    var _emscripten_get_module_name = (buf, length) =>
      stringToUTF8(wasmBinaryFile, buf, length);
    Module["_emscripten_get_module_name"] = _emscripten_get_module_name;
    _emscripten_get_module_name.sig = "ppp";
    var _emscripten_asm_const_double = (code, sigPtr, argbuf) =>
      runEmAsmFunction(code, sigPtr, argbuf);
    Module["_emscripten_asm_const_double"] = _emscripten_asm_const_double;
    _emscripten_asm_const_double.sig = "dppp";
    var _emscripten_asm_const_ptr = (code, sigPtr, argbuf) =>
      runEmAsmFunction(code, sigPtr, argbuf);
    Module["_emscripten_asm_const_ptr"] = _emscripten_asm_const_ptr;
    _emscripten_asm_const_ptr.sig = "pppp";
    var runMainThreadEmAsm = (code, sigPtr, argbuf, sync) => {
      var args = readEmAsmArgs(sigPtr, argbuf);
      return ASM_CONSTS[code].apply(null, args);
    };
    Module["runMainThreadEmAsm"] = runMainThreadEmAsm;
    var _emscripten_asm_const_int_sync_on_main_thread = (
      code,
      sigPtr,
      argbuf,
    ) => runMainThreadEmAsm(code, sigPtr, argbuf, 1);
    Module["_emscripten_asm_const_int_sync_on_main_thread"] =
      _emscripten_asm_const_int_sync_on_main_thread;
    _emscripten_asm_const_int_sync_on_main_thread.sig = "ippp";
    var _emscripten_asm_const_double_sync_on_main_thread =
      _emscripten_asm_const_int_sync_on_main_thread;
    Module["_emscripten_asm_const_double_sync_on_main_thread"] =
      _emscripten_asm_const_double_sync_on_main_thread;
    _emscripten_asm_const_double_sync_on_main_thread.sig = "dppp";
    var _emscripten_asm_const_async_on_main_thread = (code, sigPtr, argbuf) =>
      runMainThreadEmAsm(code, sigPtr, argbuf, 0);
    Module["_emscripten_asm_const_async_on_main_thread"] =
      _emscripten_asm_const_async_on_main_thread;
    _emscripten_asm_const_async_on_main_thread.sig = "vppp";
    var jstoi_s = (str) => Number(str);
    Module["jstoi_s"] = jstoi_s;
    var __Unwind_Backtrace = (func, arg) => {
      var trace = getCallstack();
      var parts = trace.split("\n");
      for (var i = 0; i < parts.length; i++) {
        var ret = getWasmTableEntry(func)(0, arg);
        if (ret !== 0) return;
      }
    };
    Module["__Unwind_Backtrace"] = __Unwind_Backtrace;
    __Unwind_Backtrace.sig = "ipp";
    var __Unwind_GetIPInfo = (context, ipBefore) => abort("Unwind_GetIPInfo");
    Module["__Unwind_GetIPInfo"] = __Unwind_GetIPInfo;
    __Unwind_GetIPInfo.sig = "ppp";
    var __Unwind_FindEnclosingFunction = (ip) => 0;
    Module["__Unwind_FindEnclosingFunction"] = __Unwind_FindEnclosingFunction;
    __Unwind_FindEnclosingFunction.sig = "pp";
    var __Unwind_RaiseException = (ex) => {
      err("Warning: _Unwind_RaiseException is not correctly implemented");
      return ___cxa_throw(ex, 0, 0);
    };
    Module["__Unwind_RaiseException"] = __Unwind_RaiseException;
    __Unwind_RaiseException.sig = "ip";
    var __Unwind_DeleteException = (ex) => {
      err("TODO: Unwind_DeleteException");
    };
    Module["__Unwind_DeleteException"] = __Unwind_DeleteException;
    __Unwind_DeleteException.sig = "vp";
    var listenOnce = (object, event, func) => {
      object.addEventListener(event, func, { once: true });
    };
    Module["listenOnce"] = listenOnce;
    var autoResumeAudioContext = (ctx, elements) => {
      if (!elements) {
        elements = [document, document.getElementById("canvas")];
      }
      ["keydown", "mousedown", "touchstart"].forEach((event) => {
        elements.forEach((element) => {
          if (element) {
            listenOnce(element, event, () => {
              if (ctx.state === "suspended") ctx.resume();
            });
          }
        });
      });
    };
    Module["autoResumeAudioContext"] = autoResumeAudioContext;
    var getDynCaller = (sig, ptr) => {
      var argCache = [];
      return function () {
        argCache.length = 0;
        Object.assign(argCache, arguments);
        return dynCall(sig, ptr, argCache);
      };
    };
    Module["getDynCaller"] = getDynCaller;
    var _emscripten_force_exit = (status) => {
      noExitRuntime = false;
      runtimeKeepaliveCounter = 0;
      _exit(status);
    };
    Module["_emscripten_force_exit"] = _emscripten_force_exit;
    _emscripten_force_exit.sig = "vi";
    var _emscripten_outn = (str, len) => out(UTF8ToString(str, len));
    Module["_emscripten_outn"] = _emscripten_outn;
    _emscripten_outn.sig = "vpp";
    var _emscripten_errn = (str, len) => err(UTF8ToString(str, len));
    Module["_emscripten_errn"] = _emscripten_errn;
    _emscripten_errn.sig = "vpp";
    var _emscripten_throw_number = (number) => {
      throw number;
    };
    Module["_emscripten_throw_number"] = _emscripten_throw_number;
    _emscripten_throw_number.sig = "vd";
    var _emscripten_throw_string = (str) => {
      throw UTF8ToString(str);
    };
    Module["_emscripten_throw_string"] = _emscripten_throw_string;
    _emscripten_throw_string.sig = "vp";
    var runtimeKeepalivePush = () => {
      runtimeKeepaliveCounter += 1;
    };
    Module["runtimeKeepalivePush"] = runtimeKeepalivePush;
    runtimeKeepalivePush.sig = "v";
    var runtimeKeepalivePop = () => {
      runtimeKeepaliveCounter -= 1;
    };
    Module["runtimeKeepalivePop"] = runtimeKeepalivePop;
    runtimeKeepalivePop.sig = "v";
    var _emscripten_runtime_keepalive_push = runtimeKeepalivePush;
    Module["_emscripten_runtime_keepalive_push"] =
      _emscripten_runtime_keepalive_push;
    _emscripten_runtime_keepalive_push.sig = "v";
    var _emscripten_runtime_keepalive_pop = runtimeKeepalivePop;
    Module["_emscripten_runtime_keepalive_pop"] =
      _emscripten_runtime_keepalive_pop;
    _emscripten_runtime_keepalive_pop.sig = "v";
    var _emscripten_runtime_keepalive_check = () => keepRuntimeAlive();
    Module["_emscripten_runtime_keepalive_check"] =
      _emscripten_runtime_keepalive_check;
    _emscripten_runtime_keepalive_check.sig = "i";
    var safeSetTimeout = (func, timeout) =>
      setTimeout(() => {
        callUserCallback(func);
      }, timeout);
    Module["safeSetTimeout"] = safeSetTimeout;
    var asmjsMangle = (x) => {
      var unmangledSymbols = [
        "stackAlloc",
        "stackSave",
        "stackRestore",
        "getTempRet0",
        "setTempRet0",
      ];
      if (x == "__main_argc_argv") {
        x = "main";
      }
      return x.indexOf("dynCall_") == 0 || unmangledSymbols.includes(x)
        ? x
        : "_" + x;
    };
    Module["asmjsMangle"] = asmjsMangle;
    var ___global_base = 1024;
    Module["___global_base"] = ___global_base;
    var __emscripten_fs_load_embedded_files = (ptr) => {
      do {
        var name_addr = HEAPU32[ptr >> 2];
        ptr += 4;
        var len = HEAPU32[ptr >> 2];
        ptr += 4;
        var content = HEAPU32[ptr >> 2];
        ptr += 4;
        var name = UTF8ToString(name_addr);
        FS.createPath("/", PATH.dirname(name), true, true);
        FS.createDataFile(
          name,
          null,
          HEAP8.subarray(content, content + len),
          true,
          true,
          true,
        );
      } while (HEAPU32[ptr >> 2]);
    };
    Module["__emscripten_fs_load_embedded_files"] =
      __emscripten_fs_load_embedded_files;
    __emscripten_fs_load_embedded_files.sig = "vp";
    var POINTER_SIZE = 4;
    Module["POINTER_SIZE"] = POINTER_SIZE;
    function getNativeTypeSize(type) {
      switch (type) {
        case "i1":
        case "i8":
        case "u8":
          return 1;
        case "i16":
        case "u16":
          return 2;
        case "i32":
        case "u32":
          return 4;
        case "i64":
        case "u64":
          return 8;
        case "float":
          return 4;
        case "double":
          return 8;
        default: {
          if (type[type.length - 1] === "*") {
            return POINTER_SIZE;
          }
          if (type[0] === "i") {
            const bits = Number(type.substr(1));
            assert(
              bits % 8 === 0,
              "getNativeTypeSize invalid bits " + bits + ", type " + type,
            );
            return bits / 8;
          }
          return 0;
        }
      }
    }
    Module["getNativeTypeSize"] = getNativeTypeSize;
    var STACK_SIZE = 5242880;
    Module["STACK_SIZE"] = STACK_SIZE;
    var STACK_ALIGN = 16;
    Module["STACK_ALIGN"] = STACK_ALIGN;
    var ASSERTIONS = 0;
    Module["ASSERTIONS"] = ASSERTIONS;
    var getCFunc = (ident) => {
      var func = Module["_" + ident];
      return func;
    };
    Module["getCFunc"] = getCFunc;
    var ccall = (ident, returnType, argTypes, args, opts) => {
      var toC = {
        string: (str) => {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) {
            ret = stringToUTF8OnStack(str);
          }
          return ret;
        },
        array: (arr) => {
          var ret = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        },
      };
      function convertReturnValue(ret) {
        if (returnType === "string") {
          return UTF8ToString(ret);
        }
        if (returnType === "boolean") return Boolean(ret);
        return ret;
      }
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func.apply(null, cArgs);
      function onDone(ret) {
        if (stack !== 0) stackRestore(stack);
        return convertReturnValue(ret);
      }
      ret = onDone(ret);
      return ret;
    };
    Module["ccall"] = ccall;
    var cwrap = (ident, returnType, argTypes, opts) => {
      var numericArgs =
        !argTypes ||
        argTypes.every((type) => type === "number" || type === "boolean");
      var numericRet = returnType !== "string";
      if (numericRet && numericArgs && !opts) {
        return getCFunc(ident);
      }
      return function () {
        return ccall(ident, returnType, argTypes, arguments, opts);
      };
    };
    Module["cwrap"] = cwrap;
    var removeFunction = (index) => {
      functionsInTableMap.delete(getWasmTableEntry(index));
      setWasmTableEntry(index, null);
      freeTableIndexes.push(index);
    };
    Module["removeFunction"] = removeFunction;
    var _emscripten_math_cbrt = (x) => Math.cbrt(x);
    Module["_emscripten_math_cbrt"] = _emscripten_math_cbrt;
    _emscripten_math_cbrt.sig = "dd";
    var _emscripten_math_pow = (x, y) => Math.pow(x, y);
    Module["_emscripten_math_pow"] = _emscripten_math_pow;
    _emscripten_math_pow.sig = "ddd";
    var _emscripten_math_random = () => Math.random();
    Module["_emscripten_math_random"] = _emscripten_math_random;
    _emscripten_math_random.sig = "d";
    var _emscripten_math_sign = (x) => Math.sign(x);
    Module["_emscripten_math_sign"] = _emscripten_math_sign;
    _emscripten_math_sign.sig = "dd";
    var _emscripten_math_sqrt = (x) => Math.sqrt(x);
    Module["_emscripten_math_sqrt"] = _emscripten_math_sqrt;
    _emscripten_math_sqrt.sig = "dd";
    var _emscripten_math_exp = (x) => Math.exp(x);
    Module["_emscripten_math_exp"] = _emscripten_math_exp;
    _emscripten_math_exp.sig = "dd";
    var _emscripten_math_expm1 = (x) => Math.expm1(x);
    Module["_emscripten_math_expm1"] = _emscripten_math_expm1;
    _emscripten_math_expm1.sig = "dd";
    var _emscripten_math_fmod = (x, y) => x % y;
    Module["_emscripten_math_fmod"] = _emscripten_math_fmod;
    _emscripten_math_fmod.sig = "ddd";
    var _emscripten_math_log = (x) => Math.log(x);
    Module["_emscripten_math_log"] = _emscripten_math_log;
    _emscripten_math_log.sig = "dd";
    var _emscripten_math_log1p = (x) => Math.log1p(x);
    Module["_emscripten_math_log1p"] = _emscripten_math_log1p;
    _emscripten_math_log1p.sig = "dd";
    var _emscripten_math_log10 = (x) => Math.log10(x);
    Module["_emscripten_math_log10"] = _emscripten_math_log10;
    _emscripten_math_log10.sig = "dd";
    var _emscripten_math_log2 = (x) => Math.log2(x);
    Module["_emscripten_math_log2"] = _emscripten_math_log2;
    _emscripten_math_log2.sig = "dd";
    var _emscripten_math_round = (x) => Math.round(x);
    Module["_emscripten_math_round"] = _emscripten_math_round;
    _emscripten_math_round.sig = "dd";
    var _emscripten_math_acos = (x) => Math.acos(x);
    Module["_emscripten_math_acos"] = _emscripten_math_acos;
    _emscripten_math_acos.sig = "dd";
    var _emscripten_math_acosh = (x) => Math.acosh(x);
    Module["_emscripten_math_acosh"] = _emscripten_math_acosh;
    _emscripten_math_acosh.sig = "dd";
    var _emscripten_math_asin = (x) => Math.asin(x);
    Module["_emscripten_math_asin"] = _emscripten_math_asin;
    _emscripten_math_asin.sig = "dd";
    var _emscripten_math_asinh = (x) => Math.asinh(x);
    Module["_emscripten_math_asinh"] = _emscripten_math_asinh;
    _emscripten_math_asinh.sig = "dd";
    var _emscripten_math_atan = (x) => Math.atan(x);
    Module["_emscripten_math_atan"] = _emscripten_math_atan;
    _emscripten_math_atan.sig = "dd";
    var _emscripten_math_atanh = (x) => Math.atanh(x);
    Module["_emscripten_math_atanh"] = _emscripten_math_atanh;
    _emscripten_math_atanh.sig = "dd";
    var _emscripten_math_atan2 = (y, x) => Math.atan2(y, x);
    Module["_emscripten_math_atan2"] = _emscripten_math_atan2;
    _emscripten_math_atan2.sig = "ddd";
    var _emscripten_math_cos = (x) => Math.cos(x);
    Module["_emscripten_math_cos"] = _emscripten_math_cos;
    _emscripten_math_cos.sig = "dd";
    var _emscripten_math_cosh = (x) => Math.cosh(x);
    Module["_emscripten_math_cosh"] = _emscripten_math_cosh;
    _emscripten_math_cosh.sig = "dd";
    var _emscripten_math_hypot = (count, varargs) => {
      var args = [];
      for (var i = 0; i < count; ++i) {
        args.push(HEAPF64[(varargs + i * 8) >> 3]);
      }
      return Math.hypot.apply(null, args);
    };
    Module["_emscripten_math_hypot"] = _emscripten_math_hypot;
    _emscripten_math_hypot.sig = "dip";
    var _emscripten_math_sin = (x) => Math.sin(x);
    Module["_emscripten_math_sin"] = _emscripten_math_sin;
    _emscripten_math_sin.sig = "dd";
    var _emscripten_math_sinh = (x) => Math.sinh(x);
    Module["_emscripten_math_sinh"] = _emscripten_math_sinh;
    _emscripten_math_sinh.sig = "dd";
    var _emscripten_math_tan = (x) => Math.tan(x);
    Module["_emscripten_math_tan"] = _emscripten_math_tan;
    _emscripten_math_tan.sig = "dd";
    var _emscripten_math_tanh = (x) => Math.tanh(x);
    Module["_emscripten_math_tanh"] = _emscripten_math_tanh;
    _emscripten_math_tanh.sig = "dd";
    function intArrayToString(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 255) {
          chr &= 255;
        }
        ret.push(String.fromCharCode(chr));
      }
      return ret.join("");
    }
    Module["intArrayToString"] = intArrayToString;
    var AsciiToString = (ptr) => {
      var str = "";
      while (1) {
        var ch = HEAPU8[ptr++ >> 0];
        if (!ch) return str;
        str += String.fromCharCode(ch);
      }
    };
    Module["AsciiToString"] = AsciiToString;
    var UTF16Decoder =
      typeof TextDecoder != "undefined"
        ? new TextDecoder("utf-16le")
        : undefined;
    Module["UTF16Decoder"] = UTF16Decoder;
    var UTF16ToString = (ptr, maxBytesToRead) => {
      var endPtr = ptr;
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
      var str = "";
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(ptr + i * 2) >> 1];
        if (codeUnit == 0) break;
        str += String.fromCharCode(codeUnit);
      }
      return str;
    };
    Module["UTF16ToString"] = UTF16ToString;
    var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2;
      var startPtr = outPtr;
      var numCharsToWrite =
        maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        var codeUnit = str.charCodeAt(i);
        HEAP16[outPtr >> 1] = codeUnit;
        outPtr += 2;
      }
      HEAP16[outPtr >> 1] = 0;
      return outPtr - startPtr;
    };
    Module["stringToUTF16"] = stringToUTF16;
    var lengthBytesUTF16 = (str) => str.length * 2;
    Module["lengthBytesUTF16"] = lengthBytesUTF16;
    var UTF32ToString = (ptr, maxBytesToRead) => {
      var i = 0;
      var str = "";
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(ptr + i * 4) >> 2];
        if (utf32 == 0) break;
        ++i;
        if (utf32 >= 65536) {
          var ch = utf32 - 65536;
          str += String.fromCharCode(55296 | (ch >> 10), 56320 | (ch & 1023));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    };
    Module["UTF32ToString"] = UTF32ToString;
    var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 2147483647;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit =
            (65536 + ((codeUnit & 1023) << 10)) | (trailSurrogate & 1023);
        }
        HEAP32[outPtr >> 2] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      HEAP32[outPtr >> 2] = 0;
      return outPtr - startPtr;
    };
    Module["stringToUTF32"] = stringToUTF32;
    var lengthBytesUTF32 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
        len += 4;
      }
      return len;
    };
    Module["lengthBytesUTF32"] = lengthBytesUTF32;
    var JSEvents = {
      inEventHandler: 0,
      removeAllEventListeners() {
        for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },
      registerRemoveEventListeners() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },
      deferredCalls: [],
      deferCall(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
          for (var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        for (var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (
            call.targetFunction == targetFunction &&
            arraysHaveEqualContent(call.argsList, argsList)
          ) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList,
        });
        JSEvents.deferredCalls.sort((x, y) => x.precedence < y.precedence);
      },
      removeDeferredCalls(targetFunction) {
        for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },
      canPerformEventHandlerRequests() {
        if (navigator.userActivation) {
          return navigator.userActivation.isActive;
        }
        return (
          JSEvents.inEventHandler &&
          JSEvents.currentEventHandler.allowsDeferredCalls
        );
      },
      runDeferredCalls() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(null, call.argsList);
        }
      },
      eventHandlers: [],
      removeAllHandlersOnTarget: (target, eventTypeString) => {
        for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (
            JSEvents.eventHandlers[i].target == target &&
            (!eventTypeString ||
              eventTypeString == JSEvents.eventHandlers[i].eventTypeString)
          ) {
            JSEvents._removeHandler(i--);
          }
        }
      },
      _removeHandler(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(
          h.eventTypeString,
          h.eventListenerFunc,
          h.useCapture,
        );
        JSEvents.eventHandlers.splice(i, 1);
      },
      registerOrRemoveHandler(eventHandler) {
        if (!eventHandler.target) {
          return -4;
        }
        var jsEventHandler = function jsEventHandler(event) {
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          JSEvents.runDeferredCalls();
          eventHandler.handlerFunc(event);
          JSEvents.runDeferredCalls();
          --JSEvents.inEventHandler;
        };
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(
            eventHandler.eventTypeString,
            jsEventHandler,
            eventHandler.useCapture,
          );
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (
              JSEvents.eventHandlers[i].target == eventHandler.target &&
              JSEvents.eventHandlers[i].eventTypeString ==
                eventHandler.eventTypeString
            ) {
              JSEvents._removeHandler(i--);
            }
          }
        }
        return 0;
      },
      getNodeNameForTarget(target) {
        if (!target) return "";
        if (target == window) return "#window";
        if (target == screen) return "#screen";
        return target && target.nodeName ? target.nodeName : "";
      },
      fullscreenEnabled() {
        return document.fullscreenEnabled || document.webkitFullscreenEnabled;
      },
    };
    Module["JSEvents"] = JSEvents;
    var maybeCStringToJsString = (cString) =>
      cString > 2 ? UTF8ToString(cString) : cString;
    Module["maybeCStringToJsString"] = maybeCStringToJsString;
    var specialHTMLTargets = [
      0,
      typeof document != "undefined" ? document : 0,
      typeof window != "undefined" ? window : 0,
    ];
    Module["specialHTMLTargets"] = specialHTMLTargets;
    var findEventTarget = (target) => {
      target = maybeCStringToJsString(target);
      var domElement =
        specialHTMLTargets[target] ||
        (typeof document != "undefined"
          ? document.querySelector(target)
          : undefined);
      return domElement;
    };
    Module["findEventTarget"] = findEventTarget;
    var registerKeyEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc(176);
      var keyEventHandlerFunc = (e) => {
        var keyEventData = JSEvents.keyEvent;
        HEAPF64[keyEventData >> 3] = e.timeStamp;
        var idx = keyEventData >> 2;
        HEAP32[idx + 2] = e.location;
        HEAP32[idx + 3] = e.ctrlKey;
        HEAP32[idx + 4] = e.shiftKey;
        HEAP32[idx + 5] = e.altKey;
        HEAP32[idx + 6] = e.metaKey;
        HEAP32[idx + 7] = e.repeat;
        HEAP32[idx + 8] = e.charCode;
        HEAP32[idx + 9] = e.keyCode;
        HEAP32[idx + 10] = e.which;
        stringToUTF8(e.key || "", keyEventData + 44, 32);
        stringToUTF8(e.code || "", keyEventData + 76, 32);
        stringToUTF8(e.char || "", keyEventData + 108, 32);
        stringToUTF8(e.locale || "", keyEventData + 140, 32);
        if (
          getWasmTableEntry(callbackfunc)(eventTypeId, keyEventData, userData)
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerKeyEventCallback"] = registerKeyEventCallback;
    var findCanvasEventTarget = (target) => findEventTarget(target);
    Module["findCanvasEventTarget"] = findCanvasEventTarget;
    var _emscripten_set_keypress_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerKeyEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        1,
        "keypress",
        targetThread,
      );
    Module["_emscripten_set_keypress_callback_on_thread"] =
      _emscripten_set_keypress_callback_on_thread;
    _emscripten_set_keypress_callback_on_thread.sig = "ippipp";
    var _emscripten_set_keydown_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerKeyEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        2,
        "keydown",
        targetThread,
      );
    Module["_emscripten_set_keydown_callback_on_thread"] =
      _emscripten_set_keydown_callback_on_thread;
    _emscripten_set_keydown_callback_on_thread.sig = "ippipp";
    var _emscripten_set_keyup_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerKeyEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        3,
        "keyup",
        targetThread,
      );
    Module["_emscripten_set_keyup_callback_on_thread"] =
      _emscripten_set_keyup_callback_on_thread;
    _emscripten_set_keyup_callback_on_thread.sig = "ippipp";
    var getBoundingClientRect = (e) =>
      specialHTMLTargets.indexOf(e) < 0
        ? e.getBoundingClientRect()
        : { left: 0, top: 0 };
    Module["getBoundingClientRect"] = getBoundingClientRect;
    var fillMouseEventData = (eventStruct, e, target) => {
      HEAPF64[eventStruct >> 3] = e.timeStamp;
      var idx = eventStruct >> 2;
      HEAP32[idx + 2] = e.screenX;
      HEAP32[idx + 3] = e.screenY;
      HEAP32[idx + 4] = e.clientX;
      HEAP32[idx + 5] = e.clientY;
      HEAP32[idx + 6] = e.ctrlKey;
      HEAP32[idx + 7] = e.shiftKey;
      HEAP32[idx + 8] = e.altKey;
      HEAP32[idx + 9] = e.metaKey;
      HEAP16[idx * 2 + 20] = e.button;
      HEAP16[idx * 2 + 21] = e.buttons;
      HEAP32[idx + 11] = e["movementX"];
      HEAP32[idx + 12] = e["movementY"];
      var rect = getBoundingClientRect(target);
      HEAP32[idx + 13] = e.clientX - rect.left;
      HEAP32[idx + 14] = e.clientY - rect.top;
    };
    Module["fillMouseEventData"] = fillMouseEventData;
    var registerMouseEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc(72);
      target = findEventTarget(target);
      var mouseEventHandlerFunc = (e = event) => {
        fillMouseEventData(JSEvents.mouseEvent, e, target);
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            JSEvents.mouseEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        allowsDeferredCalls:
          eventTypeString != "mousemove" &&
          eventTypeString != "mouseenter" &&
          eventTypeString != "mouseleave",
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerMouseEventCallback"] = registerMouseEventCallback;
    var _emscripten_set_click_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        4,
        "click",
        targetThread,
      );
    Module["_emscripten_set_click_callback_on_thread"] =
      _emscripten_set_click_callback_on_thread;
    _emscripten_set_click_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mousedown_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        5,
        "mousedown",
        targetThread,
      );
    Module["_emscripten_set_mousedown_callback_on_thread"] =
      _emscripten_set_mousedown_callback_on_thread;
    _emscripten_set_mousedown_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mouseup_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        6,
        "mouseup",
        targetThread,
      );
    Module["_emscripten_set_mouseup_callback_on_thread"] =
      _emscripten_set_mouseup_callback_on_thread;
    _emscripten_set_mouseup_callback_on_thread.sig = "ippipp";
    var _emscripten_set_dblclick_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        7,
        "dblclick",
        targetThread,
      );
    Module["_emscripten_set_dblclick_callback_on_thread"] =
      _emscripten_set_dblclick_callback_on_thread;
    _emscripten_set_dblclick_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mousemove_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        8,
        "mousemove",
        targetThread,
      );
    Module["_emscripten_set_mousemove_callback_on_thread"] =
      _emscripten_set_mousemove_callback_on_thread;
    _emscripten_set_mousemove_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mouseenter_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        33,
        "mouseenter",
        targetThread,
      );
    Module["_emscripten_set_mouseenter_callback_on_thread"] =
      _emscripten_set_mouseenter_callback_on_thread;
    _emscripten_set_mouseenter_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mouseleave_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        34,
        "mouseleave",
        targetThread,
      );
    Module["_emscripten_set_mouseleave_callback_on_thread"] =
      _emscripten_set_mouseleave_callback_on_thread;
    _emscripten_set_mouseleave_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mouseover_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        35,
        "mouseover",
        targetThread,
      );
    Module["_emscripten_set_mouseover_callback_on_thread"] =
      _emscripten_set_mouseover_callback_on_thread;
    _emscripten_set_mouseover_callback_on_thread.sig = "ippipp";
    var _emscripten_set_mouseout_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerMouseEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        36,
        "mouseout",
        targetThread,
      );
    Module["_emscripten_set_mouseout_callback_on_thread"] =
      _emscripten_set_mouseout_callback_on_thread;
    _emscripten_set_mouseout_callback_on_thread.sig = "ippipp";
    var _emscripten_get_mouse_status = (mouseState) => {
      if (!JSEvents.mouseEvent) return -7;
      HEAP8.set(
        HEAP8.subarray(JSEvents.mouseEvent, JSEvents.mouseEvent + 72),
        mouseState,
      );
      return 0;
    };
    Module["_emscripten_get_mouse_status"] = _emscripten_get_mouse_status;
    _emscripten_get_mouse_status.sig = "ip";
    var registerWheelEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc(104);
      var wheelHandlerFunc = (e = event) => {
        var wheelEvent = JSEvents.wheelEvent;
        fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(wheelEvent + 72) >> 3] = e["deltaX"];
        HEAPF64[(wheelEvent + 80) >> 3] = e["deltaY"];
        HEAPF64[(wheelEvent + 88) >> 3] = e["deltaZ"];
        HEAP32[(wheelEvent + 96) >> 2] = e["deltaMode"];
        if (getWasmTableEntry(callbackfunc)(eventTypeId, wheelEvent, userData))
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: wheelHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerWheelEventCallback"] = registerWheelEventCallback;
    var _emscripten_set_wheel_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (typeof target.onwheel != "undefined") {
        return registerWheelEventCallback(
          target,
          userData,
          useCapture,
          callbackfunc,
          9,
          "wheel",
          targetThread,
        );
      } else {
        return -1;
      }
    };
    Module["_emscripten_set_wheel_callback_on_thread"] =
      _emscripten_set_wheel_callback_on_thread;
    _emscripten_set_wheel_callback_on_thread.sig = "ippipp";
    var registerUiEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc(36);
      target = findEventTarget(target);
      var uiEventHandlerFunc = (e = event) => {
        if (e.target != target) {
          return;
        }
        var b = document.body;
        if (!b) {
          return;
        }
        var uiEvent = JSEvents.uiEvent;
        HEAP32[uiEvent >> 2] = e.detail;
        HEAP32[(uiEvent + 4) >> 2] = b.clientWidth;
        HEAP32[(uiEvent + 8) >> 2] = b.clientHeight;
        HEAP32[(uiEvent + 12) >> 2] = innerWidth;
        HEAP32[(uiEvent + 16) >> 2] = innerHeight;
        HEAP32[(uiEvent + 20) >> 2] = outerWidth;
        HEAP32[(uiEvent + 24) >> 2] = outerHeight;
        HEAP32[(uiEvent + 28) >> 2] = pageXOffset;
        HEAP32[(uiEvent + 32) >> 2] = pageYOffset;
        if (getWasmTableEntry(callbackfunc)(eventTypeId, uiEvent, userData))
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerUiEventCallback"] = registerUiEventCallback;
    var _emscripten_set_resize_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerUiEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        10,
        "resize",
        targetThread,
      );
    Module["_emscripten_set_resize_callback_on_thread"] =
      _emscripten_set_resize_callback_on_thread;
    _emscripten_set_resize_callback_on_thread.sig = "ippipp";
    var _emscripten_set_scroll_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerUiEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        11,
        "scroll",
        targetThread,
      );
    Module["_emscripten_set_scroll_callback_on_thread"] =
      _emscripten_set_scroll_callback_on_thread;
    _emscripten_set_scroll_callback_on_thread.sig = "ippipp";
    var registerFocusEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.focusEvent) JSEvents.focusEvent = _malloc(256);
      var focusEventHandlerFunc = (e = event) => {
        var nodeName = JSEvents.getNodeNameForTarget(e.target);
        var id = e.target.id ? e.target.id : "";
        var focusEvent = JSEvents.focusEvent;
        stringToUTF8(nodeName, focusEvent + 0, 128);
        stringToUTF8(id, focusEvent + 128, 128);
        if (getWasmTableEntry(callbackfunc)(eventTypeId, focusEvent, userData))
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: focusEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerFocusEventCallback"] = registerFocusEventCallback;
    var _emscripten_set_blur_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerFocusEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        12,
        "blur",
        targetThread,
      );
    Module["_emscripten_set_blur_callback_on_thread"] =
      _emscripten_set_blur_callback_on_thread;
    _emscripten_set_blur_callback_on_thread.sig = "ippipp";
    var _emscripten_set_focus_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerFocusEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        13,
        "focus",
        targetThread,
      );
    Module["_emscripten_set_focus_callback_on_thread"] =
      _emscripten_set_focus_callback_on_thread;
    _emscripten_set_focus_callback_on_thread.sig = "ippipp";
    var _emscripten_set_focusin_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerFocusEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        14,
        "focusin",
        targetThread,
      );
    Module["_emscripten_set_focusin_callback_on_thread"] =
      _emscripten_set_focusin_callback_on_thread;
    _emscripten_set_focusin_callback_on_thread.sig = "ippipp";
    var _emscripten_set_focusout_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerFocusEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        15,
        "focusout",
        targetThread,
      );
    Module["_emscripten_set_focusout_callback_on_thread"] =
      _emscripten_set_focusout_callback_on_thread;
    _emscripten_set_focusout_callback_on_thread.sig = "ippipp";
    var fillDeviceOrientationEventData = (eventStruct, e, target) => {
      HEAPF64[eventStruct >> 3] = e.alpha;
      HEAPF64[(eventStruct + 8) >> 3] = e.beta;
      HEAPF64[(eventStruct + 16) >> 3] = e.gamma;
      HEAP32[(eventStruct + 24) >> 2] = e.absolute;
    };
    Module["fillDeviceOrientationEventData"] = fillDeviceOrientationEventData;
    var registerDeviceOrientationEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.deviceOrientationEvent)
        JSEvents.deviceOrientationEvent = _malloc(32);
      var deviceOrientationEventHandlerFunc = (e = event) => {
        fillDeviceOrientationEventData(
          JSEvents.deviceOrientationEvent,
          e,
          target,
        );
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            JSEvents.deviceOrientationEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: deviceOrientationEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerDeviceOrientationEventCallback"] =
      registerDeviceOrientationEventCallback;
    var _emscripten_set_deviceorientation_callback_on_thread = (
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerDeviceOrientationEventCallback(
        2,
        userData,
        useCapture,
        callbackfunc,
        16,
        "deviceorientation",
        targetThread,
      );
    Module["_emscripten_set_deviceorientation_callback_on_thread"] =
      _emscripten_set_deviceorientation_callback_on_thread;
    _emscripten_set_deviceorientation_callback_on_thread.sig = "ipipp";
    var _emscripten_get_deviceorientation_status = (orientationState) => {
      if (!JSEvents.deviceOrientationEvent) return -7;
      HEAP32.set(
        HEAP32.subarray(JSEvents.deviceOrientationEvent, 32),
        orientationState,
      );
      return 0;
    };
    Module["_emscripten_get_deviceorientation_status"] =
      _emscripten_get_deviceorientation_status;
    _emscripten_get_deviceorientation_status.sig = "ip";
    var fillDeviceMotionEventData = (eventStruct, e, target) => {
      var supportedFields = 0;
      var a = e["acceleration"];
      supportedFields |= a && 1;
      var ag = e["accelerationIncludingGravity"];
      supportedFields |= ag && 2;
      var rr = e["rotationRate"];
      supportedFields |= rr && 4;
      a = a || {};
      ag = ag || {};
      rr = rr || {};
      HEAPF64[eventStruct >> 3] = a["x"];
      HEAPF64[(eventStruct + 8) >> 3] = a["y"];
      HEAPF64[(eventStruct + 16) >> 3] = a["z"];
      HEAPF64[(eventStruct + 24) >> 3] = ag["x"];
      HEAPF64[(eventStruct + 32) >> 3] = ag["y"];
      HEAPF64[(eventStruct + 40) >> 3] = ag["z"];
      HEAPF64[(eventStruct + 48) >> 3] = rr["alpha"];
      HEAPF64[(eventStruct + 56) >> 3] = rr["beta"];
      HEAPF64[(eventStruct + 64) >> 3] = rr["gamma"];
    };
    Module["fillDeviceMotionEventData"] = fillDeviceMotionEventData;
    var registerDeviceMotionEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.deviceMotionEvent) JSEvents.deviceMotionEvent = _malloc(80);
      var deviceMotionEventHandlerFunc = (e = event) => {
        fillDeviceMotionEventData(JSEvents.deviceMotionEvent, e, target);
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            JSEvents.deviceMotionEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: deviceMotionEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerDeviceMotionEventCallback"] =
      registerDeviceMotionEventCallback;
    var _emscripten_set_devicemotion_callback_on_thread = (
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerDeviceMotionEventCallback(
        2,
        userData,
        useCapture,
        callbackfunc,
        17,
        "devicemotion",
        targetThread,
      );
    Module["_emscripten_set_devicemotion_callback_on_thread"] =
      _emscripten_set_devicemotion_callback_on_thread;
    _emscripten_set_devicemotion_callback_on_thread.sig = "ipipp";
    var _emscripten_get_devicemotion_status = (motionState) => {
      if (!JSEvents.deviceMotionEvent) return -7;
      HEAP32.set(HEAP32.subarray(JSEvents.deviceMotionEvent, 80), motionState);
      return 0;
    };
    Module["_emscripten_get_devicemotion_status"] =
      _emscripten_get_devicemotion_status;
    _emscripten_get_devicemotion_status.sig = "ip";
    var screenOrientation = () => {
      if (!screen) return undefined;
      return (
        screen.orientation ||
        screen.mozOrientation ||
        screen.webkitOrientation ||
        screen.msOrientation
      );
    };
    Module["screenOrientation"] = screenOrientation;
    var fillOrientationChangeEventData = (eventStruct) => {
      var orientations = [
        "portrait-primary",
        "portrait-secondary",
        "landscape-primary",
        "landscape-secondary",
      ];
      var orientations2 = ["portrait", "portrait", "landscape", "landscape"];
      var orientationString = screenOrientation();
      var orientation = orientations.indexOf(orientationString);
      if (orientation == -1) {
        orientation = orientations2.indexOf(orientationString);
      }
      HEAP32[eventStruct >> 2] = 1 << orientation;
      HEAP32[(eventStruct + 4) >> 2] = orientation;
    };
    Module["fillOrientationChangeEventData"] = fillOrientationChangeEventData;
    var registerOrientationChangeEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.orientationChangeEvent)
        JSEvents.orientationChangeEvent = _malloc(8);
      var orientationChangeEventHandlerFunc = (e = event) => {
        var orientationChangeEvent = JSEvents.orientationChangeEvent;
        fillOrientationChangeEventData(orientationChangeEvent);
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            orientationChangeEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      if (
        eventTypeString == "orientationchange" &&
        screen.mozOrientation !== undefined
      ) {
        eventTypeString = "mozorientationchange";
      }
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: orientationChangeEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerOrientationChangeEventCallback"] =
      registerOrientationChangeEventCallback;
    var _emscripten_set_orientationchange_callback_on_thread = (
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (!screen || !screen["addEventListener"]) return -1;
      return registerOrientationChangeEventCallback(
        screen,
        userData,
        useCapture,
        callbackfunc,
        18,
        "orientationchange",
        targetThread,
      );
    };
    Module["_emscripten_set_orientationchange_callback_on_thread"] =
      _emscripten_set_orientationchange_callback_on_thread;
    _emscripten_set_orientationchange_callback_on_thread.sig = "ipipp";
    var _emscripten_get_orientation_status = (orientationChangeEvent) => {
      if (!screenOrientation() && typeof orientation == "undefined") return -1;
      fillOrientationChangeEventData(orientationChangeEvent);
      return 0;
    };
    Module["_emscripten_get_orientation_status"] =
      _emscripten_get_orientation_status;
    _emscripten_get_orientation_status.sig = "ip";
    var _emscripten_lock_orientation = (allowedOrientations) => {
      var orientations = [];
      if (allowedOrientations & 1) orientations.push("portrait-primary");
      if (allowedOrientations & 2) orientations.push("portrait-secondary");
      if (allowedOrientations & 4) orientations.push("landscape-primary");
      if (allowedOrientations & 8) orientations.push("landscape-secondary");
      var succeeded;
      if (screen.lockOrientation) {
        succeeded = screen.lockOrientation(orientations);
      } else if (screen.mozLockOrientation) {
        succeeded = screen.mozLockOrientation(orientations);
      } else if (screen.webkitLockOrientation) {
        succeeded = screen.webkitLockOrientation(orientations);
      } else if (screen.msLockOrientation) {
        succeeded = screen.msLockOrientation(orientations);
      } else {
        return -1;
      }
      if (succeeded) {
        return 0;
      }
      return -6;
    };
    Module["_emscripten_lock_orientation"] = _emscripten_lock_orientation;
    _emscripten_lock_orientation.sig = "ii";
    var _emscripten_unlock_orientation = () => {
      if (screen.unlockOrientation) {
        screen.unlockOrientation();
      } else if (screen.mozUnlockOrientation) {
        screen.mozUnlockOrientation();
      } else if (screen.webkitUnlockOrientation) {
        screen.webkitUnlockOrientation();
      } else if (screen.msUnlockOrientation) {
        screen.msUnlockOrientation();
      } else {
        return -1;
      }
      return 0;
    };
    Module["_emscripten_unlock_orientation"] = _emscripten_unlock_orientation;
    _emscripten_unlock_orientation.sig = "i";
    var fillFullscreenChangeEventData = (eventStruct) => {
      var fullscreenElement =
        document.fullscreenElement ||
        document.mozFullScreenElement ||
        document.webkitFullscreenElement ||
        document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      HEAP32[eventStruct >> 2] = isFullscreen;
      HEAP32[(eventStruct + 4) >> 2] = JSEvents.fullscreenEnabled();
      var reportedElement = isFullscreen
        ? fullscreenElement
        : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = reportedElement && reportedElement.id ? reportedElement.id : "";
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(eventStruct + 264) >> 2] = reportedElement
        ? reportedElement.clientWidth
        : 0;
      HEAP32[(eventStruct + 268) >> 2] = reportedElement
        ? reportedElement.clientHeight
        : 0;
      HEAP32[(eventStruct + 272) >> 2] = screen.width;
      HEAP32[(eventStruct + 276) >> 2] = screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    };
    Module["fillFullscreenChangeEventData"] = fillFullscreenChangeEventData;
    var registerFullscreenChangeEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.fullscreenChangeEvent)
        JSEvents.fullscreenChangeEvent = _malloc(280);
      var fullscreenChangeEventhandlerFunc = (e = event) => {
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
        fillFullscreenChangeEventData(fullscreenChangeEvent);
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            fullscreenChangeEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerFullscreenChangeEventCallback"] =
      registerFullscreenChangeEventCallback;
    var _emscripten_set_fullscreenchange_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
      registerFullscreenChangeEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        19,
        "webkitfullscreenchange",
        targetThread,
      );
      return registerFullscreenChangeEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        19,
        "fullscreenchange",
        targetThread,
      );
    };
    Module["_emscripten_set_fullscreenchange_callback_on_thread"] =
      _emscripten_set_fullscreenchange_callback_on_thread;
    _emscripten_set_fullscreenchange_callback_on_thread.sig = "ippipp";
    var _emscripten_get_fullscreen_status = (fullscreenStatus) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      fillFullscreenChangeEventData(fullscreenStatus);
      return 0;
    };
    Module["_emscripten_get_fullscreen_status"] =
      _emscripten_get_fullscreen_status;
    _emscripten_get_fullscreen_status.sig = "ip";
    var _emscripten_get_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      HEAP32[width >> 2] = canvas.width;
      HEAP32[height >> 2] = canvas.height;
    };
    Module["_emscripten_get_canvas_element_size"] =
      _emscripten_get_canvas_element_size;
    _emscripten_get_canvas_element_size.sig = "ippp";
    var getCanvasElementSize = (target) =>
      withStackSave(() => {
        var w = stackAlloc(8);
        var h = w + 4;
        var targetInt = stringToUTF8OnStack(target.id);
        var ret = _emscripten_get_canvas_element_size(targetInt, w, h);
        var size = [HEAP32[w >> 2], HEAP32[h >> 2]];
        return size;
      });
    Module["getCanvasElementSize"] = getCanvasElementSize;
    var _emscripten_set_canvas_element_size = (target, width, height) => {
      var canvas = findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    };
    Module["_emscripten_set_canvas_element_size"] =
      _emscripten_set_canvas_element_size;
    _emscripten_set_canvas_element_size.sig = "ipii";
    var setCanvasElementSize = (target, width, height) => {
      if (!target.controlTransferredOffscreen) {
        target.width = width;
        target.height = height;
      } else {
        withStackSave(() => {
          var targetInt = stringToUTF8OnStack(target.id);
          _emscripten_set_canvas_element_size(targetInt, width, height);
        });
      }
    };
    Module["setCanvasElementSize"] = setCanvasElementSize;
    var registerRestoreOldStyle = (canvas) => {
      var canvasSize = getCanvasElementSize(canvas);
      var oldWidth = canvasSize[0];
      var oldHeight = canvasSize[1];
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor;
      var oldDocumentBackgroundColor = document.body.style.backgroundColor;
      var oldPaddingLeft = canvas.style.paddingLeft;
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft;
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow;
      var oldDocumentScroll = document.body.scroll;
      var oldImageRendering = canvas.style.imageRendering;
      function restoreOldStyle() {
        var fullscreenElement =
          document.fullscreenElement || document.webkitFullscreenElement;
        if (!fullscreenElement) {
          document.removeEventListener("fullscreenchange", restoreOldStyle);
          document.removeEventListener(
            "webkitfullscreenchange",
            restoreOldStyle,
          );
          setCanvasElementSize(canvas, oldWidth, oldHeight);
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor;
          if (!oldDocumentBackgroundColor)
            document.body.style.backgroundColor = "white";
          document.body.style.backgroundColor = oldDocumentBackgroundColor;
          canvas.style.paddingLeft = oldPaddingLeft;
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft;
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow;
          document.body.scroll = oldDocumentScroll;
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject)
            canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
          if (currentFullscreenStrategy.canvasResizedCallback) {
            getWasmTableEntry(currentFullscreenStrategy.canvasResizedCallback)(
              37,
              0,
              currentFullscreenStrategy.canvasResizedCallbackUserData,
            );
          }
        }
      }
      document.addEventListener("fullscreenchange", restoreOldStyle);
      document.addEventListener("webkitfullscreenchange", restoreOldStyle);
      return restoreOldStyle;
    };
    Module["registerRestoreOldStyle"] = registerRestoreOldStyle;
    var setLetterbox = (element, topBottom, leftRight) => {
      element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
      element.style.paddingTop = element.style.paddingBottom = topBottom + "px";
    };
    Module["setLetterbox"] = setLetterbox;
    var JSEvents_resizeCanvasForFullscreen = (target, strategy) => {
      var restoreOldStyle = registerRestoreOldStyle(target);
      var cssWidth = strategy.softFullscreen ? innerWidth : screen.width;
      var cssHeight = strategy.softFullscreen ? innerHeight : screen.height;
      var rect = getBoundingClientRect(target);
      var windowedCssWidth = rect.width;
      var windowedCssHeight = rect.height;
      var canvasSize = getCanvasElementSize(target);
      var windowedRttWidth = canvasSize[0];
      var windowedRttHeight = canvasSize[1];
      if (strategy.scaleMode == 3) {
        setLetterbox(
          target,
          (cssHeight - windowedCssHeight) / 2,
          (cssWidth - windowedCssWidth) / 2,
        );
        cssWidth = windowedCssWidth;
        cssHeight = windowedCssHeight;
      } else if (strategy.scaleMode == 2) {
        if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
          var desiredCssHeight =
            (windowedRttHeight * cssWidth) / windowedRttWidth;
          setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
          cssHeight = desiredCssHeight;
        } else {
          var desiredCssWidth =
            (windowedRttWidth * cssHeight) / windowedRttHeight;
          setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
          cssWidth = desiredCssWidth;
        }
      }
      if (!target.style.backgroundColor) target.style.backgroundColor = "black";
      if (!document.body.style.backgroundColor)
        document.body.style.backgroundColor = "black";
      target.style.width = cssWidth + "px";
      target.style.height = cssHeight + "px";
      if (strategy.filteringMode == 1) {
        target.style.imageRendering = "optimizeSpeed";
        target.style.imageRendering = "-moz-crisp-edges";
        target.style.imageRendering = "-o-crisp-edges";
        target.style.imageRendering = "-webkit-optimize-contrast";
        target.style.imageRendering = "optimize-contrast";
        target.style.imageRendering = "crisp-edges";
        target.style.imageRendering = "pixelated";
      }
      var dpiScale =
        strategy.canvasResolutionScaleMode == 2 ? devicePixelRatio : 1;
      if (strategy.canvasResolutionScaleMode != 0) {
        var newWidth = (cssWidth * dpiScale) | 0;
        var newHeight = (cssHeight * dpiScale) | 0;
        setCanvasElementSize(target, newWidth, newHeight);
        if (target.GLctxObject)
          target.GLctxObject.GLctx.viewport(0, 0, newWidth, newHeight);
      }
      return restoreOldStyle;
    };
    Module["JSEvents_resizeCanvasForFullscreen"] =
      JSEvents_resizeCanvasForFullscreen;
    var JSEvents_requestFullscreen = (target, strategy) => {
      if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
        JSEvents_resizeCanvasForFullscreen(target, strategy);
      }
      if (target.requestFullscreen) {
        target.requestFullscreen();
      } else if (target.webkitRequestFullscreen) {
        target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      } else {
        return JSEvents.fullscreenEnabled() ? -3 : -1;
      }
      currentFullscreenStrategy = strategy;
      if (strategy.canvasResizedCallback) {
        getWasmTableEntry(strategy.canvasResizedCallback)(
          37,
          0,
          strategy.canvasResizedCallbackUserData,
        );
      }
      return 0;
    };
    Module["JSEvents_requestFullscreen"] = JSEvents_requestFullscreen;
    var hideEverythingExceptGivenElement = (onlyVisibleElement) => {
      var child = onlyVisibleElement;
      var parent = child.parentNode;
      var hiddenElements = [];
      while (child != document.body) {
        var children = parent.children;
        for (var i = 0; i < children.length; ++i) {
          if (children[i] != child) {
            hiddenElements.push({
              node: children[i],
              displayState: children[i].style.display,
            });
            children[i].style.display = "none";
          }
        }
        child = parent;
        parent = parent.parentNode;
      }
      return hiddenElements;
    };
    Module["hideEverythingExceptGivenElement"] =
      hideEverythingExceptGivenElement;
    var restoreHiddenElements = (hiddenElements) => {
      for (var i = 0; i < hiddenElements.length; ++i) {
        hiddenElements[i].node.style.display = hiddenElements[i].displayState;
      }
    };
    Module["restoreHiddenElements"] = restoreHiddenElements;
    var currentFullscreenStrategy = {};
    Module["currentFullscreenStrategy"] = currentFullscreenStrategy;
    var restoreOldWindowedStyle = null;
    Module["restoreOldWindowedStyle"] = restoreOldWindowedStyle;
    var softFullscreenResizeWebGLRenderTarget = () => {
      var dpr = devicePixelRatio;
      var inHiDPIFullscreenMode =
        currentFullscreenStrategy.canvasResolutionScaleMode == 2;
      var inAspectRatioFixedFullscreenMode =
        currentFullscreenStrategy.scaleMode == 2;
      var inPixelPerfectFullscreenMode =
        currentFullscreenStrategy.canvasResolutionScaleMode != 0;
      var inCenteredWithoutScalingFullscreenMode =
        currentFullscreenStrategy.scaleMode == 3;
      var screenWidth = inHiDPIFullscreenMode
        ? Math.round(innerWidth * dpr)
        : innerWidth;
      var screenHeight = inHiDPIFullscreenMode
        ? Math.round(innerHeight * dpr)
        : innerHeight;
      var w = screenWidth;
      var h = screenHeight;
      var canvas = currentFullscreenStrategy.target;
      var canvasSize = getCanvasElementSize(canvas);
      var x = canvasSize[0];
      var y = canvasSize[1];
      var topMargin;
      if (inAspectRatioFixedFullscreenMode) {
        if (w * y < x * h) h = ((w * y) / x) | 0;
        else if (w * y > x * h) w = ((h * x) / y) | 0;
        topMargin = ((screenHeight - h) / 2) | 0;
      }
      if (inPixelPerfectFullscreenMode) {
        setCanvasElementSize(canvas, w, h);
        if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, w, h);
      }
      if (inHiDPIFullscreenMode) {
        topMargin /= dpr;
        w /= dpr;
        h /= dpr;
        w = Math.round(w * 1e4) / 1e4;
        h = Math.round(h * 1e4) / 1e4;
        topMargin = Math.round(topMargin * 1e4) / 1e4;
      }
      if (inCenteredWithoutScalingFullscreenMode) {
        var t = (innerHeight - jstoi_q(canvas.style.height)) / 2;
        var b = (innerWidth - jstoi_q(canvas.style.width)) / 2;
        setLetterbox(canvas, t, b);
      } else {
        canvas.style.width = w + "px";
        canvas.style.height = h + "px";
        var b = (innerWidth - w) / 2;
        setLetterbox(canvas, topMargin, b);
      }
      if (
        !inCenteredWithoutScalingFullscreenMode &&
        currentFullscreenStrategy.canvasResizedCallback
      ) {
        getWasmTableEntry(currentFullscreenStrategy.canvasResizedCallback)(
          37,
          0,
          currentFullscreenStrategy.canvasResizedCallbackUserData,
        );
      }
    };
    Module["softFullscreenResizeWebGLRenderTarget"] =
      softFullscreenResizeWebGLRenderTarget;
    var doRequestFullscreen = (target, strategy) => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
      if (!target.requestFullscreen && !target.webkitRequestFullscreen) {
        return -3;
      }
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
      if (!canPerformRequests) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents_requestFullscreen, 1, [target, strategy]);
          return 1;
        }
        return -2;
      }
      return JSEvents_requestFullscreen(target, strategy);
    };
    Module["doRequestFullscreen"] = doRequestFullscreen;
    var _emscripten_request_fullscreen = (target, deferUntilInEventHandler) => {
      var strategy = {
        scaleMode: 0,
        canvasResolutionScaleMode: 0,
        filteringMode: 0,
        deferUntilInEventHandler: deferUntilInEventHandler,
        canvasResizedCallbackTargetThread: 2,
      };
      return doRequestFullscreen(target, strategy);
    };
    Module["_emscripten_request_fullscreen"] = _emscripten_request_fullscreen;
    _emscripten_request_fullscreen.sig = "ipi";
    var _emscripten_request_fullscreen_strategy = (
      target,
      deferUntilInEventHandler,
      fullscreenStrategy,
    ) => {
      var strategy = {
        scaleMode: HEAP32[fullscreenStrategy >> 2],
        canvasResolutionScaleMode: HEAP32[(fullscreenStrategy + 4) >> 2],
        filteringMode: HEAP32[(fullscreenStrategy + 8) >> 2],
        deferUntilInEventHandler: deferUntilInEventHandler,
        canvasResizedCallback: HEAP32[(fullscreenStrategy + 12) >> 2],
        canvasResizedCallbackUserData: HEAP32[(fullscreenStrategy + 16) >> 2],
      };
      return doRequestFullscreen(target, strategy);
    };
    Module["_emscripten_request_fullscreen_strategy"] =
      _emscripten_request_fullscreen_strategy;
    _emscripten_request_fullscreen_strategy.sig = "ipip";
    var _emscripten_enter_soft_fullscreen = (target, fullscreenStrategy) => {
      target = findEventTarget(target);
      if (!target) return -4;
      var strategy = {
        scaleMode: HEAP32[fullscreenStrategy >> 2],
        canvasResolutionScaleMode: HEAP32[(fullscreenStrategy + 4) >> 2],
        filteringMode: HEAP32[(fullscreenStrategy + 8) >> 2],
        canvasResizedCallback: HEAP32[(fullscreenStrategy + 12) >> 2],
        canvasResizedCallbackUserData: HEAP32[(fullscreenStrategy + 16) >> 2],
        target: target,
        softFullscreen: true,
      };
      var restoreOldStyle = JSEvents_resizeCanvasForFullscreen(
        target,
        strategy,
      );
      document.documentElement.style.overflow = "hidden";
      document.body.scroll = "no";
      document.body.style.margin = "0px";
      var hiddenElements = hideEverythingExceptGivenElement(target);
      function restoreWindowedState() {
        restoreOldStyle();
        restoreHiddenElements(hiddenElements);
        removeEventListener("resize", softFullscreenResizeWebGLRenderTarget);
        if (strategy.canvasResizedCallback) {
          getWasmTableEntry(strategy.canvasResizedCallback)(
            37,
            0,
            strategy.canvasResizedCallbackUserData,
          );
        }
        currentFullscreenStrategy = 0;
      }
      restoreOldWindowedStyle = restoreWindowedState;
      currentFullscreenStrategy = strategy;
      addEventListener("resize", softFullscreenResizeWebGLRenderTarget);
      if (strategy.canvasResizedCallback) {
        getWasmTableEntry(strategy.canvasResizedCallback)(
          37,
          0,
          strategy.canvasResizedCallbackUserData,
        );
      }
      return 0;
    };
    Module["_emscripten_enter_soft_fullscreen"] =
      _emscripten_enter_soft_fullscreen;
    _emscripten_enter_soft_fullscreen.sig = "ipp";
    var _emscripten_exit_soft_fullscreen = () => {
      if (restoreOldWindowedStyle) restoreOldWindowedStyle();
      restoreOldWindowedStyle = null;
      return 0;
    };
    Module["_emscripten_exit_soft_fullscreen"] =
      _emscripten_exit_soft_fullscreen;
    _emscripten_exit_soft_fullscreen.sig = "i";
    var _emscripten_exit_fullscreen = () => {
      if (!JSEvents.fullscreenEnabled()) return -1;
      JSEvents.removeDeferredCalls(JSEvents_requestFullscreen);
      var d = specialHTMLTargets[1];
      if (d.exitFullscreen) {
        d.fullscreenElement && d.exitFullscreen();
      } else if (d.webkitExitFullscreen) {
        d.webkitFullscreenElement && d.webkitExitFullscreen();
      } else {
        return -1;
      }
      return 0;
    };
    Module["_emscripten_exit_fullscreen"] = _emscripten_exit_fullscreen;
    _emscripten_exit_fullscreen.sig = "i";
    var fillPointerlockChangeEventData = (eventStruct) => {
      var pointerLockElement =
        document.pointerLockElement ||
        document.mozPointerLockElement ||
        document.webkitPointerLockElement ||
        document.msPointerLockElement;
      var isPointerlocked = !!pointerLockElement;
      HEAP32[eventStruct >> 2] = isPointerlocked;
      var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
      var id =
        pointerLockElement && pointerLockElement.id
          ? pointerLockElement.id
          : "";
      stringToUTF8(nodeName, eventStruct + 4, 128);
      stringToUTF8(id, eventStruct + 132, 128);
    };
    Module["fillPointerlockChangeEventData"] = fillPointerlockChangeEventData;
    var registerPointerlockChangeEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.pointerlockChangeEvent)
        JSEvents.pointerlockChangeEvent = _malloc(260);
      var pointerlockChangeEventHandlerFunc = (e = event) => {
        var pointerlockChangeEvent = JSEvents.pointerlockChangeEvent;
        fillPointerlockChangeEventData(pointerlockChangeEvent);
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            pointerlockChangeEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: pointerlockChangeEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerPointerlockChangeEventCallback"] =
      registerPointerlockChangeEventCallback;
    var _emscripten_set_pointerlockchange_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (
        !document ||
        !document.body ||
        (!document.body.requestPointerLock &&
          !document.body.mozRequestPointerLock &&
          !document.body.webkitRequestPointerLock &&
          !document.body.msRequestPointerLock)
      ) {
        return -1;
      }
      target = findEventTarget(target);
      if (!target) return -4;
      registerPointerlockChangeEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        20,
        "mozpointerlockchange",
        targetThread,
      );
      registerPointerlockChangeEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        20,
        "webkitpointerlockchange",
        targetThread,
      );
      registerPointerlockChangeEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        20,
        "mspointerlockchange",
        targetThread,
      );
      return registerPointerlockChangeEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        20,
        "pointerlockchange",
        targetThread,
      );
    };
    Module["_emscripten_set_pointerlockchange_callback_on_thread"] =
      _emscripten_set_pointerlockchange_callback_on_thread;
    _emscripten_set_pointerlockchange_callback_on_thread.sig = "ippipp";
    var registerPointerlockErrorEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      var pointerlockErrorEventHandlerFunc = (e = event) => {
        if (getWasmTableEntry(callbackfunc)(eventTypeId, 0, userData))
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: pointerlockErrorEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerPointerlockErrorEventCallback"] =
      registerPointerlockErrorEventCallback;
    var _emscripten_set_pointerlockerror_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (
        !document ||
        (!document.body.requestPointerLock &&
          !document.body.mozRequestPointerLock &&
          !document.body.webkitRequestPointerLock &&
          !document.body.msRequestPointerLock)
      ) {
        return -1;
      }
      target = findEventTarget(target);
      if (!target) return -4;
      registerPointerlockErrorEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        38,
        "mozpointerlockerror",
        targetThread,
      );
      registerPointerlockErrorEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        38,
        "webkitpointerlockerror",
        targetThread,
      );
      registerPointerlockErrorEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        38,
        "mspointerlockerror",
        targetThread,
      );
      return registerPointerlockErrorEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        38,
        "pointerlockerror",
        targetThread,
      );
    };
    Module["_emscripten_set_pointerlockerror_callback_on_thread"] =
      _emscripten_set_pointerlockerror_callback_on_thread;
    _emscripten_set_pointerlockerror_callback_on_thread.sig = "ippipp";
    var _emscripten_get_pointerlock_status = (pointerlockStatus) => {
      if (pointerlockStatus) fillPointerlockChangeEventData(pointerlockStatus);
      if (
        !document.body ||
        (!document.body.requestPointerLock &&
          !document.body.mozRequestPointerLock &&
          !document.body.webkitRequestPointerLock &&
          !document.body.msRequestPointerLock)
      ) {
        return -1;
      }
      return 0;
    };
    Module["_emscripten_get_pointerlock_status"] =
      _emscripten_get_pointerlock_status;
    _emscripten_get_pointerlock_status.sig = "ip";
    var requestPointerLock = (target) => {
      if (target.requestPointerLock) {
        target.requestPointerLock();
      } else {
        if (document.body.requestPointerLock) {
          return -3;
        }
        return -1;
      }
      return 0;
    };
    Module["requestPointerLock"] = requestPointerLock;
    var _emscripten_request_pointerlock = (
      target,
      deferUntilInEventHandler,
    ) => {
      target = findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock) {
        return -1;
      }
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(requestPointerLock, 2, [target]);
          return 1;
        }
        return -2;
      }
      return requestPointerLock(target);
    };
    Module["_emscripten_request_pointerlock"] = _emscripten_request_pointerlock;
    _emscripten_request_pointerlock.sig = "ipi";
    var _emscripten_exit_pointerlock = () => {
      JSEvents.removeDeferredCalls(requestPointerLock);
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else {
        return -1;
      }
      return 0;
    };
    Module["_emscripten_exit_pointerlock"] = _emscripten_exit_pointerlock;
    _emscripten_exit_pointerlock.sig = "i";
    var _emscripten_vibrate = (msecs) => {
      if (!navigator.vibrate) return -1;
      navigator.vibrate(msecs);
      return 0;
    };
    Module["_emscripten_vibrate"] = _emscripten_vibrate;
    _emscripten_vibrate.sig = "ii";
    var _emscripten_vibrate_pattern = (msecsArray, numEntries) => {
      if (!navigator.vibrate) return -1;
      var vibrateList = [];
      for (var i = 0; i < numEntries; ++i) {
        var msecs = HEAP32[(msecsArray + i * 4) >> 2];
        vibrateList.push(msecs);
      }
      navigator.vibrate(vibrateList);
      return 0;
    };
    Module["_emscripten_vibrate_pattern"] = _emscripten_vibrate_pattern;
    _emscripten_vibrate_pattern.sig = "ipi";
    var fillVisibilityChangeEventData = (eventStruct) => {
      var visibilityStates = ["hidden", "visible", "prerender", "unloaded"];
      var visibilityState = visibilityStates.indexOf(document.visibilityState);
      HEAP32[eventStruct >> 2] = document.hidden;
      HEAP32[(eventStruct + 4) >> 2] = visibilityState;
    };
    Module["fillVisibilityChangeEventData"] = fillVisibilityChangeEventData;
    var registerVisibilityChangeEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.visibilityChangeEvent)
        JSEvents.visibilityChangeEvent = _malloc(8);
      var visibilityChangeEventHandlerFunc = (e = event) => {
        var visibilityChangeEvent = JSEvents.visibilityChangeEvent;
        fillVisibilityChangeEventData(visibilityChangeEvent);
        if (
          getWasmTableEntry(callbackfunc)(
            eventTypeId,
            visibilityChangeEvent,
            userData,
          )
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: visibilityChangeEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerVisibilityChangeEventCallback"] =
      registerVisibilityChangeEventCallback;
    var _emscripten_set_visibilitychange_callback_on_thread = (
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (!specialHTMLTargets[1]) {
        return -4;
      }
      return registerVisibilityChangeEventCallback(
        specialHTMLTargets[1],
        userData,
        useCapture,
        callbackfunc,
        21,
        "visibilitychange",
        targetThread,
      );
    };
    Module["_emscripten_set_visibilitychange_callback_on_thread"] =
      _emscripten_set_visibilitychange_callback_on_thread;
    _emscripten_set_visibilitychange_callback_on_thread.sig = "ipipp";
    var _emscripten_get_visibility_status = (visibilityStatus) => {
      if (
        typeof document.visibilityState == "undefined" &&
        typeof document.hidden == "undefined"
      ) {
        return -1;
      }
      fillVisibilityChangeEventData(visibilityStatus);
      return 0;
    };
    Module["_emscripten_get_visibility_status"] =
      _emscripten_get_visibility_status;
    _emscripten_get_visibility_status.sig = "ip";
    var registerTouchEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc(1696);
      target = findEventTarget(target);
      var touchEventHandlerFunc = (e) => {
        var t,
          touches = {},
          et = e.touches;
        for (var i = 0; i < et.length; ++i) {
          t = et[i];
          t.isChanged = t.onTarget = 0;
          touches[t.identifier] = t;
        }
        for (var i = 0; i < e.changedTouches.length; ++i) {
          t = e.changedTouches[i];
          t.isChanged = 1;
          touches[t.identifier] = t;
        }
        for (var i = 0; i < e.targetTouches.length; ++i) {
          touches[e.targetTouches[i].identifier].onTarget = 1;
        }
        var touchEvent = JSEvents.touchEvent;
        HEAPF64[touchEvent >> 3] = e.timeStamp;
        var idx = touchEvent >> 2;
        HEAP32[idx + 3] = e.ctrlKey;
        HEAP32[idx + 4] = e.shiftKey;
        HEAP32[idx + 5] = e.altKey;
        HEAP32[idx + 6] = e.metaKey;
        idx += 7;
        var targetRect = getBoundingClientRect(target);
        var numTouches = 0;
        for (var i in touches) {
          t = touches[i];
          HEAP32[idx + 0] = t.identifier;
          HEAP32[idx + 1] = t.screenX;
          HEAP32[idx + 2] = t.screenY;
          HEAP32[idx + 3] = t.clientX;
          HEAP32[idx + 4] = t.clientY;
          HEAP32[idx + 5] = t.pageX;
          HEAP32[idx + 6] = t.pageY;
          HEAP32[idx + 7] = t.isChanged;
          HEAP32[idx + 8] = t.onTarget;
          HEAP32[idx + 9] = t.clientX - targetRect.left;
          HEAP32[idx + 10] = t.clientY - targetRect.top;
          idx += 13;
          if (++numTouches > 31) {
            break;
          }
        }
        HEAP32[(touchEvent + 8) >> 2] = numTouches;
        if (getWasmTableEntry(callbackfunc)(eventTypeId, touchEvent, userData))
          e.preventDefault();
      };
      var eventHandler = {
        target: target,
        allowsDeferredCalls:
          eventTypeString == "touchstart" || eventTypeString == "touchend",
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerTouchEventCallback"] = registerTouchEventCallback;
    var _emscripten_set_touchstart_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerTouchEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        22,
        "touchstart",
        targetThread,
      );
    Module["_emscripten_set_touchstart_callback_on_thread"] =
      _emscripten_set_touchstart_callback_on_thread;
    _emscripten_set_touchstart_callback_on_thread.sig = "ippipp";
    var _emscripten_set_touchend_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerTouchEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        23,
        "touchend",
        targetThread,
      );
    Module["_emscripten_set_touchend_callback_on_thread"] =
      _emscripten_set_touchend_callback_on_thread;
    _emscripten_set_touchend_callback_on_thread.sig = "ippipp";
    var _emscripten_set_touchmove_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerTouchEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        24,
        "touchmove",
        targetThread,
      );
    Module["_emscripten_set_touchmove_callback_on_thread"] =
      _emscripten_set_touchmove_callback_on_thread;
    _emscripten_set_touchmove_callback_on_thread.sig = "ippipp";
    var _emscripten_set_touchcancel_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) =>
      registerTouchEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        25,
        "touchcancel",
        targetThread,
      );
    Module["_emscripten_set_touchcancel_callback_on_thread"] =
      _emscripten_set_touchcancel_callback_on_thread;
    _emscripten_set_touchcancel_callback_on_thread.sig = "ippipp";
    var fillGamepadEventData = (eventStruct, e) => {
      HEAPF64[eventStruct >> 3] = e.timestamp;
      for (var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(eventStruct + i * 8 + 16) >> 3] = e.axes[i];
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == "object") {
          HEAPF64[(eventStruct + i * 8 + 528) >> 3] = e.buttons[i].value;
        } else {
          HEAPF64[(eventStruct + i * 8 + 528) >> 3] = e.buttons[i];
        }
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == "object") {
          HEAP32[(eventStruct + i * 4 + 1040) >> 2] = e.buttons[i].pressed;
        } else {
          HEAP32[(eventStruct + i * 4 + 1040) >> 2] = e.buttons[i] == 1;
        }
      }
      HEAP32[(eventStruct + 1296) >> 2] = e.connected;
      HEAP32[(eventStruct + 1300) >> 2] = e.index;
      HEAP32[(eventStruct + 8) >> 2] = e.axes.length;
      HEAP32[(eventStruct + 12) >> 2] = e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    };
    Module["fillGamepadEventData"] = fillGamepadEventData;
    var registerGamepadEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc(1432);
      var gamepadEventHandlerFunc = (e = event) => {
        var gamepadEvent = JSEvents.gamepadEvent;
        fillGamepadEventData(gamepadEvent, e["gamepad"]);
        if (
          getWasmTableEntry(callbackfunc)(eventTypeId, gamepadEvent, userData)
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerGamepadEventCallback"] = registerGamepadEventCallback;
    var _emscripten_set_gamepadconnected_callback_on_thread = (
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      return registerGamepadEventCallback(
        2,
        userData,
        useCapture,
        callbackfunc,
        26,
        "gamepadconnected",
        targetThread,
      );
    };
    Module["_emscripten_set_gamepadconnected_callback_on_thread"] =
      _emscripten_set_gamepadconnected_callback_on_thread;
    _emscripten_set_gamepadconnected_callback_on_thread.sig = "ipipp";
    var _emscripten_set_gamepaddisconnected_callback_on_thread = (
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      return registerGamepadEventCallback(
        2,
        userData,
        useCapture,
        callbackfunc,
        27,
        "gamepaddisconnected",
        targetThread,
      );
    };
    Module["_emscripten_set_gamepaddisconnected_callback_on_thread"] =
      _emscripten_set_gamepaddisconnected_callback_on_thread;
    _emscripten_set_gamepaddisconnected_callback_on_thread.sig = "ipipp";
    var _emscripten_sample_gamepad_data = () =>
      (JSEvents.lastGamepadState = navigator.getGamepads
        ? navigator.getGamepads()
        : navigator.webkitGetGamepads
          ? navigator.webkitGetGamepads()
          : null)
        ? 0
        : -1;
    Module["_emscripten_sample_gamepad_data"] = _emscripten_sample_gamepad_data;
    _emscripten_sample_gamepad_data.sig = "i";
    var _emscripten_get_num_gamepads = () => JSEvents.lastGamepadState.length;
    Module["_emscripten_get_num_gamepads"] = _emscripten_get_num_gamepads;
    _emscripten_get_num_gamepads.sig = "i";
    var _emscripten_get_gamepad_status = (index, gamepadState) => {
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
      if (!JSEvents.lastGamepadState[index]) return -7;
      fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    };
    Module["_emscripten_get_gamepad_status"] = _emscripten_get_gamepad_status;
    _emscripten_get_gamepad_status.sig = "iip";
    var registerBeforeUnloadEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
    ) => {
      var beforeUnloadEventHandlerFunc = (e = event) => {
        var confirmationMessage = getWasmTableEntry(callbackfunc)(
          eventTypeId,
          0,
          userData,
        );
        if (confirmationMessage) {
          confirmationMessage = UTF8ToString(confirmationMessage);
        }
        if (confirmationMessage) {
          e.preventDefault();
          e.returnValue = confirmationMessage;
          return confirmationMessage;
        }
      };
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: beforeUnloadEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerBeforeUnloadEventCallback"] =
      registerBeforeUnloadEventCallback;
    var _emscripten_set_beforeunload_callback_on_thread = (
      userData,
      callbackfunc,
      targetThread,
    ) => {
      if (typeof onbeforeunload == "undefined") return -1;
      if (targetThread !== 1) return -5;
      return registerBeforeUnloadEventCallback(
        2,
        userData,
        true,
        callbackfunc,
        28,
        "beforeunload",
      );
    };
    Module["_emscripten_set_beforeunload_callback_on_thread"] =
      _emscripten_set_beforeunload_callback_on_thread;
    _emscripten_set_beforeunload_callback_on_thread.sig = "ippp";
    var fillBatteryEventData = (eventStruct, e) => {
      HEAPF64[eventStruct >> 3] = e.chargingTime;
      HEAPF64[(eventStruct + 8) >> 3] = e.dischargingTime;
      HEAPF64[(eventStruct + 16) >> 3] = e.level;
      HEAP32[(eventStruct + 24) >> 2] = e.charging;
    };
    Module["fillBatteryEventData"] = fillBatteryEventData;
    var battery = () =>
      navigator.battery || navigator.mozBattery || navigator.webkitBattery;
    Module["battery"] = battery;
    var registerBatteryEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      if (!JSEvents.batteryEvent) JSEvents.batteryEvent = _malloc(32);
      var batteryEventHandlerFunc = (e = event) => {
        var batteryEvent = JSEvents.batteryEvent;
        fillBatteryEventData(batteryEvent, battery());
        if (
          getWasmTableEntry(callbackfunc)(eventTypeId, batteryEvent, userData)
        )
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: batteryEventHandlerFunc,
        useCapture: useCapture,
      };
      return JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerBatteryEventCallback"] = registerBatteryEventCallback;
    var _emscripten_set_batterychargingchange_callback_on_thread = (
      userData,
      callbackfunc,
      targetThread,
    ) => {
      if (!battery()) return -1;
      return registerBatteryEventCallback(
        battery(),
        userData,
        true,
        callbackfunc,
        29,
        "chargingchange",
        targetThread,
      );
    };
    Module["_emscripten_set_batterychargingchange_callback_on_thread"] =
      _emscripten_set_batterychargingchange_callback_on_thread;
    _emscripten_set_batterychargingchange_callback_on_thread.sig = "ippp";
    var _emscripten_set_batterylevelchange_callback_on_thread = (
      userData,
      callbackfunc,
      targetThread,
    ) => {
      if (!battery()) return -1;
      return registerBatteryEventCallback(
        battery(),
        userData,
        true,
        callbackfunc,
        30,
        "levelchange",
        targetThread,
      );
    };
    Module["_emscripten_set_batterylevelchange_callback_on_thread"] =
      _emscripten_set_batterylevelchange_callback_on_thread;
    _emscripten_set_batterylevelchange_callback_on_thread.sig = "ippp";
    var _emscripten_get_battery_status = (batteryState) => {
      if (!battery()) return -1;
      fillBatteryEventData(batteryState, battery());
      return 0;
    };
    Module["_emscripten_get_battery_status"] = _emscripten_get_battery_status;
    _emscripten_get_battery_status.sig = "ip";
    var _emscripten_set_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
      target.style.width = width + "px";
      target.style.height = height + "px";
      return 0;
    };
    Module["_emscripten_set_element_css_size"] =
      _emscripten_set_element_css_size;
    _emscripten_set_element_css_size.sig = "ipdd";
    var _emscripten_get_element_css_size = (target, width, height) => {
      target = findEventTarget(target);
      if (!target) return -4;
      var rect = getBoundingClientRect(target);
      HEAPF64[width >> 3] = rect.width;
      HEAPF64[height >> 3] = rect.height;
      return 0;
    };
    Module["_emscripten_get_element_css_size"] =
      _emscripten_get_element_css_size;
    _emscripten_get_element_css_size.sig = "ippp";
    var _emscripten_html5_remove_all_event_listeners = () =>
      JSEvents.removeAllEventListeners();
    Module["_emscripten_html5_remove_all_event_listeners"] =
      _emscripten_html5_remove_all_event_listeners;
    _emscripten_html5_remove_all_event_listeners.sig = "v";
    var _emscripten_request_animation_frame = (cb, userData) =>
      requestAnimationFrame((timeStamp) =>
        getWasmTableEntry(cb)(timeStamp, userData),
      );
    Module["_emscripten_request_animation_frame"] =
      _emscripten_request_animation_frame;
    _emscripten_request_animation_frame.sig = "ipp";
    var _emscripten_cancel_animation_frame = (id) => cancelAnimationFrame(id);
    Module["_emscripten_cancel_animation_frame"] =
      _emscripten_cancel_animation_frame;
    _emscripten_cancel_animation_frame.sig = "vi";
    var _emscripten_request_animation_frame_loop = (cb, userData) => {
      function tick(timeStamp) {
        if (getWasmTableEntry(cb)(timeStamp, userData)) {
          requestAnimationFrame(tick);
        }
      }
      return requestAnimationFrame(tick);
    };
    Module["_emscripten_request_animation_frame_loop"] =
      _emscripten_request_animation_frame_loop;
    _emscripten_request_animation_frame_loop.sig = "vpp";
    var _emscripten_performance_now = () => performance.now();
    Module["_emscripten_performance_now"] = _emscripten_performance_now;
    _emscripten_performance_now.sig = "d";
    var _emscripten_get_device_pixel_ratio = () =>
      (typeof devicePixelRatio == "number" && devicePixelRatio) || 1;
    Module["_emscripten_get_device_pixel_ratio"] =
      _emscripten_get_device_pixel_ratio;
    _emscripten_get_device_pixel_ratio.sig = "d";
    function _random_get(buf, buf_len) {
      try {
        _getentropy(buf, buf_len);
        return 0;
      } catch (e) {
        if (typeof FS == "undefined" || !(e.name === "ErrnoError")) throw e;
        return e.errno;
      }
    }
    Module["_random_get"] = _random_get;
    _random_get.sig = "ipp";
    var checkWasiClock = (clock_id) =>
      clock_id == 0 || clock_id == 1 || clock_id == 2 || clock_id == 3;
    Module["checkWasiClock"] = checkWasiClock;
    function _clock_time_get(clk_id, ignored_precision, ptime) {
      ignored_precision = bigintToI53Checked(ignored_precision);
      if (!checkWasiClock(clk_id)) {
        return 28;
      }
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (nowIsMonotonic) {
        now = _emscripten_get_now();
      } else {
        return 52;
      }
      var nsec = Math.round(now * 1e3 * 1e3);
      HEAP32[ptime >> 2] = nsec >>> 0;
      HEAP32[(ptime + 4) >> 2] = (nsec / Math.pow(2, 32)) >>> 0;
      return 0;
    }
    Module["_clock_time_get"] = _clock_time_get;
    _clock_time_get.sig = "iijp";
    var _clock_res_get = (clk_id, pres) => {
      if (!checkWasiClock(clk_id)) {
        return 28;
      }
      var nsec;
      if (clk_id === 0) {
        nsec = 1e3 * 1e3;
      } else if (nowIsMonotonic) {
        nsec = _emscripten_get_now_res();
      } else {
        return 52;
      }
      HEAP32[pres >> 2] = nsec >>> 0;
      HEAP32[(pres + 4) >> 2] = (nsec / Math.pow(2, 32)) >>> 0;
      return 0;
    };
    Module["_clock_res_get"] = _clock_res_get;
    _clock_res_get.sig = "iip";
    var wasiRightsToMuslOFlags = (rights) => {
      if (rights & 2 && rights & 64) {
        return 2;
      }
      if (rights & 2) {
        return 0;
      }
      if (rights & 64) {
        return 1;
      }
      throw new FS.ErrnoError(28);
    };
    Module["wasiRightsToMuslOFlags"] = wasiRightsToMuslOFlags;
    var wasiOFlagsToMuslOFlags = (oflags) => {
      var musl_oflags = 0;
      if (oflags & 1) {
        musl_oflags |= 64;
      }
      if (oflags & 8) {
        musl_oflags |= 512;
      }
      if (oflags & 2) {
        musl_oflags |= 65536;
      }
      if (oflags & 4) {
        musl_oflags |= 128;
      }
      return musl_oflags;
    };
    Module["wasiOFlagsToMuslOFlags"] = wasiOFlagsToMuslOFlags;
    var createDyncallWrapper = (sig) => {
      var sections = [];
      var prelude = [0, 97, 115, 109, 1, 0, 0, 0];
      sections.push(prelude);
      var wrappersig = [
        sig[0].replace("j", "i"),
        "i",
        sig.slice(1).replace(/j/g, "ii"),
      ].join("");
      var typeSectionBody = [3];
      generateFuncType(wrappersig, typeSectionBody);
      generateFuncType(sig, typeSectionBody);
      generateFuncType("vi", typeSectionBody);
      var typeSection = [1];
      uleb128Encode(typeSectionBody.length, typeSection);
      typeSection.push.apply(typeSection, typeSectionBody);
      sections.push(typeSection);
      var importSection = [
        2, 15, 2, 1, 101, 1, 116, 1, 112, 0, 0, 1, 101, 1, 114, 0, 2,
      ];
      sections.push(importSection);
      var functionSection = [3, 2, 1, 0];
      sections.push(functionSection);
      var exportSection = [7, 5, 1, 1, 102, 0, 1];
      sections.push(exportSection);
      var convert_code = [];
      if (sig[0] === "j") {
        convert_code = [1, 1, 126];
      } else {
        convert_code.push(0);
      }
      function localGet(j) {
        convert_code.push(32);
        uleb128Encode(j, convert_code);
      }
      var j = 1;
      for (var i = 1; i < sig.length; i++) {
        if (sig[i] == "j") {
          localGet(j + 1);
          convert_code.push(173, 66, 32, 134);
          localGet(j);
          convert_code.push(172, 132);
          j += 2;
        } else {
          localGet(j);
          j++;
        }
      }
      convert_code.push(32, 0, 17, 1, 0);
      if (sig[0] === "j") {
        convert_code.push(34);
        uleb128Encode(j, convert_code);
        convert_code.push(66, 32, 136, 167, 16, 0);
        localGet(j);
        convert_code.push(167);
      }
      convert_code.push(11);
      var codeBody = [1];
      uleb128Encode(convert_code.length, codeBody);
      codeBody.push.apply(codeBody, convert_code);
      var codeSection = [10];
      uleb128Encode(codeBody.length, codeSection);
      codeSection.push.apply(codeSection, codeBody);
      sections.push(codeSection);
      var bytes = new Uint8Array([].concat.apply([], sections));
      var module = new WebAssembly.Module(bytes);
      var instance = new WebAssembly.Instance(module, {
        e: { t: wasmTable, r: setTempRet0 },
      });
      var wrappedFunc = instance.exports["f"];
      return wrappedFunc;
    };
    Module["createDyncallWrapper"] = createDyncallWrapper;
    var _emscripten_unwind_to_js_event_loop = () => {
      throw "unwind";
    };
    Module["_emscripten_unwind_to_js_event_loop"] =
      _emscripten_unwind_to_js_event_loop;
    _emscripten_unwind_to_js_event_loop.sig = "v";
    var setImmediateWrapped = (func) => {
      if (!setImmediateWrapped.mapping) setImmediateWrapped.mapping = [];
      var id = setImmediateWrapped.mapping.length;
      setImmediateWrapped.mapping[id] = setImmediate(() => {
        setImmediateWrapped.mapping[id] = undefined;
        func();
      });
      return id;
    };
    Module["setImmediateWrapped"] = setImmediateWrapped;
    var clearImmediateWrapped = (id) => {
      clearImmediate(setImmediateWrapped.mapping[id]);
      setImmediateWrapped.mapping[id] = undefined;
    };
    Module["clearImmediateWrapped"] = clearImmediateWrapped;
    var polyfillSetImmediate = () => {};
    Module["polyfillSetImmediate"] = polyfillSetImmediate;
    var _emscripten_set_immediate = (cb, userData) => {
      polyfillSetImmediate();
      return emSetImmediate(function () {
        callUserCallback(function () {
          getWasmTableEntry(cb)(userData);
        });
      });
    };
    Module["_emscripten_set_immediate"] = _emscripten_set_immediate;
    _emscripten_set_immediate.sig = "ipp";
    var _emscripten_clear_immediate = (id) => {
      emClearImmediate(id);
    };
    Module["_emscripten_clear_immediate"] = _emscripten_clear_immediate;
    _emscripten_clear_immediate.sig = "vi";
    var _emscripten_set_immediate_loop = (cb, userData) => {
      polyfillSetImmediate();
      function tick() {
        callUserCallback(function () {
          if (getWasmTableEntry(cb)(userData)) {
            emSetImmediate(tick);
          } else {
          }
        });
      }
      emSetImmediate(tick);
    };
    Module["_emscripten_set_immediate_loop"] = _emscripten_set_immediate_loop;
    _emscripten_set_immediate_loop.sig = "vpp";
    var _emscripten_set_timeout = (cb, msecs, userData) =>
      safeSetTimeout(() => getWasmTableEntry(cb)(userData), msecs);
    Module["_emscripten_set_timeout"] = _emscripten_set_timeout;
    _emscripten_set_timeout.sig = "ipdp";
    var _emscripten_clear_timeout = (id) => clearTimeout(id);
    Module["_emscripten_clear_timeout"] = _emscripten_clear_timeout;
    _emscripten_clear_timeout.sig = "vi";
    var _emscripten_set_timeout_loop = (cb, msecs, userData) => {
      function tick() {
        var t = _emscripten_get_now();
        var n = t + msecs;
        callUserCallback(function () {
          if (getWasmTableEntry(cb)(t, userData)) {
            setTimeout(tick, n - _emscripten_get_now());
          }
        });
      }
      return setTimeout(tick, 0);
    };
    Module["_emscripten_set_timeout_loop"] = _emscripten_set_timeout_loop;
    _emscripten_set_timeout_loop.sig = "vpdp";
    var _emscripten_set_interval = (cb, msecs, userData) =>
      setInterval(function () {
        callUserCallback(function () {
          getWasmTableEntry(cb)(userData);
        });
      }, msecs);
    Module["_emscripten_set_interval"] = _emscripten_set_interval;
    _emscripten_set_interval.sig = "ipdp";
    var _emscripten_clear_interval = (id) => {
      clearInterval(id);
    };
    Module["_emscripten_clear_interval"] = _emscripten_clear_interval;
    _emscripten_clear_interval.sig = "vi";
    var idsToPromises = (idBuf, size) => {
      var promises = [];
      for (var i = 0; i < size; i++) {
        var id = HEAP32[(idBuf + i * 4) >> 2];
        promises[i] = getPromise(id);
      }
      return promises;
    };
    Module["idsToPromises"] = idsToPromises;
    var makePromiseCallback = (callback, userData) => (value) => {
      var stack = stackSave();
      var resultPtr = stackAlloc(POINTER_SIZE);
      HEAPU32[resultPtr >> 2] = 0;
      try {
        var result = getWasmTableEntry(callback)(resultPtr, userData, value);
        var resultVal = HEAPU32[resultPtr >> 2];
      } catch (e) {
        if (typeof e !== "number") {
          throw 0;
        }
        throw e;
      } finally {
        stackRestore(stack);
      }
      switch (result) {
        case 0:
          return resultVal;
        case 1:
          return getPromise(resultVal);
        case 2:
          var ret = getPromise(resultVal);
          _emscripten_promise_destroy(resultVal);
          return ret;
        case 3:
          throw resultVal;
      }
    };
    Module["makePromiseCallback"] = makePromiseCallback;
    var _emscripten_promise_then = (id, onFulfilled, onRejected, userData) => {
      var promise = getPromise(id);
      var newId = promiseMap.allocate({
        promise: promise.then(
          makePromiseCallback(onFulfilled, userData),
          makePromiseCallback(onRejected, userData),
        ),
      });
      return newId;
    };
    Module["_emscripten_promise_then"] = _emscripten_promise_then;
    _emscripten_promise_then.sig = "ppppp";
    var _emscripten_promise_all = (idBuf, resultBuf, size) => {
      var promises = idsToPromises(idBuf, size);
      var id = promiseMap.allocate({
        promise: Promise.all(promises).then((results) => {
          if (resultBuf) {
            for (var i = 0; i < size; i++) {
              var result = results[i];
              HEAPU32[(resultBuf + i * 4) >> 2] = result;
            }
          }
          return resultBuf;
        }),
      });
      return id;
    };
    Module["_emscripten_promise_all"] = _emscripten_promise_all;
    _emscripten_promise_all.sig = "pppp";
    var setPromiseResult = (ptr, fulfill, value) => {
      var result = fulfill ? 0 : 3;
      HEAP32[ptr >> 2] = result;
      HEAPU32[(ptr + 4) >> 2] = value;
    };
    Module["setPromiseResult"] = setPromiseResult;
    var _emscripten_promise_all_settled = (idBuf, resultBuf, size) => {
      var promises = idsToPromises(idBuf, size);
      var id = promiseMap.allocate({
        promise: Promise.allSettled(promises).then((results) => {
          if (resultBuf) {
            var offset = resultBuf;
            for (var i = 0; i < size; i++, offset += 8) {
              if (results[i].status === "fulfilled") {
                setPromiseResult(offset, true, results[i].value);
              } else {
                setPromiseResult(offset, false, results[i].reason);
              }
            }
          }
          return resultBuf;
        }),
      });
      return id;
    };
    Module["_emscripten_promise_all_settled"] = _emscripten_promise_all_settled;
    _emscripten_promise_all_settled.sig = "pppp";
    var _emscripten_promise_any = (idBuf, errorBuf, size) => {
      var promises = idsToPromises(idBuf, size);
      var id = promiseMap.allocate({
        promise: Promise.any(promises).catch((err) => {
          if (errorBuf) {
            for (var i = 0; i < size; i++) {
              HEAPU32[(errorBuf + i * 4) >> 2] = err.errors[i];
            }
          }
          throw errorBuf;
        }),
      });
      return id;
    };
    Module["_emscripten_promise_any"] = _emscripten_promise_any;
    _emscripten_promise_any.sig = "pppp";
    var _emscripten_promise_race = (idBuf, size) => {
      var promises = idsToPromises(idBuf, size);
      var id = promiseMap.allocate({ promise: Promise.race(promises) });
      return id;
    };
    Module["_emscripten_promise_race"] = _emscripten_promise_race;
    _emscripten_promise_race.sig = "ppp";
    var _emscripten_promise_await = (returnValuePtr, id) => {
      abort("emscripten_promise_await is only available with ASYNCIFY");
    };
    Module["_emscripten_promise_await"] = _emscripten_promise_await;
    _emscripten_promise_await.sig = "vpp";
    var ___cxa_find_matching_catch_4 = (arg0, arg1) =>
      findMatchingCatch([arg0, arg1]);
    Module["___cxa_find_matching_catch_4"] = ___cxa_find_matching_catch_4;
    ___cxa_find_matching_catch_4.sig = "ppp";
    var _llvm_eh_typeid_for = (type) => type;
    Module["_llvm_eh_typeid_for"] = _llvm_eh_typeid_for;
    _llvm_eh_typeid_for.sig = "vp";
    var ___cxa_get_exception_ptr = (ptr) => {
      var rtn = new ExceptionInfo(ptr).get_exception_ptr();
      return rtn;
    };
    Module["___cxa_get_exception_ptr"] = ___cxa_get_exception_ptr;
    ___cxa_get_exception_ptr.sig = "pp";
    var ___cxa_call_unexpected = (exception) =>
      abort(
        "Unexpected exception thrown, this is not properly supported - aborting",
      );
    Module["___cxa_call_unexpected"] = ___cxa_call_unexpected;
    ___cxa_call_unexpected.sig = "vp";
    var _emscripten_set_main_loop_timing = (mode, value) => {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
      if (!Browser.mainLoop.func) {
        return 1;
      }
      if (!Browser.mainLoop.running) {
        Browser.mainLoop.running = true;
      }
      if (mode == 0) {
        Browser.mainLoop.scheduler =
          function Browser_mainLoop_scheduler_setTimeout() {
            var timeUntilNextTick =
              Math.max(
                0,
                Browser.mainLoop.tickStartTime + value - _emscripten_get_now(),
              ) | 0;
            setTimeout(Browser.mainLoop.runner, timeUntilNextTick);
          };
        Browser.mainLoop.method = "timeout";
      } else if (mode == 1) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = "rAF";
      } else if (mode == 2) {
        if (typeof setImmediate == "undefined") {
          var setImmediates = [];
          var emscriptenMainLoopMessageId = "setimmediate";
          var Browser_setImmediate_messageHandler = (event) => {
            if (
              event.data === emscriptenMainLoopMessageId ||
              event.data.target === emscriptenMainLoopMessageId
            ) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          };
          addEventListener(
            "message",
            Browser_setImmediate_messageHandler,
            true,
          );
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module["setImmediates"] === undefined)
                Module["setImmediates"] = [];
              Module["setImmediates"].push(func);
              postMessage({ target: emscriptenMainLoopMessageId });
            } else postMessage(emscriptenMainLoopMessageId, "*");
          };
        }
        Browser.mainLoop.scheduler =
          function Browser_mainLoop_scheduler_setImmediate() {
            setImmediate(Browser.mainLoop.runner);
          };
        Browser.mainLoop.method = "immediate";
      }
      return 0;
    };
    Module["_emscripten_set_main_loop_timing"] =
      _emscripten_set_main_loop_timing;
    _emscripten_set_main_loop_timing.sig = "iii";
    var setMainLoop = (
      browserIterationFunc,
      fps,
      simulateInfiniteLoop,
      arg,
      noSetTiming,
    ) => {
      assert(
        !Browser.mainLoop.func,
        "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.",
      );
      Browser.mainLoop.func = browserIterationFunc;
      Browser.mainLoop.arg = arg;
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
      function checkIsRunning() {
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
          return false;
        }
        return true;
      }
      Browser.mainLoop.running = false;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next =
              remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              next = next + 0.5;
              Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
            }
          }
          Browser.mainLoop.updateStatus();
          if (!checkIsRunning()) return;
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (!checkIsRunning()) return;
        Browser.mainLoop.currentFrameNumber =
          (Browser.mainLoop.currentFrameNumber + 1) | 0;
        if (
          Browser.mainLoop.timingMode == 1 &&
          Browser.mainLoop.timingValue > 1 &&
          Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue !=
            0
        ) {
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
        Browser.mainLoop.runIter(browserIterationFunc);
        if (!checkIsRunning()) return;
        if (typeof SDL == "object" && SDL.audio && SDL.audio.queueNewAudioData)
          SDL.audio.queueNewAudioData();
        Browser.mainLoop.scheduler();
      };
      if (!noSetTiming) {
        if (fps && fps > 0) {
          _emscripten_set_main_loop_timing(0, 1e3 / fps);
        } else {
          _emscripten_set_main_loop_timing(1, 1);
        }
        Browser.mainLoop.scheduler();
      }
      if (simulateInfiniteLoop) {
        throw "unwind";
      }
    };
    Module["setMainLoop"] = setMainLoop;
    var Browser = {
      mainLoop: {
        running: false,
        scheduler: null,
        method: "",
        currentlyRunningMainloop: 0,
        func: null,
        arg: 0,
        timingMode: 0,
        timingValue: 0,
        currentFrameNumber: 0,
        queue: [],
        pause() {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++;
        },
        resume() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },
        updateStatus() {
          if (Module["setStatus"]) {
            var message = Module["statusMessage"] || "Please wait...";
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module["setStatus"](
                  message +
                    " (" +
                    (expected - remaining) +
                    "/" +
                    expected +
                    ")",
                );
              } else {
                Module["setStatus"](message);
              }
            } else {
              Module["setStatus"]("");
            }
          }
        },
        runIter(func) {
          if (ABORT) return;
          if (Module["preMainLoop"]) {
            var preRet = Module["preMainLoop"]();
            if (preRet === false) {
              return;
            }
          }
          callUserCallback(func);
          if (Module["postMainLoop"]) Module["postMainLoop"]();
        },
      },
      isFullscreen: false,
      pointerLock: false,
      moduleContextCreatedCallbacks: [],
      workers: [],
      init() {
        if (Browser.initted) return;
        Browser.initted = true;
        var imagePlugin = {};
        imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin["handle"] = function imagePlugin_handle(
          byteArray,
          name,
          onload,
          onerror,
        ) {
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          if (b.size !== byteArray.length) {
            b = new Blob([new Uint8Array(byteArray).buffer], {
              type: Browser.getMimetype(name),
            });
          }
          var url = URL.createObjectURL(b);
          var img = new Image();
          img.onload = () => {
            assert(img.complete, `Image ${name} could not be decoded`);
            var canvas = document.createElement("canvas");
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(img, 0, 0);
            preloadedImages[name] = canvas;
            URL.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = (event) => {
            err(`Image ${url} could not be decoded`);
            if (onerror) onerror();
          };
          img.src = url;
        };
        preloadPlugins.push(imagePlugin);
        var audioPlugin = {};
        audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
          return (
            !Module.noAudioDecoding &&
            name.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 }
          );
        };
        audioPlugin["handle"] = function audioPlugin_handle(
          byteArray,
          name,
          onload,
          onerror,
        ) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            preloadedAudios[name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            preloadedAudios[name] = new Audio();
            if (onerror) onerror();
          }
          var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
          var url = URL.createObjectURL(b);
          var audio = new Audio();
          audio.addEventListener("canplaythrough", () => finish(audio), false);
          audio.onerror = function audio_onerror(event) {
            if (done) return;
            err(
              `warning: browser could not fully decode audio ${name}, trying slower base64 approach`,
            );
            function encode64(data) {
              var BASE =
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              var PAD = "=";
              var ret = "";
              var leftchar = 0;
              var leftbits = 0;
              for (var i = 0; i < data.length; i++) {
                leftchar = (leftchar << 8) | data[i];
                leftbits += 8;
                while (leftbits >= 6) {
                  var curr = (leftchar >> (leftbits - 6)) & 63;
                  leftbits -= 6;
                  ret += BASE[curr];
                }
              }
              if (leftbits == 2) {
                ret += BASE[(leftchar & 3) << 4];
                ret += PAD + PAD;
              } else if (leftbits == 4) {
                ret += BASE[(leftchar & 15) << 2];
                ret += PAD;
              }
              return ret;
            }
            audio.src =
              "data:audio/x-" +
              name.substr(-3) +
              ";base64," +
              encode64(byteArray);
            finish(audio);
          };
          audio.src = url;
          safeSetTimeout(() => {
            finish(audio);
          }, 1e4);
        };
        preloadPlugins.push(audioPlugin);
        function pointerLockChange() {
          Browser.pointerLock =
            document["pointerLockElement"] === Module["canvas"] ||
            document["mozPointerLockElement"] === Module["canvas"] ||
            document["webkitPointerLockElement"] === Module["canvas"] ||
            document["msPointerLockElement"] === Module["canvas"];
        }
        var canvas = Module["canvas"];
        if (canvas) {
          canvas.requestPointerLock =
            canvas["requestPointerLock"] ||
            canvas["mozRequestPointerLock"] ||
            canvas["webkitRequestPointerLock"] ||
            canvas["msRequestPointerLock"] ||
            (() => {});
          canvas.exitPointerLock =
            document["exitPointerLock"] ||
            document["mozExitPointerLock"] ||
            document["webkitExitPointerLock"] ||
            document["msExitPointerLock"] ||
            (() => {});
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
          document.addEventListener(
            "pointerlockchange",
            pointerLockChange,
            false,
          );
          document.addEventListener(
            "mozpointerlockchange",
            pointerLockChange,
            false,
          );
          document.addEventListener(
            "webkitpointerlockchange",
            pointerLockChange,
            false,
          );
          document.addEventListener(
            "mspointerlockchange",
            pointerLockChange,
            false,
          );
          if (Module["elementPointerLock"]) {
            canvas.addEventListener(
              "click",
              (ev) => {
                if (
                  !Browser.pointerLock &&
                  Module["canvas"].requestPointerLock
                ) {
                  Module["canvas"].requestPointerLock();
                  ev.preventDefault();
                }
              },
              false,
            );
          }
        }
      },
      createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas)
          return Module.ctx;
        var ctx;
        var contextHandle;
        if (useWebGL) {
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
          if (typeof GL != "undefined") {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext("2d");
        }
        if (!ctx) return null;
        if (setInModule) {
          if (!useWebGL)
            assert(
              typeof GLctx == "undefined",
              "cannot set in module if GLctx is used, but we are a non-GL context that would replace it",
            );
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach((callback) =>
            callback(),
          );
          Browser.init();
        }
        return ctx;
      },
      destroyContext(canvas, useWebGL, setInModule) {},
      fullscreenHandlersInstalled: false,
      lockPointer: undefined,
      resizeCanvas: undefined,
      requestFullscreen(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer == "undefined")
          Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas == "undefined")
          Browser.resizeCanvas = false;
        var canvas = Module["canvas"];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if (
            (document["fullscreenElement"] ||
              document["mozFullScreenElement"] ||
              document["msFullscreenElement"] ||
              document["webkitFullscreenElement"] ||
              document["webkitCurrentFullScreenElement"]) === canvasContainer
          ) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module["onFullScreen"])
            Module["onFullScreen"](Browser.isFullscreen);
          if (Module["onFullscreen"])
            Module["onFullscreen"](Browser.isFullscreen);
        }
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener(
            "fullscreenchange",
            fullscreenChange,
            false,
          );
          document.addEventListener(
            "mozfullscreenchange",
            fullscreenChange,
            false,
          );
          document.addEventListener(
            "webkitfullscreenchange",
            fullscreenChange,
            false,
          );
          document.addEventListener(
            "MSFullscreenChange",
            fullscreenChange,
            false,
          );
        }
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        canvasContainer.requestFullscreen =
          canvasContainer["requestFullscreen"] ||
          canvasContainer["mozRequestFullScreen"] ||
          canvasContainer["msRequestFullscreen"] ||
          (canvasContainer["webkitRequestFullscreen"]
            ? () =>
                canvasContainer["webkitRequestFullscreen"](
                  Element["ALLOW_KEYBOARD_INPUT"],
                )
            : null) ||
          (canvasContainer["webkitRequestFullScreen"]
            ? () =>
                canvasContainer["webkitRequestFullScreen"](
                  Element["ALLOW_KEYBOARD_INPUT"],
                )
            : null);
        canvasContainer.requestFullscreen();
      },
      exitFullscreen() {
        if (!Browser.isFullscreen) {
          return false;
        }
        var CFS =
          document["exitFullscreen"] ||
          document["cancelFullScreen"] ||
          document["mozCancelFullScreen"] ||
          document["msExitFullscreen"] ||
          document["webkitCancelFullScreen"] ||
          (() => {});
        CFS.apply(document, []);
        return true;
      },
      nextRAF: 0,
      fakeRequestAnimationFrame(func) {
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1e3 / 60;
        } else {
          while (now + 2 >= Browser.nextRAF) {
            Browser.nextRAF += 1e3 / 60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },
      requestAnimationFrame(func) {
        if (typeof requestAnimationFrame == "function") {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },
      safeSetTimeout(func, timeout) {
        return safeSetTimeout(func, timeout);
      },
      safeRequestAnimationFrame(func) {
        return Browser.requestAnimationFrame(() => {
          callUserCallback(func);
        });
      },
      getMimetype(name) {
        return {
          jpg: "image/jpeg",
          jpeg: "image/jpeg",
          png: "image/png",
          bmp: "image/bmp",
          ogg: "audio/ogg",
          wav: "audio/wav",
          mp3: "audio/mpeg",
        }[name.substr(name.lastIndexOf(".") + 1)];
      },
      getUserMedia(func) {
        if (!window.getUserMedia) {
          window.getUserMedia =
            navigator["getUserMedia"] || navigator["mozGetUserMedia"];
        }
        window.getUserMedia(func);
      },
      getMovementX(event) {
        return (
          event["movementX"] ||
          event["mozMovementX"] ||
          event["webkitMovementX"] ||
          0
        );
      },
      getMovementY(event) {
        return (
          event["movementY"] ||
          event["mozMovementY"] ||
          event["webkitMovementY"] ||
          0
        );
      },
      getMouseWheelDelta(event) {
        var delta = 0;
        switch (event.type) {
          case "DOMMouseScroll":
            delta = event.detail / 3;
            break;
          case "mousewheel":
            delta = event.wheelDelta / 120;
            break;
          case "wheel":
            delta = event.deltaY;
            switch (event.deltaMode) {
              case 0:
                delta /= 100;
                break;
              case 1:
                delta /= 3;
                break;
              case 2:
                delta *= 80;
                break;
              default:
                throw "unrecognized mouse wheel delta mode: " + event.deltaMode;
            }
            break;
          default:
            throw "unrecognized mouse wheel event: " + event.type;
        }
        return delta;
      },
      mouseX: 0,
      mouseY: 0,
      mouseMovementX: 0,
      mouseMovementY: 0,
      touches: {},
      lastTouches: {},
      calculateMouseEvent(event) {
        if (Browser.pointerLock) {
          if (event.type != "mousemove" && "mozMovementX" in event) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          var scrollX =
            typeof window.scrollX != "undefined"
              ? window.scrollX
              : window.pageXOffset;
          var scrollY =
            typeof window.scrollY != "undefined"
              ? window.scrollY
              : window.pageYOffset;
          if (
            event.type === "touchstart" ||
            event.type === "touchend" ||
            event.type === "touchmove"
          ) {
            var touch = event.touch;
            if (touch === undefined) {
              return;
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
            var coords = { x: adjustedX, y: adjustedY };
            if (event.type === "touchstart") {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (
              event.type === "touchend" ||
              event.type === "touchmove"
            ) {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },
      resizeListeners: [],
      updateResizeListeners() {
        var canvas = Module["canvas"];
        Browser.resizeListeners.forEach((listener) =>
          listener(canvas.width, canvas.height),
        );
      },
      setCanvasSize(width, height, noUpdates) {
        var canvas = Module["canvas"];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },
      windowedWidth: 0,
      windowedHeight: 0,
      setFullscreenCanvasSize() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen >> 2];
          flags = flags | 8388608;
          HEAP32[SDL.screen >> 2] = flags;
        }
        Browser.updateCanvasDimensions(Module["canvas"]);
        Browser.updateResizeListeners();
      },
      setWindowedCanvasSize() {
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[SDL.screen >> 2];
          flags = flags & ~8388608;
          HEAP32[SDL.screen >> 2] = flags;
        }
        Browser.updateCanvasDimensions(Module["canvas"]);
        Browser.updateResizeListeners();
      },
      updateCanvasDimensions(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
          if (w / h < Module["forcedAspectRatio"]) {
            w = Math.round(h * Module["forcedAspectRatio"]);
          } else {
            h = Math.round(w / Module["forcedAspectRatio"]);
          }
        }
        if (
          (document["fullscreenElement"] ||
            document["mozFullScreenElement"] ||
            document["msFullscreenElement"] ||
            document["webkitFullscreenElement"] ||
            document["webkitCurrentFullScreenElement"]) === canvas.parentNode &&
          typeof screen != "undefined"
        ) {
          var factor = Math.min(screen.width / w, screen.height / h);
          w = Math.round(w * factor);
          h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width != w) canvas.width = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != "undefined") {
            canvas.style.removeProperty("width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width != wNative) canvas.width = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != "undefined") {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty("width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty("width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },
    };
    Module["Browser"] = Browser;
    var _emscripten_run_preload_plugins = (file, onload, onerror) => {
      var _file = UTF8ToString(file);
      var data = FS.analyzePath(_file);
      if (!data.exists) return -1;
      FS.createPreloadedFile(
        PATH.dirname(_file),
        PATH.basename(_file),
        new Uint8Array(data.object.contents),
        true,
        true,
        () => {
          if (onload) getWasmTableEntry(onload)(file);
        },
        () => {
          if (onerror) getWasmTableEntry(onerror)(file);
        },
        true,
      );
      return 0;
    };
    Module["_emscripten_run_preload_plugins"] = _emscripten_run_preload_plugins;
    _emscripten_run_preload_plugins.sig = "ippp";
    var _emscripten_run_preload_plugins_data = (
      data,
      size,
      suffix,
      arg,
      onload,
      onerror,
    ) => {
      var _suffix = UTF8ToString(suffix);
      if (!Browser.asyncPrepareDataCounter) Browser.asyncPrepareDataCounter = 0;
      var name =
        "prepare_data_" + Browser.asyncPrepareDataCounter++ + "." + _suffix;
      var cname = stringToNewUTF8(name);
      FS.createPreloadedFile(
        "/",
        name,
        HEAPU8.subarray(data, data + size),
        true,
        true,
        () => {
          if (onload) getWasmTableEntry(onload)(arg, cname);
        },
        () => {
          if (onerror) getWasmTableEntry(onerror)(arg);
        },
        true,
      );
    };
    Module["_emscripten_run_preload_plugins_data"] =
      _emscripten_run_preload_plugins_data;
    _emscripten_run_preload_plugins_data.sig = "vpipppp";
    var _emscripten_async_run_script = (script, millis) => {
      safeSetTimeout(() => _emscripten_run_script(script), millis);
    };
    Module["_emscripten_async_run_script"] = _emscripten_async_run_script;
    _emscripten_async_run_script.sig = "vpi";
    var _emscripten_async_load_script = (url, onload, onerror) => {
      url = UTF8ToString(url);
      onload = getWasmTableEntry(onload);
      onerror = getWasmTableEntry(onerror);
      assert(
        runDependencies === 0,
        "async_load_script must be run when no other dependencies are active",
      );
      var loadDone = () => {
        if (onload) {
          if (runDependencies > 0) {
            dependenciesFulfilled = onload;
          } else {
            onload();
          }
        }
      };
      var loadError = () => {
        if (onerror) onerror();
      };
      if (ENVIRONMENT_IS_NODE) {
        readAsync(
          url,
          (data) => {
            eval(data);
            loadDone();
          },
          loadError,
          false,
        );
        return;
      }
      var script = document.createElement("script");
      script.onload = loadDone;
      script.onerror = loadError;
      script.src = url;
      document.body.appendChild(script);
    };
    Module["_emscripten_async_load_script"] = _emscripten_async_load_script;
    _emscripten_async_load_script.sig = "vppp";
    var _emscripten_get_main_loop_timing = (mode, value) => {
      if (mode) HEAP32[mode >> 2] = Browser.mainLoop.timingMode;
      if (value) HEAP32[value >> 2] = Browser.mainLoop.timingValue;
    };
    Module["_emscripten_get_main_loop_timing"] =
      _emscripten_get_main_loop_timing;
    _emscripten_get_main_loop_timing.sig = "vpp";
    var _emscripten_set_main_loop = (func, fps, simulateInfiniteLoop) => {
      var browserIterationFunc = getWasmTableEntry(func);
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop);
    };
    Module["_emscripten_set_main_loop"] = _emscripten_set_main_loop;
    _emscripten_set_main_loop.sig = "vpii";
    var _emscripten_set_main_loop_arg = (
      func,
      arg,
      fps,
      simulateInfiniteLoop,
    ) => {
      var browserIterationFunc = () => getWasmTableEntry(func)(arg);
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg);
    };
    Module["_emscripten_set_main_loop_arg"] = _emscripten_set_main_loop_arg;
    _emscripten_set_main_loop_arg.sig = "vppii";
    var _emscripten_cancel_main_loop = () => {
      Browser.mainLoop.pause();
      Browser.mainLoop.func = null;
    };
    Module["_emscripten_cancel_main_loop"] = _emscripten_cancel_main_loop;
    _emscripten_cancel_main_loop.sig = "v";
    var _emscripten_pause_main_loop = () => {
      Browser.mainLoop.pause();
    };
    Module["_emscripten_pause_main_loop"] = _emscripten_pause_main_loop;
    _emscripten_pause_main_loop.sig = "v";
    var _emscripten_resume_main_loop = () => {
      Browser.mainLoop.resume();
    };
    Module["_emscripten_resume_main_loop"] = _emscripten_resume_main_loop;
    _emscripten_resume_main_loop.sig = "v";
    var __emscripten_push_main_loop_blocker = (func, arg, name) => {
      Browser.mainLoop.queue.push({
        func: () => {
          getWasmTableEntry(func)(arg);
        },
        name: UTF8ToString(name),
        counted: true,
      });
      Browser.mainLoop.updateStatus();
    };
    Module["__emscripten_push_main_loop_blocker"] =
      __emscripten_push_main_loop_blocker;
    __emscripten_push_main_loop_blocker.sig = "vppp";
    var __emscripten_push_uncounted_main_loop_blocker = (func, arg, name) => {
      Browser.mainLoop.queue.push({
        func: () => {
          getWasmTableEntry(func)(arg);
        },
        name: UTF8ToString(name),
        counted: false,
      });
      Browser.mainLoop.updateStatus();
    };
    Module["__emscripten_push_uncounted_main_loop_blocker"] =
      __emscripten_push_uncounted_main_loop_blocker;
    __emscripten_push_uncounted_main_loop_blocker.sig = "vppp";
    var _emscripten_set_main_loop_expected_blockers = (num) => {
      Browser.mainLoop.expectedBlockers = num;
      Browser.mainLoop.remainingBlockers = num;
      Browser.mainLoop.updateStatus();
    };
    Module["_emscripten_set_main_loop_expected_blockers"] =
      _emscripten_set_main_loop_expected_blockers;
    _emscripten_set_main_loop_expected_blockers.sig = "vi";
    var _emscripten_async_call = (func, arg, millis) => {
      function wrapper() {
        getWasmTableEntry(func)(arg);
      }
      if (millis >= 0 || ENVIRONMENT_IS_NODE) {
        safeSetTimeout(wrapper, millis);
      } else {
        Browser.safeRequestAnimationFrame(wrapper);
      }
    };
    Module["_emscripten_async_call"] = _emscripten_async_call;
    _emscripten_async_call.sig = "vppi";
    var _emscripten_get_window_title = () => {
      var buflen = 256;
      if (!_emscripten_get_window_title.buffer) {
        _emscripten_get_window_title.buffer = _malloc(buflen);
      }
      stringToUTF8(document.title, _emscripten_get_window_title.buffer, buflen);
      return _emscripten_get_window_title.buffer;
    };
    Module["_emscripten_get_window_title"] = _emscripten_get_window_title;
    _emscripten_get_window_title.sig = "p";
    var _emscripten_set_window_title = (title) =>
      (document.title = UTF8ToString(title));
    Module["_emscripten_set_window_title"] = _emscripten_set_window_title;
    _emscripten_set_window_title.sig = "vp";
    var _emscripten_get_screen_size = (width, height) => {
      HEAP32[width >> 2] = screen.width;
      HEAP32[height >> 2] = screen.height;
    };
    Module["_emscripten_get_screen_size"] = _emscripten_get_screen_size;
    _emscripten_get_screen_size.sig = "vpp";
    var _emscripten_hide_mouse = () => {
      var styleSheet = document.styleSheets[0];
      var rules = styleSheet.cssRules;
      for (var i = 0; i < rules.length; i++) {
        if (rules[i].cssText.substr(0, 6) == "canvas") {
          styleSheet.deleteRule(i);
          i--;
        }
      }
      styleSheet.insertRule(
        "canvas.emscripten { border: 1px solid black; cursor: none; }",
        0,
      );
    };
    Module["_emscripten_hide_mouse"] = _emscripten_hide_mouse;
    _emscripten_hide_mouse.sig = "v";
    var _emscripten_set_canvas_size = (width, height) => {
      Browser.setCanvasSize(width, height);
    };
    Module["_emscripten_set_canvas_size"] = _emscripten_set_canvas_size;
    _emscripten_set_canvas_size.sig = "vii";
    var _emscripten_get_canvas_size = (width, height, isFullscreen) => {
      var canvas = Module["canvas"];
      HEAP32[width >> 2] = canvas.width;
      HEAP32[height >> 2] = canvas.height;
      HEAP32[isFullscreen >> 2] = Browser.isFullscreen ? 1 : 0;
    };
    Module["_emscripten_get_canvas_size"] = _emscripten_get_canvas_size;
    _emscripten_get_canvas_size.sig = "vppp";
    var _emscripten_create_worker = (url) => {
      url = UTF8ToString(url);
      var id = Browser.workers.length;
      var info = {
        worker: new Worker(url),
        callbacks: [],
        awaited: 0,
        buffer: 0,
        bufferSize: 0,
      };
      info.worker.onmessage = function info_worker_onmessage(msg) {
        if (ABORT) return;
        var info = Browser.workers[id];
        if (!info) return;
        var callbackId = msg.data["callbackId"];
        var callbackInfo = info.callbacks[callbackId];
        if (!callbackInfo) return;
        if (msg.data["finalResponse"]) {
          info.awaited--;
          info.callbacks[callbackId] = null;
        }
        var data = msg.data["data"];
        if (data) {
          if (!data.byteLength) data = new Uint8Array(data);
          if (!info.buffer || info.bufferSize < data.length) {
            if (info.buffer) _free(info.buffer);
            info.bufferSize = data.length;
            info.buffer = _malloc(data.length);
          }
          HEAPU8.set(data, info.buffer);
          callbackInfo.func(info.buffer, data.length, callbackInfo.arg);
        } else {
          callbackInfo.func(0, 0, callbackInfo.arg);
        }
      };
      Browser.workers.push(info);
      return id;
    };
    Module["_emscripten_create_worker"] = _emscripten_create_worker;
    _emscripten_create_worker.sig = "ip";
    var _emscripten_destroy_worker = (id) => {
      var info = Browser.workers[id];
      info.worker.terminate();
      if (info.buffer) _free(info.buffer);
      Browser.workers[id] = null;
    };
    Module["_emscripten_destroy_worker"] = _emscripten_destroy_worker;
    _emscripten_destroy_worker.sig = "vi";
    var _emscripten_call_worker = (id, funcName, data, size, callback, arg) => {
      funcName = UTF8ToString(funcName);
      var info = Browser.workers[id];
      var callbackId = -1;
      if (callback) {
        callbackId = info.callbacks.length;
        info.callbacks.push({ func: getWasmTableEntry(callback), arg: arg });
        info.awaited++;
      }
      var transferObject = {
        funcName: funcName,
        callbackId: callbackId,
        data: data ? new Uint8Array(HEAPU8.subarray(data, data + size)) : 0,
      };
      if (data) {
        info.worker.postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        info.worker.postMessage(transferObject);
      }
    };
    Module["_emscripten_call_worker"] = _emscripten_call_worker;
    _emscripten_call_worker.sig = "vippipp";
    var _emscripten_get_worker_queue_size = (id) => {
      var info = Browser.workers[id];
      if (!info) return -1;
      return info.awaited;
    };
    Module["_emscripten_get_worker_queue_size"] =
      _emscripten_get_worker_queue_size;
    _emscripten_get_worker_queue_size.sig = "ii";
    var _emscripten_get_preloaded_image_data = (path, w, h) => {
      if ((path | 0) === path) path = UTF8ToString(path);
      path = PATH_FS.resolve(path);
      var canvas = preloadedImages[path];
      if (canvas) {
        var ctx = canvas.getContext("2d");
        var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var buf = _malloc(canvas.width * canvas.height * 4);
        HEAPU8.set(image.data, buf);
        HEAP32[w >> 2] = canvas.width;
        HEAP32[h >> 2] = canvas.height;
        return buf;
      }
      return 0;
    };
    Module["_emscripten_get_preloaded_image_data"] =
      _emscripten_get_preloaded_image_data;
    _emscripten_get_preloaded_image_data.sig = "pppp";
    var _emscripten_get_preloaded_image_data_from_FILE = (file, w, h) => {
      var fd = _fileno(file);
      var stream = FS.getStream(fd);
      if (stream) {
        return _emscripten_get_preloaded_image_data(stream.path, w, h);
      }
      return 0;
    };
    Module["_emscripten_get_preloaded_image_data_from_FILE"] =
      _emscripten_get_preloaded_image_data_from_FILE;
    _emscripten_get_preloaded_image_data_from_FILE.sig = "pppp";
    var wget = {
      wgetRequests: {},
      nextWgetRequestHandle: 0,
      getNextWgetRequestHandle() {
        var handle = wget.nextWgetRequestHandle;
        wget.nextWgetRequestHandle++;
        return handle;
      },
    };
    Module["wget"] = wget;
    var FS_mkdirTree = (path, mode) => FS.mkdirTree(path, mode);
    Module["FS_mkdirTree"] = FS_mkdirTree;
    var _emscripten_async_wget = (url, file, onload, onerror) => {
      var _url = UTF8ToString(url);
      var _file = UTF8ToString(file);
      _file = PATH_FS.resolve(_file);
      function doCallback(callback) {
        if (callback) {
          callUserCallback(function () {
            withStackSave(function () {
              getWasmTableEntry(callback)(stringToUTF8OnStack(_file));
            });
          });
        }
      }
      var destinationDirectory = PATH.dirname(_file);
      FS_createPreloadedFile(
        destinationDirectory,
        PATH.basename(_file),
        _url,
        true,
        true,
        function () {
          doCallback(onload);
        },
        function () {
          doCallback(onerror);
        },
        false,
        false,
        function () {
          try {
            FS_unlink(_file);
          } catch (e) {}
          FS_mkdirTree(destinationDirectory);
        },
      );
    };
    Module["_emscripten_async_wget"] = _emscripten_async_wget;
    _emscripten_async_wget.sig = "vpppp";
    var _emscripten_async_wget_data = (url, arg, onload, onerror) => {
      asyncLoad(
        UTF8ToString(url),
        function (byteArray) {
          callUserCallback(function () {
            var buffer = _malloc(byteArray.length);
            HEAPU8.set(byteArray, buffer);
            getWasmTableEntry(onload)(arg, buffer, byteArray.length);
            _free(buffer);
          });
        },
        function () {
          if (onerror) {
            callUserCallback(function () {
              getWasmTableEntry(onerror)(arg);
            });
          }
        },
        true,
      );
    };
    Module["_emscripten_async_wget_data"] = _emscripten_async_wget_data;
    _emscripten_async_wget_data.sig = "vpppp";
    var _emscripten_async_wget2 = (
      url,
      file,
      request,
      param,
      arg,
      onload,
      onerror,
      onprogress,
    ) => {
      var _url = UTF8ToString(url);
      var _file = UTF8ToString(file);
      _file = PATH_FS.resolve(_file);
      var _request = UTF8ToString(request);
      var _param = UTF8ToString(param);
      var index = _file.lastIndexOf("/");
      var http = new XMLHttpRequest();
      http.open(_request, _url, true);
      http.responseType = "arraybuffer";
      var handle = wget.getNextWgetRequestHandle();
      var destinationDirectory = PATH.dirname(_file);
      http.onload = function http_onload(e) {
        if (http.status >= 200 && http.status < 300) {
          try {
            FS.unlink(_file);
          } catch (e) {}
          FS.mkdirTree(destinationDirectory);
          FS.createDataFile(
            _file.substr(0, index),
            _file.substr(index + 1),
            new Uint8Array(http.response),
            true,
            true,
            false,
          );
          if (onload) {
            withStackSave(function () {
              getWasmTableEntry(onload)(
                handle,
                arg,
                stringToUTF8OnStack(_file),
              );
            });
          }
        } else {
          if (onerror) getWasmTableEntry(onerror)(handle, arg, http.status);
        }
        delete wget.wgetRequests[handle];
      };
      http.onerror = function http_onerror(e) {
        if (onerror) getWasmTableEntry(onerror)(handle, arg, http.status);
        delete wget.wgetRequests[handle];
      };
      http.onprogress = function http_onprogress(e) {
        if (
          e.lengthComputable ||
          (e.lengthComputable === undefined && e.total != 0)
        ) {
          var percentComplete = (e.loaded / e.total) * 100;
          if (onprogress)
            getWasmTableEntry(onprogress)(handle, arg, percentComplete);
        }
      };
      http.onabort = function http_onabort(e) {
        delete wget.wgetRequests[handle];
      };
      if (_request == "POST") {
        http.setRequestHeader(
          "Content-type",
          "application/x-www-form-urlencoded",
        );
        http.send(_param);
      } else {
        http.send(null);
      }
      wget.wgetRequests[handle] = http;
      return handle;
    };
    Module["_emscripten_async_wget2"] = _emscripten_async_wget2;
    _emscripten_async_wget2.sig = "ipppppppp";
    var _emscripten_async_wget2_data = (
      url,
      request,
      param,
      arg,
      free,
      onload,
      onerror,
      onprogress,
    ) => {
      var _url = UTF8ToString(url);
      var _request = UTF8ToString(request);
      var _param = UTF8ToString(param);
      var http = new XMLHttpRequest();
      http.open(_request, _url, true);
      http.responseType = "arraybuffer";
      var handle = wget.getNextWgetRequestHandle();
      function onerrorjs() {
        if (onerror) {
          withStackSave(() => {
            var statusText = 0;
            if (http.statusText) {
              statusText = stringToUTF8OnStack(http.statusText);
            }
            getWasmTableEntry(onerror)(handle, arg, http.status, statusText);
          });
        }
      }
      http.onload = function http_onload(e) {
        if (
          (http.status >= 200 && http.status < 300) ||
          (http.status === 0 && _url.substr(0, 4).toLowerCase() != "http")
        ) {
          var byteArray = new Uint8Array(http.response);
          var buffer = _malloc(byteArray.length);
          HEAPU8.set(byteArray, buffer);
          if (onload)
            getWasmTableEntry(onload)(handle, arg, buffer, byteArray.length);
          if (free) _free(buffer);
        } else {
          onerrorjs();
        }
        delete wget.wgetRequests[handle];
      };
      http.onerror = function http_onerror(e) {
        onerrorjs();
        delete wget.wgetRequests[handle];
      };
      http.onprogress = function http_onprogress(e) {
        if (onprogress)
          getWasmTableEntry(onprogress)(
            handle,
            arg,
            e.loaded,
            e.lengthComputable || e.lengthComputable === undefined
              ? e.total
              : 0,
          );
      };
      http.onabort = function http_onabort(e) {
        delete wget.wgetRequests[handle];
      };
      if (_request == "POST") {
        http.setRequestHeader(
          "Content-type",
          "application/x-www-form-urlencoded",
        );
        http.send(_param);
      } else {
        http.send(null);
      }
      wget.wgetRequests[handle] = http;
      return handle;
    };
    Module["_emscripten_async_wget2_data"] = _emscripten_async_wget2_data;
    _emscripten_async_wget2_data.sig = "ippppippp";
    var _emscripten_async_wget2_abort = (handle) => {
      var http = wget.wgetRequests[handle];
      if (http) {
        http.abort();
      }
    };
    Module["_emscripten_async_wget2_abort"] = _emscripten_async_wget2_abort;
    _emscripten_async_wget2_abort.sig = "vi";
    var __dlsym_catchup_js = (handle, symbolIndex) => {
      var lib = LDSO.loadedLibsByHandle[handle];
      var symDict = lib.exports;
      var symName = Object.keys(symDict)[symbolIndex];
      var sym = symDict[symName];
      var result = addFunction(sym, sym.sig);
      return result;
    };
    Module["__dlsym_catchup_js"] = __dlsym_catchup_js;
    __dlsym_catchup_js.sig = "ppi";
    var _setNetworkCallback = (event, userData, callback) => {
      function _callback(data) {
        try {
          if (event === "error") {
            withStackSave(function () {
              var msg = stringToUTF8OnStack(data[2]);
              getWasmTableEntry(callback)(data[0], data[1], msg, userData);
            });
          } else {
            getWasmTableEntry(callback)(data, userData);
          }
        } catch (e) {
          if (!(e instanceof ExitStatus)) {
            if (e && typeof e == "object" && e.stack)
              err("exception thrown: " + [e, e.stack]);
            throw e;
          }
        }
      }
      Module["websocket"]["on"](event, callback ? _callback : null);
    };
    Module["_setNetworkCallback"] = _setNetworkCallback;
    var _emscripten_set_socket_error_callback = (userData, callback) => {
      _setNetworkCallback("error", userData, callback);
    };
    Module["_emscripten_set_socket_error_callback"] =
      _emscripten_set_socket_error_callback;
    _emscripten_set_socket_error_callback.sig = "vpp";
    var _emscripten_set_socket_open_callback = (userData, callback) => {
      _setNetworkCallback("open", userData, callback);
    };
    Module["_emscripten_set_socket_open_callback"] =
      _emscripten_set_socket_open_callback;
    _emscripten_set_socket_open_callback.sig = "vpp";
    var _emscripten_set_socket_listen_callback = (userData, callback) => {
      _setNetworkCallback("listen", userData, callback);
    };
    Module["_emscripten_set_socket_listen_callback"] =
      _emscripten_set_socket_listen_callback;
    _emscripten_set_socket_listen_callback.sig = "vpp";
    var _emscripten_set_socket_connection_callback = (userData, callback) => {
      _setNetworkCallback("connection", userData, callback);
    };
    Module["_emscripten_set_socket_connection_callback"] =
      _emscripten_set_socket_connection_callback;
    _emscripten_set_socket_connection_callback.sig = "vpp";
    var _emscripten_set_socket_message_callback = (userData, callback) => {
      _setNetworkCallback("message", userData, callback);
    };
    Module["_emscripten_set_socket_message_callback"] =
      _emscripten_set_socket_message_callback;
    _emscripten_set_socket_message_callback.sig = "vpp";
    var _emscripten_set_socket_close_callback = (userData, callback) => {
      _setNetworkCallback("close", userData, callback);
    };
    Module["_emscripten_set_socket_close_callback"] =
      _emscripten_set_socket_close_callback;
    _emscripten_set_socket_close_callback.sig = "vpp";
    var ALLOC_NORMAL = 0;
    Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
    var ALLOC_STACK = 1;
    Module["ALLOC_STACK"] = ALLOC_STACK;
    var allocate = (slab, allocator) => {
      var ret;
      if (allocator == ALLOC_STACK) {
        ret = stackAlloc(slab.length);
      } else {
        ret = _malloc(slab.length);
      }
      if (!slab.subarray && !slab.slice) {
        slab = new Uint8Array(slab);
      }
      HEAPU8.set(slab, ret);
      return ret;
    };
    Module["allocate"] = allocate;
    var writeStringToMemory = (string, buffer, dontAddNull) => {
      warnOnce(
        "writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!",
      );
      var lastChar, end;
      if (dontAddNull) {
        end = buffer + lengthBytesUTF8(string);
        lastChar = HEAP8[end];
      }
      stringToUTF8(string, buffer, Infinity);
      if (dontAddNull) HEAP8[end] = lastChar;
    };
    Module["writeStringToMemory"] = writeStringToMemory;
    var writeAsciiToMemory = (str, buffer, dontAddNull) => {
      for (var i = 0; i < str.length; ++i) {
        HEAP8[buffer++ >> 0] = str.charCodeAt(i);
      }
      if (!dontAddNull) HEAP8[buffer >> 0] = 0;
    };
    Module["writeAsciiToMemory"] = writeAsciiToMemory;
    var allocateUTF8 = stringToNewUTF8;
    Module["allocateUTF8"] = allocateUTF8;
    var allocateUTF8OnStack = stringToUTF8OnStack;
    Module["allocateUTF8OnStack"] = allocateUTF8OnStack;
    var _emscripten_is_main_browser_thread = () => !ENVIRONMENT_IS_WORKER;
    Module["_emscripten_is_main_browser_thread"] =
      _emscripten_is_main_browser_thread;
    var WS = { sockets: [null], socketEvent: null };
    Module["WS"] = WS;
    var _emscripten_websocket_get_ready_state = (socketId, readyState) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      HEAP16[readyState >> 1] = socket.readyState;
      return 0;
    };
    Module["_emscripten_websocket_get_ready_state"] =
      _emscripten_websocket_get_ready_state;
    _emscripten_websocket_get_ready_state.sig = "iip";
    var _emscripten_websocket_get_buffered_amount = (
      socketId,
      bufferedAmount,
    ) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      HEAPU32[bufferedAmount >> 2] = socket.bufferedAmount;
      return 0;
    };
    Module["_emscripten_websocket_get_buffered_amount"] =
      _emscripten_websocket_get_buffered_amount;
    _emscripten_websocket_get_buffered_amount.sig = "iip";
    var _emscripten_websocket_get_extensions = (
      socketId,
      extensions,
      extensionsLength,
    ) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      if (!extensions) return -5;
      stringToUTF8(socket.extensions, extensions, extensionsLength);
      return 0;
    };
    Module["_emscripten_websocket_get_extensions"] =
      _emscripten_websocket_get_extensions;
    _emscripten_websocket_get_extensions.sig = "iipi";
    var _emscripten_websocket_get_extensions_length = (
      socketId,
      extensionsLength,
    ) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      if (!extensionsLength) return -5;
      HEAP32[extensionsLength >> 2] = lengthBytesUTF8(socket.extensions) + 1;
      return 0;
    };
    Module["_emscripten_websocket_get_extensions_length"] =
      _emscripten_websocket_get_extensions_length;
    _emscripten_websocket_get_extensions_length.sig = "iip";
    var _emscripten_websocket_get_protocol = (
      socketId,
      protocol,
      protocolLength,
    ) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      if (!protocol) return -5;
      stringToUTF8(socket.protocol, protocol, protocolLength);
      return 0;
    };
    Module["_emscripten_websocket_get_protocol"] =
      _emscripten_websocket_get_protocol;
    _emscripten_websocket_get_protocol.sig = "iipi";
    var _emscripten_websocket_get_protocol_length = (
      socketId,
      protocolLength,
    ) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      if (!protocolLength) return -5;
      HEAP32[protocolLength >> 2] = lengthBytesUTF8(socket.protocol) + 1;
      return 0;
    };
    Module["_emscripten_websocket_get_protocol_length"] =
      _emscripten_websocket_get_protocol_length;
    _emscripten_websocket_get_protocol_length.sig = "iip";
    var _emscripten_websocket_get_url = (socketId, url, urlLength) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      if (!url) return -5;
      stringToUTF8(socket.url, url, urlLength);
      return 0;
    };
    Module["_emscripten_websocket_get_url"] = _emscripten_websocket_get_url;
    _emscripten_websocket_get_url.sig = "iipi";
    var _emscripten_websocket_get_url_length = (socketId, urlLength) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      if (!urlLength) return -5;
      HEAP32[urlLength >> 2] = lengthBytesUTF8(socket.url) + 1;
      return 0;
    };
    Module["_emscripten_websocket_get_url_length"] =
      _emscripten_websocket_get_url_length;
    _emscripten_websocket_get_url_length.sig = "iip";
    var _emscripten_websocket_set_onopen_callback_on_thread = (
      socketId,
      userData,
      callbackFunc,
      thread,
    ) => {
      if (!WS.socketEvent) WS.socketEvent = _malloc(1024);
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      socket.onopen = function (e) {
        HEAPU32[WS.socketEvent >> 2] = socketId;
        getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData);
      };
      return 0;
    };
    Module["_emscripten_websocket_set_onopen_callback_on_thread"] =
      _emscripten_websocket_set_onopen_callback_on_thread;
    _emscripten_websocket_set_onopen_callback_on_thread.sig = "iippp";
    var _emscripten_websocket_set_onerror_callback_on_thread = (
      socketId,
      userData,
      callbackFunc,
      thread,
    ) => {
      if (!WS.socketEvent) WS.socketEvent = _malloc(1024);
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      socket.onerror = function (e) {
        HEAPU32[WS.socketEvent >> 2] = socketId;
        getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData);
      };
      return 0;
    };
    Module["_emscripten_websocket_set_onerror_callback_on_thread"] =
      _emscripten_websocket_set_onerror_callback_on_thread;
    _emscripten_websocket_set_onerror_callback_on_thread.sig = "iippp";
    var _emscripten_websocket_set_onclose_callback_on_thread = (
      socketId,
      userData,
      callbackFunc,
      thread,
    ) => {
      if (!WS.socketEvent) WS.socketEvent = _malloc(1024);
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      socket.onclose = function (e) {
        HEAPU32[WS.socketEvent >> 2] = socketId;
        HEAPU32[(WS.socketEvent + 4) >> 2] = e.wasClean;
        HEAPU32[(WS.socketEvent + 8) >> 2] = e.code;
        stringToUTF8(e.reason, WS.socketEvent + 10, 512);
        getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData);
      };
      return 0;
    };
    Module["_emscripten_websocket_set_onclose_callback_on_thread"] =
      _emscripten_websocket_set_onclose_callback_on_thread;
    _emscripten_websocket_set_onclose_callback_on_thread.sig = "iippp";
    var _emscripten_websocket_set_onmessage_callback_on_thread = (
      socketId,
      userData,
      callbackFunc,
      thread,
    ) => {
      if (!WS.socketEvent) WS.socketEvent = _malloc(1024);
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      socket.onmessage = function (e) {
        HEAPU32[WS.socketEvent >> 2] = socketId;
        if (typeof e.data == "string") {
          var buf = stringToNewUTF8(e.data);
          var len = lengthBytesUTF8(e.data) + 1;
          HEAPU32[(WS.socketEvent + 12) >> 2] = 1;
        } else {
          var len = e.data.byteLength;
          var buf = _malloc(len);
          HEAP8.set(new Uint8Array(e.data), buf);
          HEAPU32[(WS.socketEvent + 12) >> 2] = 0;
        }
        HEAPU32[(WS.socketEvent + 4) >> 2] = buf;
        HEAPU32[(WS.socketEvent + 8) >> 2] = len;
        getWasmTableEntry(callbackFunc)(0, WS.socketEvent, userData);
        _free(buf);
      };
      return 0;
    };
    Module["_emscripten_websocket_set_onmessage_callback_on_thread"] =
      _emscripten_websocket_set_onmessage_callback_on_thread;
    _emscripten_websocket_set_onmessage_callback_on_thread.sig = "iippp";
    var _emscripten_websocket_new = (createAttributes) => {
      if (typeof WebSocket == "undefined") {
        return -1;
      }
      if (!createAttributes) {
        return -5;
      }
      var createAttrs = createAttributes >> 2;
      var url = UTF8ToString(HEAP32[createAttrs]);
      var protocols = HEAP32[createAttrs + 1];
      var socket = protocols
        ? new WebSocket(url, UTF8ToString(protocols).split(","))
        : new WebSocket(url);
      socket.binaryType = "arraybuffer";
      var socketId = WS.sockets.length;
      WS.sockets[socketId] = socket;
      return socketId;
    };
    Module["_emscripten_websocket_new"] = _emscripten_websocket_new;
    _emscripten_websocket_new.sig = "ip";
    var _emscripten_websocket_send_utf8_text = (socketId, textData) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      var str = UTF8ToString(textData);
      socket.send(str);
      return 0;
    };
    Module["_emscripten_websocket_send_utf8_text"] =
      _emscripten_websocket_send_utf8_text;
    _emscripten_websocket_send_utf8_text.sig = "iip";
    var _emscripten_websocket_send_binary = (
      socketId,
      binaryData,
      dataLength,
    ) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      socket.send(HEAPU8.subarray(binaryData, binaryData + dataLength));
      return 0;
    };
    Module["_emscripten_websocket_send_binary"] =
      _emscripten_websocket_send_binary;
    _emscripten_websocket_send_binary.sig = "iipi";
    var _emscripten_websocket_close = (socketId, code, reason) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      var reasonStr = reason ? UTF8ToString(reason) : undefined;
      if (reason) socket.close(code || undefined, UTF8ToString(reason));
      else if (code) socket.close(code);
      else socket.close();
      return 0;
    };
    Module["_emscripten_websocket_close"] = _emscripten_websocket_close;
    _emscripten_websocket_close.sig = "iiip";
    var _emscripten_websocket_delete = (socketId) => {
      var socket = WS.sockets[socketId];
      if (!socket) {
        return -3;
      }
      socket.onopen = socket.onerror = socket.onclose = socket.onmessage = null;
      delete WS.sockets[socketId];
      return 0;
    };
    Module["_emscripten_websocket_delete"] = _emscripten_websocket_delete;
    _emscripten_websocket_delete.sig = "ii";
    var _emscripten_websocket_is_supported = () =>
      typeof WebSocket != "undefined";
    Module["_emscripten_websocket_is_supported"] =
      _emscripten_websocket_is_supported;
    _emscripten_websocket_is_supported.sig = "i";
    var _emscripten_websocket_deinitialize = () => {
      for (var i in WS.sockets) {
        var socket = WS.sockets[i];
        if (socket) {
          socket.close();
          _emscripten_websocket_delete(i);
        }
      }
      WS.sockets = [];
    };
    Module["_emscripten_websocket_deinitialize"] =
      _emscripten_websocket_deinitialize;
    _emscripten_websocket_deinitialize.sig = "v";
    var _emscripten_webgl_enable_ANGLE_instanced_arrays = (ctx) =>
      webgl_enable_ANGLE_instanced_arrays(GL.contexts[ctx].GLctx);
    Module["_emscripten_webgl_enable_ANGLE_instanced_arrays"] =
      _emscripten_webgl_enable_ANGLE_instanced_arrays;
    _emscripten_webgl_enable_ANGLE_instanced_arrays.sig = "ii";
    var _emscripten_webgl_enable_OES_vertex_array_object = (ctx) =>
      webgl_enable_OES_vertex_array_object(GL.contexts[ctx].GLctx);
    Module["_emscripten_webgl_enable_OES_vertex_array_object"] =
      _emscripten_webgl_enable_OES_vertex_array_object;
    _emscripten_webgl_enable_OES_vertex_array_object.sig = "ii";
    var _emscripten_webgl_enable_WEBGL_draw_buffers = (ctx) =>
      webgl_enable_WEBGL_draw_buffers(GL.contexts[ctx].GLctx);
    Module["_emscripten_webgl_enable_WEBGL_draw_buffers"] =
      _emscripten_webgl_enable_WEBGL_draw_buffers;
    _emscripten_webgl_enable_WEBGL_draw_buffers.sig = "ii";
    var _emscripten_webgl_enable_WEBGL_multi_draw = (ctx) =>
      webgl_enable_WEBGL_multi_draw(GL.contexts[ctx].GLctx);
    Module["_emscripten_webgl_enable_WEBGL_multi_draw"] =
      _emscripten_webgl_enable_WEBGL_multi_draw;
    _emscripten_webgl_enable_WEBGL_multi_draw.sig = "ii";
    var _glVertexPointer = (size, type, stride, ptr) => {
      throw "Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation.";
    };
    Module["_glVertexPointer"] = _glVertexPointer;
    _glVertexPointer.sig = "viiip";
    var _glMatrixMode = () => {
      throw "Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation.";
    };
    Module["_glMatrixMode"] = _glMatrixMode;
    _glMatrixMode.sig = "vi";
    var _glBegin = () => {
      throw "Legacy GL function (glBegin) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation.";
    };
    Module["_glBegin"] = _glBegin;
    _glBegin.sig = "vi";
    var _glLoadIdentity = () => {
      throw "Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -sLEGACY_GL_EMULATION to enable legacy GL emulation.";
    };
    Module["_glLoadIdentity"] = _glLoadIdentity;
    _glLoadIdentity.sig = "v";
    var _glVertexAttribDivisorNV = _glVertexAttribDivisor;
    Module["_glVertexAttribDivisorNV"] = _glVertexAttribDivisorNV;
    var _glDrawArraysInstancedNV = _glDrawArraysInstanced;
    Module["_glDrawArraysInstancedNV"] = _glDrawArraysInstancedNV;
    var _glDrawElementsInstancedNV = _glDrawElementsInstanced;
    Module["_glDrawElementsInstancedNV"] = _glDrawElementsInstancedNV;
    var _glVertexAttribDivisorEXT = _glVertexAttribDivisor;
    Module["_glVertexAttribDivisorEXT"] = _glVertexAttribDivisorEXT;
    var _glDrawArraysInstancedEXT = _glDrawArraysInstanced;
    Module["_glDrawArraysInstancedEXT"] = _glDrawArraysInstancedEXT;
    var _glDrawElementsInstancedEXT = _glDrawElementsInstanced;
    Module["_glDrawElementsInstancedEXT"] = _glDrawElementsInstancedEXT;
    var _glVertexAttribDivisorARB = _glVertexAttribDivisor;
    Module["_glVertexAttribDivisorARB"] = _glVertexAttribDivisorARB;
    var _glDrawArraysInstancedARB = _glDrawArraysInstanced;
    Module["_glDrawArraysInstancedARB"] = _glDrawArraysInstancedARB;
    var _glDrawElementsInstancedARB = _glDrawElementsInstanced;
    Module["_glDrawElementsInstancedARB"] = _glDrawElementsInstancedARB;
    var _glDrawBuffersEXT = _glDrawBuffers;
    Module["_glDrawBuffersEXT"] = _glDrawBuffersEXT;
    var _glMultiDrawArraysWEBGL = (mode, firsts, counts, drawcount) => {
      GLctx.multiDrawWebgl["multiDrawArraysWEBGL"](
        mode,
        HEAP32,
        firsts >> 2,
        HEAP32,
        counts >> 2,
        drawcount,
      );
    };
    Module["_glMultiDrawArraysWEBGL"] = _glMultiDrawArraysWEBGL;
    _glMultiDrawArraysWEBGL.sig = "vippi";
    var _glMultiDrawArrays = _glMultiDrawArraysWEBGL;
    Module["_glMultiDrawArrays"] = _glMultiDrawArrays;
    _glMultiDrawArrays.sig = "vippi";
    var _glMultiDrawArraysANGLE = _glMultiDrawArraysWEBGL;
    Module["_glMultiDrawArraysANGLE"] = _glMultiDrawArraysANGLE;
    var _glMultiDrawArraysInstancedWEBGL = (
      mode,
      firsts,
      counts,
      instanceCounts,
      drawcount,
    ) => {
      GLctx.multiDrawWebgl["multiDrawArraysInstancedWEBGL"](
        mode,
        HEAP32,
        firsts >> 2,
        HEAP32,
        counts >> 2,
        HEAP32,
        instanceCounts >> 2,
        drawcount,
      );
    };
    Module["_glMultiDrawArraysInstancedWEBGL"] =
      _glMultiDrawArraysInstancedWEBGL;
    _glMultiDrawArraysInstancedWEBGL.sig = "viiiii";
    var _glMultiDrawArraysInstancedANGLE = _glMultiDrawArraysInstancedWEBGL;
    Module["_glMultiDrawArraysInstancedANGLE"] =
      _glMultiDrawArraysInstancedANGLE;
    var _glMultiDrawElementsWEBGL = (
      mode,
      counts,
      type,
      offsets,
      drawcount,
    ) => {
      GLctx.multiDrawWebgl["multiDrawElementsWEBGL"](
        mode,
        HEAP32,
        counts >> 2,
        type,
        HEAP32,
        offsets >> 2,
        drawcount,
      );
    };
    Module["_glMultiDrawElementsWEBGL"] = _glMultiDrawElementsWEBGL;
    _glMultiDrawElementsWEBGL.sig = "vipipi";
    var _glMultiDrawElements = _glMultiDrawElementsWEBGL;
    Module["_glMultiDrawElements"] = _glMultiDrawElements;
    _glMultiDrawElements.sig = "vipipi";
    var _glMultiDrawElementsANGLE = _glMultiDrawElementsWEBGL;
    Module["_glMultiDrawElementsANGLE"] = _glMultiDrawElementsANGLE;
    var _glMultiDrawElementsInstancedWEBGL = (
      mode,
      counts,
      type,
      offsets,
      instanceCounts,
      drawcount,
    ) => {
      GLctx.multiDrawWebgl["multiDrawElementsInstancedWEBGL"](
        mode,
        HEAP32,
        counts >> 2,
        type,
        HEAP32,
        offsets >> 2,
        HEAP32,
        instanceCounts >> 2,
        drawcount,
      );
    };
    Module["_glMultiDrawElementsInstancedWEBGL"] =
      _glMultiDrawElementsInstancedWEBGL;
    _glMultiDrawElementsInstancedWEBGL.sig = "viiiiii";
    var _glMultiDrawElementsInstancedANGLE = _glMultiDrawElementsInstancedWEBGL;
    Module["_glMultiDrawElementsInstancedANGLE"] =
      _glMultiDrawElementsInstancedANGLE;
    function _glClearDepth(x0) {
      GLctx.clearDepth(x0);
    }
    Module["_glClearDepth"] = _glClearDepth;
    _glClearDepth.sig = "vd";
    function _glDepthRange(x0, x1) {
      GLctx.depthRange(x0, x1);
    }
    Module["_glDepthRange"] = _glDepthRange;
    _glDepthRange.sig = "vdd";
    var _emscripten_glGenVertexArrays = _glGenVertexArrays;
    Module["_emscripten_glGenVertexArrays"] = _emscripten_glGenVertexArrays;
    var _emscripten_glDeleteVertexArrays = _glDeleteVertexArrays;
    Module["_emscripten_glDeleteVertexArrays"] =
      _emscripten_glDeleteVertexArrays;
    var _emscripten_glBindVertexArray = _glBindVertexArray;
    Module["_emscripten_glBindVertexArray"] = _emscripten_glBindVertexArray;
    var _emscripten_glIsVertexArray = _glIsVertexArray;
    Module["_emscripten_glIsVertexArray"] = _emscripten_glIsVertexArray;
    var _emscripten_glVertexPointer = _glVertexPointer;
    Module["_emscripten_glVertexPointer"] = _emscripten_glVertexPointer;
    var _emscripten_glMatrixMode = _glMatrixMode;
    Module["_emscripten_glMatrixMode"] = _emscripten_glMatrixMode;
    var _emscripten_glBegin = _glBegin;
    Module["_emscripten_glBegin"] = _emscripten_glBegin;
    var _emscripten_glLoadIdentity = _glLoadIdentity;
    Module["_emscripten_glLoadIdentity"] = _emscripten_glLoadIdentity;
    var _emscripten_glVertexAttribDivisor = _glVertexAttribDivisor;
    Module["_emscripten_glVertexAttribDivisor"] =
      _emscripten_glVertexAttribDivisor;
    var _emscripten_glDrawArraysInstanced = _glDrawArraysInstanced;
    Module["_emscripten_glDrawArraysInstanced"] =
      _emscripten_glDrawArraysInstanced;
    var _emscripten_glDrawElementsInstanced = _glDrawElementsInstanced;
    Module["_emscripten_glDrawElementsInstanced"] =
      _emscripten_glDrawElementsInstanced;
    var _emscripten_glVertexAttribDivisorNV = _glVertexAttribDivisorNV;
    Module["_emscripten_glVertexAttribDivisorNV"] =
      _emscripten_glVertexAttribDivisorNV;
    var _emscripten_glDrawArraysInstancedNV = _glDrawArraysInstancedNV;
    Module["_emscripten_glDrawArraysInstancedNV"] =
      _emscripten_glDrawArraysInstancedNV;
    var _emscripten_glDrawElementsInstancedNV = _glDrawElementsInstancedNV;
    Module["_emscripten_glDrawElementsInstancedNV"] =
      _emscripten_glDrawElementsInstancedNV;
    var _emscripten_glVertexAttribDivisorEXT = _glVertexAttribDivisorEXT;
    Module["_emscripten_glVertexAttribDivisorEXT"] =
      _emscripten_glVertexAttribDivisorEXT;
    var _emscripten_glDrawArraysInstancedEXT = _glDrawArraysInstancedEXT;
    Module["_emscripten_glDrawArraysInstancedEXT"] =
      _emscripten_glDrawArraysInstancedEXT;
    var _emscripten_glDrawElementsInstancedEXT = _glDrawElementsInstancedEXT;
    Module["_emscripten_glDrawElementsInstancedEXT"] =
      _emscripten_glDrawElementsInstancedEXT;
    var _emscripten_glVertexAttribDivisorARB = _glVertexAttribDivisorARB;
    Module["_emscripten_glVertexAttribDivisorARB"] =
      _emscripten_glVertexAttribDivisorARB;
    var _emscripten_glDrawArraysInstancedARB = _glDrawArraysInstancedARB;
    Module["_emscripten_glDrawArraysInstancedARB"] =
      _emscripten_glDrawArraysInstancedARB;
    var _emscripten_glDrawElementsInstancedARB = _glDrawElementsInstancedARB;
    Module["_emscripten_glDrawElementsInstancedARB"] =
      _emscripten_glDrawElementsInstancedARB;
    var _emscripten_glDrawBuffers = _glDrawBuffers;
    Module["_emscripten_glDrawBuffers"] = _emscripten_glDrawBuffers;
    var _emscripten_glDrawBuffersEXT = _glDrawBuffersEXT;
    Module["_emscripten_glDrawBuffersEXT"] = _emscripten_glDrawBuffersEXT;
    var _emscripten_glMultiDrawArrays = _glMultiDrawArrays;
    Module["_emscripten_glMultiDrawArrays"] = _emscripten_glMultiDrawArrays;
    var _emscripten_glMultiDrawArraysANGLE = _glMultiDrawArraysANGLE;
    Module["_emscripten_glMultiDrawArraysANGLE"] =
      _emscripten_glMultiDrawArraysANGLE;
    var _emscripten_glMultiDrawArraysWEBGL = _glMultiDrawArraysWEBGL;
    Module["_emscripten_glMultiDrawArraysWEBGL"] =
      _emscripten_glMultiDrawArraysWEBGL;
    var _emscripten_glMultiDrawArraysInstancedANGLE =
      _glMultiDrawArraysInstancedANGLE;
    Module["_emscripten_glMultiDrawArraysInstancedANGLE"] =
      _emscripten_glMultiDrawArraysInstancedANGLE;
    var _emscripten_glMultiDrawArraysInstancedWEBGL =
      _glMultiDrawArraysInstancedWEBGL;
    Module["_emscripten_glMultiDrawArraysInstancedWEBGL"] =
      _emscripten_glMultiDrawArraysInstancedWEBGL;
    var _emscripten_glMultiDrawElements = _glMultiDrawElements;
    Module["_emscripten_glMultiDrawElements"] = _emscripten_glMultiDrawElements;
    var _emscripten_glMultiDrawElementsANGLE = _glMultiDrawElementsANGLE;
    Module["_emscripten_glMultiDrawElementsANGLE"] =
      _emscripten_glMultiDrawElementsANGLE;
    var _emscripten_glMultiDrawElementsWEBGL = _glMultiDrawElementsWEBGL;
    Module["_emscripten_glMultiDrawElementsWEBGL"] =
      _emscripten_glMultiDrawElementsWEBGL;
    var _emscripten_glMultiDrawElementsInstancedANGLE =
      _glMultiDrawElementsInstancedANGLE;
    Module["_emscripten_glMultiDrawElementsInstancedANGLE"] =
      _emscripten_glMultiDrawElementsInstancedANGLE;
    var _emscripten_glMultiDrawElementsInstancedWEBGL =
      _glMultiDrawElementsInstancedWEBGL;
    Module["_emscripten_glMultiDrawElementsInstancedWEBGL"] =
      _emscripten_glMultiDrawElementsInstancedWEBGL;
    var _emscripten_glClearDepth = _glClearDepth;
    Module["_emscripten_glClearDepth"] = _emscripten_glClearDepth;
    var _emscripten_glDepthRange = _glDepthRange;
    Module["_emscripten_glDepthRange"] = _emscripten_glDepthRange;
    var writeGLArray = (arr, dst, dstLength, heapType) => {
      var len = arr.length;
      var writeLength = dstLength < len ? dstLength : len;
      var heap = heapType ? HEAPF32 : HEAP32;
      for (var i = 0; i < writeLength; ++i) {
        heap[(dst >> 2) + i] = arr[i];
      }
      return len;
    };
    Module["writeGLArray"] = writeGLArray;
    var _emscripten_webgl_init_context_attributes = (attributes) => {
      var a = attributes >> 2;
      for (var i = 0; i < 56 >> 2; ++i) {
        HEAP32[a + i] = 0;
      }
      HEAP32[a + (0 >> 2)] =
        HEAP32[a + (4 >> 2)] =
        HEAP32[a + (12 >> 2)] =
        HEAP32[a + (16 >> 2)] =
        HEAP32[a + (32 >> 2)] =
        HEAP32[a + (40 >> 2)] =
          1;
    };
    Module["_emscripten_webgl_init_context_attributes"] =
      _emscripten_webgl_init_context_attributes;
    _emscripten_webgl_init_context_attributes.sig = "vp";
    var emscripten_webgl_power_preferences = [
      "default",
      "low-power",
      "high-performance",
    ];
    Module["emscripten_webgl_power_preferences"] =
      emscripten_webgl_power_preferences;
    var _emscripten_webgl_do_create_context = (target, attributes) => {
      var a = attributes >> 2;
      var powerPreference = HEAP32[a + (24 >> 2)];
      var contextAttributes = {
        alpha: !!HEAP32[a + (0 >> 2)],
        depth: !!HEAP32[a + (4 >> 2)],
        stencil: !!HEAP32[a + (8 >> 2)],
        antialias: !!HEAP32[a + (12 >> 2)],
        premultipliedAlpha: !!HEAP32[a + (16 >> 2)],
        preserveDrawingBuffer: !!HEAP32[a + (20 >> 2)],
        powerPreference: emscripten_webgl_power_preferences[powerPreference],
        failIfMajorPerformanceCaveat: !!HEAP32[a + (28 >> 2)],
        majorVersion: HEAP32[a + (32 >> 2)],
        minorVersion: HEAP32[a + (36 >> 2)],
        enableExtensionsByDefault: HEAP32[a + (40 >> 2)],
        explicitSwapControl: HEAP32[a + (44 >> 2)],
        proxyContextToMainThread: HEAP32[a + (48 >> 2)],
        renderViaOffscreenBackBuffer: HEAP32[a + (52 >> 2)],
      };
      var canvas = findCanvasEventTarget(target);
      if (!canvas) {
        return 0;
      }
      if (contextAttributes.explicitSwapControl) {
        return 0;
      }
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    };
    Module["_emscripten_webgl_do_create_context"] =
      _emscripten_webgl_do_create_context;
    _emscripten_webgl_do_create_context.sig = "ipp";
    var _emscripten_webgl_create_context = _emscripten_webgl_do_create_context;
    Module["_emscripten_webgl_create_context"] =
      _emscripten_webgl_create_context;
    _emscripten_webgl_create_context.sig = "ipp";
    var _emscripten_webgl_do_get_current_context = () =>
      GL.currentContext ? GL.currentContext.handle : 0;
    Module["_emscripten_webgl_do_get_current_context"] =
      _emscripten_webgl_do_get_current_context;
    _emscripten_webgl_do_get_current_context.sig = "i";
    var _emscripten_webgl_get_current_context =
      _emscripten_webgl_do_get_current_context;
    Module["_emscripten_webgl_get_current_context"] =
      _emscripten_webgl_get_current_context;
    _emscripten_webgl_get_current_context.sig = "i";
    var _emscripten_webgl_do_commit_frame = () => {
      if (!GL.currentContext || !GL.currentContext.GLctx) {
        return -3;
      }
      if (!GL.currentContext.attributes.explicitSwapControl) {
        return -3;
      }
      return 0;
    };
    Module["_emscripten_webgl_do_commit_frame"] =
      _emscripten_webgl_do_commit_frame;
    _emscripten_webgl_do_commit_frame.sig = "i";
    var _emscripten_webgl_commit_frame = _emscripten_webgl_do_commit_frame;
    Module["_emscripten_webgl_commit_frame"] = _emscripten_webgl_commit_frame;
    _emscripten_webgl_commit_frame.sig = "i";
    var _emscripten_webgl_make_context_current = (contextHandle) => {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    };
    Module["_emscripten_webgl_make_context_current"] =
      _emscripten_webgl_make_context_current;
    _emscripten_webgl_make_context_current.sig = "ii";
    var _emscripten_webgl_get_drawing_buffer_size = (
      contextHandle,
      width,
      height,
    ) => {
      var GLContext = GL.getContext(contextHandle);
      if (!GLContext || !GLContext.GLctx || !width || !height) {
        return -5;
      }
      HEAP32[width >> 2] = GLContext.GLctx.drawingBufferWidth;
      HEAP32[height >> 2] = GLContext.GLctx.drawingBufferHeight;
      return 0;
    };
    Module["_emscripten_webgl_get_drawing_buffer_size"] =
      _emscripten_webgl_get_drawing_buffer_size;
    _emscripten_webgl_get_drawing_buffer_size.sig = "iipp";
    var _emscripten_webgl_get_context_attributes = (c, a) => {
      if (!a) return -5;
      c = GL.contexts[c];
      if (!c) return -3;
      var t = c.GLctx;
      if (!t) return -3;
      t = t.getContextAttributes();
      HEAP32[a >> 2] = t.alpha;
      HEAP32[(a + 4) >> 2] = t.depth;
      HEAP32[(a + 8) >> 2] = t.stencil;
      HEAP32[(a + 12) >> 2] = t.antialias;
      HEAP32[(a + 16) >> 2] = t.premultipliedAlpha;
      HEAP32[(a + 20) >> 2] = t.preserveDrawingBuffer;
      var power =
        t["powerPreference"] &&
        emscripten_webgl_power_preferences.indexOf(t["powerPreference"]);
      HEAP32[(a + 24) >> 2] = power;
      HEAP32[(a + 28) >> 2] = t.failIfMajorPerformanceCaveat;
      HEAP32[(a + 32) >> 2] = c.version;
      HEAP32[(a + 36) >> 2] = 0;
      HEAP32[(a + 40) >> 2] = c.attributes.enableExtensionsByDefault;
      return 0;
    };
    Module["_emscripten_webgl_get_context_attributes"] =
      _emscripten_webgl_get_context_attributes;
    _emscripten_webgl_get_context_attributes.sig = "iip";
    var _emscripten_webgl_destroy_context = (contextHandle) => {
      if (GL.currentContext == contextHandle) GL.currentContext = 0;
      GL.deleteContext(contextHandle);
    };
    Module["_emscripten_webgl_destroy_context"] =
      _emscripten_webgl_destroy_context;
    _emscripten_webgl_destroy_context.sig = "ii";
    var _emscripten_webgl_enable_extension = (contextHandle, extension) => {
      var context = GL.getContext(contextHandle);
      var extString = UTF8ToString(extension);
      if (extString.startsWith("GL_")) extString = extString.substr(3);
      if (extString == "ANGLE_instanced_arrays")
        webgl_enable_ANGLE_instanced_arrays(GLctx);
      if (extString == "OES_vertex_array_object")
        webgl_enable_OES_vertex_array_object(GLctx);
      if (extString == "WEBGL_draw_buffers")
        webgl_enable_WEBGL_draw_buffers(GLctx);
      if (extString == "WEBGL_multi_draw") webgl_enable_WEBGL_multi_draw(GLctx);
      var ext = context.GLctx.getExtension(extString);
      return !!ext;
    };
    Module["_emscripten_webgl_enable_extension"] =
      _emscripten_webgl_enable_extension;
    _emscripten_webgl_enable_extension.sig = "iip";
    var _emscripten_supports_offscreencanvas = () => 0;
    Module["_emscripten_supports_offscreencanvas"] =
      _emscripten_supports_offscreencanvas;
    _emscripten_supports_offscreencanvas.sig = "i";
    var registerWebGlEventCallback = (
      target,
      userData,
      useCapture,
      callbackfunc,
      eventTypeId,
      eventTypeString,
      targetThread,
    ) => {
      var webGlEventHandlerFunc = (e = event) => {
        if (getWasmTableEntry(callbackfunc)(eventTypeId, 0, userData))
          e.preventDefault();
      };
      var eventHandler = {
        target: findEventTarget(target),
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: webGlEventHandlerFunc,
        useCapture: useCapture,
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    };
    Module["registerWebGlEventCallback"] = registerWebGlEventCallback;
    var _emscripten_set_webglcontextlost_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      registerWebGlEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        31,
        "webglcontextlost",
        targetThread,
      );
      return 0;
    };
    Module["_emscripten_set_webglcontextlost_callback_on_thread"] =
      _emscripten_set_webglcontextlost_callback_on_thread;
    _emscripten_set_webglcontextlost_callback_on_thread.sig = "ippipp";
    var _emscripten_set_webglcontextrestored_callback_on_thread = (
      target,
      userData,
      useCapture,
      callbackfunc,
      targetThread,
    ) => {
      registerWebGlEventCallback(
        target,
        userData,
        useCapture,
        callbackfunc,
        32,
        "webglcontextrestored",
        targetThread,
      );
      return 0;
    };
    Module["_emscripten_set_webglcontextrestored_callback_on_thread"] =
      _emscripten_set_webglcontextrestored_callback_on_thread;
    _emscripten_set_webglcontextrestored_callback_on_thread.sig = "ippipp";
    var _emscripten_is_webgl_context_lost = (contextHandle) =>
      !GL.contexts[contextHandle] ||
      GL.contexts[contextHandle].GLctx.isContextLost();
    Module["_emscripten_is_webgl_context_lost"] =
      _emscripten_is_webgl_context_lost;
    _emscripten_is_webgl_context_lost.sig = "ii";
    var _emscripten_webgl_get_supported_extensions = () =>
      stringToNewUTF8(GLctx.getSupportedExtensions().join(" "));
    Module["_emscripten_webgl_get_supported_extensions"] =
      _emscripten_webgl_get_supported_extensions;
    _emscripten_webgl_get_supported_extensions.sig = "p";
    var _emscripten_webgl_get_program_parameter_d = (program, param) =>
      GLctx.getProgramParameter(GL.programs[program], param);
    Module["_emscripten_webgl_get_program_parameter_d"] =
      _emscripten_webgl_get_program_parameter_d;
    _emscripten_webgl_get_program_parameter_d.sig = "dii";
    var _emscripten_webgl_get_program_info_log_utf8 = (program) =>
      stringToNewUTF8(GLctx.getProgramInfoLog(GL.programs[program]));
    Module["_emscripten_webgl_get_program_info_log_utf8"] =
      _emscripten_webgl_get_program_info_log_utf8;
    _emscripten_webgl_get_program_info_log_utf8.sig = "pi";
    var _emscripten_webgl_get_shader_parameter_d = (shader, param) =>
      GLctx.getShaderParameter(GL.shaders[shader], param);
    Module["_emscripten_webgl_get_shader_parameter_d"] =
      _emscripten_webgl_get_shader_parameter_d;
    _emscripten_webgl_get_shader_parameter_d.sig = "dii";
    var _emscripten_webgl_get_shader_info_log_utf8 = (shader) =>
      stringToNewUTF8(GLctx.getShaderInfoLog(GL.shaders[shader]));
    Module["_emscripten_webgl_get_shader_info_log_utf8"] =
      _emscripten_webgl_get_shader_info_log_utf8;
    _emscripten_webgl_get_shader_info_log_utf8.sig = "pi";
    var _emscripten_webgl_get_shader_source_utf8 = (shader) =>
      stringToNewUTF8(GLctx.getShaderSource(GL.shaders[shader]));
    Module["_emscripten_webgl_get_shader_source_utf8"] =
      _emscripten_webgl_get_shader_source_utf8;
    _emscripten_webgl_get_shader_source_utf8.sig = "pi";
    var _emscripten_webgl_get_vertex_attrib_d = (index, param) =>
      GLctx.getVertexAttrib(index, param);
    Module["_emscripten_webgl_get_vertex_attrib_d"] =
      _emscripten_webgl_get_vertex_attrib_d;
    _emscripten_webgl_get_vertex_attrib_d.sig = "dii";
    var _emscripten_webgl_get_vertex_attrib_o = (index, param) => {
      var obj = GLctx.getVertexAttrib(index, param);
      return obj && obj.name;
    };
    Module["_emscripten_webgl_get_vertex_attrib_o"] =
      _emscripten_webgl_get_vertex_attrib_o;
    _emscripten_webgl_get_vertex_attrib_o.sig = "iii";
    var _emscripten_webgl_get_vertex_attrib_v = (
      index,
      param,
      dst,
      dstLength,
      dstType,
    ) =>
      writeGLArray(
        GLctx.getVertexAttrib(index, param),
        dst,
        dstLength,
        dstType,
      );
    Module["_emscripten_webgl_get_vertex_attrib_v"] =
      _emscripten_webgl_get_vertex_attrib_v;
    _emscripten_webgl_get_vertex_attrib_v.sig = "iiipii";
    var _emscripten_webgl_get_uniform_d = (program, location) =>
      GLctx.getUniform(GL.programs[program], webglGetUniformLocation(location));
    Module["_emscripten_webgl_get_uniform_d"] = _emscripten_webgl_get_uniform_d;
    _emscripten_webgl_get_uniform_d.sig = "dii";
    var _emscripten_webgl_get_uniform_v = (
      program,
      location,
      dst,
      dstLength,
      dstType,
    ) =>
      writeGLArray(
        GLctx.getUniform(
          GL.programs[program],
          webglGetUniformLocation(location),
        ),
        dst,
        dstLength,
        dstType,
      );
    Module["_emscripten_webgl_get_uniform_v"] = _emscripten_webgl_get_uniform_v;
    _emscripten_webgl_get_uniform_v.sig = "iiipii";
    var _emscripten_webgl_get_parameter_v = (param, dst, dstLength, dstType) =>
      writeGLArray(GLctx.getParameter(param), dst, dstLength, dstType);
    Module["_emscripten_webgl_get_parameter_v"] =
      _emscripten_webgl_get_parameter_v;
    _emscripten_webgl_get_parameter_v.sig = "iipii";
    var _emscripten_webgl_get_parameter_d = (param) =>
      GLctx.getParameter(param);
    Module["_emscripten_webgl_get_parameter_d"] =
      _emscripten_webgl_get_parameter_d;
    _emscripten_webgl_get_parameter_d.sig = "di";
    var _emscripten_webgl_get_parameter_o = (param) => {
      var obj = GLctx.getParameter(param);
      return obj && obj.name;
    };
    Module["_emscripten_webgl_get_parameter_o"] =
      _emscripten_webgl_get_parameter_o;
    _emscripten_webgl_get_parameter_o.sig = "ii";
    var _emscripten_webgl_get_parameter_utf8 = (param) =>
      stringToNewUTF8(GLctx.getParameter(param));
    Module["_emscripten_webgl_get_parameter_utf8"] =
      _emscripten_webgl_get_parameter_utf8;
    _emscripten_webgl_get_parameter_utf8.sig = "pi";
    var _emscripten_webgl_get_parameter_i64v = (param, dst) =>
      writeI53ToI64(dst, GLctx.getParameter(param));
    Module["_emscripten_webgl_get_parameter_i64v"] =
      _emscripten_webgl_get_parameter_i64v;
    _emscripten_webgl_get_parameter_i64v.sig = "vip";
    var EGL = {
      errorCode: 12288,
      defaultDisplayInitialized: false,
      currentContext: 0,
      currentReadSurface: 0,
      currentDrawSurface: 0,
      contextAttributes: {
        alpha: false,
        depth: false,
        stencil: false,
        antialias: false,
      },
      stringCache: {},
      setErrorCode(code) {
        EGL.errorCode = code;
      },
      chooseConfig(display, attribList, config, config_size, numConfigs) {
        if (display != 62e3) {
          EGL.setErrorCode(12296);
          return 0;
        }
        if (attribList) {
          for (;;) {
            var param = HEAP32[attribList >> 2];
            if (param == 12321) {
              var alphaSize = HEAP32[(attribList + 4) >> 2];
              EGL.contextAttributes.alpha = alphaSize > 0;
            } else if (param == 12325) {
              var depthSize = HEAP32[(attribList + 4) >> 2];
              EGL.contextAttributes.depth = depthSize > 0;
            } else if (param == 12326) {
              var stencilSize = HEAP32[(attribList + 4) >> 2];
              EGL.contextAttributes.stencil = stencilSize > 0;
            } else if (param == 12337) {
              var samples = HEAP32[(attribList + 4) >> 2];
              EGL.contextAttributes.antialias = samples > 0;
            } else if (param == 12338) {
              var samples = HEAP32[(attribList + 4) >> 2];
              EGL.contextAttributes.antialias = samples == 1;
            } else if (param == 12544) {
              var requestedPriority = HEAP32[(attribList + 4) >> 2];
              EGL.contextAttributes.lowLatency = requestedPriority != 12547;
            } else if (param == 12344) {
              break;
            }
            attribList += 8;
          }
        }
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(12300);
          return 0;
        }
        if (numConfigs) {
          HEAP32[numConfigs >> 2] = 1;
        }
        if (config && config_size > 0) {
          HEAP32[config >> 2] = 62002;
        }
        EGL.setErrorCode(12288);
        return 1;
      },
    };
    Module["EGL"] = EGL;
    var _eglGetDisplay = (nativeDisplayType) => {
      EGL.setErrorCode(12288);
      return 62e3;
    };
    Module["_eglGetDisplay"] = _eglGetDisplay;
    _eglGetDisplay.sig = "pi";
    var _eglInitialize = (display, majorVersion, minorVersion) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (majorVersion) {
        HEAP32[majorVersion >> 2] = 1;
      }
      if (minorVersion) {
        HEAP32[minorVersion >> 2] = 4;
      }
      EGL.defaultDisplayInitialized = true;
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglInitialize"] = _eglInitialize;
    _eglInitialize.sig = "ippp";
    var _eglTerminate = (display) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglTerminate"] = _eglTerminate;
    _eglTerminate.sig = "ip";
    var _eglGetConfigs = (display, configs, config_size, numConfigs) =>
      EGL.chooseConfig(display, 0, configs, config_size, numConfigs);
    Module["_eglGetConfigs"] = _eglGetConfigs;
    _eglGetConfigs.sig = "ippip";
    var _eglChooseConfig = (
      display,
      attrib_list,
      configs,
      config_size,
      numConfigs,
    ) =>
      EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
    Module["_eglChooseConfig"] = _eglChooseConfig;
    _eglChooseConfig.sig = "ipppip";
    var _eglGetConfigAttrib = (display, config, attribute, value) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(12293);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(12300);
        return 0;
      }
      EGL.setErrorCode(12288);
      switch (attribute) {
        case 12320:
          HEAP32[value >> 2] = EGL.contextAttributes.alpha ? 32 : 24;
          return 1;
        case 12321:
          HEAP32[value >> 2] = EGL.contextAttributes.alpha ? 8 : 0;
          return 1;
        case 12322:
          HEAP32[value >> 2] = 8;
          return 1;
        case 12323:
          HEAP32[value >> 2] = 8;
          return 1;
        case 12324:
          HEAP32[value >> 2] = 8;
          return 1;
        case 12325:
          HEAP32[value >> 2] = EGL.contextAttributes.depth ? 24 : 0;
          return 1;
        case 12326:
          HEAP32[value >> 2] = EGL.contextAttributes.stencil ? 8 : 0;
          return 1;
        case 12327:
          HEAP32[value >> 2] = 12344;
          return 1;
        case 12328:
          HEAP32[value >> 2] = 62002;
          return 1;
        case 12329:
          HEAP32[value >> 2] = 0;
          return 1;
        case 12330:
          HEAP32[value >> 2] = 4096;
          return 1;
        case 12331:
          HEAP32[value >> 2] = 16777216;
          return 1;
        case 12332:
          HEAP32[value >> 2] = 4096;
          return 1;
        case 12333:
          HEAP32[value >> 2] = 0;
          return 1;
        case 12334:
          HEAP32[value >> 2] = 0;
          return 1;
        case 12335:
          HEAP32[value >> 2] = 12344;
          return 1;
        case 12337:
          HEAP32[value >> 2] = EGL.contextAttributes.antialias ? 4 : 0;
          return 1;
        case 12338:
          HEAP32[value >> 2] = EGL.contextAttributes.antialias ? 1 : 0;
          return 1;
        case 12339:
          HEAP32[value >> 2] = 4;
          return 1;
        case 12340:
          HEAP32[value >> 2] = 12344;
          return 1;
        case 12341:
        case 12342:
        case 12343:
          HEAP32[value >> 2] = -1;
          return 1;
        case 12345:
        case 12346:
          HEAP32[value >> 2] = 0;
          return 1;
        case 12347:
          HEAP32[value >> 2] = 0;
          return 1;
        case 12348:
          HEAP32[value >> 2] = 1;
          return 1;
        case 12349:
        case 12350:
          HEAP32[value >> 2] = 0;
          return 1;
        case 12351:
          HEAP32[value >> 2] = 12430;
          return 1;
        case 12352:
          HEAP32[value >> 2] = 4;
          return 1;
        case 12354:
          HEAP32[value >> 2] = 0;
          return 1;
        default:
          EGL.setErrorCode(12292);
          return 0;
      }
    };
    Module["_eglGetConfigAttrib"] = _eglGetConfigAttrib;
    _eglGetConfigAttrib.sig = "ippip";
    var _eglCreateWindowSurface = (display, config, win, attrib_list) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (config != 62002) {
        EGL.setErrorCode(12293);
        return 0;
      }
      EGL.setErrorCode(12288);
      return 62006;
    };
    Module["_eglCreateWindowSurface"] = _eglCreateWindowSurface;
    _eglCreateWindowSurface.sig = "pppip";
    var _eglDestroySurface = (display, surface) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (surface != 62006) {
        EGL.setErrorCode(12301);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglDestroySurface"] = _eglDestroySurface;
    _eglDestroySurface.sig = "ipp";
    var _eglCreateContext = (display, config, hmm, contextAttribs) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      var glesContextVersion = 1;
      for (;;) {
        var param = HEAP32[contextAttribs >> 2];
        if (param == 12440) {
          glesContextVersion = HEAP32[(contextAttribs + 4) >> 2];
        } else if (param == 12344) {
          break;
        } else {
          EGL.setErrorCode(12292);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion != 2) {
        EGL.setErrorCode(12293);
        return 0;
      }
      EGL.contextAttributes.majorVersion = glesContextVersion - 1;
      EGL.contextAttributes.minorVersion = 0;
      EGL.context = GL.createContext(Module["canvas"], EGL.contextAttributes);
      if (EGL.context != 0) {
        EGL.setErrorCode(12288);
        GL.makeContextCurrent(EGL.context);
        Module.useWebGL = true;
        Browser.moduleContextCreatedCallbacks.forEach(function (callback) {
          callback();
        });
        GL.makeContextCurrent(null);
        return 62004;
      } else {
        EGL.setErrorCode(12297);
        return 0;
      }
    };
    Module["_eglCreateContext"] = _eglCreateContext;
    _eglCreateContext.sig = "ppppp";
    var _eglDestroyContext = (display, context) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (context != 62004) {
        EGL.setErrorCode(12294);
        return 0;
      }
      GL.deleteContext(EGL.context);
      EGL.setErrorCode(12288);
      if (EGL.currentContext == context) {
        EGL.currentContext = 0;
      }
      return 1;
    };
    Module["_eglDestroyContext"] = _eglDestroyContext;
    _eglDestroyContext.sig = "ipp";
    var _eglQuerySurface = (display, surface, attribute, value) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (surface != 62006) {
        EGL.setErrorCode(12301);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(12300);
        return 0;
      }
      EGL.setErrorCode(12288);
      switch (attribute) {
        case 12328:
          HEAP32[value >> 2] = 62002;
          return 1;
        case 12376:
          return 1;
        case 12375:
          HEAP32[value >> 2] = Module["canvas"].width;
          return 1;
        case 12374:
          HEAP32[value >> 2] = Module["canvas"].height;
          return 1;
        case 12432:
          HEAP32[value >> 2] = -1;
          return 1;
        case 12433:
          HEAP32[value >> 2] = -1;
          return 1;
        case 12434:
          HEAP32[value >> 2] = -1;
          return 1;
        case 12422:
          HEAP32[value >> 2] = 12420;
          return 1;
        case 12441:
          HEAP32[value >> 2] = 12442;
          return 1;
        case 12435:
          HEAP32[value >> 2] = 12437;
          return 1;
        case 12416:
        case 12417:
        case 12418:
        case 12419:
          return 1;
        default:
          EGL.setErrorCode(12292);
          return 0;
      }
    };
    Module["_eglQuerySurface"] = _eglQuerySurface;
    _eglQuerySurface.sig = "ippip";
    var _eglQueryContext = (display, context, attribute, value) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (context != 62004) {
        EGL.setErrorCode(12294);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(12300);
        return 0;
      }
      EGL.setErrorCode(12288);
      switch (attribute) {
        case 12328:
          HEAP32[value >> 2] = 62002;
          return 1;
        case 12439:
          HEAP32[value >> 2] = 12448;
          return 1;
        case 12440:
          HEAP32[value >> 2] = EGL.contextAttributes.majorVersion + 1;
          return 1;
        case 12422:
          HEAP32[value >> 2] = 12420;
          return 1;
        default:
          EGL.setErrorCode(12292);
          return 0;
      }
    };
    Module["_eglQueryContext"] = _eglQueryContext;
    _eglQueryContext.sig = "ippip";
    var _eglGetError = () => EGL.errorCode;
    Module["_eglGetError"] = _eglGetError;
    _eglGetError.sig = "i";
    var _eglQueryString = (display, name) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      EGL.setErrorCode(12288);
      if (EGL.stringCache[name]) return EGL.stringCache[name];
      var ret;
      switch (name) {
        case 12371:
          ret = stringToNewUTF8("Emscripten");
          break;
        case 12372:
          ret = stringToNewUTF8("1.4 Emscripten EGL");
          break;
        case 12373:
          ret = stringToNewUTF8("");
          break;
        case 12429:
          ret = stringToNewUTF8("OpenGL_ES");
          break;
        default:
          EGL.setErrorCode(12300);
          return 0;
      }
      EGL.stringCache[name] = ret;
      return ret;
    };
    Module["_eglQueryString"] = _eglQueryString;
    _eglQueryString.sig = "ppi";
    var _eglBindAPI = (api) => {
      if (api == 12448) {
        EGL.setErrorCode(12288);
        return 1;
      }
      EGL.setErrorCode(12300);
      return 0;
    };
    Module["_eglBindAPI"] = _eglBindAPI;
    _eglBindAPI.sig = "ii";
    var _eglQueryAPI = () => {
      EGL.setErrorCode(12288);
      return 12448;
    };
    Module["_eglQueryAPI"] = _eglQueryAPI;
    _eglQueryAPI.sig = "i";
    var _eglWaitClient = () => {
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglWaitClient"] = _eglWaitClient;
    _eglWaitClient.sig = "i";
    var _eglWaitNative = (nativeEngineId) => {
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglWaitNative"] = _eglWaitNative;
    _eglWaitNative.sig = "ii";
    var _eglWaitGL = _eglWaitClient;
    Module["_eglWaitGL"] = _eglWaitGL;
    _eglWaitGL.sig = "i";
    var _eglSwapInterval = (display, interval) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0, 0);
      else _emscripten_set_main_loop_timing(1, interval);
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglSwapInterval"] = _eglSwapInterval;
    _eglSwapInterval.sig = "ipi";
    var _eglMakeCurrent = (display, draw, read, context) => {
      if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0;
      }
      if (context != 0 && context != 62004) {
        EGL.setErrorCode(12294);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006)) {
        EGL.setErrorCode(12301);
        return 0;
      }
      GL.makeContextCurrent(context ? EGL.context : null);
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglMakeCurrent"] = _eglMakeCurrent;
    _eglMakeCurrent.sig = "ipppp";
    var _eglGetCurrentContext = () => EGL.currentContext;
    Module["_eglGetCurrentContext"] = _eglGetCurrentContext;
    _eglGetCurrentContext.sig = "p";
    var _eglGetCurrentSurface = (readdraw) => {
      if (readdraw == 12378) {
        return EGL.currentReadSurface;
      } else if (readdraw == 12377) {
        return EGL.currentDrawSurface;
      } else {
        EGL.setErrorCode(12300);
        return 0;
      }
    };
    Module["_eglGetCurrentSurface"] = _eglGetCurrentSurface;
    _eglGetCurrentSurface.sig = "pi";
    var _eglGetCurrentDisplay = () => (EGL.currentContext ? 62e3 : 0);
    Module["_eglGetCurrentDisplay"] = _eglGetCurrentDisplay;
    _eglGetCurrentDisplay.sig = "p";
    var _eglSwapBuffers = (dpy, surface) => {
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(12289);
      } else if (!Module.ctx) {
        EGL.setErrorCode(12290);
      } else if (Module.ctx.isContextLost()) {
        EGL.setErrorCode(12302);
      } else {
        EGL.setErrorCode(12288);
        return 1;
      }
      return 0;
    };
    Module["_eglSwapBuffers"] = _eglSwapBuffers;
    _eglSwapBuffers.sig = "ipp";
    var _eglReleaseThread = () => {
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.setErrorCode(12288);
      return 1;
    };
    Module["_eglReleaseThread"] = _eglReleaseThread;
    _eglReleaseThread.sig = "i";
    if (!Module.createInvoke) {
      Module.createInvoke = Module.createInvokeFunction;
    }
    registerWasmPlugin();
    var FSNode = function (parent, name, mode, rdev) {
      if (!parent) {
        parent = this;
      }
      this.parent = parent;
      this.mount = parent.mount;
      this.mounted = null;
      this.id = FS.nextInode++;
      this.name = name;
      this.mode = mode;
      this.node_ops = {};
      this.stream_ops = {};
      this.rdev = rdev;
    };
    var readMode = 292 | 73;
    var writeMode = 146;
    Object.defineProperties(FSNode.prototype, {
      read: {
        get: function () {
          return (this.mode & readMode) === readMode;
        },
        set: function (val) {
          val ? (this.mode |= readMode) : (this.mode &= ~readMode);
        },
      },
      write: {
        get: function () {
          return (this.mode & writeMode) === writeMode;
        },
        set: function (val) {
          val ? (this.mode |= writeMode) : (this.mode &= ~writeMode);
        },
      },
      isFolder: {
        get: function () {
          return FS.isDir(this.mode);
        },
      },
      isDevice: {
        get: function () {
          return FS.isChrdev(this.mode);
        },
      },
    });
    FS.FSNode = FSNode;
    FS.createPreloadedFile = FS_createPreloadedFile;
    FS.staticInit();
    Module["FS_createPath"] = FS.createPath;
    Module["FS_createDataFile"] = FS.createDataFile;
    Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
    Module["FS_unlink"] = FS.unlink;
    Module["FS_createLazyFile"] = FS.createLazyFile;
    Module["FS_createDevice"] = FS.createDevice;
    if (ENVIRONMENT_IS_NODE) {
      NODEFS.staticInit();
    }
    ERRNO_CODES = {
      EPERM: 63,
      ENOENT: 44,
      ESRCH: 71,
      EINTR: 27,
      EIO: 29,
      ENXIO: 60,
      E2BIG: 1,
      ENOEXEC: 45,
      EBADF: 8,
      ECHILD: 12,
      EAGAIN: 6,
      EWOULDBLOCK: 6,
      ENOMEM: 48,
      EACCES: 2,
      EFAULT: 21,
      ENOTBLK: 105,
      EBUSY: 10,
      EEXIST: 20,
      EXDEV: 75,
      ENODEV: 43,
      ENOTDIR: 54,
      EISDIR: 31,
      EINVAL: 28,
      ENFILE: 41,
      EMFILE: 33,
      ENOTTY: 59,
      ETXTBSY: 74,
      EFBIG: 22,
      ENOSPC: 51,
      ESPIPE: 70,
      EROFS: 69,
      EMLINK: 34,
      EPIPE: 64,
      EDOM: 18,
      ERANGE: 68,
      ENOMSG: 49,
      EIDRM: 24,
      ECHRNG: 106,
      EL2NSYNC: 156,
      EL3HLT: 107,
      EL3RST: 108,
      ELNRNG: 109,
      EUNATCH: 110,
      ENOCSI: 111,
      EL2HLT: 112,
      EDEADLK: 16,
      ENOLCK: 46,
      EBADE: 113,
      EBADR: 114,
      EXFULL: 115,
      ENOANO: 104,
      EBADRQC: 103,
      EBADSLT: 102,
      EDEADLOCK: 16,
      EBFONT: 101,
      ENOSTR: 100,
      ENODATA: 116,
      ETIME: 117,
      ENOSR: 118,
      ENONET: 119,
      ENOPKG: 120,
      EREMOTE: 121,
      ENOLINK: 47,
      EADV: 122,
      ESRMNT: 123,
      ECOMM: 124,
      EPROTO: 65,
      EMULTIHOP: 36,
      EDOTDOT: 125,
      EBADMSG: 9,
      ENOTUNIQ: 126,
      EBADFD: 127,
      EREMCHG: 128,
      ELIBACC: 129,
      ELIBBAD: 130,
      ELIBSCN: 131,
      ELIBMAX: 132,
      ELIBEXEC: 133,
      ENOSYS: 52,
      ENOTEMPTY: 55,
      ENAMETOOLONG: 37,
      ELOOP: 32,
      EOPNOTSUPP: 138,
      EPFNOSUPPORT: 139,
      ECONNRESET: 15,
      ENOBUFS: 42,
      EAFNOSUPPORT: 5,
      EPROTOTYPE: 67,
      ENOTSOCK: 57,
      ENOPROTOOPT: 50,
      ESHUTDOWN: 140,
      ECONNREFUSED: 14,
      EADDRINUSE: 3,
      ECONNABORTED: 13,
      ENETUNREACH: 40,
      ENETDOWN: 38,
      ETIMEDOUT: 73,
      EHOSTDOWN: 142,
      EHOSTUNREACH: 23,
      EINPROGRESS: 26,
      EALREADY: 7,
      EDESTADDRREQ: 17,
      EMSGSIZE: 35,
      EPROTONOSUPPORT: 66,
      ESOCKTNOSUPPORT: 137,
      EADDRNOTAVAIL: 4,
      ENETRESET: 39,
      EISCONN: 30,
      ENOTCONN: 53,
      ETOOMANYREFS: 141,
      EUSERS: 136,
      EDQUOT: 19,
      ESTALE: 72,
      ENOTSUP: 138,
      ENOMEDIUM: 148,
      EILSEQ: 25,
      EOVERFLOW: 61,
      ECANCELED: 11,
      ENOTRECOVERABLE: 56,
      EOWNERDEAD: 62,
      ESTRPIPE: 135,
    };
    var GLctx;
    for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));
    var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
    for (var i = 0; i < 288; ++i) {
      miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(
        0,
        i + 1,
      );
    }
    var miniTempWebGLIntBuffersStorage = new Int32Array(288);
    for (var i = 0; i < 288; ++i) {
      miniTempWebGLIntBuffers[i] = miniTempWebGLIntBuffersStorage.subarray(
        0,
        i + 1,
      );
    }
    handleAllocatorInit();
    var emSetImmediate;
    var emClearImmediate;
    if (typeof setImmediate != "undefined") {
      emSetImmediate = setImmediateWrapped;
      emClearImmediate = clearImmediateWrapped;
    } else if (typeof addEventListener == "function") {
      var __setImmediate_id_counter = 0;
      var __setImmediate_queue = [];
      var __setImmediate_message_id = "_si";
      var __setImmediate_cb = (e) => {
        if (e.data === __setImmediate_message_id) {
          e.stopPropagation();
          __setImmediate_queue.shift()();
          ++__setImmediate_id_counter;
        }
      };
      addEventListener("message", __setImmediate_cb, true);
      emSetImmediate = (func) => {
        postMessage(__setImmediate_message_id, "*");
        return __setImmediate_id_counter + __setImmediate_queue.push(func) - 1;
      };
      emClearImmediate = (id) => {
        var index = id - __setImmediate_id_counter;
        if (index >= 0 && index < __setImmediate_queue.length)
          __setImmediate_queue[index] = () => {};
      };
    }
    Module["requestFullscreen"] = (lockPointer, resizeCanvas) =>
      Browser.requestFullscreen(lockPointer, resizeCanvas);
    Module["requestAnimationFrame"] = (func) =>
      Browser.requestAnimationFrame(func);
    Module["setCanvasSize"] = (width, height, noUpdates) =>
      Browser.setCanvasSize(width, height, noUpdates);
    Module["pauseMainLoop"] = () => Browser.mainLoop.pause();
    Module["resumeMainLoop"] = () => Browser.mainLoop.resume();
    Module["getUserMedia"] = () => Browser.getUserMedia();
    Module["createContext"] = (
      canvas,
      useWebGL,
      setInModule,
      webGLContextAttributes,
    ) =>
      Browser.createContext(
        canvas,
        useWebGL,
        setInModule,
        webGLContextAttributes,
      );
    var preloadedImages = {};
    var preloadedAudios = {};
    var wasmImports = {
      JsArray_count_js: JsArray_count_js,
      JsArray_index_js: JsArray_index_js,
      JsArray_inplace_repeat_js: JsArray_inplace_repeat_js,
      JsArray_repeat_js: JsArray_repeat_js,
      JsArray_reverse_js: JsArray_reverse_js,
      JsArray_reversed_iterator: JsArray_reversed_iterator,
      JsBuffer_DecodeString_js: JsBuffer_DecodeString_js,
      JsBuffer_get_info: JsBuffer_get_info,
      JsDoubleProxy_unwrap_helper: JsDoubleProxy_unwrap_helper,
      JsException_new_helper: JsException_new_helper,
      JsMap_GetIter_js: JsMap_GetIter_js,
      JsMap_clear_js: JsMap_clear_js,
      JsObjMap_GetIter_js: JsObjMap_GetIter_js,
      JsObjMap_ass_subscript_js: JsObjMap_ass_subscript_js,
      JsObjMap_contains_js: JsObjMap_contains_js,
      JsObjMap_length_js: JsObjMap_length_js,
      JsObjMap_subscript_js: JsObjMap_subscript_js,
      JsProxy_Bool_js: JsProxy_Bool_js,
      JsProxy_DelAttr_js: JsProxy_DelAttr_js,
      JsProxy_Dir_js: JsProxy_Dir_js,
      JsProxy_GetAsyncIter_js: JsProxy_GetAsyncIter_js,
      JsProxy_GetAttr_js: JsProxy_GetAttr_js,
      JsProxy_GetIter_js: JsProxy_GetIter_js,
      JsProxy_SetAttr_js: JsProxy_SetAttr_js,
      JsProxy_compute_typeflags: JsProxy_compute_typeflags,
      JsProxy_subscript_js: JsProxy_subscript_js,
      JsvArray_Check: JsvArray_Check,
      JsvArray_Delete: JsvArray_Delete,
      JsvArray_Extend: JsvArray_Extend,
      JsvArray_Get: JsvArray_Get,
      JsvArray_Insert: JsvArray_Insert,
      JsvArray_New: JsvArray_New,
      JsvArray_Push: JsvArray_Push,
      JsvArray_Set: JsvArray_Set,
      JsvArray_ShallowCopy: JsvArray_ShallowCopy,
      JsvArray_slice: JsvArray_slice,
      JsvArray_slice_assign: JsvArray_slice_assign,
      JsvAsyncGenerator_Check: JsvAsyncGenerator_Check,
      JsvBuffer_assignFromPtr: JsvBuffer_assignFromPtr,
      JsvBuffer_assignToPtr: JsvBuffer_assignToPtr,
      JsvBuffer_intoFile: JsvBuffer_intoFile,
      JsvBuffer_readFromFile: JsvBuffer_readFromFile,
      JsvBuffer_writeToFile: JsvBuffer_writeToFile,
      JsvError_Throw: JsvError_Throw,
      JsvFunction_CallBound: JsvFunction_CallBound,
      JsvFunction_Call_OneArg: JsvFunction_Call_OneArg,
      JsvFunction_Check: JsvFunction_Check,
      JsvFunction_Construct: JsvFunction_Construct,
      JsvGenerator_Check: JsvGenerator_Check,
      JsvMap_New: JsvMap_New,
      JsvMap_Set: JsvMap_Set,
      JsvNoValue_Check: JsvNoValue_Check,
      JsvNum_fromDigits: JsvNum_fromDigits,
      JsvNum_fromDouble: JsvNum_fromDouble,
      JsvNum_fromInt: JsvNum_fromInt,
      JsvObject_CallMethod: JsvObject_CallMethod,
      JsvObject_CallMethod_NoArgs: JsvObject_CallMethod_NoArgs,
      JsvObject_CallMethod_OneArg: JsvObject_CallMethod_OneArg,
      JsvObject_CallMethod_TwoArgs: JsvObject_CallMethod_TwoArgs,
      JsvObject_Entries: JsvObject_Entries,
      JsvObject_Keys: JsvObject_Keys,
      JsvObject_New: JsvObject_New,
      JsvObject_SetAttr: JsvObject_SetAttr,
      JsvObject_Values: JsvObject_Values,
      JsvObject_toString: JsvObject_toString,
      JsvPromise_Check: JsvPromise_Check,
      JsvPromise_Resolve: JsvPromise_Resolve,
      JsvPromise_Syncify_handleError: JsvPromise_Syncify_handleError,
      JsvSet_Add: JsvSet_Add,
      JsvSet_New: JsvSet_New,
      JsvUTF8ToString: JsvUTF8ToString,
      Jsv_constructorName: Jsv_constructorName,
      Jsv_equal: Jsv_equal,
      Jsv_greater_than: Jsv_greater_than,
      Jsv_greater_than_equal: Jsv_greater_than_equal,
      Jsv_less_than: Jsv_less_than,
      Jsv_less_than_equal: Jsv_less_than_equal,
      Jsv_not_equal: Jsv_not_equal,
      Jsv_to_bool: Jsv_to_bool,
      Jsv_typeof: Jsv_typeof,
      _JsArray_PostProcess_helper: _JsArray_PostProcess_helper,
      _JsArray_PushEntry_helper: _JsArray_PushEntry_helper,
      _PyEM_CountFuncParams: _PyEM_CountFuncParams,
      _PyEM_TrampolineCall_JS: _PyEM_TrampolineCall_JS,
      _PyEM_detect_type_reflection: _PyEM_detect_type_reflection,
      _PyImport_InitFunc_TrampolineCall: _PyImport_InitFunc_TrampolineCall,
      _Py_CheckEmscriptenSignals_Helper: _Py_CheckEmscriptenSignals_Helper,
      _Py_emscripten_runtime: _Py_emscripten_runtime,
      _Unwind_Backtrace: __Unwind_Backtrace,
      _Unwind_DeleteException: __Unwind_DeleteException,
      _Unwind_FindEnclosingFunction: __Unwind_FindEnclosingFunction,
      _Unwind_GetIPInfo: __Unwind_GetIPInfo,
      _Unwind_RaiseException: __Unwind_RaiseException,
      __asctime_r: ___asctime_r,
      __assert_fail: ___assert_fail,
      __call_sighandler: ___call_sighandler,
      __cxa_begin_catch: ___cxa_begin_catch,
      __cxa_call_unexpected: ___cxa_call_unexpected,
      __cxa_current_primary_exception: ___cxa_current_primary_exception,
      __cxa_end_catch: ___cxa_end_catch,
      __cxa_find_matching_catch_2: ___cxa_find_matching_catch_2,
      __cxa_find_matching_catch_3: ___cxa_find_matching_catch_3,
      __cxa_find_matching_catch_4: ___cxa_find_matching_catch_4,
      __cxa_get_exception_ptr: ___cxa_get_exception_ptr,
      __cxa_rethrow: ___cxa_rethrow,
      __cxa_rethrow_primary_exception: ___cxa_rethrow_primary_exception,
      __cxa_throw: ___cxa_throw,
      __cxa_uncaught_exceptions: ___cxa_uncaught_exceptions,
      __global_base: ___global_base,
      __heap_base: ___heap_base,
      __hiwire_deduplicate_delete: __hiwire_deduplicate_delete,
      __hiwire_deduplicate_get: __hiwire_deduplicate_get,
      __hiwire_deduplicate_new: __hiwire_deduplicate_new,
      __hiwire_deduplicate_set: __hiwire_deduplicate_set,
      __indirect_function_table: wasmTable,
      __memory_base: ___memory_base,
      __resumeException: ___resumeException,
      __stack_high: ___stack_high,
      __stack_low: ___stack_low,
      __stack_pointer: ___stack_pointer,
      __syscall__newselect: ___syscall__newselect,
      __syscall_accept4: ___syscall_accept4,
      __syscall_bind: ___syscall_bind,
      __syscall_chdir: ___syscall_chdir,
      __syscall_chmod: ___syscall_chmod,
      __syscall_connect: ___syscall_connect,
      __syscall_dup: ___syscall_dup,
      __syscall_dup3: ___syscall_dup3,
      __syscall_faccessat: ___syscall_faccessat,
      __syscall_fadvise64: ___syscall_fadvise64,
      __syscall_fallocate: ___syscall_fallocate,
      __syscall_fchdir: ___syscall_fchdir,
      __syscall_fchmod: ___syscall_fchmod,
      __syscall_fchmodat: ___syscall_fchmodat,
      __syscall_fchown32: ___syscall_fchown32,
      __syscall_fchownat: ___syscall_fchownat,
      __syscall_fcntl64: ___syscall_fcntl64,
      __syscall_fdatasync: ___syscall_fdatasync,
      __syscall_fstat64: ___syscall_fstat64,
      __syscall_fstatfs64: ___syscall_fstatfs64,
      __syscall_ftruncate64: ___syscall_ftruncate64,
      __syscall_getcwd: ___syscall_getcwd,
      __syscall_getdents64: ___syscall_getdents64,
      __syscall_getpeername: ___syscall_getpeername,
      __syscall_getsockname: ___syscall_getsockname,
      __syscall_getsockopt: ___syscall_getsockopt,
      __syscall_ioctl: ___syscall_ioctl,
      __syscall_listen: ___syscall_listen,
      __syscall_lstat64: ___syscall_lstat64,
      __syscall_mkdirat: ___syscall_mkdirat,
      __syscall_mknodat: ___syscall_mknodat,
      __syscall_newfstatat: ___syscall_newfstatat,
      __syscall_openat: ___syscall_openat,
      __syscall_pipe: ___syscall_pipe,
      __syscall_poll: ___syscall_poll,
      __syscall_readlinkat: ___syscall_readlinkat,
      __syscall_recvfrom: ___syscall_recvfrom,
      __syscall_recvmsg: ___syscall_recvmsg,
      __syscall_renameat: ___syscall_renameat,
      __syscall_rmdir: ___syscall_rmdir,
      __syscall_sendmsg: ___syscall_sendmsg,
      __syscall_sendto: ___syscall_sendto,
      __syscall_socket: ___syscall_socket,
      __syscall_stat64: ___syscall_stat64,
      __syscall_statfs64: ___syscall_statfs64,
      __syscall_symlink: ___syscall_symlink,
      __syscall_symlinkat: ___syscall_symlinkat,
      __syscall_truncate64: ___syscall_truncate64,
      __syscall_unlinkat: ___syscall_unlinkat,
      __syscall_utimensat: ___syscall_utimensat,
      __table_base: ___table_base,
      _agen_handle_result_js: _agen_handle_result_js,
      _dlopen_js: __dlopen_js,
      _dlsym_catchup_js: __dlsym_catchup_js,
      _dlsym_js: __dlsym_js,
      _emscripten_dlopen_js: __emscripten_dlopen_js,
      _emscripten_fs_load_embedded_files: __emscripten_fs_load_embedded_files,
      _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,
      _emscripten_get_progname: __emscripten_get_progname,
      _emscripten_push_main_loop_blocker: __emscripten_push_main_loop_blocker,
      _emscripten_push_uncounted_main_loop_blocker:
        __emscripten_push_uncounted_main_loop_blocker,
      _emscripten_throw_longjmp: __emscripten_throw_longjmp,
      _glGenObject: __glGenObject,
      _glGetActiveAttribOrUniform: __glGetActiveAttribOrUniform,
      _gmtime_js: __gmtime_js,
      _localtime_js: __localtime_js,
      _mktime_js: __mktime_js,
      _mmap_js: __mmap_js,
      _msync_js: __msync_js,
      _munmap_js: __munmap_js,
      _pyproxyGen_make_result: _pyproxyGen_make_result,
      _pyproxy_get_buffer_result: _pyproxy_get_buffer_result,
      _python2js_add_to_cache: _python2js_add_to_cache,
      _python2js_addto_postprocess_list: _python2js_addto_postprocess_list,
      _python2js_buffer_inner: _python2js_buffer_inner,
      _python2js_cache_lookup: _python2js_cache_lookup,
      _python2js_handle_postprocess_list: _python2js_handle_postprocess_list,
      _python2js_ucs1: _python2js_ucs1,
      _python2js_ucs2: _python2js_ucs2,
      _python2js_ucs4: _python2js_ucs4,
      _setitimer_js: __setitimer_js,
      _timegm_js: __timegm_js,
      _tzset_js: __tzset_js,
      abort: _abort,
      array_to_js: array_to_js,
      clock_res_get: _clock_res_get,
      clock_time_get: _clock_time_get,
      create_once_callable: create_once_callable,
      create_promise_handles: create_promise_handles,
      destroy_jsarray_entries: destroy_jsarray_entries,
      destroy_proxies: destroy_proxies,
      destroy_proxies_js: destroy_proxies_js,
      destroy_proxy: destroy_proxy,
      eglBindAPI: _eglBindAPI,
      eglChooseConfig: _eglChooseConfig,
      eglCreateContext: _eglCreateContext,
      eglCreateWindowSurface: _eglCreateWindowSurface,
      eglDestroyContext: _eglDestroyContext,
      eglDestroySurface: _eglDestroySurface,
      eglGetConfigAttrib: _eglGetConfigAttrib,
      eglGetConfigs: _eglGetConfigs,
      eglGetCurrentContext: _eglGetCurrentContext,
      eglGetCurrentDisplay: _eglGetCurrentDisplay,
      eglGetCurrentSurface: _eglGetCurrentSurface,
      eglGetDisplay: _eglGetDisplay,
      eglGetError: _eglGetError,
      eglInitialize: _eglInitialize,
      eglMakeCurrent: _eglMakeCurrent,
      eglQueryAPI: _eglQueryAPI,
      eglQueryContext: _eglQueryContext,
      eglQueryString: _eglQueryString,
      eglQuerySurface: _eglQuerySurface,
      eglReleaseThread: _eglReleaseThread,
      eglSwapBuffers: _eglSwapBuffers,
      eglSwapInterval: _eglSwapInterval,
      eglTerminate: _eglTerminate,
      eglWaitClient: _eglWaitClient,
      eglWaitGL: _eglWaitGL,
      eglWaitNative: _eglWaitNative,
      emscripten_asm_const_async_on_main_thread:
        _emscripten_asm_const_async_on_main_thread,
      emscripten_asm_const_double: _emscripten_asm_const_double,
      emscripten_asm_const_double_sync_on_main_thread:
        _emscripten_asm_const_double_sync_on_main_thread,
      emscripten_asm_const_int: _emscripten_asm_const_int,
      emscripten_asm_const_int_sync_on_main_thread:
        _emscripten_asm_const_int_sync_on_main_thread,
      emscripten_asm_const_ptr: _emscripten_asm_const_ptr,
      emscripten_async_call: _emscripten_async_call,
      emscripten_async_load_script: _emscripten_async_load_script,
      emscripten_async_run_script: _emscripten_async_run_script,
      emscripten_async_wget: _emscripten_async_wget,
      emscripten_async_wget2: _emscripten_async_wget2,
      emscripten_async_wget2_abort: _emscripten_async_wget2_abort,
      emscripten_async_wget2_data: _emscripten_async_wget2_data,
      emscripten_async_wget_data: _emscripten_async_wget_data,
      emscripten_call_worker: _emscripten_call_worker,
      emscripten_cancel_animation_frame: _emscripten_cancel_animation_frame,
      emscripten_cancel_main_loop: _emscripten_cancel_main_loop,
      emscripten_clear_immediate: _emscripten_clear_immediate,
      emscripten_clear_interval: _emscripten_clear_interval,
      emscripten_clear_timeout: _emscripten_clear_timeout,
      emscripten_console_error: _emscripten_console_error,
      emscripten_console_log: _emscripten_console_log,
      emscripten_console_warn: _emscripten_console_warn,
      emscripten_create_worker: _emscripten_create_worker,
      emscripten_date_now: _emscripten_date_now,
      emscripten_debugger: _emscripten_debugger,
      emscripten_destroy_worker: _emscripten_destroy_worker,
      emscripten_enter_soft_fullscreen: _emscripten_enter_soft_fullscreen,
      emscripten_err: _emscripten_err,
      emscripten_errn: _emscripten_errn,
      emscripten_exit_fullscreen: _emscripten_exit_fullscreen,
      emscripten_exit_pointerlock: _emscripten_exit_pointerlock,
      emscripten_exit_soft_fullscreen: _emscripten_exit_soft_fullscreen,
      emscripten_exit_with_live_runtime: _emscripten_exit_with_live_runtime,
      emscripten_force_exit: _emscripten_force_exit,
      emscripten_get_battery_status: _emscripten_get_battery_status,
      emscripten_get_callstack: _emscripten_get_callstack,
      emscripten_get_canvas_element_size: _emscripten_get_canvas_element_size,
      emscripten_get_canvas_size: _emscripten_get_canvas_size,
      emscripten_get_compiler_setting: _emscripten_get_compiler_setting,
      emscripten_get_device_pixel_ratio: _emscripten_get_device_pixel_ratio,
      emscripten_get_devicemotion_status: _emscripten_get_devicemotion_status,
      emscripten_get_deviceorientation_status:
        _emscripten_get_deviceorientation_status,
      emscripten_get_element_css_size: _emscripten_get_element_css_size,
      emscripten_get_fullscreen_status: _emscripten_get_fullscreen_status,
      emscripten_get_gamepad_status: _emscripten_get_gamepad_status,
      emscripten_get_heap_max: _emscripten_get_heap_max,
      emscripten_get_main_loop_timing: _emscripten_get_main_loop_timing,
      emscripten_get_module_name: _emscripten_get_module_name,
      emscripten_get_mouse_status: _emscripten_get_mouse_status,
      emscripten_get_now: _emscripten_get_now,
      emscripten_get_now_res: _emscripten_get_now_res,
      emscripten_get_num_gamepads: _emscripten_get_num_gamepads,
      emscripten_get_orientation_status: _emscripten_get_orientation_status,
      emscripten_get_pointerlock_status: _emscripten_get_pointerlock_status,
      emscripten_get_preloaded_image_data: _emscripten_get_preloaded_image_data,
      emscripten_get_preloaded_image_data_from_FILE:
        _emscripten_get_preloaded_image_data_from_FILE,
      emscripten_get_screen_size: _emscripten_get_screen_size,
      emscripten_get_visibility_status: _emscripten_get_visibility_status,
      emscripten_get_window_title: _emscripten_get_window_title,
      emscripten_get_worker_queue_size: _emscripten_get_worker_queue_size,
      emscripten_glActiveTexture: _emscripten_glActiveTexture,
      emscripten_glAttachShader: _emscripten_glAttachShader,
      emscripten_glBegin: _emscripten_glBegin,
      emscripten_glBeginQueryEXT: _emscripten_glBeginQueryEXT,
      emscripten_glBindAttribLocation: _emscripten_glBindAttribLocation,
      emscripten_glBindBuffer: _emscripten_glBindBuffer,
      emscripten_glBindFramebuffer: _emscripten_glBindFramebuffer,
      emscripten_glBindRenderbuffer: _emscripten_glBindRenderbuffer,
      emscripten_glBindTexture: _emscripten_glBindTexture,
      emscripten_glBindVertexArray: _emscripten_glBindVertexArray,
      emscripten_glBindVertexArrayOES: _emscripten_glBindVertexArrayOES,
      emscripten_glBlendColor: _emscripten_glBlendColor,
      emscripten_glBlendEquation: _emscripten_glBlendEquation,
      emscripten_glBlendEquationSeparate: _emscripten_glBlendEquationSeparate,
      emscripten_glBlendFunc: _emscripten_glBlendFunc,
      emscripten_glBlendFuncSeparate: _emscripten_glBlendFuncSeparate,
      emscripten_glBufferData: _emscripten_glBufferData,
      emscripten_glBufferSubData: _emscripten_glBufferSubData,
      emscripten_glCheckFramebufferStatus: _emscripten_glCheckFramebufferStatus,
      emscripten_glClear: _emscripten_glClear,
      emscripten_glClearColor: _emscripten_glClearColor,
      emscripten_glClearDepth: _emscripten_glClearDepth,
      emscripten_glClearDepthf: _emscripten_glClearDepthf,
      emscripten_glClearStencil: _emscripten_glClearStencil,
      emscripten_glColorMask: _emscripten_glColorMask,
      emscripten_glCompileShader: _emscripten_glCompileShader,
      emscripten_glCompressedTexImage2D: _emscripten_glCompressedTexImage2D,
      emscripten_glCompressedTexSubImage2D:
        _emscripten_glCompressedTexSubImage2D,
      emscripten_glCopyTexImage2D: _emscripten_glCopyTexImage2D,
      emscripten_glCopyTexSubImage2D: _emscripten_glCopyTexSubImage2D,
      emscripten_glCreateProgram: _emscripten_glCreateProgram,
      emscripten_glCreateShader: _emscripten_glCreateShader,
      emscripten_glCullFace: _emscripten_glCullFace,
      emscripten_glDeleteBuffers: _emscripten_glDeleteBuffers,
      emscripten_glDeleteFramebuffers: _emscripten_glDeleteFramebuffers,
      emscripten_glDeleteProgram: _emscripten_glDeleteProgram,
      emscripten_glDeleteQueriesEXT: _emscripten_glDeleteQueriesEXT,
      emscripten_glDeleteRenderbuffers: _emscripten_glDeleteRenderbuffers,
      emscripten_glDeleteShader: _emscripten_glDeleteShader,
      emscripten_glDeleteTextures: _emscripten_glDeleteTextures,
      emscripten_glDeleteVertexArrays: _emscripten_glDeleteVertexArrays,
      emscripten_glDeleteVertexArraysOES: _emscripten_glDeleteVertexArraysOES,
      emscripten_glDepthFunc: _emscripten_glDepthFunc,
      emscripten_glDepthMask: _emscripten_glDepthMask,
      emscripten_glDepthRange: _emscripten_glDepthRange,
      emscripten_glDepthRangef: _emscripten_glDepthRangef,
      emscripten_glDetachShader: _emscripten_glDetachShader,
      emscripten_glDisable: _emscripten_glDisable,
      emscripten_glDisableVertexAttribArray:
        _emscripten_glDisableVertexAttribArray,
      emscripten_glDrawArrays: _emscripten_glDrawArrays,
      emscripten_glDrawArraysInstanced: _emscripten_glDrawArraysInstanced,
      emscripten_glDrawArraysInstancedANGLE:
        _emscripten_glDrawArraysInstancedANGLE,
      emscripten_glDrawArraysInstancedARB: _emscripten_glDrawArraysInstancedARB,
      emscripten_glDrawArraysInstancedEXT: _emscripten_glDrawArraysInstancedEXT,
      emscripten_glDrawArraysInstancedNV: _emscripten_glDrawArraysInstancedNV,
      emscripten_glDrawBuffers: _emscripten_glDrawBuffers,
      emscripten_glDrawBuffersEXT: _emscripten_glDrawBuffersEXT,
      emscripten_glDrawBuffersWEBGL: _emscripten_glDrawBuffersWEBGL,
      emscripten_glDrawElements: _emscripten_glDrawElements,
      emscripten_glDrawElementsInstanced: _emscripten_glDrawElementsInstanced,
      emscripten_glDrawElementsInstancedANGLE:
        _emscripten_glDrawElementsInstancedANGLE,
      emscripten_glDrawElementsInstancedARB:
        _emscripten_glDrawElementsInstancedARB,
      emscripten_glDrawElementsInstancedEXT:
        _emscripten_glDrawElementsInstancedEXT,
      emscripten_glDrawElementsInstancedNV:
        _emscripten_glDrawElementsInstancedNV,
      emscripten_glEnable: _emscripten_glEnable,
      emscripten_glEnableVertexAttribArray:
        _emscripten_glEnableVertexAttribArray,
      emscripten_glEndQueryEXT: _emscripten_glEndQueryEXT,
      emscripten_glFinish: _emscripten_glFinish,
      emscripten_glFlush: _emscripten_glFlush,
      emscripten_glFramebufferRenderbuffer:
        _emscripten_glFramebufferRenderbuffer,
      emscripten_glFramebufferTexture2D: _emscripten_glFramebufferTexture2D,
      emscripten_glFrontFace: _emscripten_glFrontFace,
      emscripten_glGenBuffers: _emscripten_glGenBuffers,
      emscripten_glGenFramebuffers: _emscripten_glGenFramebuffers,
      emscripten_glGenQueriesEXT: _emscripten_glGenQueriesEXT,
      emscripten_glGenRenderbuffers: _emscripten_glGenRenderbuffers,
      emscripten_glGenTextures: _emscripten_glGenTextures,
      emscripten_glGenVertexArrays: _emscripten_glGenVertexArrays,
      emscripten_glGenVertexArraysOES: _emscripten_glGenVertexArraysOES,
      emscripten_glGenerateMipmap: _emscripten_glGenerateMipmap,
      emscripten_glGetActiveAttrib: _emscripten_glGetActiveAttrib,
      emscripten_glGetActiveUniform: _emscripten_glGetActiveUniform,
      emscripten_glGetAttachedShaders: _emscripten_glGetAttachedShaders,
      emscripten_glGetAttribLocation: _emscripten_glGetAttribLocation,
      emscripten_glGetBooleanv: _emscripten_glGetBooleanv,
      emscripten_glGetBufferParameteriv: _emscripten_glGetBufferParameteriv,
      emscripten_glGetError: _emscripten_glGetError,
      emscripten_glGetFloatv: _emscripten_glGetFloatv,
      emscripten_glGetFramebufferAttachmentParameteriv:
        _emscripten_glGetFramebufferAttachmentParameteriv,
      emscripten_glGetIntegerv: _emscripten_glGetIntegerv,
      emscripten_glGetProgramInfoLog: _emscripten_glGetProgramInfoLog,
      emscripten_glGetProgramiv: _emscripten_glGetProgramiv,
      emscripten_glGetQueryObjecti64vEXT: _emscripten_glGetQueryObjecti64vEXT,
      emscripten_glGetQueryObjectivEXT: _emscripten_glGetQueryObjectivEXT,
      emscripten_glGetQueryObjectui64vEXT: _emscripten_glGetQueryObjectui64vEXT,
      emscripten_glGetQueryObjectuivEXT: _emscripten_glGetQueryObjectuivEXT,
      emscripten_glGetQueryivEXT: _emscripten_glGetQueryivEXT,
      emscripten_glGetRenderbufferParameteriv:
        _emscripten_glGetRenderbufferParameteriv,
      emscripten_glGetShaderInfoLog: _emscripten_glGetShaderInfoLog,
      emscripten_glGetShaderPrecisionFormat:
        _emscripten_glGetShaderPrecisionFormat,
      emscripten_glGetShaderSource: _emscripten_glGetShaderSource,
      emscripten_glGetShaderiv: _emscripten_glGetShaderiv,
      emscripten_glGetString: _emscripten_glGetString,
      emscripten_glGetTexParameterfv: _emscripten_glGetTexParameterfv,
      emscripten_glGetTexParameteriv: _emscripten_glGetTexParameteriv,
      emscripten_glGetUniformLocation: _emscripten_glGetUniformLocation,
      emscripten_glGetUniformfv: _emscripten_glGetUniformfv,
      emscripten_glGetUniformiv: _emscripten_glGetUniformiv,
      emscripten_glGetVertexAttribPointerv:
        _emscripten_glGetVertexAttribPointerv,
      emscripten_glGetVertexAttribfv: _emscripten_glGetVertexAttribfv,
      emscripten_glGetVertexAttribiv: _emscripten_glGetVertexAttribiv,
      emscripten_glHint: _emscripten_glHint,
      emscripten_glIsBuffer: _emscripten_glIsBuffer,
      emscripten_glIsEnabled: _emscripten_glIsEnabled,
      emscripten_glIsFramebuffer: _emscripten_glIsFramebuffer,
      emscripten_glIsProgram: _emscripten_glIsProgram,
      emscripten_glIsQueryEXT: _emscripten_glIsQueryEXT,
      emscripten_glIsRenderbuffer: _emscripten_glIsRenderbuffer,
      emscripten_glIsShader: _emscripten_glIsShader,
      emscripten_glIsTexture: _emscripten_glIsTexture,
      emscripten_glIsVertexArray: _emscripten_glIsVertexArray,
      emscripten_glIsVertexArrayOES: _emscripten_glIsVertexArrayOES,
      emscripten_glLineWidth: _emscripten_glLineWidth,
      emscripten_glLinkProgram: _emscripten_glLinkProgram,
      emscripten_glLoadIdentity: _emscripten_glLoadIdentity,
      emscripten_glMatrixMode: _emscripten_glMatrixMode,
      emscripten_glMultiDrawArrays: _emscripten_glMultiDrawArrays,
      emscripten_glMultiDrawArraysANGLE: _emscripten_glMultiDrawArraysANGLE,
      emscripten_glMultiDrawArraysInstancedANGLE:
        _emscripten_glMultiDrawArraysInstancedANGLE,
      emscripten_glMultiDrawArraysInstancedWEBGL:
        _emscripten_glMultiDrawArraysInstancedWEBGL,
      emscripten_glMultiDrawArraysWEBGL: _emscripten_glMultiDrawArraysWEBGL,
      emscripten_glMultiDrawElements: _emscripten_glMultiDrawElements,
      emscripten_glMultiDrawElementsANGLE: _emscripten_glMultiDrawElementsANGLE,
      emscripten_glMultiDrawElementsInstancedANGLE:
        _emscripten_glMultiDrawElementsInstancedANGLE,
      emscripten_glMultiDrawElementsInstancedWEBGL:
        _emscripten_glMultiDrawElementsInstancedWEBGL,
      emscripten_glMultiDrawElementsWEBGL: _emscripten_glMultiDrawElementsWEBGL,
      emscripten_glPixelStorei: _emscripten_glPixelStorei,
      emscripten_glPolygonOffset: _emscripten_glPolygonOffset,
      emscripten_glQueryCounterEXT: _emscripten_glQueryCounterEXT,
      emscripten_glReadPixels: _emscripten_glReadPixels,
      emscripten_glReleaseShaderCompiler: _emscripten_glReleaseShaderCompiler,
      emscripten_glRenderbufferStorage: _emscripten_glRenderbufferStorage,
      emscripten_glSampleCoverage: _emscripten_glSampleCoverage,
      emscripten_glScissor: _emscripten_glScissor,
      emscripten_glShaderBinary: _emscripten_glShaderBinary,
      emscripten_glShaderSource: _emscripten_glShaderSource,
      emscripten_glStencilFunc: _emscripten_glStencilFunc,
      emscripten_glStencilFuncSeparate: _emscripten_glStencilFuncSeparate,
      emscripten_glStencilMask: _emscripten_glStencilMask,
      emscripten_glStencilMaskSeparate: _emscripten_glStencilMaskSeparate,
      emscripten_glStencilOp: _emscripten_glStencilOp,
      emscripten_glStencilOpSeparate: _emscripten_glStencilOpSeparate,
      emscripten_glTexImage2D: _emscripten_glTexImage2D,
      emscripten_glTexParameterf: _emscripten_glTexParameterf,
      emscripten_glTexParameterfv: _emscripten_glTexParameterfv,
      emscripten_glTexParameteri: _emscripten_glTexParameteri,
      emscripten_glTexParameteriv: _emscripten_glTexParameteriv,
      emscripten_glTexSubImage2D: _emscripten_glTexSubImage2D,
      emscripten_glUniform1f: _emscripten_glUniform1f,
      emscripten_glUniform1fv: _emscripten_glUniform1fv,
      emscripten_glUniform1i: _emscripten_glUniform1i,
      emscripten_glUniform1iv: _emscripten_glUniform1iv,
      emscripten_glUniform2f: _emscripten_glUniform2f,
      emscripten_glUniform2fv: _emscripten_glUniform2fv,
      emscripten_glUniform2i: _emscripten_glUniform2i,
      emscripten_glUniform2iv: _emscripten_glUniform2iv,
      emscripten_glUniform3f: _emscripten_glUniform3f,
      emscripten_glUniform3fv: _emscripten_glUniform3fv,
      emscripten_glUniform3i: _emscripten_glUniform3i,
      emscripten_glUniform3iv: _emscripten_glUniform3iv,
      emscripten_glUniform4f: _emscripten_glUniform4f,
      emscripten_glUniform4fv: _emscripten_glUniform4fv,
      emscripten_glUniform4i: _emscripten_glUniform4i,
      emscripten_glUniform4iv: _emscripten_glUniform4iv,
      emscripten_glUniformMatrix2fv: _emscripten_glUniformMatrix2fv,
      emscripten_glUniformMatrix3fv: _emscripten_glUniformMatrix3fv,
      emscripten_glUniformMatrix4fv: _emscripten_glUniformMatrix4fv,
      emscripten_glUseProgram: _emscripten_glUseProgram,
      emscripten_glValidateProgram: _emscripten_glValidateProgram,
      emscripten_glVertexAttrib1f: _emscripten_glVertexAttrib1f,
      emscripten_glVertexAttrib1fv: _emscripten_glVertexAttrib1fv,
      emscripten_glVertexAttrib2f: _emscripten_glVertexAttrib2f,
      emscripten_glVertexAttrib2fv: _emscripten_glVertexAttrib2fv,
      emscripten_glVertexAttrib3f: _emscripten_glVertexAttrib3f,
      emscripten_glVertexAttrib3fv: _emscripten_glVertexAttrib3fv,
      emscripten_glVertexAttrib4f: _emscripten_glVertexAttrib4f,
      emscripten_glVertexAttrib4fv: _emscripten_glVertexAttrib4fv,
      emscripten_glVertexAttribDivisor: _emscripten_glVertexAttribDivisor,
      emscripten_glVertexAttribDivisorANGLE:
        _emscripten_glVertexAttribDivisorANGLE,
      emscripten_glVertexAttribDivisorARB: _emscripten_glVertexAttribDivisorARB,
      emscripten_glVertexAttribDivisorEXT: _emscripten_glVertexAttribDivisorEXT,
      emscripten_glVertexAttribDivisorNV: _emscripten_glVertexAttribDivisorNV,
      emscripten_glVertexAttribPointer: _emscripten_glVertexAttribPointer,
      emscripten_glVertexPointer: _emscripten_glVertexPointer,
      emscripten_glViewport: _emscripten_glViewport,
      emscripten_has_asyncify: _emscripten_has_asyncify,
      emscripten_hide_mouse: _emscripten_hide_mouse,
      emscripten_html5_remove_all_event_listeners:
        _emscripten_html5_remove_all_event_listeners,
      emscripten_is_main_browser_thread: _emscripten_is_main_browser_thread,
      emscripten_is_webgl_context_lost: _emscripten_is_webgl_context_lost,
      emscripten_lock_orientation: _emscripten_lock_orientation,
      emscripten_log: _emscripten_log,
      emscripten_math_acos: _emscripten_math_acos,
      emscripten_math_acosh: _emscripten_math_acosh,
      emscripten_math_asin: _emscripten_math_asin,
      emscripten_math_asinh: _emscripten_math_asinh,
      emscripten_math_atan: _emscripten_math_atan,
      emscripten_math_atan2: _emscripten_math_atan2,
      emscripten_math_atanh: _emscripten_math_atanh,
      emscripten_math_cbrt: _emscripten_math_cbrt,
      emscripten_math_cos: _emscripten_math_cos,
      emscripten_math_cosh: _emscripten_math_cosh,
      emscripten_math_exp: _emscripten_math_exp,
      emscripten_math_expm1: _emscripten_math_expm1,
      emscripten_math_fmod: _emscripten_math_fmod,
      emscripten_math_hypot: _emscripten_math_hypot,
      emscripten_math_log: _emscripten_math_log,
      emscripten_math_log10: _emscripten_math_log10,
      emscripten_math_log1p: _emscripten_math_log1p,
      emscripten_math_log2: _emscripten_math_log2,
      emscripten_math_pow: _emscripten_math_pow,
      emscripten_math_random: _emscripten_math_random,
      emscripten_math_round: _emscripten_math_round,
      emscripten_math_sign: _emscripten_math_sign,
      emscripten_math_sin: _emscripten_math_sin,
      emscripten_math_sinh: _emscripten_math_sinh,
      emscripten_math_sqrt: _emscripten_math_sqrt,
      emscripten_math_tan: _emscripten_math_tan,
      emscripten_math_tanh: _emscripten_math_tanh,
      emscripten_memcpy_js: _emscripten_memcpy_js,
      emscripten_notify_memory_growth: _emscripten_notify_memory_growth,
      emscripten_out: _emscripten_out,
      emscripten_outn: _emscripten_outn,
      emscripten_pause_main_loop: _emscripten_pause_main_loop,
      emscripten_pc_get_column: _emscripten_pc_get_column,
      emscripten_pc_get_file: _emscripten_pc_get_file,
      emscripten_pc_get_function: _emscripten_pc_get_function,
      emscripten_pc_get_line: _emscripten_pc_get_line,
      emscripten_performance_now: _emscripten_performance_now,
      emscripten_print_double: _emscripten_print_double,
      emscripten_promise_all: _emscripten_promise_all,
      emscripten_promise_all_settled: _emscripten_promise_all_settled,
      emscripten_promise_any: _emscripten_promise_any,
      emscripten_promise_await: _emscripten_promise_await,
      emscripten_promise_create: _emscripten_promise_create,
      emscripten_promise_destroy: _emscripten_promise_destroy,
      emscripten_promise_race: _emscripten_promise_race,
      emscripten_promise_resolve: _emscripten_promise_resolve,
      emscripten_promise_then: _emscripten_promise_then,
      emscripten_random: _emscripten_random,
      emscripten_request_animation_frame: _emscripten_request_animation_frame,
      emscripten_request_animation_frame_loop:
        _emscripten_request_animation_frame_loop,
      emscripten_request_fullscreen: _emscripten_request_fullscreen,
      emscripten_request_fullscreen_strategy:
        _emscripten_request_fullscreen_strategy,
      emscripten_request_pointerlock: _emscripten_request_pointerlock,
      emscripten_resize_heap: _emscripten_resize_heap,
      emscripten_resume_main_loop: _emscripten_resume_main_loop,
      emscripten_return_address: _emscripten_return_address,
      emscripten_run_preload_plugins: _emscripten_run_preload_plugins,
      emscripten_run_preload_plugins_data: _emscripten_run_preload_plugins_data,
      emscripten_run_script: _emscripten_run_script,
      emscripten_run_script_int: _emscripten_run_script_int,
      emscripten_run_script_string: _emscripten_run_script_string,
      emscripten_runtime_keepalive_check: _emscripten_runtime_keepalive_check,
      emscripten_runtime_keepalive_pop: _emscripten_runtime_keepalive_pop,
      emscripten_runtime_keepalive_push: _emscripten_runtime_keepalive_push,
      emscripten_sample_gamepad_data: _emscripten_sample_gamepad_data,
      emscripten_set_batterychargingchange_callback_on_thread:
        _emscripten_set_batterychargingchange_callback_on_thread,
      emscripten_set_batterylevelchange_callback_on_thread:
        _emscripten_set_batterylevelchange_callback_on_thread,
      emscripten_set_beforeunload_callback_on_thread:
        _emscripten_set_beforeunload_callback_on_thread,
      emscripten_set_blur_callback_on_thread:
        _emscripten_set_blur_callback_on_thread,
      emscripten_set_canvas_element_size: _emscripten_set_canvas_element_size,
      emscripten_set_canvas_size: _emscripten_set_canvas_size,
      emscripten_set_click_callback_on_thread:
        _emscripten_set_click_callback_on_thread,
      emscripten_set_dblclick_callback_on_thread:
        _emscripten_set_dblclick_callback_on_thread,
      emscripten_set_devicemotion_callback_on_thread:
        _emscripten_set_devicemotion_callback_on_thread,
      emscripten_set_deviceorientation_callback_on_thread:
        _emscripten_set_deviceorientation_callback_on_thread,
      emscripten_set_element_css_size: _emscripten_set_element_css_size,
      emscripten_set_focus_callback_on_thread:
        _emscripten_set_focus_callback_on_thread,
      emscripten_set_focusin_callback_on_thread:
        _emscripten_set_focusin_callback_on_thread,
      emscripten_set_focusout_callback_on_thread:
        _emscripten_set_focusout_callback_on_thread,
      emscripten_set_fullscreenchange_callback_on_thread:
        _emscripten_set_fullscreenchange_callback_on_thread,
      emscripten_set_gamepadconnected_callback_on_thread:
        _emscripten_set_gamepadconnected_callback_on_thread,
      emscripten_set_gamepaddisconnected_callback_on_thread:
        _emscripten_set_gamepaddisconnected_callback_on_thread,
      emscripten_set_immediate: _emscripten_set_immediate,
      emscripten_set_immediate_loop: _emscripten_set_immediate_loop,
      emscripten_set_interval: _emscripten_set_interval,
      emscripten_set_keydown_callback_on_thread:
        _emscripten_set_keydown_callback_on_thread,
      emscripten_set_keypress_callback_on_thread:
        _emscripten_set_keypress_callback_on_thread,
      emscripten_set_keyup_callback_on_thread:
        _emscripten_set_keyup_callback_on_thread,
      emscripten_set_main_loop: _emscripten_set_main_loop,
      emscripten_set_main_loop_arg: _emscripten_set_main_loop_arg,
      emscripten_set_main_loop_expected_blockers:
        _emscripten_set_main_loop_expected_blockers,
      emscripten_set_main_loop_timing: _emscripten_set_main_loop_timing,
      emscripten_set_mousedown_callback_on_thread:
        _emscripten_set_mousedown_callback_on_thread,
      emscripten_set_mouseenter_callback_on_thread:
        _emscripten_set_mouseenter_callback_on_thread,
      emscripten_set_mouseleave_callback_on_thread:
        _emscripten_set_mouseleave_callback_on_thread,
      emscripten_set_mousemove_callback_on_thread:
        _emscripten_set_mousemove_callback_on_thread,
      emscripten_set_mouseout_callback_on_thread:
        _emscripten_set_mouseout_callback_on_thread,
      emscripten_set_mouseover_callback_on_thread:
        _emscripten_set_mouseover_callback_on_thread,
      emscripten_set_mouseup_callback_on_thread:
        _emscripten_set_mouseup_callback_on_thread,
      emscripten_set_orientationchange_callback_on_thread:
        _emscripten_set_orientationchange_callback_on_thread,
      emscripten_set_pointerlockchange_callback_on_thread:
        _emscripten_set_pointerlockchange_callback_on_thread,
      emscripten_set_pointerlockerror_callback_on_thread:
        _emscripten_set_pointerlockerror_callback_on_thread,
      emscripten_set_resize_callback_on_thread:
        _emscripten_set_resize_callback_on_thread,
      emscripten_set_scroll_callback_on_thread:
        _emscripten_set_scroll_callback_on_thread,
      emscripten_set_socket_close_callback:
        _emscripten_set_socket_close_callback,
      emscripten_set_socket_connection_callback:
        _emscripten_set_socket_connection_callback,
      emscripten_set_socket_error_callback:
        _emscripten_set_socket_error_callback,
      emscripten_set_socket_listen_callback:
        _emscripten_set_socket_listen_callback,
      emscripten_set_socket_message_callback:
        _emscripten_set_socket_message_callback,
      emscripten_set_socket_open_callback: _emscripten_set_socket_open_callback,
      emscripten_set_timeout: _emscripten_set_timeout,
      emscripten_set_timeout_loop: _emscripten_set_timeout_loop,
      emscripten_set_touchcancel_callback_on_thread:
        _emscripten_set_touchcancel_callback_on_thread,
      emscripten_set_touchend_callback_on_thread:
        _emscripten_set_touchend_callback_on_thread,
      emscripten_set_touchmove_callback_on_thread:
        _emscripten_set_touchmove_callback_on_thread,
      emscripten_set_touchstart_callback_on_thread:
        _emscripten_set_touchstart_callback_on_thread,
      emscripten_set_visibilitychange_callback_on_thread:
        _emscripten_set_visibilitychange_callback_on_thread,
      emscripten_set_webglcontextlost_callback_on_thread:
        _emscripten_set_webglcontextlost_callback_on_thread,
      emscripten_set_webglcontextrestored_callback_on_thread:
        _emscripten_set_webglcontextrestored_callback_on_thread,
      emscripten_set_wheel_callback_on_thread:
        _emscripten_set_wheel_callback_on_thread,
      emscripten_set_window_title: _emscripten_set_window_title,
      emscripten_stack_snapshot: _emscripten_stack_snapshot,
      emscripten_stack_unwind_buffer: _emscripten_stack_unwind_buffer,
      emscripten_supports_offscreencanvas: _emscripten_supports_offscreencanvas,
      emscripten_throw_number: _emscripten_throw_number,
      emscripten_throw_string: _emscripten_throw_string,
      emscripten_unlock_orientation: _emscripten_unlock_orientation,
      emscripten_unwind_to_js_event_loop: _emscripten_unwind_to_js_event_loop,
      emscripten_vibrate: _emscripten_vibrate,
      emscripten_vibrate_pattern: _emscripten_vibrate_pattern,
      emscripten_webgl_commit_frame: _emscripten_webgl_commit_frame,
      emscripten_webgl_create_context: _emscripten_webgl_create_context,
      emscripten_webgl_destroy_context: _emscripten_webgl_destroy_context,
      emscripten_webgl_do_commit_frame: _emscripten_webgl_do_commit_frame,
      emscripten_webgl_do_create_context: _emscripten_webgl_do_create_context,
      emscripten_webgl_do_get_current_context:
        _emscripten_webgl_do_get_current_context,
      emscripten_webgl_enable_ANGLE_instanced_arrays:
        _emscripten_webgl_enable_ANGLE_instanced_arrays,
      emscripten_webgl_enable_OES_vertex_array_object:
        _emscripten_webgl_enable_OES_vertex_array_object,
      emscripten_webgl_enable_WEBGL_draw_buffers:
        _emscripten_webgl_enable_WEBGL_draw_buffers,
      emscripten_webgl_enable_WEBGL_multi_draw:
        _emscripten_webgl_enable_WEBGL_multi_draw,
      emscripten_webgl_enable_extension: _emscripten_webgl_enable_extension,
      emscripten_webgl_get_context_attributes:
        _emscripten_webgl_get_context_attributes,
      emscripten_webgl_get_current_context:
        _emscripten_webgl_get_current_context,
      emscripten_webgl_get_drawing_buffer_size:
        _emscripten_webgl_get_drawing_buffer_size,
      emscripten_webgl_get_parameter_d: _emscripten_webgl_get_parameter_d,
      emscripten_webgl_get_parameter_i64v: _emscripten_webgl_get_parameter_i64v,
      emscripten_webgl_get_parameter_o: _emscripten_webgl_get_parameter_o,
      emscripten_webgl_get_parameter_utf8: _emscripten_webgl_get_parameter_utf8,
      emscripten_webgl_get_parameter_v: _emscripten_webgl_get_parameter_v,
      emscripten_webgl_get_program_info_log_utf8:
        _emscripten_webgl_get_program_info_log_utf8,
      emscripten_webgl_get_program_parameter_d:
        _emscripten_webgl_get_program_parameter_d,
      emscripten_webgl_get_shader_info_log_utf8:
        _emscripten_webgl_get_shader_info_log_utf8,
      emscripten_webgl_get_shader_parameter_d:
        _emscripten_webgl_get_shader_parameter_d,
      emscripten_webgl_get_shader_source_utf8:
        _emscripten_webgl_get_shader_source_utf8,
      emscripten_webgl_get_supported_extensions:
        _emscripten_webgl_get_supported_extensions,
      emscripten_webgl_get_uniform_d: _emscripten_webgl_get_uniform_d,
      emscripten_webgl_get_uniform_v: _emscripten_webgl_get_uniform_v,
      emscripten_webgl_get_vertex_attrib_d:
        _emscripten_webgl_get_vertex_attrib_d,
      emscripten_webgl_get_vertex_attrib_o:
        _emscripten_webgl_get_vertex_attrib_o,
      emscripten_webgl_get_vertex_attrib_v:
        _emscripten_webgl_get_vertex_attrib_v,
      emscripten_webgl_init_context_attributes:
        _emscripten_webgl_init_context_attributes,
      emscripten_webgl_make_context_current:
        _emscripten_webgl_make_context_current,
      emscripten_websocket_close: _emscripten_websocket_close,
      emscripten_websocket_deinitialize: _emscripten_websocket_deinitialize,
      emscripten_websocket_delete: _emscripten_websocket_delete,
      emscripten_websocket_get_buffered_amount:
        _emscripten_websocket_get_buffered_amount,
      emscripten_websocket_get_extensions: _emscripten_websocket_get_extensions,
      emscripten_websocket_get_extensions_length:
        _emscripten_websocket_get_extensions_length,
      emscripten_websocket_get_protocol: _emscripten_websocket_get_protocol,
      emscripten_websocket_get_protocol_length:
        _emscripten_websocket_get_protocol_length,
      emscripten_websocket_get_ready_state:
        _emscripten_websocket_get_ready_state,
      emscripten_websocket_get_url: _emscripten_websocket_get_url,
      emscripten_websocket_get_url_length: _emscripten_websocket_get_url_length,
      emscripten_websocket_is_supported: _emscripten_websocket_is_supported,
      emscripten_websocket_new: _emscripten_websocket_new,
      emscripten_websocket_send_binary: _emscripten_websocket_send_binary,
      emscripten_websocket_send_utf8_text: _emscripten_websocket_send_utf8_text,
      emscripten_websocket_set_onclose_callback_on_thread:
        _emscripten_websocket_set_onclose_callback_on_thread,
      emscripten_websocket_set_onerror_callback_on_thread:
        _emscripten_websocket_set_onerror_callback_on_thread,
      emscripten_websocket_set_onmessage_callback_on_thread:
        _emscripten_websocket_set_onmessage_callback_on_thread,
      emscripten_websocket_set_onopen_callback_on_thread:
        _emscripten_websocket_set_onopen_callback_on_thread,
      endprotoent: _endprotoent,
      environ_get: _environ_get,
      environ_sizes_get: _environ_sizes_get,
      exit: _exit,
      fail_test: fail_test,
      fd_close: _fd_close,
      fd_fdstat_get: _fd_fdstat_get,
      fd_pread: _fd_pread,
      fd_pwrite: _fd_pwrite,
      fd_read: _fd_read,
      fd_seek: _fd_seek,
      fd_sync: _fd_sync,
      fd_write: _fd_write,
      ffi_call_js: ffi_call_js,
      ffi_closure_alloc_js: ffi_closure_alloc_js,
      ffi_closure_free_js: ffi_closure_free_js,
      ffi_prep_closure_loc_js: ffi_prep_closure_loc_js,
      gc_register_proxies: gc_register_proxies,
      get_async_js_call_done_callback: get_async_js_call_done_callback,
      get_length_helper: get_length_helper,
      get_length_string: get_length_string,
      getaddrinfo: _getaddrinfo,
      getentropy: _getentropy,
      gethostbyaddr: _gethostbyaddr,
      gethostbyname: _gethostbyname,
      gethostbyname_r: _gethostbyname_r,
      getnameinfo: _getnameinfo,
      getprotobyname: _getprotobyname,
      getprotobynumber: _getprotobynumber,
      getprotoent: _getprotoent,
      glActiveTexture: _glActiveTexture,
      glAttachShader: _glAttachShader,
      glBegin: _glBegin,
      glBeginQueryEXT: _glBeginQueryEXT,
      glBindAttribLocation: _glBindAttribLocation,
      glBindBuffer: _glBindBuffer,
      glBindFramebuffer: _glBindFramebuffer,
      glBindRenderbuffer: _glBindRenderbuffer,
      glBindTexture: _glBindTexture,
      glBindVertexArray: _glBindVertexArray,
      glBindVertexArrayOES: _glBindVertexArrayOES,
      glBlendColor: _glBlendColor,
      glBlendEquation: _glBlendEquation,
      glBlendEquationSeparate: _glBlendEquationSeparate,
      glBlendFunc: _glBlendFunc,
      glBlendFuncSeparate: _glBlendFuncSeparate,
      glBufferData: _glBufferData,
      glBufferSubData: _glBufferSubData,
      glCheckFramebufferStatus: _glCheckFramebufferStatus,
      glClear: _glClear,
      glClearColor: _glClearColor,
      glClearDepth: _glClearDepth,
      glClearDepthf: _glClearDepthf,
      glClearStencil: _glClearStencil,
      glColorMask: _glColorMask,
      glCompileShader: _glCompileShader,
      glCompressedTexImage2D: _glCompressedTexImage2D,
      glCompressedTexSubImage2D: _glCompressedTexSubImage2D,
      glCopyTexImage2D: _glCopyTexImage2D,
      glCopyTexSubImage2D: _glCopyTexSubImage2D,
      glCreateProgram: _glCreateProgram,
      glCreateShader: _glCreateShader,
      glCullFace: _glCullFace,
      glDeleteBuffers: _glDeleteBuffers,
      glDeleteFramebuffers: _glDeleteFramebuffers,
      glDeleteProgram: _glDeleteProgram,
      glDeleteQueriesEXT: _glDeleteQueriesEXT,
      glDeleteRenderbuffers: _glDeleteRenderbuffers,
      glDeleteShader: _glDeleteShader,
      glDeleteTextures: _glDeleteTextures,
      glDeleteVertexArrays: _glDeleteVertexArrays,
      glDeleteVertexArraysOES: _glDeleteVertexArraysOES,
      glDepthFunc: _glDepthFunc,
      glDepthMask: _glDepthMask,
      glDepthRange: _glDepthRange,
      glDepthRangef: _glDepthRangef,
      glDetachShader: _glDetachShader,
      glDisable: _glDisable,
      glDisableVertexAttribArray: _glDisableVertexAttribArray,
      glDrawArrays: _glDrawArrays,
      glDrawArraysInstanced: _glDrawArraysInstanced,
      glDrawArraysInstancedANGLE: _glDrawArraysInstancedANGLE,
      glDrawArraysInstancedARB: _glDrawArraysInstancedARB,
      glDrawArraysInstancedEXT: _glDrawArraysInstancedEXT,
      glDrawArraysInstancedNV: _glDrawArraysInstancedNV,
      glDrawBuffers: _glDrawBuffers,
      glDrawBuffersEXT: _glDrawBuffersEXT,
      glDrawBuffersWEBGL: _glDrawBuffersWEBGL,
      glDrawElements: _glDrawElements,
      glDrawElementsInstanced: _glDrawElementsInstanced,
      glDrawElementsInstancedANGLE: _glDrawElementsInstancedANGLE,
      glDrawElementsInstancedARB: _glDrawElementsInstancedARB,
      glDrawElementsInstancedEXT: _glDrawElementsInstancedEXT,
      glDrawElementsInstancedNV: _glDrawElementsInstancedNV,
      glEnable: _glEnable,
      glEnableVertexAttribArray: _glEnableVertexAttribArray,
      glEndQueryEXT: _glEndQueryEXT,
      glFinish: _glFinish,
      glFlush: _glFlush,
      glFramebufferRenderbuffer: _glFramebufferRenderbuffer,
      glFramebufferTexture2D: _glFramebufferTexture2D,
      glFrontFace: _glFrontFace,
      glGenBuffers: _glGenBuffers,
      glGenFramebuffers: _glGenFramebuffers,
      glGenQueriesEXT: _glGenQueriesEXT,
      glGenRenderbuffers: _glGenRenderbuffers,
      glGenTextures: _glGenTextures,
      glGenVertexArrays: _glGenVertexArrays,
      glGenVertexArraysOES: _glGenVertexArraysOES,
      glGenerateMipmap: _glGenerateMipmap,
      glGetActiveAttrib: _glGetActiveAttrib,
      glGetActiveUniform: _glGetActiveUniform,
      glGetAttachedShaders: _glGetAttachedShaders,
      glGetAttribLocation: _glGetAttribLocation,
      glGetBooleanv: _glGetBooleanv,
      glGetBufferParameteriv: _glGetBufferParameteriv,
      glGetError: _glGetError,
      glGetFloatv: _glGetFloatv,
      glGetFramebufferAttachmentParameteriv:
        _glGetFramebufferAttachmentParameteriv,
      glGetIntegerv: _glGetIntegerv,
      glGetProgramInfoLog: _glGetProgramInfoLog,
      glGetProgramiv: _glGetProgramiv,
      glGetQueryObjecti64vEXT: _glGetQueryObjecti64vEXT,
      glGetQueryObjectivEXT: _glGetQueryObjectivEXT,
      glGetQueryObjectui64vEXT: _glGetQueryObjectui64vEXT,
      glGetQueryObjectuivEXT: _glGetQueryObjectuivEXT,
      glGetQueryivEXT: _glGetQueryivEXT,
      glGetRenderbufferParameteriv: _glGetRenderbufferParameteriv,
      glGetShaderInfoLog: _glGetShaderInfoLog,
      glGetShaderPrecisionFormat: _glGetShaderPrecisionFormat,
      glGetShaderSource: _glGetShaderSource,
      glGetShaderiv: _glGetShaderiv,
      glGetString: _glGetString,
      glGetTexParameterfv: _glGetTexParameterfv,
      glGetTexParameteriv: _glGetTexParameteriv,
      glGetUniformLocation: _glGetUniformLocation,
      glGetUniformfv: _glGetUniformfv,
      glGetUniformiv: _glGetUniformiv,
      glGetVertexAttribPointerv: _glGetVertexAttribPointerv,
      glGetVertexAttribfv: _glGetVertexAttribfv,
      glGetVertexAttribiv: _glGetVertexAttribiv,
      glHint: _glHint,
      glIsBuffer: _glIsBuffer,
      glIsEnabled: _glIsEnabled,
      glIsFramebuffer: _glIsFramebuffer,
      glIsProgram: _glIsProgram,
      glIsQueryEXT: _glIsQueryEXT,
      glIsRenderbuffer: _glIsRenderbuffer,
      glIsShader: _glIsShader,
      glIsTexture: _glIsTexture,
      glIsVertexArray: _glIsVertexArray,
      glIsVertexArrayOES: _glIsVertexArrayOES,
      glLineWidth: _glLineWidth,
      glLinkProgram: _glLinkProgram,
      glLoadIdentity: _glLoadIdentity,
      glMatrixMode: _glMatrixMode,
      glMultiDrawArrays: _glMultiDrawArrays,
      glMultiDrawArraysANGLE: _glMultiDrawArraysANGLE,
      glMultiDrawArraysInstancedANGLE: _glMultiDrawArraysInstancedANGLE,
      glMultiDrawArraysInstancedWEBGL: _glMultiDrawArraysInstancedWEBGL,
      glMultiDrawArraysWEBGL: _glMultiDrawArraysWEBGL,
      glMultiDrawElements: _glMultiDrawElements,
      glMultiDrawElementsANGLE: _glMultiDrawElementsANGLE,
      glMultiDrawElementsInstancedANGLE: _glMultiDrawElementsInstancedANGLE,
      glMultiDrawElementsInstancedWEBGL: _glMultiDrawElementsInstancedWEBGL,
      glMultiDrawElementsWEBGL: _glMultiDrawElementsWEBGL,
      glPixelStorei: _glPixelStorei,
      glPolygonOffset: _glPolygonOffset,
      glQueryCounterEXT: _glQueryCounterEXT,
      glReadPixels: _glReadPixels,
      glReleaseShaderCompiler: _glReleaseShaderCompiler,
      glRenderbufferStorage: _glRenderbufferStorage,
      glSampleCoverage: _glSampleCoverage,
      glScissor: _glScissor,
      glShaderBinary: _glShaderBinary,
      glShaderSource: _glShaderSource,
      glStencilFunc: _glStencilFunc,
      glStencilFuncSeparate: _glStencilFuncSeparate,
      glStencilMask: _glStencilMask,
      glStencilMaskSeparate: _glStencilMaskSeparate,
      glStencilOp: _glStencilOp,
      glStencilOpSeparate: _glStencilOpSeparate,
      glTexImage2D: _glTexImage2D,
      glTexParameterf: _glTexParameterf,
      glTexParameterfv: _glTexParameterfv,
      glTexParameteri: _glTexParameteri,
      glTexParameteriv: _glTexParameteriv,
      glTexSubImage2D: _glTexSubImage2D,
      glUniform1f: _glUniform1f,
      glUniform1fv: _glUniform1fv,
      glUniform1i: _glUniform1i,
      glUniform1iv: _glUniform1iv,
      glUniform2f: _glUniform2f,
      glUniform2fv: _glUniform2fv,
      glUniform2i: _glUniform2i,
      glUniform2iv: _glUniform2iv,
      glUniform3f: _glUniform3f,
      glUniform3fv: _glUniform3fv,
      glUniform3i: _glUniform3i,
      glUniform3iv: _glUniform3iv,
      glUniform4f: _glUniform4f,
      glUniform4fv: _glUniform4fv,
      glUniform4i: _glUniform4i,
      glUniform4iv: _glUniform4iv,
      glUniformMatrix2fv: _glUniformMatrix2fv,
      glUniformMatrix3fv: _glUniformMatrix3fv,
      glUniformMatrix4fv: _glUniformMatrix4fv,
      glUseProgram: _glUseProgram,
      glValidateProgram: _glValidateProgram,
      glVertexAttrib1f: _glVertexAttrib1f,
      glVertexAttrib1fv: _glVertexAttrib1fv,
      glVertexAttrib2f: _glVertexAttrib2f,
      glVertexAttrib2fv: _glVertexAttrib2fv,
      glVertexAttrib3f: _glVertexAttrib3f,
      glVertexAttrib3fv: _glVertexAttrib3fv,
      glVertexAttrib4f: _glVertexAttrib4f,
      glVertexAttrib4fv: _glVertexAttrib4fv,
      glVertexAttribDivisor: _glVertexAttribDivisor,
      glVertexAttribDivisorANGLE: _glVertexAttribDivisorANGLE,
      glVertexAttribDivisorARB: _glVertexAttribDivisorARB,
      glVertexAttribDivisorEXT: _glVertexAttribDivisorEXT,
      glVertexAttribDivisorNV: _glVertexAttribDivisorNV,
      glVertexAttribPointer: _glVertexAttribPointer,
      glVertexPointer: _glVertexPointer,
      glViewport: _glViewport,
      handle_next_result_js: handle_next_result_js,
      hiwire_invalid_ref: hiwire_invalid_ref,
      invoke_diii: invoke_diii,
      invoke_fiii: invoke_fiii,
      invoke_i: invoke_i,
      invoke_ii: invoke_ii,
      invoke_iii: invoke_iii,
      invoke_iiii: invoke_iiii,
      invoke_iiiii: invoke_iiiii,
      invoke_iiiiid: invoke_iiiiid,
      invoke_iiiiii: invoke_iiiiii,
      invoke_iiiiiii: invoke_iiiiiii,
      invoke_iiiiiiii: invoke_iiiiiiii,
      invoke_iiiiiiiiiii: invoke_iiiiiiiiiii,
      invoke_iiiiiiiiiiii: invoke_iiiiiiiiiiii,
      invoke_iiiiiiiiiiiii: invoke_iiiiiiiiiiiii,
      invoke_iiiiij: invoke_iiiiij,
      invoke_iiiiijj: invoke_iiiiijj,
      invoke_j: invoke_j,
      invoke_ji: invoke_ji,
      invoke_jii: invoke_jii,
      invoke_jiii: invoke_jiii,
      invoke_jiiii: invoke_jiiii,
      invoke_v: invoke_v,
      invoke_vi: invoke_vi,
      invoke_vii: invoke_vii,
      invoke_viid: invoke_viid,
      invoke_viif: invoke_viif,
      invoke_viii: invoke_viii,
      invoke_viiidi: invoke_viiidi,
      invoke_viiifi: invoke_viiifi,
      invoke_viiii: invoke_viiii,
      invoke_viiiii: invoke_viiiii,
      invoke_viiiiii: invoke_viiiiii,
      invoke_viiiiiii: invoke_viiiiiii,
      invoke_viiiiiiiiii: invoke_viiiiiiiiii,
      invoke_viiiiiiiiiiiiiii: invoke_viiiiiiiiiiiiiii,
      invoke_viijii: invoke_viijii,
      invoke_viijj: invoke_viijj,
      is_comlink_proxy: is_comlink_proxy,
      js2python_convert: js2python_convert,
      js2python_immutable_js: js2python_immutable_js,
      js2python_init: js2python_init,
      js2python_js: js2python_js,
      jslib_init_buffers_js: jslib_init_buffers_js,
      jslib_init_js: jslib_init_js,
      llvm_eh_typeid_for: _llvm_eh_typeid_for,
      memory: wasmMemory,
      new_error: new_error,
      proc_exit: _proc_exit,
      proxy_cache_get: proxy_cache_get,
      proxy_cache_set: proxy_cache_set,
      pyodide_js_init: pyodide_js_init,
      pyproxy_AsPyObject: pyproxy_AsPyObject,
      pyproxy_Check: pyproxy_Check,
      pyproxy_new: pyproxy_new,
      pyproxy_new_ex: pyproxy_new_ex,
      python2js__default_converter_js: python2js__default_converter_js,
      python2js_buffer_init: python2js_buffer_init,
      python2js_custom__create_jscontext: python2js_custom__create_jscontext,
      random_get: _random_get,
      raw_call_js: raw_call_js,
      setNetworkCallback: _setNetworkCallback,
      set_pyodide_module: set_pyodide_module,
      setprotoent: _setprotoent,
      strftime: _strftime,
      strftime_l: _strftime_l,
      strptime: _strptime,
      strptime_l: _strptime_l,
      system: _system,
      throw_no_gil: throw_no_gil,
      wrap_async_generator: wrap_async_generator,
      wrap_generator: wrap_generator,
    };
    var wasmExports = createWasm();
    var ___wasm_call_ctors = () =>
      (___wasm_call_ctors = wasmExports["__wasm_call_ctors"])();
    var ___wasm_apply_data_relocs = (Module["___wasm_apply_data_relocs"] = () =>
      (___wasm_apply_data_relocs = Module["___wasm_apply_data_relocs"] =
        wasmExports["__wasm_apply_data_relocs"])());
    var _set_method_docstring = (Module["_set_method_docstring"] = (a0, a1) =>
      (_set_method_docstring = Module["_set_method_docstring"] =
        wasmExports["set_method_docstring"])(a0, a1));
    var _PyObject_GetAttrString = (Module["_PyObject_GetAttrString"] = (
      a0,
      a1,
    ) =>
      (_PyObject_GetAttrString = Module["_PyObject_GetAttrString"] =
        wasmExports["PyObject_GetAttrString"])(a0, a1));
    var __PyUnicode_FromId = (Module["__PyUnicode_FromId"] = (a0) =>
      (__PyUnicode_FromId = Module["__PyUnicode_FromId"] =
        wasmExports["_PyUnicode_FromId"])(a0));
    var _PyObject_VectorcallMethod = (Module["_PyObject_VectorcallMethod"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyObject_VectorcallMethod = Module["_PyObject_VectorcallMethod"] =
        wasmExports["PyObject_VectorcallMethod"])(a0, a1, a2, a3));
    var _PyUnicode_AsUTF8AndSize = (Module["_PyUnicode_AsUTF8AndSize"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_AsUTF8AndSize = Module["_PyUnicode_AsUTF8AndSize"] =
        wasmExports["PyUnicode_AsUTF8AndSize"])(a0, a1));
    var _malloc = (a0) => (_malloc = wasmExports["malloc"])(a0);
    var _memcpy = (a0, a1, a2) => (_memcpy = wasmExports["memcpy"])(a0, a1, a2);
    var __Py_Dealloc = (Module["__Py_Dealloc"] = (a0) =>
      (__Py_Dealloc = Module["__Py_Dealloc"] = wasmExports["_Py_Dealloc"])(a0));
    var _PyErr_Format = (Module["_PyErr_Format"] = (a0, a1, a2) =>
      (_PyErr_Format = Module["_PyErr_Format"] = wasmExports["PyErr_Format"])(
        a0,
        a1,
        a2,
      ));
    var _add_methods_and_set_docstrings = (Module[
      "_add_methods_and_set_docstrings"
    ] = (a0, a1, a2) =>
      (_add_methods_and_set_docstrings = Module[
        "_add_methods_and_set_docstrings"
      ] =
        wasmExports["add_methods_and_set_docstrings"])(a0, a1, a2));
    var _PyModule_AddFunctions = (Module["_PyModule_AddFunctions"] = (a0, a1) =>
      (_PyModule_AddFunctions = Module["_PyModule_AddFunctions"] =
        wasmExports["PyModule_AddFunctions"])(a0, a1));
    var _docstring_init = (Module["_docstring_init"] = () =>
      (_docstring_init = Module["_docstring_init"] =
        wasmExports["docstring_init"])());
    var _PyImport_ImportModule = (Module["_PyImport_ImportModule"] = (a0) =>
      (_PyImport_ImportModule = Module["_PyImport_ImportModule"] =
        wasmExports["PyImport_ImportModule"])(a0));
    var _dump_traceback = (Module["_dump_traceback"] = () =>
      (_dump_traceback = Module["_dump_traceback"] =
        wasmExports["dump_traceback"])());
    var _fileno = (a0) => (_fileno = wasmExports["fileno"])(a0);
    var _PyGILState_GetThisThreadState = (Module[
      "_PyGILState_GetThisThreadState"
    ] = () =>
      (_PyGILState_GetThisThreadState = Module[
        "_PyGILState_GetThisThreadState"
      ] =
        wasmExports["PyGILState_GetThisThreadState"])());
    var __Py_DumpTraceback = (Module["__Py_DumpTraceback"] = (a0, a1) =>
      (__Py_DumpTraceback = Module["__Py_DumpTraceback"] =
        wasmExports["_Py_DumpTraceback"])(a0, a1));
    var _set_error = (Module["_set_error"] = (a0) =>
      (_set_error = Module["_set_error"] = wasmExports["set_error"])(a0));
    var _PyErr_SetObject = (Module["_PyErr_SetObject"] = (a0, a1) =>
      (_PyErr_SetObject = Module["_PyErr_SetObject"] =
        wasmExports["PyErr_SetObject"])(a0, a1));
    var _restore_sys_last_exception = (Module["_restore_sys_last_exception"] = (
      a0,
    ) =>
      (_restore_sys_last_exception = Module["_restore_sys_last_exception"] =
        wasmExports["restore_sys_last_exception"])(a0));
    var _PySys_GetObject = (Module["_PySys_GetObject"] = (a0) =>
      (_PySys_GetObject = Module["_PySys_GetObject"] =
        wasmExports["PySys_GetObject"])(a0));
    var _PyErr_Restore = (Module["_PyErr_Restore"] = (a0, a1, a2) =>
      (_PyErr_Restore = Module["_PyErr_Restore"] =
        wasmExports["PyErr_Restore"])(a0, a1, a2));
    var _wrap_exception = (Module["_wrap_exception"] = () =>
      (_wrap_exception = Module["_wrap_exception"] =
        wasmExports["wrap_exception"])());
    var _PyErr_Fetch = (Module["_PyErr_Fetch"] = (a0, a1, a2) =>
      (_PyErr_Fetch = Module["_PyErr_Fetch"] = wasmExports["PyErr_Fetch"])(
        a0,
        a1,
        a2,
      ));
    var _PyErr_NormalizeException = (Module["_PyErr_NormalizeException"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyErr_NormalizeException = Module["_PyErr_NormalizeException"] =
        wasmExports["PyErr_NormalizeException"])(a0, a1, a2));
    var _PyErr_SetString = (Module["_PyErr_SetString"] = (a0, a1) =>
      (_PyErr_SetString = Module["_PyErr_SetString"] =
        wasmExports["PyErr_SetString"])(a0, a1));
    var _PyException_SetTraceback = (Module["_PyException_SetTraceback"] = (
      a0,
      a1,
    ) =>
      (_PyException_SetTraceback = Module["_PyException_SetTraceback"] =
        wasmExports["PyException_SetTraceback"])(a0, a1));
    var _PySys_SetObject = (Module["_PySys_SetObject"] = (a0, a1) =>
      (_PySys_SetObject = Module["_PySys_SetObject"] =
        wasmExports["PySys_SetObject"])(a0, a1));
    var __PyObject_GetAttrId = (Module["__PyObject_GetAttrId"] = (a0, a1) =>
      (__PyObject_GetAttrId = Module["__PyObject_GetAttrId"] =
        wasmExports["_PyObject_GetAttrId"])(a0, a1));
    var _PyUnicode_AsUTF8 = (Module["_PyUnicode_AsUTF8"] = (a0) =>
      (_PyUnicode_AsUTF8 = Module["_PyUnicode_AsUTF8"] =
        wasmExports["PyUnicode_AsUTF8"])(a0));
    var __PyObject_CallMethodIdObjArgs = (Module[
      "__PyObject_CallMethodIdObjArgs"
    ] = (a0, a1, a2) =>
      (__PyObject_CallMethodIdObjArgs = Module[
        "__PyObject_CallMethodIdObjArgs"
      ] =
        wasmExports["_PyObject_CallMethodIdObjArgs"])(a0, a1, a2));
    var _PyUnicode_New = (Module["_PyUnicode_New"] = (a0, a1) =>
      (_PyUnicode_New = Module["_PyUnicode_New"] =
        wasmExports["PyUnicode_New"])(a0, a1));
    var _PyUnicode_Join = (Module["_PyUnicode_Join"] = (a0, a1) =>
      (_PyUnicode_Join = Module["_PyUnicode_Join"] =
        wasmExports["PyUnicode_Join"])(a0, a1));
    var _JsvNull_Check = (Module["_JsvNull_Check"] = (a0) =>
      (_JsvNull_Check = Module["_JsvNull_Check"] =
        wasmExports["JsvNull_Check"])(a0));
    var _PySys_WriteStderr = (Module["_PySys_WriteStderr"] = (a0, a1) =>
      (_PySys_WriteStderr = Module["_PySys_WriteStderr"] =
        wasmExports["PySys_WriteStderr"])(a0, a1));
    var _PyErr_Print = (Module["_PyErr_Print"] = () =>
      (_PyErr_Print = Module["_PyErr_Print"] = wasmExports["PyErr_Print"])());
    var _PyErr_Display = (Module["_PyErr_Display"] = (a0, a1, a2) =>
      (_PyErr_Display = Module["_PyErr_Display"] =
        wasmExports["PyErr_Display"])(a0, a1, a2));
    var _pythonexc2js = (Module["_pythonexc2js"] = () =>
      (_pythonexc2js = Module["_pythonexc2js"] =
        wasmExports["pythonexc2js"])());
    var _trigger_fatal_error = (Module["_trigger_fatal_error"] = (a0, a1) =>
      (_trigger_fatal_error = Module["_trigger_fatal_error"] =
        wasmExports["trigger_fatal_error"])(a0, a1));
    var _raw_call = (Module["_raw_call"] = (a0, a1) =>
      (_raw_call = Module["_raw_call"] = wasmExports["raw_call"])(a0, a1));
    var _JsProxy_Val = (Module["_JsProxy_Val"] = (a0) =>
      (_JsProxy_Val = Module["_JsProxy_Val"] = wasmExports["JsProxy_Val"])(a0));
    var _error_handling_init = (Module["_error_handling_init"] = (a0) =>
      (_error_handling_init = Module["_error_handling_init"] =
        wasmExports["error_handling_init"])(a0));
    var _hiwire_new_deduplicate = (Module["_hiwire_new_deduplicate"] = (a0) =>
      (_hiwire_new_deduplicate = Module["_hiwire_new_deduplicate"] =
        wasmExports["hiwire_new_deduplicate"])(a0));
    var _hiwire_new = (Module["_hiwire_new"] = (a0) =>
      (_hiwire_new = Module["_hiwire_new"] = wasmExports["hiwire_new"])(a0));
    var _hiwire_incref_deduplicate = (Module["_hiwire_incref_deduplicate"] = (
      a0,
    ) =>
      (_hiwire_incref_deduplicate = Module["_hiwire_incref_deduplicate"] =
        wasmExports["hiwire_incref_deduplicate"])(a0));
    var _hiwire_decref = (Module["_hiwire_decref"] = (a0) =>
      (_hiwire_decref = Module["_hiwire_decref"] =
        wasmExports["hiwire_decref"])(a0));
    var _PyInit__pyodide_core = (Module["_PyInit__pyodide_core"] = () =>
      (_PyInit__pyodide_core = Module["_PyInit__pyodide_core"] =
        wasmExports["PyInit__pyodide_core"])());
    var _PyErr_Occurred = (Module["_PyErr_Occurred"] = () =>
      (_PyErr_Occurred = Module["_PyErr_Occurred"] =
        wasmExports["PyErr_Occurred"])());
    var __PyErr_FormatFromCause = (Module["__PyErr_FormatFromCause"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyErr_FormatFromCause = Module["__PyErr_FormatFromCause"] =
        wasmExports["_PyErr_FormatFromCause"])(a0, a1, a2));
    var _PyModule_Create2 = (Module["_PyModule_Create2"] = (a0, a1) =>
      (_PyModule_Create2 = Module["_PyModule_Create2"] =
        wasmExports["PyModule_Create2"])(a0, a1));
    var _jslib_init = (Module["_jslib_init"] = () =>
      (_jslib_init = Module["_jslib_init"] = wasmExports["jslib_init"])());
    var _python2js_init = (Module["_python2js_init"] = (a0) =>
      (_python2js_init = Module["_python2js_init"] =
        wasmExports["python2js_init"])(a0));
    var _JsProxy_init = (Module["_JsProxy_init"] = (a0) =>
      (_JsProxy_init = Module["_JsProxy_init"] = wasmExports["JsProxy_init"])(
        a0,
      ));
    var _pyproxy_init = (Module["_pyproxy_init"] = (a0) =>
      (_pyproxy_init = Module["_pyproxy_init"] = wasmExports["pyproxy_init"])(
        a0,
      ));
    var _PyImport_GetModuleDict = (Module["_PyImport_GetModuleDict"] = () =>
      (_PyImport_GetModuleDict = Module["_PyImport_GetModuleDict"] =
        wasmExports["PyImport_GetModuleDict"])());
    var _PyDict_SetItemString = (Module["_PyDict_SetItemString"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyDict_SetItemString = Module["_PyDict_SetItemString"] =
        wasmExports["PyDict_SetItemString"])(a0, a1, a2));
    var _python2js = (Module["_python2js"] = (a0) =>
      (_python2js = Module["_python2js"] = wasmExports["python2js"])(a0));
    var _pyodide_export = (Module["_pyodide_export"] = () =>
      (_pyodide_export = Module["_pyodide_export"] =
        wasmExports["pyodide_export"])());
    var _py_version_major = (Module["_py_version_major"] = () =>
      (_py_version_major = Module["_py_version_major"] =
        wasmExports["py_version_major"])());
    var _set_new_cframe = (Module["_set_new_cframe"] = (a0) =>
      (_set_new_cframe = Module["_set_new_cframe"] =
        wasmExports["set_new_cframe"])(a0));
    var _PyUnicode_Data = (Module["_PyUnicode_Data"] = (a0) =>
      (_PyUnicode_Data = Module["_PyUnicode_Data"] =
        wasmExports["PyUnicode_Data"])(a0));
    var __js2python_none = (Module["__js2python_none"] = () =>
      (__js2python_none = Module["__js2python_none"] =
        wasmExports["_js2python_none"])());
    var __js2python_true = (Module["__js2python_true"] = () =>
      (__js2python_true = Module["__js2python_true"] =
        wasmExports["_js2python_true"])());
    var __js2python_false = (Module["__js2python_false"] = () =>
      (__js2python_false = Module["__js2python_false"] =
        wasmExports["_js2python_false"])());
    var __js2python_pyproxy = (Module["__js2python_pyproxy"] = (a0) =>
      (__js2python_pyproxy = Module["__js2python_pyproxy"] =
        wasmExports["_js2python_pyproxy"])(a0));
    var _js2python_immutable = (Module["_js2python_immutable"] = (a0) =>
      (_js2python_immutable = Module["_js2python_immutable"] =
        wasmExports["js2python_immutable"])(a0));
    var _js2python = (Module["_js2python"] = (a0) =>
      (_js2python = Module["_js2python"] = wasmExports["js2python"])(a0));
    var _JsProxy_getflags = (Module["_JsProxy_getflags"] = (a0) =>
      (_JsProxy_getflags = Module["_JsProxy_getflags"] =
        wasmExports["JsProxy_getflags"])(a0));
    var _PyLong_AsLong = (Module["_PyLong_AsLong"] = (a0) =>
      (_PyLong_AsLong = Module["_PyLong_AsLong"] =
        wasmExports["PyLong_AsLong"])(a0));
    var _handle_next_result = (Module["_handle_next_result"] = (a0, a1, a2) =>
      (_handle_next_result = Module["_handle_next_result"] =
        wasmExports["handle_next_result"])(a0, a1, a2));
    var _free = (Module["_free"] = (a0) =>
      (_free = Module["_free"] = wasmExports["free"])(a0));
    var _JsProxy_create_with_type = (Module["_JsProxy_create_with_type"] = (
      a0,
      a1,
      a2,
    ) =>
      (_JsProxy_create_with_type = Module["_JsProxy_create_with_type"] =
        wasmExports["JsProxy_create_with_type"])(a0, a1, a2));
    var _JsProxy_create_objmap = (Module["_JsProxy_create_objmap"] = (a0, a1) =>
      (_JsProxy_create_objmap = Module["_JsProxy_create_objmap"] =
        wasmExports["JsProxy_create_objmap"])(a0, a1));
    var _JsProxy_am_send = (Module["_JsProxy_am_send"] = (a0, a1, a2) =>
      (_JsProxy_am_send = Module["_JsProxy_am_send"] =
        wasmExports["JsProxy_am_send"])(a0, a1, a2));
    var _hiwire_get = (Module["_hiwire_get"] = (a0) =>
      (_hiwire_get = Module["_hiwire_get"] = wasmExports["hiwire_get"])(a0));
    var _python2js_track_proxies = (Module["_python2js_track_proxies"] = (
      a0,
      a1,
      a2,
    ) =>
      (_python2js_track_proxies = Module["_python2js_track_proxies"] =
        wasmExports["python2js_track_proxies"])(a0, a1, a2));
    var _JsvObject_CallMethodId_OneArg = (Module[
      "_JsvObject_CallMethodId_OneArg"
    ] = (a0, a1, a2) =>
      (_JsvObject_CallMethodId_OneArg = Module[
        "_JsvObject_CallMethodId_OneArg"
      ] =
        wasmExports["JsvObject_CallMethodId_OneArg"])(a0, a1, a2));
    var _JsProxy_IterNext = (Module["_JsProxy_IterNext"] = (a0) =>
      (_JsProxy_IterNext = Module["_JsProxy_IterNext"] =
        wasmExports["JsProxy_IterNext"])(a0));
    var __PyGen_SetStopIterationValue = (Module[
      "__PyGen_SetStopIterationValue"
    ] = (a0) =>
      (__PyGen_SetStopIterationValue = Module["__PyGen_SetStopIterationValue"] =
        wasmExports["_PyGen_SetStopIterationValue"])(a0));
    var _JsGenerator_send = (Module["_JsGenerator_send"] = (a0, a1) =>
      (_JsGenerator_send = Module["_JsGenerator_send"] =
        wasmExports["JsGenerator_send"])(a0, a1));
    var _PyErr_SetNone = (Module["_PyErr_SetNone"] = (a0) =>
      (_PyErr_SetNone = Module["_PyErr_SetNone"] =
        wasmExports["PyErr_SetNone"])(a0));
    var _JsException_js_error_getter = (Module["_JsException_js_error_getter"] =
      (a0, a1) =>
        (_JsException_js_error_getter = Module["_JsException_js_error_getter"] =
          wasmExports["JsException_js_error_getter"])(a0, a1));
    var _process_throw_args = (Module["_process_throw_args"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_process_throw_args = Module["_process_throw_args"] =
        wasmExports["process_throw_args"])(a0, a1, a2, a3));
    var _PyException_GetTraceback = (Module["_PyException_GetTraceback"] = (
      a0,
    ) =>
      (_PyException_GetTraceback = Module["_PyException_GetTraceback"] =
        wasmExports["PyException_GetTraceback"])(a0));
    var _PyErr_ExceptionMatches = (Module["_PyErr_ExceptionMatches"] = (a0) =>
      (_PyErr_ExceptionMatches = Module["_PyErr_ExceptionMatches"] =
        wasmExports["PyErr_ExceptionMatches"])(a0));
    var _PyErr_Clear = (Module["_PyErr_Clear"] = () =>
      (_PyErr_Clear = Module["_PyErr_Clear"] = wasmExports["PyErr_Clear"])());
    var _JsvObject_CallMethodId_NoArgs = (Module[
      "_JsvObject_CallMethodId_NoArgs"
    ] = (a0, a1) =>
      (_JsvObject_CallMethodId_NoArgs = Module[
        "_JsvObject_CallMethodId_NoArgs"
      ] =
        wasmExports["JsvObject_CallMethodId_NoArgs"])(a0, a1));
    var __agen_handle_result_js_c = (Module["__agen_handle_result_js_c"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__agen_handle_result_js_c = Module["__agen_handle_result_js_c"] =
        wasmExports["_agen_handle_result_js_c"])(a0, a1, a2, a3, a4));
    var _PyObject_CallOneArg = (Module["_PyObject_CallOneArg"] = (a0, a1) =>
      (_PyObject_CallOneArg = Module["_PyObject_CallOneArg"] =
        wasmExports["PyObject_CallOneArg"])(a0, a1));
    var _PyErr_GivenExceptionMatches = (Module["_PyErr_GivenExceptionMatches"] =
      (a0, a1) =>
        (_PyErr_GivenExceptionMatches = Module["_PyErr_GivenExceptionMatches"] =
          wasmExports["PyErr_GivenExceptionMatches"])(a0, a1));
    var __agen_handle_result = (Module["__agen_handle_result"] = (a0, a1) =>
      (__agen_handle_result = Module["__agen_handle_result"] =
        wasmExports["_agen_handle_result"])(a0, a1));
    var _PyObject_CallNoArgs = (Module["_PyObject_CallNoArgs"] = (a0) =>
      (_PyObject_CallNoArgs = Module["_PyObject_CallNoArgs"] =
        wasmExports["PyObject_CallNoArgs"])(a0));
    var _JsArray_sq_item = (Module["_JsArray_sq_item"] = (a0, a1) =>
      (_JsArray_sq_item = Module["_JsArray_sq_item"] =
        wasmExports["JsArray_sq_item"])(a0, a1));
    var _JsArray_sq_ass_item = (Module["_JsArray_sq_ass_item"] = (a0, a1, a2) =>
      (_JsArray_sq_ass_item = Module["_JsArray_sq_ass_item"] =
        wasmExports["JsArray_sq_ass_item"])(a0, a1, a2));
    var _JsTypedArray_sq_ass_item = (Module["_JsTypedArray_sq_ass_item"] = (
      a0,
      a1,
      a2,
    ) =>
      (_JsTypedArray_sq_ass_item = Module["_JsTypedArray_sq_ass_item"] =
        wasmExports["JsTypedArray_sq_ass_item"])(a0, a1, a2));
    var _JsMap_update = (Module["_JsMap_update"] = (a0, a1, a2) =>
      (_JsMap_update = Module["_JsMap_update"] = wasmExports["JsMap_update"])(
        a0,
        a1,
        a2,
      ));
    var __PyArg_ParseTuple_SizeT = (Module["__PyArg_ParseTuple_SizeT"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyArg_ParseTuple_SizeT = Module["__PyArg_ParseTuple_SizeT"] =
        wasmExports["_PyArg_ParseTuple_SizeT"])(a0, a1, a2));
    var _JsProxy_syncify_not_supported = (Module[
      "_JsProxy_syncify_not_supported"
    ] = (a0, a1) =>
      (_JsProxy_syncify_not_supported = Module[
        "_JsProxy_syncify_not_supported"
      ] =
        wasmExports["JsProxy_syncify_not_supported"])(a0, a1));
    var _JsProxy_syncify = (Module["_JsProxy_syncify"] = (a0, a1) =>
      (_JsProxy_syncify = Module["_JsProxy_syncify"] =
        wasmExports["JsProxy_syncify"])(a0, a1));
    var _JsvPromise_Syncify = (Module["_JsvPromise_Syncify"] = (a0) =>
      (_JsvPromise_Syncify = Module["_JsvPromise_Syncify"] =
        wasmExports["JsvPromise_Syncify"])(a0));
    var _JsMethod_ConvertArgs = (Module["_JsMethod_ConvertArgs"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_JsMethod_ConvertArgs = Module["_JsMethod_ConvertArgs"] =
        wasmExports["JsMethod_ConvertArgs"])(a0, a1, a2, a3));
    var _PyTuple_GetItem = (Module["_PyTuple_GetItem"] = (a0, a1) =>
      (_PyTuple_GetItem = Module["_PyTuple_GetItem"] =
        wasmExports["PyTuple_GetItem"])(a0, a1));
    var _PyTuple_Size = (Module["_PyTuple_Size"] = (a0) =>
      (_PyTuple_Size = Module["_PyTuple_Size"] = wasmExports["PyTuple_Size"])(
        a0,
      ));
    var _Buffer_dealloc = (Module["_Buffer_dealloc"] = (a0) =>
      (_Buffer_dealloc = Module["_Buffer_dealloc"] =
        wasmExports["Buffer_dealloc"])(a0));
    var _PyMem_Free = (Module["_PyMem_Free"] = (a0) =>
      (_PyMem_Free = Module["_PyMem_Free"] = wasmExports["PyMem_Free"])(a0));
    var _JsBuffer_CopyIntoMemoryView = (Module["_JsBuffer_CopyIntoMemoryView"] =
      (a0, a1, a2, a3) =>
        (_JsBuffer_CopyIntoMemoryView = Module["_JsBuffer_CopyIntoMemoryView"] =
          wasmExports["JsBuffer_CopyIntoMemoryView"])(a0, a1, a2, a3));
    var _PyMem_Malloc = (Module["_PyMem_Malloc"] = (a0) =>
      (_PyMem_Malloc = Module["_PyMem_Malloc"] = wasmExports["PyMem_Malloc"])(
        a0,
      ));
    var _PyMemoryView_FromObject = (Module["_PyMemoryView_FromObject"] = (a0) =>
      (_PyMemoryView_FromObject = Module["_PyMemoryView_FromObject"] =
        wasmExports["PyMemoryView_FromObject"])(a0));
    var _JsBuffer_cinit = (Module["_JsBuffer_cinit"] = (a0) =>
      (_JsBuffer_cinit = Module["_JsBuffer_cinit"] =
        wasmExports["JsBuffer_cinit"])(a0));
    var _JsRef_new = (Module["_JsRef_new"] = (a0) =>
      (_JsRef_new = Module["_JsRef_new"] = wasmExports["JsRef_new"])(a0));
    var _PyTuple_Pack = (Module["_PyTuple_Pack"] = (a0, a1) =>
      (_PyTuple_Pack = Module["_PyTuple_Pack"] = wasmExports["PyTuple_Pack"])(
        a0,
        a1,
      ));
    var _PyLong_FromLong = (Module["_PyLong_FromLong"] = (a0) =>
      (_PyLong_FromLong = Module["_PyLong_FromLong"] =
        wasmExports["PyLong_FromLong"])(a0));
    var _PyDict_GetItemWithError = (Module["_PyDict_GetItemWithError"] = (
      a0,
      a1,
    ) =>
      (_PyDict_GetItemWithError = Module["_PyDict_GetItemWithError"] =
        wasmExports["PyDict_GetItemWithError"])(a0, a1));
    var _PyObject_SelfIter = (Module["_PyObject_SelfIter"] = (a0) =>
      (_PyObject_SelfIter = Module["_PyObject_SelfIter"] =
        wasmExports["PyObject_SelfIter"])(a0));
    var _PyVectorcall_Call = (Module["_PyVectorcall_Call"] = (a0, a1, a2) =>
      (_PyVectorcall_Call = Module["_PyVectorcall_Call"] =
        wasmExports["PyVectorcall_Call"])(a0, a1, a2));
    var _PyErr_NoMemory = (Module["_PyErr_NoMemory"] = () =>
      (_PyErr_NoMemory = Module["_PyErr_NoMemory"] =
        wasmExports["PyErr_NoMemory"])());
    var _PyType_FromSpecWithBases = (Module["_PyType_FromSpecWithBases"] = (
      a0,
      a1,
    ) =>
      (_PyType_FromSpecWithBases = Module["_PyType_FromSpecWithBases"] =
        wasmExports["PyType_FromSpecWithBases"])(a0, a1));
    var __PyObject_SetAttrId = (Module["__PyObject_SetAttrId"] = (a0, a1, a2) =>
      (__PyObject_SetAttrId = Module["__PyObject_SetAttrId"] =
        wasmExports["_PyObject_SetAttrId"])(a0, a1, a2));
    var _PyDict_SetItem = (Module["_PyDict_SetItem"] = (a0, a1, a2) =>
      (_PyDict_SetItem = Module["_PyDict_SetItem"] =
        wasmExports["PyDict_SetItem"])(a0, a1, a2));
    var _JsProxy_create_with_this = (Module["_JsProxy_create_with_this"] = (
      a0,
      a1,
    ) =>
      (_JsProxy_create_with_this = Module["_JsProxy_create_with_this"] =
        wasmExports["JsProxy_create_with_this"])(a0, a1));
    var _JsProxy_create = (Module["_JsProxy_create"] = (a0) =>
      (_JsProxy_create = Module["_JsProxy_create"] =
        wasmExports["JsProxy_create"])(a0));
    var _JsProxy_Check = (Module["_JsProxy_Check"] = (a0) =>
      (_JsProxy_Check = Module["_JsProxy_Check"] =
        wasmExports["JsProxy_Check"])(a0));
    var _PyType_IsSubtype = (Module["_PyType_IsSubtype"] = (a0, a1) =>
      (_PyType_IsSubtype = Module["_PyType_IsSubtype"] =
        wasmExports["PyType_IsSubtype"])(a0, a1));
    var _JsProxy_init_docstrings = (Module["_JsProxy_init_docstrings"] = () =>
      (_JsProxy_init_docstrings = Module["_JsProxy_init_docstrings"] =
        wasmExports["JsProxy_init_docstrings"])());
    var _PyDict_New = (Module["_PyDict_New"] = () =>
      (_PyDict_New = Module["_PyDict_New"] = wasmExports["PyDict_New"])());
    var _PyObject_SetAttrString = (Module["_PyObject_SetAttrString"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_SetAttrString = Module["_PyObject_SetAttrString"] =
        wasmExports["PyObject_SetAttrString"])(a0, a1, a2));
    var _PyModule_AddObject = (Module["_PyModule_AddObject"] = (a0, a1, a2) =>
      (_PyModule_AddObject = Module["_PyModule_AddObject"] =
        wasmExports["PyModule_AddObject"])(a0, a1, a2));
    var _PyType_Ready = (Module["_PyType_Ready"] = (a0) =>
      (_PyType_Ready = Module["_PyType_Ready"] = wasmExports["PyType_Ready"])(
        a0,
      ));
    var _JsvObject_CallMethodId_TwoArgs = (Module[
      "_JsvObject_CallMethodId_TwoArgs"
    ] = (a0, a1, a2, a3) =>
      (_JsvObject_CallMethodId_TwoArgs = Module[
        "_JsvObject_CallMethodId_TwoArgs"
      ] =
        wasmExports["JsvObject_CallMethodId_TwoArgs"])(a0, a1, a2, a3));
    var _PyObject_Repr = (Module["_PyObject_Repr"] = (a0) =>
      (_PyObject_Repr = Module["_PyObject_Repr"] =
        wasmExports["PyObject_Repr"])(a0));
    var _PyIndex_Check = (Module["_PyIndex_Check"] = (a0) =>
      (_PyIndex_Check = Module["_PyIndex_Check"] =
        wasmExports["PyIndex_Check"])(a0));
    var _PyNumber_AsSsize_t = (Module["_PyNumber_AsSsize_t"] = (a0, a1) =>
      (_PyNumber_AsSsize_t = Module["_PyNumber_AsSsize_t"] =
        wasmExports["PyNumber_AsSsize_t"])(a0, a1));
    var _PySlice_Unpack = (Module["_PySlice_Unpack"] = (a0, a1, a2, a3) =>
      (_PySlice_Unpack = Module["_PySlice_Unpack"] =
        wasmExports["PySlice_Unpack"])(a0, a1, a2, a3));
    var _PySlice_AdjustIndices = (Module["_PySlice_AdjustIndices"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PySlice_AdjustIndices = Module["_PySlice_AdjustIndices"] =
        wasmExports["PySlice_AdjustIndices"])(a0, a1, a2, a3));
    var _PySequence_Fast = (Module["_PySequence_Fast"] = (a0, a1) =>
      (_PySequence_Fast = Module["_PySequence_Fast"] =
        wasmExports["PySequence_Fast"])(a0, a1));
    var __PyArg_ParseTupleAndKeywords_SizeT = (Module[
      "__PyArg_ParseTupleAndKeywords_SizeT"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyArg_ParseTupleAndKeywords_SizeT = Module[
        "__PyArg_ParseTupleAndKeywords_SizeT"
      ] =
        wasmExports["_PyArg_ParseTupleAndKeywords_SizeT"])(a0, a1, a2, a3, a4));
    var _PySet_New = (Module["_PySet_New"] = (a0) =>
      (_PySet_New = Module["_PySet_New"] = wasmExports["PySet_New"])(a0));
    var __PySet_Update = (Module["__PySet_Update"] = (a0, a1) =>
      (__PySet_Update = Module["__PySet_Update"] =
        wasmExports["_PySet_Update"])(a0, a1));
    var _PyUnicode_FromString = (Module["_PyUnicode_FromString"] = (a0) =>
      (_PyUnicode_FromString = Module["_PyUnicode_FromString"] =
        wasmExports["PyUnicode_FromString"])(a0));
    var _PySet_Discard = (Module["_PySet_Discard"] = (a0, a1) =>
      (_PySet_Discard = Module["_PySet_Discard"] =
        wasmExports["PySet_Discard"])(a0, a1));
    var _PyList_New = (Module["_PyList_New"] = (a0) =>
      (_PyList_New = Module["_PyList_New"] = wasmExports["PyList_New"])(a0));
    var __PyList_Extend = (Module["__PyList_Extend"] = (a0, a1) =>
      (__PyList_Extend = Module["__PyList_Extend"] =
        wasmExports["_PyList_Extend"])(a0, a1));
    var _PyList_Sort = (Module["_PyList_Sort"] = (a0) =>
      (_PyList_Sort = Module["_PyList_Sort"] = wasmExports["PyList_Sort"])(a0));
    var __PyArg_ParseStack_SizeT = (Module["__PyArg_ParseStack_SizeT"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyArg_ParseStack_SizeT = Module["__PyArg_ParseStack_SizeT"] =
        wasmExports["_PyArg_ParseStack_SizeT"])(a0, a1, a2, a3));
    var _JsvObject_CallMethodId = (Module["_JsvObject_CallMethodId"] = (
      a0,
      a1,
      a2,
    ) =>
      (_JsvObject_CallMethodId = Module["_JsvObject_CallMethodId"] =
        wasmExports["JsvObject_CallMethodId"])(a0, a1, a2));
    var _PyObject_GetIter = (Module["_PyObject_GetIter"] = (a0) =>
      (_PyObject_GetIter = Module["_PyObject_GetIter"] =
        wasmExports["PyObject_GetIter"])(a0));
    var _PyObject_RichCompareBool = (Module["_PyObject_RichCompareBool"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_RichCompareBool = Module["_PyObject_RichCompareBool"] =
        wasmExports["PyObject_RichCompareBool"])(a0, a1, a2));
    var __PyArg_ParseStackAndKeywords_SizeT = (Module[
      "__PyArg_ParseStackAndKeywords_SizeT"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyArg_ParseStackAndKeywords_SizeT = Module[
        "__PyArg_ParseStackAndKeywords_SizeT"
      ] =
        wasmExports["_PyArg_ParseStackAndKeywords_SizeT"])(a0, a1, a2, a3, a4));
    var _JsRef_toVal = (Module["_JsRef_toVal"] = (a0) =>
      (_JsRef_toVal = Module["_JsRef_toVal"] = wasmExports["JsRef_toVal"])(a0));
    var _Py_EnterRecursiveCall = (Module["_Py_EnterRecursiveCall"] = (a0) =>
      (_Py_EnterRecursiveCall = Module["_Py_EnterRecursiveCall"] =
        wasmExports["Py_EnterRecursiveCall"])(a0));
    var _Py_LeaveRecursiveCall = (Module["_Py_LeaveRecursiveCall"] = () =>
      (_Py_LeaveRecursiveCall = Module["_Py_LeaveRecursiveCall"] =
        wasmExports["Py_LeaveRecursiveCall"])());
    var _hiwire_pop = (Module["_hiwire_pop"] = (a0) =>
      (_hiwire_pop = Module["_hiwire_pop"] = wasmExports["hiwire_pop"])(a0));
    var _puts = (Module["_puts"] = (a0) =>
      (_puts = Module["_puts"] = wasmExports["puts"])(a0));
    var _PyObject_GenericGetAttr = (Module["_PyObject_GenericGetAttr"] = (
      a0,
      a1,
    ) =>
      (_PyObject_GenericGetAttr = Module["_PyObject_GenericGetAttr"] =
        wasmExports["PyObject_GenericGetAttr"])(a0, a1));
    var _strcmp = (Module["_strcmp"] = (a0, a1) =>
      (_strcmp = Module["_strcmp"] = wasmExports["strcmp"])(a0, a1));
    var _strncmp = (Module["_strncmp"] = (a0, a1, a2) =>
      (_strncmp = Module["_strncmp"] = wasmExports["strncmp"])(a0, a1, a2));
    var _PyObject_GenericSetAttr = (Module["_PyObject_GenericSetAttr"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_GenericSetAttr = Module["_PyObject_GenericSetAttr"] =
        wasmExports["PyObject_GenericSetAttr"])(a0, a1, a2));
    var __Py_HashBytes = (Module["__Py_HashBytes"] = (a0, a1) =>
      (__Py_HashBytes = Module["__Py_HashBytes"] =
        wasmExports["_Py_HashBytes"])(a0, a1));
    var __PyArg_CheckPositional = (Module["__PyArg_CheckPositional"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyArg_CheckPositional = Module["__PyArg_CheckPositional"] =
        wasmExports["_PyArg_CheckPositional"])(a0, a1, a2, a3));
    var __PyNumber_Index = (Module["__PyNumber_Index"] = (a0) =>
      (__PyNumber_Index = Module["__PyNumber_Index"] =
        wasmExports["_PyNumber_Index"])(a0));
    var _PyLong_AsSsize_t = (Module["_PyLong_AsSsize_t"] = (a0) =>
      (_PyLong_AsSsize_t = Module["_PyLong_AsSsize_t"] =
        wasmExports["PyLong_AsSsize_t"])(a0));
    var _PyLong_FromSsize_t = (Module["_PyLong_FromSsize_t"] = (a0) =>
      (_PyLong_FromSsize_t = Module["_PyLong_FromSsize_t"] =
        wasmExports["PyLong_FromSsize_t"])(a0));
    var _PyObject_GetItem = (Module["_PyObject_GetItem"] = (a0, a1) =>
      (_PyObject_GetItem = Module["_PyObject_GetItem"] =
        wasmExports["PyObject_GetItem"])(a0, a1));
    var _PyObject_DelItem = (Module["_PyObject_DelItem"] = (a0, a1) =>
      (_PyObject_DelItem = Module["_PyObject_DelItem"] =
        wasmExports["PyObject_DelItem"])(a0, a1));
    var _PyObject_SetItem = (Module["_PyObject_SetItem"] = (a0, a1, a2) =>
      (_PyObject_SetItem = Module["_PyObject_SetItem"] =
        wasmExports["PyObject_SetItem"])(a0, a1, a2));
    var _PyObject_GetBuffer = (Module["_PyObject_GetBuffer"] = (a0, a1, a2) =>
      (_PyObject_GetBuffer = Module["_PyObject_GetBuffer"] =
        wasmExports["PyObject_GetBuffer"])(a0, a1, a2));
    var _PyBuffer_Release = (Module["_PyBuffer_Release"] = (a0) =>
      (_PyBuffer_Release = Module["_PyBuffer_Release"] =
        wasmExports["PyBuffer_Release"])(a0));
    var _PyBytes_FromStringAndSize = (Module["_PyBytes_FromStringAndSize"] = (
      a0,
      a1,
    ) =>
      (_PyBytes_FromStringAndSize = Module["_PyBytes_FromStringAndSize"] =
        wasmExports["PyBytes_FromStringAndSize"])(a0, a1));
    var _check_gil = (Module["_check_gil"] = () =>
      (_check_gil = Module["_check_gil"] = wasmExports["check_gil"])());
    var _PyGILState_Check = (Module["_PyGILState_Check"] = () =>
      (_PyGILState_Check = Module["_PyGILState_Check"] =
        wasmExports["PyGILState_Check"])());
    var _pyproxy_getflags = (Module["_pyproxy_getflags"] = (a0) =>
      (_pyproxy_getflags = Module["_pyproxy_getflags"] =
        wasmExports["pyproxy_getflags"])(a0));
    var _PyObject_HasAttr = (Module["_PyObject_HasAttr"] = (a0, a1) =>
      (_PyObject_HasAttr = Module["_PyObject_HasAttr"] =
        wasmExports["PyObject_HasAttr"])(a0, a1));
    var __PyObject_NextNotImplemented = (Module[
      "__PyObject_NextNotImplemented"
    ] = (a0) =>
      (__PyObject_NextNotImplemented = Module["__PyObject_NextNotImplemented"] =
        wasmExports["_PyObject_NextNotImplemented"])(a0));
    var _PyObject_IsSubclass = (Module["_PyObject_IsSubclass"] = (a0, a1) =>
      (_PyObject_IsSubclass = Module["_PyObject_IsSubclass"] =
        wasmExports["PyObject_IsSubclass"])(a0, a1));
    var __pyproxy_repr = (Module["__pyproxy_repr"] = (a0) =>
      (__pyproxy_repr = Module["__pyproxy_repr"] =
        wasmExports["_pyproxy_repr"])(a0));
    var _PyObject_Str = (Module["_PyObject_Str"] = (a0) =>
      (_PyObject_Str = Module["_PyObject_Str"] = wasmExports["PyObject_Str"])(
        a0,
      ));
    var __pyproxy_type = (Module["__pyproxy_type"] = (a0) =>
      (__pyproxy_type = Module["__pyproxy_type"] =
        wasmExports["_pyproxy_type"])(a0));
    var __pyproxy_hasattr = (Module["__pyproxy_hasattr"] = (a0, a1) =>
      (__pyproxy_hasattr = Module["__pyproxy_hasattr"] =
        wasmExports["_pyproxy_hasattr"])(a0, a1));
    var __pyproxy_getattr = (Module["__pyproxy_getattr"] = (a0, a1, a2) =>
      (__pyproxy_getattr = Module["__pyproxy_getattr"] =
        wasmExports["_pyproxy_getattr"])(a0, a1, a2));
    var __PyObject_GetMethod = (Module["__PyObject_GetMethod"] = (a0, a1, a2) =>
      (__PyObject_GetMethod = Module["__PyObject_GetMethod"] =
        wasmExports["_PyObject_GetMethod"])(a0, a1, a2));
    var __pyproxy_setattr = (Module["__pyproxy_setattr"] = (a0, a1, a2) =>
      (__pyproxy_setattr = Module["__pyproxy_setattr"] =
        wasmExports["_pyproxy_setattr"])(a0, a1, a2));
    var _PyObject_SetAttr = (Module["_PyObject_SetAttr"] = (a0, a1, a2) =>
      (_PyObject_SetAttr = Module["_PyObject_SetAttr"] =
        wasmExports["PyObject_SetAttr"])(a0, a1, a2));
    var __pyproxy_delattr = (Module["__pyproxy_delattr"] = (a0, a1) =>
      (__pyproxy_delattr = Module["__pyproxy_delattr"] =
        wasmExports["_pyproxy_delattr"])(a0, a1));
    var __pyproxy_getitem = (Module["__pyproxy_getitem"] = (a0, a1) =>
      (__pyproxy_getitem = Module["__pyproxy_getitem"] =
        wasmExports["_pyproxy_getitem"])(a0, a1));
    var __pyproxy_setitem = (Module["__pyproxy_setitem"] = (a0, a1, a2) =>
      (__pyproxy_setitem = Module["__pyproxy_setitem"] =
        wasmExports["_pyproxy_setitem"])(a0, a1, a2));
    var __pyproxy_delitem = (Module["__pyproxy_delitem"] = (a0, a1) =>
      (__pyproxy_delitem = Module["__pyproxy_delitem"] =
        wasmExports["_pyproxy_delitem"])(a0, a1));
    var __pyproxy_slice_assign = (Module["__pyproxy_slice_assign"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__pyproxy_slice_assign = Module["__pyproxy_slice_assign"] =
        wasmExports["_pyproxy_slice_assign"])(a0, a1, a2, a3));
    var _PySequence_Size = (Module["_PySequence_Size"] = (a0) =>
      (_PySequence_Size = Module["_PySequence_Size"] =
        wasmExports["PySequence_Size"])(a0));
    var _PySequence_GetSlice = (Module["_PySequence_GetSlice"] = (a0, a1, a2) =>
      (_PySequence_GetSlice = Module["_PySequence_GetSlice"] =
        wasmExports["PySequence_GetSlice"])(a0, a1, a2));
    var _PySequence_SetSlice = (Module["_PySequence_SetSlice"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PySequence_SetSlice = Module["_PySequence_SetSlice"] =
        wasmExports["PySequence_SetSlice"])(a0, a1, a2, a3));
    var _python2js_with_depth = (Module["_python2js_with_depth"] = (
      a0,
      a1,
      a2,
    ) =>
      (_python2js_with_depth = Module["_python2js_with_depth"] =
        wasmExports["python2js_with_depth"])(a0, a1, a2));
    var __pyproxy_pop = (Module["__pyproxy_pop"] = (a0, a1) =>
      (__pyproxy_pop = Module["__pyproxy_pop"] = wasmExports["_pyproxy_pop"])(
        a0,
        a1,
      ));
    var __pyproxy_contains = (Module["__pyproxy_contains"] = (a0, a1) =>
      (__pyproxy_contains = Module["__pyproxy_contains"] =
        wasmExports["_pyproxy_contains"])(a0, a1));
    var _PySequence_Contains = (Module["_PySequence_Contains"] = (a0, a1) =>
      (_PySequence_Contains = Module["_PySequence_Contains"] =
        wasmExports["PySequence_Contains"])(a0, a1));
    var __pyproxy_ownKeys = (Module["__pyproxy_ownKeys"] = (a0) =>
      (__pyproxy_ownKeys = Module["__pyproxy_ownKeys"] =
        wasmExports["_pyproxy_ownKeys"])(a0));
    var _PyObject_Dir = (Module["_PyObject_Dir"] = (a0) =>
      (_PyObject_Dir = Module["_PyObject_Dir"] = wasmExports["PyObject_Dir"])(
        a0,
      ));
    var _PyList_Size = (Module["_PyList_Size"] = (a0) =>
      (_PyList_Size = Module["_PyList_Size"] = wasmExports["PyList_Size"])(a0));
    var _PyList_GetItem = (Module["_PyList_GetItem"] = (a0, a1) =>
      (_PyList_GetItem = Module["_PyList_GetItem"] =
        wasmExports["PyList_GetItem"])(a0, a1));
    var __pyproxy_apply = (Module["__pyproxy_apply"] = (a0, a1, a2, a3, a4) =>
      (__pyproxy_apply = Module["__pyproxy_apply"] =
        wasmExports["_pyproxy_apply"])(a0, a1, a2, a3, a4));
    var _PyTuple_New = (Module["_PyTuple_New"] = (a0) =>
      (_PyTuple_New = Module["_PyTuple_New"] = wasmExports["PyTuple_New"])(a0));
    var _PyObject_Vectorcall = (Module["_PyObject_Vectorcall"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyObject_Vectorcall = Module["_PyObject_Vectorcall"] =
        wasmExports["PyObject_Vectorcall"])(a0, a1, a2, a3));
    var __iscoroutinefunction = (Module["__iscoroutinefunction"] = (a0) =>
      (__iscoroutinefunction = Module["__iscoroutinefunction"] =
        wasmExports["_iscoroutinefunction"])(a0));
    var __pyproxy_iter_next = (Module["__pyproxy_iter_next"] = (a0) =>
      (__pyproxy_iter_next = Module["__pyproxy_iter_next"] =
        wasmExports["_pyproxy_iter_next"])(a0));
    var _PyIter_Next = (Module["_PyIter_Next"] = (a0) =>
      (_PyIter_Next = Module["_PyIter_Next"] = wasmExports["PyIter_Next"])(a0));
    var __pyproxyGen_Send = (Module["__pyproxyGen_Send"] = (a0, a1) =>
      (__pyproxyGen_Send = Module["__pyproxyGen_Send"] =
        wasmExports["_pyproxyGen_Send"])(a0, a1));
    var _PyIter_Send = (Module["_PyIter_Send"] = (a0, a1, a2) =>
      (_PyIter_Send = Module["_PyIter_Send"] = wasmExports["PyIter_Send"])(
        a0,
        a1,
        a2,
      ));
    var __pyproxyGen_return = (Module["__pyproxyGen_return"] = (a0, a1) =>
      (__pyproxyGen_return = Module["__pyproxyGen_return"] =
        wasmExports["_pyproxyGen_return"])(a0, a1));
    var __PyGen_FetchStopIterationValue = (Module[
      "__PyGen_FetchStopIterationValue"
    ] = (a0) =>
      (__PyGen_FetchStopIterationValue = Module[
        "__PyGen_FetchStopIterationValue"
      ] =
        wasmExports["_PyGen_FetchStopIterationValue"])(a0));
    var __pyproxyGen_throw = (Module["__pyproxyGen_throw"] = (a0, a1) =>
      (__pyproxyGen_throw = Module["__pyproxyGen_throw"] =
        wasmExports["_pyproxyGen_throw"])(a0, a1));
    var __pyproxyGen_asend = (Module["__pyproxyGen_asend"] = (a0, a1) =>
      (__pyproxyGen_asend = Module["__pyproxyGen_asend"] =
        wasmExports["_pyproxyGen_asend"])(a0, a1));
    var __pyproxyGen_areturn = (Module["__pyproxyGen_areturn"] = (a0) =>
      (__pyproxyGen_areturn = Module["__pyproxyGen_areturn"] =
        wasmExports["_pyproxyGen_areturn"])(a0));
    var __pyproxyGen_athrow = (Module["__pyproxyGen_athrow"] = (a0, a1) =>
      (__pyproxyGen_athrow = Module["__pyproxyGen_athrow"] =
        wasmExports["_pyproxyGen_athrow"])(a0, a1));
    var __pyproxy_aiter_next = (Module["__pyproxy_aiter_next"] = (a0) =>
      (__pyproxy_aiter_next = Module["__pyproxy_aiter_next"] =
        wasmExports["_pyproxy_aiter_next"])(a0));
    var _FutureDoneCallback_call_resolve = (Module[
      "_FutureDoneCallback_call_resolve"
    ] = (a0, a1) =>
      (_FutureDoneCallback_call_resolve = Module[
        "_FutureDoneCallback_call_resolve"
      ] =
        wasmExports["FutureDoneCallback_call_resolve"])(a0, a1));
    var _FutureDoneCallback_call_reject = (Module[
      "_FutureDoneCallback_call_reject"
    ] = (a0) =>
      (_FutureDoneCallback_call_reject = Module[
        "_FutureDoneCallback_call_reject"
      ] =
        wasmExports["FutureDoneCallback_call_reject"])(a0));
    var _FutureDoneCallback_call = (Module["_FutureDoneCallback_call"] = (
      a0,
      a1,
      a2,
    ) =>
      (_FutureDoneCallback_call = Module["_FutureDoneCallback_call"] =
        wasmExports["FutureDoneCallback_call"])(a0, a1, a2));
    var _PyArg_UnpackTuple = (Module["_PyArg_UnpackTuple"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyArg_UnpackTuple = Module["_PyArg_UnpackTuple"] =
        wasmExports["PyArg_UnpackTuple"])(a0, a1, a2, a3, a4));
    var __pyproxy_ensure_future = (Module["__pyproxy_ensure_future"] = (
      a0,
      a1,
      a2,
    ) =>
      (__pyproxy_ensure_future = Module["__pyproxy_ensure_future"] =
        wasmExports["_pyproxy_ensure_future"])(a0, a1, a2));
    var __pyproxy_get_buffer = (Module["__pyproxy_get_buffer"] = (a0) =>
      (__pyproxy_get_buffer = Module["__pyproxy_get_buffer"] =
        wasmExports["_pyproxy_get_buffer"])(a0));
    var _PyBuffer_FillContiguousStrides = (Module[
      "_PyBuffer_FillContiguousStrides"
    ] = (a0, a1, a2, a3, a4) =>
      (_PyBuffer_FillContiguousStrides = Module[
        "_PyBuffer_FillContiguousStrides"
      ] =
        wasmExports["PyBuffer_FillContiguousStrides"])(a0, a1, a2, a3, a4));
    var _PyBuffer_IsContiguous = (Module["_PyBuffer_IsContiguous"] = (a0, a1) =>
      (_PyBuffer_IsContiguous = Module["_PyBuffer_IsContiguous"] =
        wasmExports["PyBuffer_IsContiguous"])(a0, a1));
    var __python2js_buffer = (Module["__python2js_buffer"] = (a0) =>
      (__python2js_buffer = Module["__python2js_buffer"] =
        wasmExports["_python2js_buffer"])(a0));
    var _jslib_init_buffers = (Module["_jslib_init_buffers"] = () =>
      (_jslib_init_buffers = Module["_jslib_init_buffers"] =
        wasmExports["jslib_init_buffers"])());
    var _JsRef_pop = (Module["_JsRef_pop"] = (a0) =>
      (_JsRef_pop = Module["_JsRef_pop"] = wasmExports["JsRef_pop"])(a0));
    var _JsrString_FromId = (Module["_JsrString_FromId"] = (a0) =>
      (_JsrString_FromId = Module["_JsrString_FromId"] =
        wasmExports["JsrString_FromId"])(a0));
    var _hiwire_intern = (Module["_hiwire_intern"] = (a0) =>
      (_hiwire_intern = Module["_hiwire_intern"] =
        wasmExports["hiwire_intern"])(a0));
    var _JsvString_FromId = (Module["_JsvString_FromId"] = (a0) =>
      (_JsvString_FromId = Module["_JsvString_FromId"] =
        wasmExports["JsvString_FromId"])(a0));
    var __python2js = (Module["__python2js"] = (a0, a1) =>
      (__python2js = Module["__python2js"] = wasmExports["_python2js"])(
        a0,
        a1,
      ));
    var _python2js_inner = (Module["_python2js_inner"] = (a0, a1, a2, a3) =>
      (_python2js_inner = Module["_python2js_inner"] =
        wasmExports["python2js_inner"])(a0, a1, a2, a3));
    var _PySequence_GetItem = (Module["_PySequence_GetItem"] = (a0, a1) =>
      (_PySequence_GetItem = Module["_PySequence_GetItem"] =
        wasmExports["PySequence_GetItem"])(a0, a1));
    var _PyDict_Next = (Module["_PyDict_Next"] = (a0, a1, a2, a3) =>
      (_PyDict_Next = Module["_PyDict_Next"] = wasmExports["PyDict_Next"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _PyObject_CheckBuffer = (Module["_PyObject_CheckBuffer"] = (a0) =>
      (_PyObject_CheckBuffer = Module["_PyObject_CheckBuffer"] =
        wasmExports["PyObject_CheckBuffer"])(a0));
    var _PyFloat_AsDouble = (Module["_PyFloat_AsDouble"] = (a0) =>
      (_PyFloat_AsDouble = Module["_PyFloat_AsDouble"] =
        wasmExports["PyFloat_AsDouble"])(a0));
    var _python2js__default_converter = (Module[
      "_python2js__default_converter"
    ] = (a0, a1) =>
      (_python2js__default_converter = Module["_python2js__default_converter"] =
        wasmExports["python2js__default_converter"])(a0, a1));
    var _python2js_custom = (Module["_python2js_custom"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_python2js_custom = Module["_python2js_custom"] =
        wasmExports["python2js_custom"])(a0, a1, a2, a3, a4));
    var _PyLong_AsLongAndOverflow = (Module["_PyLong_AsLongAndOverflow"] = (
      a0,
      a1,
    ) =>
      (_PyLong_AsLongAndOverflow = Module["_PyLong_AsLongAndOverflow"] =
        wasmExports["PyLong_AsLongAndOverflow"])(a0, a1));
    var __PyLong_NumBits = (Module["__PyLong_NumBits"] = (a0) =>
      (__PyLong_NumBits = Module["__PyLong_NumBits"] =
        wasmExports["_PyLong_NumBits"])(a0));
    var __PyLong_AsByteArray = (Module["__PyLong_AsByteArray"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__PyLong_AsByteArray = Module["__PyLong_AsByteArray"] =
        wasmExports["_PyLong_AsByteArray"])(a0, a1, a2, a3, a4));
    var _py_version_minor = (Module["_py_version_minor"] = () =>
      (_py_version_minor = Module["_py_version_minor"] =
        wasmExports["py_version_minor"])());
    var _py_version_micro = (Module["_py_version_micro"] = () =>
      (_py_version_micro = Module["_py_version_micro"] =
        wasmExports["py_version_micro"])());
    var _saveExceptionState = (Module["_saveExceptionState"] = (a0, a1) =>
      (_saveExceptionState = Module["_saveExceptionState"] =
        wasmExports["saveExceptionState"])(a0, a1));
    var _restoreExceptionState = (Module["_restoreExceptionState"] = (a0, a1) =>
      (_restoreExceptionState = Module["_restoreExceptionState"] =
        wasmExports["restoreExceptionState"])(a0, a1));
    var _savePythonState = (Module["_savePythonState"] = (a0, a1) =>
      (_savePythonState = Module["_savePythonState"] =
        wasmExports["savePythonState"])(a0, a1));
    var _PyThreadState_GetFrame = (Module["_PyThreadState_GetFrame"] = (a0) =>
      (_PyThreadState_GetFrame = Module["_PyThreadState_GetFrame"] =
        wasmExports["PyThreadState_GetFrame"])(a0));
    var _restorePythonState = (Module["_restorePythonState"] = (a0, a1) =>
      (_restorePythonState = Module["_restorePythonState"] =
        wasmExports["restorePythonState"])(a0, a1));
    var _captureThreadState = (Module["_captureThreadState"] = () =>
      (_captureThreadState = Module["_captureThreadState"] =
        wasmExports["captureThreadState"])());
    var _PyThreadState_Get = (Module["_PyThreadState_Get"] = () =>
      (_PyThreadState_Get = Module["_PyThreadState_Get"] =
        wasmExports["PyThreadState_Get"])());
    var _restoreThreadState = (Module["_restoreThreadState"] = (a0) =>
      (_restoreThreadState = Module["_restoreThreadState"] =
        wasmExports["restoreThreadState"])(a0));
    var _get_cframe = (Module["_get_cframe"] = () =>
      (_get_cframe = Module["_get_cframe"] = wasmExports["get_cframe"])());
    var _restore_cframe = (Module["_restore_cframe"] = (a0) =>
      (_restore_cframe = Module["_restore_cframe"] =
        wasmExports["restore_cframe"])(a0));
    var _main = (Module["_main"] = (a0, a1) =>
      (_main = Module["_main"] = wasmExports["__main_argc_argv"])(a0, a1));
    var _PyImport_AppendInittab = (Module["_PyImport_AppendInittab"] = (
      a0,
      a1,
    ) =>
      (_PyImport_AppendInittab = Module["_PyImport_AppendInittab"] =
        wasmExports["PyImport_AppendInittab"])(a0, a1));
    var _PyPreConfig_InitPythonConfig = (Module[
      "_PyPreConfig_InitPythonConfig"
    ] = (a0) =>
      (_PyPreConfig_InitPythonConfig = Module["_PyPreConfig_InitPythonConfig"] =
        wasmExports["PyPreConfig_InitPythonConfig"])(a0));
    var _Py_PreInitializeFromBytesArgs = (Module[
      "_Py_PreInitializeFromBytesArgs"
    ] = (a0, a1, a2, a3) =>
      (_Py_PreInitializeFromBytesArgs = Module[
        "_Py_PreInitializeFromBytesArgs"
      ] =
        wasmExports["Py_PreInitializeFromBytesArgs"])(a0, a1, a2, a3));
    var _PyStatus_Exception = (Module["_PyStatus_Exception"] = (a0) =>
      (_PyStatus_Exception = Module["_PyStatus_Exception"] =
        wasmExports["PyStatus_Exception"])(a0));
    var _PyConfig_InitPythonConfig = (Module["_PyConfig_InitPythonConfig"] = (
      a0,
    ) =>
      (_PyConfig_InitPythonConfig = Module["_PyConfig_InitPythonConfig"] =
        wasmExports["PyConfig_InitPythonConfig"])(a0));
    var _PyConfig_SetBytesArgv = (Module["_PyConfig_SetBytesArgv"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyConfig_SetBytesArgv = Module["_PyConfig_SetBytesArgv"] =
        wasmExports["PyConfig_SetBytesArgv"])(a0, a1, a2, a3));
    var _PyConfig_SetBytesString = (Module["_PyConfig_SetBytesString"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyConfig_SetBytesString = Module["_PyConfig_SetBytesString"] =
        wasmExports["PyConfig_SetBytesString"])(a0, a1, a2, a3));
    var _Py_InitializeFromConfig = (Module["_Py_InitializeFromConfig"] = (
      a0,
      a1,
    ) =>
      (_Py_InitializeFromConfig = Module["_Py_InitializeFromConfig"] =
        wasmExports["Py_InitializeFromConfig"])(a0, a1));
    var _PyConfig_Clear = (Module["_PyConfig_Clear"] = (a0) =>
      (_PyConfig_Clear = Module["_PyConfig_Clear"] =
        wasmExports["PyConfig_Clear"])(a0));
    var _Py_ExitStatusException = (Module["_Py_ExitStatusException"] = (a0) =>
      (_Py_ExitStatusException = Module["_Py_ExitStatusException"] =
        wasmExports["Py_ExitStatusException"])(a0));
    var _run_main = (Module["_run_main"] = () =>
      (_run_main = Module["_run_main"] = wasmExports["run_main"])());
    var _Py_GetBuildInfo = (Module["_Py_GetBuildInfo"] = () =>
      (_Py_GetBuildInfo = Module["_Py_GetBuildInfo"] =
        wasmExports["Py_GetBuildInfo"])());
    var _PyOS_snprintf = (Module["_PyOS_snprintf"] = (a0, a1, a2, a3) =>
      (_PyOS_snprintf = Module["_PyOS_snprintf"] =
        wasmExports["PyOS_snprintf"])(a0, a1, a2, a3));
    var __Py_gitversion = (Module["__Py_gitversion"] = () =>
      (__Py_gitversion = Module["__Py_gitversion"] =
        wasmExports["_Py_gitversion"])());
    var __Py_gitidentifier = (Module["__Py_gitidentifier"] = () =>
      (__Py_gitidentifier = Module["__Py_gitidentifier"] =
        wasmExports["_Py_gitidentifier"])());
    var _PyToken_OneChar = (Module["_PyToken_OneChar"] = (a0) =>
      (_PyToken_OneChar = Module["_PyToken_OneChar"] =
        wasmExports["PyToken_OneChar"])(a0));
    var _PyToken_TwoChars = (Module["_PyToken_TwoChars"] = (a0, a1) =>
      (_PyToken_TwoChars = Module["_PyToken_TwoChars"] =
        wasmExports["PyToken_TwoChars"])(a0, a1));
    var _PyToken_ThreeChars = (Module["_PyToken_ThreeChars"] = (a0, a1, a2) =>
      (_PyToken_ThreeChars = Module["_PyToken_ThreeChars"] =
        wasmExports["PyToken_ThreeChars"])(a0, a1, a2));
    var _strlen = (Module["_strlen"] = (a0) =>
      (_strlen = Module["_strlen"] = wasmExports["strlen"])(a0));
    var _PyUnicode_DecodeUTF8 = (Module["_PyUnicode_DecodeUTF8"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_DecodeUTF8 = Module["_PyUnicode_DecodeUTF8"] =
        wasmExports["PyUnicode_DecodeUTF8"])(a0, a1, a2));
    var __PyArena_Malloc = (Module["__PyArena_Malloc"] = (a0, a1) =>
      (__PyArena_Malloc = Module["__PyArena_Malloc"] =
        wasmExports["_PyArena_Malloc"])(a0, a1));
    var _strncpy = (Module["_strncpy"] = (a0, a1, a2) =>
      (_strncpy = Module["_strncpy"] = wasmExports["strncpy"])(a0, a1, a2));
    var _PyMem_Realloc = (Module["_PyMem_Realloc"] = (a0, a1) =>
      (_PyMem_Realloc = Module["_PyMem_Realloc"] =
        wasmExports["PyMem_Realloc"])(a0, a1));
    var _PyMem_Calloc = (Module["_PyMem_Calloc"] = (a0, a1) =>
      (_PyMem_Calloc = Module["_PyMem_Calloc"] = wasmExports["PyMem_Calloc"])(
        a0,
        a1,
      ));
    var __PyArena_AddPyObject = (Module["__PyArena_AddPyObject"] = (a0, a1) =>
      (__PyArena_AddPyObject = Module["__PyArena_AddPyObject"] =
        wasmExports["_PyArena_AddPyObject"])(a0, a1));
    var _PyBytes_AsString = (Module["_PyBytes_AsString"] = (a0) =>
      (_PyBytes_AsString = Module["_PyBytes_AsString"] =
        wasmExports["PyBytes_AsString"])(a0));
    var _PyUnicode_InternFromString = (Module["_PyUnicode_InternFromString"] = (
      a0,
    ) =>
      (_PyUnicode_InternFromString = Module["_PyUnicode_InternFromString"] =
        wasmExports["PyUnicode_InternFromString"])(a0));
    var __PyObject_FastCall = (Module["__PyObject_FastCall"] = (a0, a1, a2) =>
      (__PyObject_FastCall = Module["__PyObject_FastCall"] =
        wasmExports["_PyObject_FastCall"])(a0, a1, a2));
    var __PyType_Name = (Module["__PyType_Name"] = (a0) =>
      (__PyType_Name = Module["__PyType_Name"] = wasmExports["_PyType_Name"])(
        a0,
      ));
    var _PyUnicode_InternInPlace = (Module["_PyUnicode_InternInPlace"] = (a0) =>
      (_PyUnicode_InternInPlace = Module["_PyUnicode_InternInPlace"] =
        wasmExports["PyUnicode_InternInPlace"])(a0));
    var _PyBytes_AsStringAndSize = (Module["_PyBytes_AsStringAndSize"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyBytes_AsStringAndSize = Module["_PyBytes_AsStringAndSize"] =
        wasmExports["PyBytes_AsStringAndSize"])(a0, a1, a2));
    var _strchr = (Module["_strchr"] = (a0, a1) =>
      (_strchr = Module["_strchr"] = wasmExports["strchr"])(a0, a1));
    var _PyUnicode_CompareWithASCIIString = (Module[
      "_PyUnicode_CompareWithASCIIString"
    ] = (a0, a1) =>
      (_PyUnicode_CompareWithASCIIString = Module[
        "_PyUnicode_CompareWithASCIIString"
      ] =
        wasmExports["PyUnicode_CompareWithASCIIString"])(a0, a1));
    var ___errno_location = () =>
      (___errno_location = wasmExports["__errno_location"])();
    var _PyOS_strtoul = (Module["_PyOS_strtoul"] = (a0, a1, a2) =>
      (_PyOS_strtoul = Module["_PyOS_strtoul"] = wasmExports["PyOS_strtoul"])(
        a0,
        a1,
        a2,
      ));
    var _PyLong_FromString = (Module["_PyLong_FromString"] = (a0, a1, a2) =>
      (_PyLong_FromString = Module["_PyLong_FromString"] =
        wasmExports["PyLong_FromString"])(a0, a1, a2));
    var _PyOS_strtol = (Module["_PyOS_strtol"] = (a0, a1, a2) =>
      (_PyOS_strtol = Module["_PyOS_strtol"] = wasmExports["PyOS_strtol"])(
        a0,
        a1,
        a2,
      ));
    var _PyOS_string_to_double = (Module["_PyOS_string_to_double"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyOS_string_to_double = Module["_PyOS_string_to_double"] =
        wasmExports["PyOS_string_to_double"])(a0, a1, a2));
    var _PyComplex_FromCComplex = (Module["_PyComplex_FromCComplex"] = (a0) =>
      (_PyComplex_FromCComplex = Module["_PyComplex_FromCComplex"] =
        wasmExports["PyComplex_FromCComplex"])(a0));
    var _PyFloat_FromDouble = (Module["_PyFloat_FromDouble"] = (a0) =>
      (_PyFloat_FromDouble = Module["_PyFloat_FromDouble"] =
        wasmExports["PyFloat_FromDouble"])(a0));
    var _Py_BuildValue = (Module["_Py_BuildValue"] = (a0, a1) =>
      (_Py_BuildValue = Module["_Py_BuildValue"] =
        wasmExports["Py_BuildValue"])(a0, a1));
    var _PyUnicode_FromFormatV = (Module["_PyUnicode_FromFormatV"] = (a0, a1) =>
      (_PyUnicode_FromFormatV = Module["_PyUnicode_FromFormatV"] =
        wasmExports["PyUnicode_FromFormatV"])(a0, a1));
    var __PyErr_ProgramDecodedTextObject = (Module[
      "__PyErr_ProgramDecodedTextObject"
    ] = (a0, a1, a2) =>
      (__PyErr_ProgramDecodedTextObject = Module[
        "__PyErr_ProgramDecodedTextObject"
      ] =
        wasmExports["_PyErr_ProgramDecodedTextObject"])(a0, a1, a2));
    var _PyUnicode_FromStringAndSize = (Module["_PyUnicode_FromStringAndSize"] =
      (a0, a1) =>
        (_PyUnicode_FromStringAndSize = Module["_PyUnicode_FromStringAndSize"] =
          wasmExports["PyUnicode_FromStringAndSize"])(a0, a1));
    var __PyUnicode_Ready = (Module["__PyUnicode_Ready"] = (a0) =>
      (__PyUnicode_Ready = Module["__PyUnicode_Ready"] =
        wasmExports["_PyUnicode_Ready"])(a0));
    var _strcpy = (Module["_strcpy"] = (a0, a1) =>
      (_strcpy = Module["_strcpy"] = wasmExports["strcpy"])(a0, a1));
    var _PyBytes_ConcatAndDel = (Module["_PyBytes_ConcatAndDel"] = (a0, a1) =>
      (_PyBytes_ConcatAndDel = Module["_PyBytes_ConcatAndDel"] =
        wasmExports["PyBytes_ConcatAndDel"])(a0, a1));
    var __PyErr_BadInternalCall = (Module["__PyErr_BadInternalCall"] = (
      a0,
      a1,
    ) =>
      (__PyErr_BadInternalCall = Module["__PyErr_BadInternalCall"] =
        wasmExports["_PyErr_BadInternalCall"])(a0, a1));
    var _PyUnicode_DecodeUTF8Stateful = (Module[
      "_PyUnicode_DecodeUTF8Stateful"
    ] = (a0, a1, a2, a3) =>
      (_PyUnicode_DecodeUTF8Stateful = Module["_PyUnicode_DecodeUTF8Stateful"] =
        wasmExports["PyUnicode_DecodeUTF8Stateful"])(a0, a1, a2, a3));
    var __PyBytes_DecodeEscape = (Module["__PyBytes_DecodeEscape"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyBytes_DecodeEscape = Module["__PyBytes_DecodeEscape"] =
        wasmExports["_PyBytes_DecodeEscape"])(a0, a1, a2, a3));
    var _siprintf = (Module["_siprintf"] = (a0, a1, a2) =>
      (_siprintf = Module["_siprintf"] = wasmExports["siprintf"])(a0, a1, a2));
    var __PyUnicode_DecodeUnicodeEscapeInternal = (Module[
      "__PyUnicode_DecodeUnicodeEscapeInternal"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyUnicode_DecodeUnicodeEscapeInternal = Module[
        "__PyUnicode_DecodeUnicodeEscapeInternal"
      ] =
        wasmExports["_PyUnicode_DecodeUnicodeEscapeInternal"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _PyUnicode_AppendAndDel = (Module["_PyUnicode_AppendAndDel"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_AppendAndDel = Module["_PyUnicode_AppendAndDel"] =
        wasmExports["PyUnicode_AppendAndDel"])(a0, a1));
    var _PyUnicode_FromFormat = (Module["_PyUnicode_FromFormat"] = (a0, a1) =>
      (_PyUnicode_FromFormat = Module["_PyUnicode_FromFormat"] =
        wasmExports["PyUnicode_FromFormat"])(a0, a1));
    var _PyErr_WarnExplicitObject = (Module["_PyErr_WarnExplicitObject"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_PyErr_WarnExplicitObject = Module["_PyErr_WarnExplicitObject"] =
        wasmExports["PyErr_WarnExplicitObject"])(a0, a1, a2, a3, a4, a5));
    var _PySys_Audit = (Module["_PySys_Audit"] = (a0, a1, a2) =>
      (_PySys_Audit = Module["_PySys_Audit"] = wasmExports["PySys_Audit"])(
        a0,
        a1,
        a2,
      ));
    var _fflush = (Module["_fflush"] = (a0) =>
      (_fflush = Module["_fflush"] = wasmExports["fflush"])(a0));
    var _fputs = (Module["_fputs"] = (a0, a1) =>
      (_fputs = Module["_fputs"] = wasmExports["fputs"])(a0, a1));
    var _PyMem_RawFree = (Module["_PyMem_RawFree"] = (a0) =>
      (_PyMem_RawFree = Module["_PyMem_RawFree"] =
        wasmExports["PyMem_RawFree"])(a0));
    var _PyEval_RestoreThread = (Module["_PyEval_RestoreThread"] = (a0) =>
      (_PyEval_RestoreThread = Module["_PyEval_RestoreThread"] =
        wasmExports["PyEval_RestoreThread"])(a0));
    var _PyEval_SaveThread = (Module["_PyEval_SaveThread"] = () =>
      (_PyEval_SaveThread = Module["_PyEval_SaveThread"] =
        wasmExports["PyEval_SaveThread"])());
    var _PyMem_RawRealloc = (Module["_PyMem_RawRealloc"] = (a0, a1) =>
      (_PyMem_RawRealloc = Module["_PyMem_RawRealloc"] =
        wasmExports["PyMem_RawRealloc"])(a0, a1));
    var _clearerr = (Module["_clearerr"] = (a0) =>
      (_clearerr = Module["_clearerr"] = wasmExports["clearerr"])(a0));
    var _fgets = (Module["_fgets"] = (a0, a1, a2) =>
      (_fgets = Module["_fgets"] = wasmExports["fgets"])(a0, a1, a2));
    var _feof = (Module["_feof"] = (a0) =>
      (_feof = Module["_feof"] = wasmExports["feof"])(a0));
    var __PyOS_InterruptOccurred = (Module["__PyOS_InterruptOccurred"] = (a0) =>
      (__PyOS_InterruptOccurred = Module["__PyOS_InterruptOccurred"] =
        wasmExports["_PyOS_InterruptOccurred"])(a0));
    var _PyErr_CheckSignals = (Module["_PyErr_CheckSignals"] = () =>
      (_PyErr_CheckSignals = Module["_PyErr_CheckSignals"] =
        wasmExports["PyErr_CheckSignals"])());
    var _PyOS_Readline = (Module["_PyOS_Readline"] = (a0, a1, a2) =>
      (_PyOS_Readline = Module["_PyOS_Readline"] =
        wasmExports["PyOS_Readline"])(a0, a1, a2));
    var _PyThread_allocate_lock = (Module["_PyThread_allocate_lock"] = () =>
      (_PyThread_allocate_lock = Module["_PyThread_allocate_lock"] =
        wasmExports["PyThread_allocate_lock"])());
    var _PyThread_acquire_lock = (Module["_PyThread_acquire_lock"] = (a0, a1) =>
      (_PyThread_acquire_lock = Module["_PyThread_acquire_lock"] =
        wasmExports["PyThread_acquire_lock"])(a0, a1));
    var _isatty = (Module["_isatty"] = (a0) =>
      (_isatty = Module["_isatty"] = wasmExports["isatty"])(a0));
    var _PyThread_release_lock = (Module["_PyThread_release_lock"] = (a0) =>
      (_PyThread_release_lock = Module["_PyThread_release_lock"] =
        wasmExports["PyThread_release_lock"])(a0));
    var _PyUnicode_Decode = (Module["_PyUnicode_Decode"] = (a0, a1, a2, a3) =>
      (_PyUnicode_Decode = Module["_PyUnicode_Decode"] =
        wasmExports["PyUnicode_Decode"])(a0, a1, a2, a3));
    var _PyUnicode_AsUTF8String = (Module["_PyUnicode_AsUTF8String"] = (a0) =>
      (_PyUnicode_AsUTF8String = Module["_PyUnicode_AsUTF8String"] =
        wasmExports["PyUnicode_AsUTF8String"])(a0));
    var __Py_FatalErrorFunc = (Module["__Py_FatalErrorFunc"] = (a0, a1) =>
      (__Py_FatalErrorFunc = Module["__Py_FatalErrorFunc"] =
        wasmExports["_Py_FatalErrorFunc"])(a0, a1));
    var _memcmp = (Module["_memcmp"] = (a0, a1, a2) =>
      (_memcmp = Module["_memcmp"] = wasmExports["memcmp"])(a0, a1, a2));
    var __PyUnicode_ScanIdentifier = (Module["__PyUnicode_ScanIdentifier"] = (
      a0,
    ) =>
      (__PyUnicode_ScanIdentifier = Module["__PyUnicode_ScanIdentifier"] =
        wasmExports["_PyUnicode_ScanIdentifier"])(a0));
    var _PyUnicode_Substring = (Module["_PyUnicode_Substring"] = (a0, a1, a2) =>
      (_PyUnicode_Substring = Module["_PyUnicode_Substring"] =
        wasmExports["PyUnicode_Substring"])(a0, a1, a2));
    var __PyUnicode_IsPrintable = (Module["__PyUnicode_IsPrintable"] = (a0) =>
      (__PyUnicode_IsPrintable = Module["__PyUnicode_IsPrintable"] =
        wasmExports["_PyUnicode_IsPrintable"])(a0));
    var _isxdigit = (Module["_isxdigit"] = (a0) =>
      (_isxdigit = Module["_isxdigit"] = wasmExports["isxdigit"])(a0));
    var __Py_dup = (Module["__Py_dup"] = (a0) =>
      (__Py_dup = Module["__Py_dup"] = wasmExports["_Py_dup"])(a0));
    var _fdopen = (Module["_fdopen"] = (a0, a1) =>
      (_fdopen = Module["_fdopen"] = wasmExports["fdopen"])(a0, a1));
    var _fclose = (Module["_fclose"] = (a0) =>
      (_fclose = Module["_fclose"] = wasmExports["fclose"])(a0));
    var _tolower = (Module["_tolower"] = (a0) =>
      (_tolower = Module["_tolower"] = wasmExports["tolower"])(a0));
    var _getc = (Module["_getc"] = (a0) =>
      (_getc = Module["_getc"] = wasmExports["getc"])(a0));
    var _ungetc = (Module["_ungetc"] = (a0, a1) =>
      (_ungetc = Module["_ungetc"] = wasmExports["ungetc"])(a0, a1));
    var _Py_UniversalNewlineFgets = (Module["_Py_UniversalNewlineFgets"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_Py_UniversalNewlineFgets = Module["_Py_UniversalNewlineFgets"] =
        wasmExports["Py_UniversalNewlineFgets"])(a0, a1, a2, a3));
    var _ftell = (Module["_ftell"] = (a0) =>
      (_ftell = Module["_ftell"] = wasmExports["ftell"])(a0));
    var _lseek = (Module["_lseek"] = (a0, a1, a2) =>
      (_lseek = Module["_lseek"] = wasmExports["lseek"])(a0, a1, a2));
    var _PyErr_SetFromErrnoWithFilename = (Module[
      "_PyErr_SetFromErrnoWithFilename"
    ] = (a0, a1) =>
      (_PyErr_SetFromErrnoWithFilename = Module[
        "_PyErr_SetFromErrnoWithFilename"
      ] =
        wasmExports["PyErr_SetFromErrnoWithFilename"])(a0, a1));
    var __PyObject_CallMethod = (Module["__PyObject_CallMethod"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyObject_CallMethod = Module["__PyObject_CallMethod"] =
        wasmExports["_PyObject_CallMethod"])(a0, a1, a2, a3));
    var _PyObject_GetAttr = (Module["_PyObject_GetAttr"] = (a0, a1) =>
      (_PyObject_GetAttr = Module["_PyObject_GetAttr"] =
        wasmExports["PyObject_GetAttr"])(a0, a1));
    var __PyObject_MakeTpCall = (Module["__PyObject_MakeTpCall"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__PyObject_MakeTpCall = Module["__PyObject_MakeTpCall"] =
        wasmExports["_PyObject_MakeTpCall"])(a0, a1, a2, a3, a4));
    var __Py_CheckFunctionResult = (Module["__Py_CheckFunctionResult"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__Py_CheckFunctionResult = Module["__Py_CheckFunctionResult"] =
        wasmExports["_Py_CheckFunctionResult"])(a0, a1, a2, a3));
    var _strcspn = (Module["_strcspn"] = (a0, a1) =>
      (_strcspn = Module["_strcspn"] = wasmExports["strcspn"])(a0, a1));
    var __Py_BuildValue_SizeT = (Module["__Py_BuildValue_SizeT"] = (a0, a1) =>
      (__Py_BuildValue_SizeT = Module["__Py_BuildValue_SizeT"] =
        wasmExports["_Py_BuildValue_SizeT"])(a0, a1));
    var _PyObject_Type = (Module["_PyObject_Type"] = (a0) =>
      (_PyObject_Type = Module["_PyObject_Type"] =
        wasmExports["PyObject_Type"])(a0));
    var __PyErr_SetString = (Module["__PyErr_SetString"] = (a0, a1, a2) =>
      (__PyErr_SetString = Module["__PyErr_SetString"] =
        wasmExports["_PyErr_SetString"])(a0, a1, a2));
    var _PyObject_Size = (Module["_PyObject_Size"] = (a0) =>
      (_PyObject_Size = Module["_PyObject_Size"] =
        wasmExports["PyObject_Size"])(a0));
    var _PyMapping_Size = (Module["_PyMapping_Size"] = (a0) =>
      (_PyMapping_Size = Module["_PyMapping_Size"] =
        wasmExports["PyMapping_Size"])(a0));
    var _PyObject_Length = (Module["_PyObject_Length"] = (a0) =>
      (_PyObject_Length = Module["_PyObject_Length"] =
        wasmExports["PyObject_Length"])(a0));
    var __PyObject_HasLen = (Module["__PyObject_HasLen"] = (a0) =>
      (__PyObject_HasLen = Module["__PyObject_HasLen"] =
        wasmExports["_PyObject_HasLen"])(a0));
    var _PyObject_LengthHint = (Module["_PyObject_LengthHint"] = (a0, a1) =>
      (_PyObject_LengthHint = Module["_PyObject_LengthHint"] =
        wasmExports["PyObject_LengthHint"])(a0, a1));
    var __PyErr_ExceptionMatches = (Module["__PyErr_ExceptionMatches"] = (
      a0,
      a1,
    ) =>
      (__PyErr_ExceptionMatches = Module["__PyErr_ExceptionMatches"] =
        wasmExports["_PyErr_ExceptionMatches"])(a0, a1));
    var __PyErr_Clear = (Module["__PyErr_Clear"] = (a0) =>
      (__PyErr_Clear = Module["__PyErr_Clear"] = wasmExports["_PyErr_Clear"])(
        a0,
      ));
    var __PyObject_LookupSpecial = (Module["__PyObject_LookupSpecial"] = (
      a0,
      a1,
    ) =>
      (__PyObject_LookupSpecial = Module["__PyObject_LookupSpecial"] =
        wasmExports["_PyObject_LookupSpecial"])(a0, a1));
    var _Py_GenericAlias = (Module["_Py_GenericAlias"] = (a0, a1) =>
      (_Py_GenericAlias = Module["_Py_GenericAlias"] =
        wasmExports["Py_GenericAlias"])(a0, a1));
    var __PyObject_LookupAttr = (Module["__PyObject_LookupAttr"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyObject_LookupAttr = Module["__PyObject_LookupAttr"] =
        wasmExports["_PyObject_LookupAttr"])(a0, a1, a2));
    var __PyLong_Sign = (Module["__PyLong_Sign"] = (a0) =>
      (__PyLong_Sign = Module["__PyLong_Sign"] = wasmExports["_PyLong_Sign"])(
        a0,
      ));
    var __PyErr_Format = (Module["__PyErr_Format"] = (a0, a1, a2, a3) =>
      (__PyErr_Format = Module["__PyErr_Format"] =
        wasmExports["_PyErr_Format"])(a0, a1, a2, a3));
    var _PySequence_SetItem = (Module["_PySequence_SetItem"] = (a0, a1, a2) =>
      (_PySequence_SetItem = Module["_PySequence_SetItem"] =
        wasmExports["PySequence_SetItem"])(a0, a1, a2));
    var _PySequence_DelItem = (Module["_PySequence_DelItem"] = (a0, a1) =>
      (_PySequence_DelItem = Module["_PySequence_DelItem"] =
        wasmExports["PySequence_DelItem"])(a0, a1));
    var _PyObject_DelItemString = (Module["_PyObject_DelItemString"] = (
      a0,
      a1,
    ) =>
      (_PyObject_DelItemString = Module["_PyObject_DelItemString"] =
        wasmExports["PyObject_DelItemString"])(a0, a1));
    var _PyObject_CheckReadBuffer = (Module["_PyObject_CheckReadBuffer"] = (
      a0,
    ) =>
      (_PyObject_CheckReadBuffer = Module["_PyObject_CheckReadBuffer"] =
        wasmExports["PyObject_CheckReadBuffer"])(a0));
    var _PyObject_AsCharBuffer = (Module["_PyObject_AsCharBuffer"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_AsCharBuffer = Module["_PyObject_AsCharBuffer"] =
        wasmExports["PyObject_AsCharBuffer"])(a0, a1, a2));
    var _PyObject_AsReadBuffer = (Module["_PyObject_AsReadBuffer"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_AsReadBuffer = Module["_PyObject_AsReadBuffer"] =
        wasmExports["PyObject_AsReadBuffer"])(a0, a1, a2));
    var _PyObject_AsWriteBuffer = (Module["_PyObject_AsWriteBuffer"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_AsWriteBuffer = Module["_PyObject_AsWriteBuffer"] =
        wasmExports["PyObject_AsWriteBuffer"])(a0, a1, a2));
    var _PyBuffer_GetPointer = (Module["_PyBuffer_GetPointer"] = (a0, a1) =>
      (_PyBuffer_GetPointer = Module["_PyBuffer_GetPointer"] =
        wasmExports["PyBuffer_GetPointer"])(a0, a1));
    var __Py_add_one_to_index_F = (Module["__Py_add_one_to_index_F"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_add_one_to_index_F = Module["__Py_add_one_to_index_F"] =
        wasmExports["_Py_add_one_to_index_F"])(a0, a1, a2));
    var __Py_add_one_to_index_C = (Module["__Py_add_one_to_index_C"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_add_one_to_index_C = Module["__Py_add_one_to_index_C"] =
        wasmExports["_Py_add_one_to_index_C"])(a0, a1, a2));
    var _PyBuffer_SizeFromFormat = (Module["_PyBuffer_SizeFromFormat"] = (a0) =>
      (_PyBuffer_SizeFromFormat = Module["_PyBuffer_SizeFromFormat"] =
        wasmExports["PyBuffer_SizeFromFormat"])(a0));
    var _PyObject_CallFunctionObjArgs = (Module[
      "_PyObject_CallFunctionObjArgs"
    ] = (a0, a1) =>
      (_PyObject_CallFunctionObjArgs = Module["_PyObject_CallFunctionObjArgs"] =
        wasmExports["PyObject_CallFunctionObjArgs"])(a0, a1));
    var _PyBuffer_FromContiguous = (Module["_PyBuffer_FromContiguous"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyBuffer_FromContiguous = Module["_PyBuffer_FromContiguous"] =
        wasmExports["PyBuffer_FromContiguous"])(a0, a1, a2, a3));
    var _memset = (Module["_memset"] = (a0, a1, a2) =>
      (_memset = Module["_memset"] = wasmExports["memset"])(a0, a1, a2));
    var _PyObject_CopyData = (Module["_PyObject_CopyData"] = (a0, a1) =>
      (_PyObject_CopyData = Module["_PyObject_CopyData"] =
        wasmExports["PyObject_CopyData"])(a0, a1));
    var _PyBuffer_FillInfo = (Module["_PyBuffer_FillInfo"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_PyBuffer_FillInfo = Module["_PyBuffer_FillInfo"] =
        wasmExports["PyBuffer_FillInfo"])(a0, a1, a2, a3, a4, a5));
    var _PyObject_Format = (Module["_PyObject_Format"] = (a0, a1) =>
      (_PyObject_Format = Module["_PyObject_Format"] =
        wasmExports["PyObject_Format"])(a0, a1));
    var _PyNumber_Check = (Module["_PyNumber_Check"] = (a0) =>
      (_PyNumber_Check = Module["_PyNumber_Check"] =
        wasmExports["PyNumber_Check"])(a0));
    var _PyNumber_Or = (Module["_PyNumber_Or"] = (a0, a1) =>
      (_PyNumber_Or = Module["_PyNumber_Or"] = wasmExports["PyNumber_Or"])(
        a0,
        a1,
      ));
    var _PyNumber_Xor = (Module["_PyNumber_Xor"] = (a0, a1) =>
      (_PyNumber_Xor = Module["_PyNumber_Xor"] = wasmExports["PyNumber_Xor"])(
        a0,
        a1,
      ));
    var _PyNumber_And = (Module["_PyNumber_And"] = (a0, a1) =>
      (_PyNumber_And = Module["_PyNumber_And"] = wasmExports["PyNumber_And"])(
        a0,
        a1,
      ));
    var _PyNumber_Lshift = (Module["_PyNumber_Lshift"] = (a0, a1) =>
      (_PyNumber_Lshift = Module["_PyNumber_Lshift"] =
        wasmExports["PyNumber_Lshift"])(a0, a1));
    var _PyNumber_Rshift = (Module["_PyNumber_Rshift"] = (a0, a1) =>
      (_PyNumber_Rshift = Module["_PyNumber_Rshift"] =
        wasmExports["PyNumber_Rshift"])(a0, a1));
    var _PyNumber_Subtract = (Module["_PyNumber_Subtract"] = (a0, a1) =>
      (_PyNumber_Subtract = Module["_PyNumber_Subtract"] =
        wasmExports["PyNumber_Subtract"])(a0, a1));
    var _PyNumber_Divmod = (Module["_PyNumber_Divmod"] = (a0, a1) =>
      (_PyNumber_Divmod = Module["_PyNumber_Divmod"] =
        wasmExports["PyNumber_Divmod"])(a0, a1));
    var _PyNumber_Add = (Module["_PyNumber_Add"] = (a0, a1) =>
      (_PyNumber_Add = Module["_PyNumber_Add"] = wasmExports["PyNumber_Add"])(
        a0,
        a1,
      ));
    var _PyNumber_Multiply = (Module["_PyNumber_Multiply"] = (a0, a1) =>
      (_PyNumber_Multiply = Module["_PyNumber_Multiply"] =
        wasmExports["PyNumber_Multiply"])(a0, a1));
    var _PyNumber_MatrixMultiply = (Module["_PyNumber_MatrixMultiply"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_MatrixMultiply = Module["_PyNumber_MatrixMultiply"] =
        wasmExports["PyNumber_MatrixMultiply"])(a0, a1));
    var _PyNumber_FloorDivide = (Module["_PyNumber_FloorDivide"] = (a0, a1) =>
      (_PyNumber_FloorDivide = Module["_PyNumber_FloorDivide"] =
        wasmExports["PyNumber_FloorDivide"])(a0, a1));
    var _PyNumber_TrueDivide = (Module["_PyNumber_TrueDivide"] = (a0, a1) =>
      (_PyNumber_TrueDivide = Module["_PyNumber_TrueDivide"] =
        wasmExports["PyNumber_TrueDivide"])(a0, a1));
    var _PyNumber_Remainder = (Module["_PyNumber_Remainder"] = (a0, a1) =>
      (_PyNumber_Remainder = Module["_PyNumber_Remainder"] =
        wasmExports["PyNumber_Remainder"])(a0, a1));
    var _PyNumber_Power = (Module["_PyNumber_Power"] = (a0, a1, a2) =>
      (_PyNumber_Power = Module["_PyNumber_Power"] =
        wasmExports["PyNumber_Power"])(a0, a1, a2));
    var _PyNumber_InPlaceOr = (Module["_PyNumber_InPlaceOr"] = (a0, a1) =>
      (_PyNumber_InPlaceOr = Module["_PyNumber_InPlaceOr"] =
        wasmExports["PyNumber_InPlaceOr"])(a0, a1));
    var _PyNumber_InPlaceXor = (Module["_PyNumber_InPlaceXor"] = (a0, a1) =>
      (_PyNumber_InPlaceXor = Module["_PyNumber_InPlaceXor"] =
        wasmExports["PyNumber_InPlaceXor"])(a0, a1));
    var _PyNumber_InPlaceAnd = (Module["_PyNumber_InPlaceAnd"] = (a0, a1) =>
      (_PyNumber_InPlaceAnd = Module["_PyNumber_InPlaceAnd"] =
        wasmExports["PyNumber_InPlaceAnd"])(a0, a1));
    var _PyNumber_InPlaceLshift = (Module["_PyNumber_InPlaceLshift"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_InPlaceLshift = Module["_PyNumber_InPlaceLshift"] =
        wasmExports["PyNumber_InPlaceLshift"])(a0, a1));
    var _PyNumber_InPlaceRshift = (Module["_PyNumber_InPlaceRshift"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_InPlaceRshift = Module["_PyNumber_InPlaceRshift"] =
        wasmExports["PyNumber_InPlaceRshift"])(a0, a1));
    var _PyNumber_InPlaceSubtract = (Module["_PyNumber_InPlaceSubtract"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_InPlaceSubtract = Module["_PyNumber_InPlaceSubtract"] =
        wasmExports["PyNumber_InPlaceSubtract"])(a0, a1));
    var _PyNumber_InPlaceMatrixMultiply = (Module[
      "_PyNumber_InPlaceMatrixMultiply"
    ] = (a0, a1) =>
      (_PyNumber_InPlaceMatrixMultiply = Module[
        "_PyNumber_InPlaceMatrixMultiply"
      ] =
        wasmExports["PyNumber_InPlaceMatrixMultiply"])(a0, a1));
    var _PyNumber_InPlaceFloorDivide = (Module["_PyNumber_InPlaceFloorDivide"] =
      (a0, a1) =>
        (_PyNumber_InPlaceFloorDivide = Module["_PyNumber_InPlaceFloorDivide"] =
          wasmExports["PyNumber_InPlaceFloorDivide"])(a0, a1));
    var _PyNumber_InPlaceTrueDivide = (Module["_PyNumber_InPlaceTrueDivide"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_InPlaceTrueDivide = Module["_PyNumber_InPlaceTrueDivide"] =
        wasmExports["PyNumber_InPlaceTrueDivide"])(a0, a1));
    var _PyNumber_InPlaceRemainder = (Module["_PyNumber_InPlaceRemainder"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_InPlaceRemainder = Module["_PyNumber_InPlaceRemainder"] =
        wasmExports["PyNumber_InPlaceRemainder"])(a0, a1));
    var _PyNumber_InPlaceAdd = (Module["_PyNumber_InPlaceAdd"] = (a0, a1) =>
      (_PyNumber_InPlaceAdd = Module["_PyNumber_InPlaceAdd"] =
        wasmExports["PyNumber_InPlaceAdd"])(a0, a1));
    var _PyNumber_InPlaceMultiply = (Module["_PyNumber_InPlaceMultiply"] = (
      a0,
      a1,
    ) =>
      (_PyNumber_InPlaceMultiply = Module["_PyNumber_InPlaceMultiply"] =
        wasmExports["PyNumber_InPlaceMultiply"])(a0, a1));
    var _PyNumber_InPlacePower = (Module["_PyNumber_InPlacePower"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyNumber_InPlacePower = Module["_PyNumber_InPlacePower"] =
        wasmExports["PyNumber_InPlacePower"])(a0, a1, a2));
    var _PyNumber_Negative = (Module["_PyNumber_Negative"] = (a0) =>
      (_PyNumber_Negative = Module["_PyNumber_Negative"] =
        wasmExports["PyNumber_Negative"])(a0));
    var _PyNumber_Positive = (Module["_PyNumber_Positive"] = (a0) =>
      (_PyNumber_Positive = Module["_PyNumber_Positive"] =
        wasmExports["PyNumber_Positive"])(a0));
    var _PyNumber_Invert = (Module["_PyNumber_Invert"] = (a0) =>
      (_PyNumber_Invert = Module["_PyNumber_Invert"] =
        wasmExports["PyNumber_Invert"])(a0));
    var _PyNumber_Absolute = (Module["_PyNumber_Absolute"] = (a0) =>
      (_PyNumber_Absolute = Module["_PyNumber_Absolute"] =
        wasmExports["PyNumber_Absolute"])(a0));
    var _PyErr_WarnFormat = (Module["_PyErr_WarnFormat"] = (a0, a1, a2, a3) =>
      (_PyErr_WarnFormat = Module["_PyErr_WarnFormat"] =
        wasmExports["PyErr_WarnFormat"])(a0, a1, a2, a3));
    var _PyNumber_Index = (Module["_PyNumber_Index"] = (a0) =>
      (_PyNumber_Index = Module["_PyNumber_Index"] =
        wasmExports["PyNumber_Index"])(a0));
    var __PyLong_Copy = (Module["__PyLong_Copy"] = (a0) =>
      (__PyLong_Copy = Module["__PyLong_Copy"] = wasmExports["_PyLong_Copy"])(
        a0,
      ));
    var _PyNumber_Long = (Module["_PyNumber_Long"] = (a0) =>
      (_PyNumber_Long = Module["_PyNumber_Long"] =
        wasmExports["PyNumber_Long"])(a0));
    var _PyErr_WarnEx = (Module["_PyErr_WarnEx"] = (a0, a1, a2) =>
      (_PyErr_WarnEx = Module["_PyErr_WarnEx"] = wasmExports["PyErr_WarnEx"])(
        a0,
        a1,
        a2,
      ));
    var _PyLong_FromUnicodeObject = (Module["_PyLong_FromUnicodeObject"] = (
      a0,
      a1,
    ) =>
      (_PyLong_FromUnicodeObject = Module["_PyLong_FromUnicodeObject"] =
        wasmExports["PyLong_FromUnicodeObject"])(a0, a1));
    var __PyLong_FromBytes = (Module["__PyLong_FromBytes"] = (a0, a1, a2) =>
      (__PyLong_FromBytes = Module["__PyLong_FromBytes"] =
        wasmExports["_PyLong_FromBytes"])(a0, a1, a2));
    var _PyNumber_Float = (Module["_PyNumber_Float"] = (a0) =>
      (_PyNumber_Float = Module["_PyNumber_Float"] =
        wasmExports["PyNumber_Float"])(a0));
    var _PyLong_AsDouble = (Module["_PyLong_AsDouble"] = (a0) =>
      (_PyLong_AsDouble = Module["_PyLong_AsDouble"] =
        wasmExports["PyLong_AsDouble"])(a0));
    var _PyFloat_FromString = (Module["_PyFloat_FromString"] = (a0) =>
      (_PyFloat_FromString = Module["_PyFloat_FromString"] =
        wasmExports["PyFloat_FromString"])(a0));
    var _PyNumber_ToBase = (Module["_PyNumber_ToBase"] = (a0, a1) =>
      (_PyNumber_ToBase = Module["_PyNumber_ToBase"] =
        wasmExports["PyNumber_ToBase"])(a0, a1));
    var __PyLong_Format = (Module["__PyLong_Format"] = (a0, a1) =>
      (__PyLong_Format = Module["__PyLong_Format"] =
        wasmExports["_PyLong_Format"])(a0, a1));
    var _PySequence_Check = (Module["_PySequence_Check"] = (a0) =>
      (_PySequence_Check = Module["_PySequence_Check"] =
        wasmExports["PySequence_Check"])(a0));
    var _PySequence_Length = (Module["_PySequence_Length"] = (a0) =>
      (_PySequence_Length = Module["_PySequence_Length"] =
        wasmExports["PySequence_Length"])(a0));
    var _PySequence_Concat = (Module["_PySequence_Concat"] = (a0, a1) =>
      (_PySequence_Concat = Module["_PySequence_Concat"] =
        wasmExports["PySequence_Concat"])(a0, a1));
    var _PySequence_Repeat = (Module["_PySequence_Repeat"] = (a0, a1) =>
      (_PySequence_Repeat = Module["_PySequence_Repeat"] =
        wasmExports["PySequence_Repeat"])(a0, a1));
    var _PySequence_InPlaceConcat = (Module["_PySequence_InPlaceConcat"] = (
      a0,
      a1,
    ) =>
      (_PySequence_InPlaceConcat = Module["_PySequence_InPlaceConcat"] =
        wasmExports["PySequence_InPlaceConcat"])(a0, a1));
    var _PySequence_InPlaceRepeat = (Module["_PySequence_InPlaceRepeat"] = (
      a0,
      a1,
    ) =>
      (_PySequence_InPlaceRepeat = Module["_PySequence_InPlaceRepeat"] =
        wasmExports["PySequence_InPlaceRepeat"])(a0, a1));
    var __PySlice_FromIndices = (Module["__PySlice_FromIndices"] = (a0, a1) =>
      (__PySlice_FromIndices = Module["__PySlice_FromIndices"] =
        wasmExports["_PySlice_FromIndices"])(a0, a1));
    var _PySequence_DelSlice = (Module["_PySequence_DelSlice"] = (a0, a1, a2) =>
      (_PySequence_DelSlice = Module["_PySequence_DelSlice"] =
        wasmExports["PySequence_DelSlice"])(a0, a1, a2));
    var _PySequence_Tuple = (Module["_PySequence_Tuple"] = (a0) =>
      (_PySequence_Tuple = Module["_PySequence_Tuple"] =
        wasmExports["PySequence_Tuple"])(a0));
    var _PyList_AsTuple = (Module["_PyList_AsTuple"] = (a0) =>
      (_PyList_AsTuple = Module["_PyList_AsTuple"] =
        wasmExports["PyList_AsTuple"])(a0));
    var __PyTuple_Resize = (Module["__PyTuple_Resize"] = (a0, a1) =>
      (__PyTuple_Resize = Module["__PyTuple_Resize"] =
        wasmExports["_PyTuple_Resize"])(a0, a1));
    var _PySeqIter_New = (Module["_PySeqIter_New"] = (a0) =>
      (_PySeqIter_New = Module["_PySeqIter_New"] =
        wasmExports["PySeqIter_New"])(a0));
    var _PySequence_List = (Module["_PySequence_List"] = (a0) =>
      (_PySequence_List = Module["_PySequence_List"] =
        wasmExports["PySequence_List"])(a0));
    var __PySequence_IterSearch = (Module["__PySequence_IterSearch"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PySequence_IterSearch = Module["__PySequence_IterSearch"] =
        wasmExports["_PySequence_IterSearch"])(a0, a1, a2));
    var _PySequence_Count = (Module["_PySequence_Count"] = (a0, a1) =>
      (_PySequence_Count = Module["_PySequence_Count"] =
        wasmExports["PySequence_Count"])(a0, a1));
    var _PySequence_In = (Module["_PySequence_In"] = (a0, a1) =>
      (_PySequence_In = Module["_PySequence_In"] =
        wasmExports["PySequence_In"])(a0, a1));
    var _PySequence_Index = (Module["_PySequence_Index"] = (a0, a1) =>
      (_PySequence_Index = Module["_PySequence_Index"] =
        wasmExports["PySequence_Index"])(a0, a1));
    var _PyMapping_Check = (Module["_PyMapping_Check"] = (a0) =>
      (_PyMapping_Check = Module["_PyMapping_Check"] =
        wasmExports["PyMapping_Check"])(a0));
    var _PyMapping_Length = (Module["_PyMapping_Length"] = (a0) =>
      (_PyMapping_Length = Module["_PyMapping_Length"] =
        wasmExports["PyMapping_Length"])(a0));
    var _PyMapping_GetItemString = (Module["_PyMapping_GetItemString"] = (
      a0,
      a1,
    ) =>
      (_PyMapping_GetItemString = Module["_PyMapping_GetItemString"] =
        wasmExports["PyMapping_GetItemString"])(a0, a1));
    var _PyMapping_SetItemString = (Module["_PyMapping_SetItemString"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyMapping_SetItemString = Module["_PyMapping_SetItemString"] =
        wasmExports["PyMapping_SetItemString"])(a0, a1, a2));
    var _PyMapping_HasKeyString = (Module["_PyMapping_HasKeyString"] = (
      a0,
      a1,
    ) =>
      (_PyMapping_HasKeyString = Module["_PyMapping_HasKeyString"] =
        wasmExports["PyMapping_HasKeyString"])(a0, a1));
    var _PyMapping_HasKey = (Module["_PyMapping_HasKey"] = (a0, a1) =>
      (_PyMapping_HasKey = Module["_PyMapping_HasKey"] =
        wasmExports["PyMapping_HasKey"])(a0, a1));
    var _PyMapping_Keys = (Module["_PyMapping_Keys"] = (a0) =>
      (_PyMapping_Keys = Module["_PyMapping_Keys"] =
        wasmExports["PyMapping_Keys"])(a0));
    var _PyDict_Keys = (Module["_PyDict_Keys"] = (a0) =>
      (_PyDict_Keys = Module["_PyDict_Keys"] = wasmExports["PyDict_Keys"])(a0));
    var _PyMapping_Items = (Module["_PyMapping_Items"] = (a0) =>
      (_PyMapping_Items = Module["_PyMapping_Items"] =
        wasmExports["PyMapping_Items"])(a0));
    var _PyDict_Items = (Module["_PyDict_Items"] = (a0) =>
      (_PyDict_Items = Module["_PyDict_Items"] = wasmExports["PyDict_Items"])(
        a0,
      ));
    var _PyMapping_Values = (Module["_PyMapping_Values"] = (a0) =>
      (_PyMapping_Values = Module["_PyMapping_Values"] =
        wasmExports["PyMapping_Values"])(a0));
    var _PyDict_Values = (Module["_PyDict_Values"] = (a0) =>
      (_PyDict_Values = Module["_PyDict_Values"] =
        wasmExports["PyDict_Values"])(a0));
    var _PyObject_IsInstance = (Module["_PyObject_IsInstance"] = (a0, a1) =>
      (_PyObject_IsInstance = Module["_PyObject_IsInstance"] =
        wasmExports["PyObject_IsInstance"])(a0, a1));
    var __Py_CheckRecursiveCall = (Module["__Py_CheckRecursiveCall"] = (
      a0,
      a1,
    ) =>
      (__Py_CheckRecursiveCall = Module["__Py_CheckRecursiveCall"] =
        wasmExports["_Py_CheckRecursiveCall"])(a0, a1));
    var _PyObject_IsTrue = (Module["_PyObject_IsTrue"] = (a0) =>
      (_PyObject_IsTrue = Module["_PyObject_IsTrue"] =
        wasmExports["PyObject_IsTrue"])(a0));
    var __PyObject_RealIsInstance = (Module["__PyObject_RealIsInstance"] = (
      a0,
      a1,
    ) =>
      (__PyObject_RealIsInstance = Module["__PyObject_RealIsInstance"] =
        wasmExports["_PyObject_RealIsInstance"])(a0, a1));
    var __PyObject_RealIsSubclass = (Module["__PyObject_RealIsSubclass"] = (
      a0,
      a1,
    ) =>
      (__PyObject_RealIsSubclass = Module["__PyObject_RealIsSubclass"] =
        wasmExports["_PyObject_RealIsSubclass"])(a0, a1));
    var _PyIter_Check = (Module["_PyIter_Check"] = (a0) =>
      (_PyIter_Check = Module["_PyIter_Check"] = wasmExports["PyIter_Check"])(
        a0,
      ));
    var _PyObject_GetAIter = (Module["_PyObject_GetAIter"] = (a0) =>
      (_PyObject_GetAIter = Module["_PyObject_GetAIter"] =
        wasmExports["PyObject_GetAIter"])(a0));
    var _PyAIter_Check = (Module["_PyAIter_Check"] = (a0) =>
      (_PyAIter_Check = Module["_PyAIter_Check"] =
        wasmExports["PyAIter_Check"])(a0));
    var __PySequence_BytesToCharpArray = (Module[
      "__PySequence_BytesToCharpArray"
    ] = (a0) =>
      (__PySequence_BytesToCharpArray = Module[
        "__PySequence_BytesToCharpArray"
      ] =
        wasmExports["_PySequence_BytesToCharpArray"])(a0));
    var __Py_FreeCharPArray = (Module["__Py_FreeCharPArray"] = (a0) =>
      (__Py_FreeCharPArray = Module["__Py_FreeCharPArray"] =
        wasmExports["_Py_FreeCharPArray"])(a0));
    var __PyAccu_Init = (Module["__PyAccu_Init"] = (a0) =>
      (__PyAccu_Init = Module["__PyAccu_Init"] = wasmExports["_PyAccu_Init"])(
        a0,
      ));
    var __PyAccu_Accumulate = (Module["__PyAccu_Accumulate"] = (a0, a1) =>
      (__PyAccu_Accumulate = Module["__PyAccu_Accumulate"] =
        wasmExports["_PyAccu_Accumulate"])(a0, a1));
    var _PyList_Append = (Module["_PyList_Append"] = (a0, a1) =>
      (_PyList_Append = Module["_PyList_Append"] =
        wasmExports["PyList_Append"])(a0, a1));
    var _PyList_SetSlice = (Module["_PyList_SetSlice"] = (a0, a1, a2, a3) =>
      (_PyList_SetSlice = Module["_PyList_SetSlice"] =
        wasmExports["PyList_SetSlice"])(a0, a1, a2, a3));
    var __PyAccu_FinishAsList = (Module["__PyAccu_FinishAsList"] = (a0) =>
      (__PyAccu_FinishAsList = Module["__PyAccu_FinishAsList"] =
        wasmExports["_PyAccu_FinishAsList"])(a0));
    var __PyAccu_Finish = (Module["__PyAccu_Finish"] = (a0) =>
      (__PyAccu_Finish = Module["__PyAccu_Finish"] =
        wasmExports["_PyAccu_Finish"])(a0));
    var __PyAccu_Destroy = (Module["__PyAccu_Destroy"] = (a0) =>
      (__PyAccu_Destroy = Module["__PyAccu_Destroy"] =
        wasmExports["_PyAccu_Destroy"])(a0));
    var _PyBool_FromLong = (Module["_PyBool_FromLong"] = (a0) =>
      (_PyBool_FromLong = Module["_PyBool_FromLong"] =
        wasmExports["PyBool_FromLong"])(a0));
    var __Py_FatalRefcountErrorFunc = (Module["__Py_FatalRefcountErrorFunc"] = (
      a0,
      a1,
    ) =>
      (__Py_FatalRefcountErrorFunc = Module["__Py_FatalRefcountErrorFunc"] =
        wasmExports["_Py_FatalRefcountErrorFunc"])(a0, a1));
    var __PyArg_NoKeywords = (Module["__PyArg_NoKeywords"] = (a0, a1) =>
      (__PyArg_NoKeywords = Module["__PyArg_NoKeywords"] =
        wasmExports["_PyArg_NoKeywords"])(a0, a1));
    var __PyArg_NoKwnames = (Module["__PyArg_NoKwnames"] = (a0, a1) =>
      (__PyArg_NoKwnames = Module["__PyArg_NoKwnames"] =
        wasmExports["_PyArg_NoKwnames"])(a0, a1));
    var _memrchr = (Module["_memrchr"] = (a0, a1, a2) =>
      (_memrchr = Module["_memrchr"] = wasmExports["memrchr"])(a0, a1, a2));
    var _memchr = (Module["_memchr"] = (a0, a1, a2) =>
      (_memchr = Module["_memchr"] = wasmExports["memchr"])(a0, a1, a2));
    var __PyEval_SliceIndex = (Module["__PyEval_SliceIndex"] = (a0, a1) =>
      (__PyEval_SliceIndex = Module["__PyEval_SliceIndex"] =
        wasmExports["_PyEval_SliceIndex"])(a0, a1));
    var _PyByteArray_FromObject = (Module["_PyByteArray_FromObject"] = (a0) =>
      (_PyByteArray_FromObject = Module["_PyByteArray_FromObject"] =
        wasmExports["PyByteArray_FromObject"])(a0));
    var _PyByteArray_FromStringAndSize = (Module[
      "_PyByteArray_FromStringAndSize"
    ] = (a0, a1) =>
      (_PyByteArray_FromStringAndSize = Module[
        "_PyByteArray_FromStringAndSize"
      ] =
        wasmExports["PyByteArray_FromStringAndSize"])(a0, a1));
    var __PyObject_New = (Module["__PyObject_New"] = (a0) =>
      (__PyObject_New = Module["__PyObject_New"] =
        wasmExports["_PyObject_New"])(a0));
    var _PyObject_Malloc = (Module["_PyObject_Malloc"] = (a0) =>
      (_PyObject_Malloc = Module["_PyObject_Malloc"] =
        wasmExports["PyObject_Malloc"])(a0));
    var _PyByteArray_Size = (Module["_PyByteArray_Size"] = (a0) =>
      (_PyByteArray_Size = Module["_PyByteArray_Size"] =
        wasmExports["PyByteArray_Size"])(a0));
    var _PyByteArray_AsString = (Module["_PyByteArray_AsString"] = (a0) =>
      (_PyByteArray_AsString = Module["_PyByteArray_AsString"] =
        wasmExports["PyByteArray_AsString"])(a0));
    var _PyByteArray_Resize = (Module["_PyByteArray_Resize"] = (a0, a1) =>
      (_PyByteArray_Resize = Module["_PyByteArray_Resize"] =
        wasmExports["PyByteArray_Resize"])(a0, a1));
    var _PyObject_Free = (Module["_PyObject_Free"] = (a0) =>
      (_PyObject_Free = Module["_PyObject_Free"] =
        wasmExports["PyObject_Free"])(a0));
    var _PyObject_Realloc = (Module["_PyObject_Realloc"] = (a0, a1) =>
      (_PyObject_Realloc = Module["_PyObject_Realloc"] =
        wasmExports["PyObject_Realloc"])(a0, a1));
    var _PyByteArray_Concat = (Module["_PyByteArray_Concat"] = (a0, a1) =>
      (_PyByteArray_Concat = Module["_PyByteArray_Concat"] =
        wasmExports["PyByteArray_Concat"])(a0, a1));
    var __Py_GetConfig = (Module["__Py_GetConfig"] = () =>
      (__Py_GetConfig = Module["__Py_GetConfig"] =
        wasmExports["_Py_GetConfig"])());
    var __PyObject_GC_New = (Module["__PyObject_GC_New"] = (a0) =>
      (__PyObject_GC_New = Module["__PyObject_GC_New"] =
        wasmExports["_PyObject_GC_New"])(a0));
    var __PyArg_UnpackKeywords = (Module["__PyArg_UnpackKeywords"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
    ) =>
      (__PyArg_UnpackKeywords = Module["__PyArg_UnpackKeywords"] =
        wasmExports["_PyArg_UnpackKeywords"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var __PyArg_BadArgument = (Module["__PyArg_BadArgument"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyArg_BadArgument = Module["__PyArg_BadArgument"] =
        wasmExports["_PyArg_BadArgument"])(a0, a1, a2, a3));
    var _PyUnicode_AsEncodedString = (Module["_PyUnicode_AsEncodedString"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_AsEncodedString = Module["_PyUnicode_AsEncodedString"] =
        wasmExports["PyUnicode_AsEncodedString"])(a0, a1, a2));
    var _PyBuffer_ToContiguous = (Module["_PyBuffer_ToContiguous"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyBuffer_ToContiguous = Module["_PyBuffer_ToContiguous"] =
        wasmExports["PyBuffer_ToContiguous"])(a0, a1, a2, a3));
    var _PyObject_GC_Del = (Module["_PyObject_GC_Del"] = (a0) =>
      (_PyObject_GC_Del = Module["_PyObject_GC_Del"] =
        wasmExports["PyObject_GC_Del"])(a0));
    var __PyBytes_FormatEx = (Module["__PyBytes_FormatEx"] = (a0, a1, a2, a3) =>
      (__PyBytes_FormatEx = Module["__PyBytes_FormatEx"] =
        wasmExports["_PyBytes_FormatEx"])(a0, a1, a2, a3));
    var __PyBytes_Repeat = (Module["__PyBytes_Repeat"] = (a0, a1, a2, a3) =>
      (__PyBytes_Repeat = Module["__PyBytes_Repeat"] =
        wasmExports["_PyBytes_Repeat"])(a0, a1, a2, a3));
    var _memmove = (Module["_memmove"] = (a0, a1, a2) =>
      (_memmove = Module["_memmove"] = wasmExports["memmove"])(a0, a1, a2));
    var __PyObject_GetState = (Module["__PyObject_GetState"] = (a0) =>
      (__PyObject_GetState = Module["__PyObject_GetState"] =
        wasmExports["_PyObject_GetState"])(a0));
    var _PyUnicode_DecodeLatin1 = (Module["_PyUnicode_DecodeLatin1"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_DecodeLatin1 = Module["_PyUnicode_DecodeLatin1"] =
        wasmExports["PyUnicode_DecodeLatin1"])(a0, a1, a2));
    var __PyLong_AsInt = (Module["__PyLong_AsInt"] = (a0) =>
      (__PyLong_AsInt = Module["__PyLong_AsInt"] =
        wasmExports["_PyLong_AsInt"])(a0));
    var _PyUnicode_GetDefaultEncoding = (Module[
      "_PyUnicode_GetDefaultEncoding"
    ] = () =>
      (_PyUnicode_GetDefaultEncoding = Module["_PyUnicode_GetDefaultEncoding"] =
        wasmExports["PyUnicode_GetDefaultEncoding"])());
    var _PyUnicode_FromEncodedObject = (Module["_PyUnicode_FromEncodedObject"] =
      (a0, a1, a2) =>
        (_PyUnicode_FromEncodedObject = Module["_PyUnicode_FromEncodedObject"] =
          wasmExports["PyUnicode_FromEncodedObject"])(a0, a1, a2));
    var __PyBytes_FromHex = (Module["__PyBytes_FromHex"] = (a0, a1) =>
      (__PyBytes_FromHex = Module["__PyBytes_FromHex"] =
        wasmExports["_PyBytes_FromHex"])(a0, a1));
    var __Py_strhex_with_sep = (Module["__Py_strhex_with_sep"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__Py_strhex_with_sep = Module["__Py_strhex_with_sep"] =
        wasmExports["_Py_strhex_with_sep"])(a0, a1, a2, a3));
    var _PyList_Reverse = (Module["_PyList_Reverse"] = (a0) =>
      (_PyList_Reverse = Module["_PyList_Reverse"] =
        wasmExports["PyList_Reverse"])(a0));
    var __PyEval_GetBuiltin = (Module["__PyEval_GetBuiltin"] = (a0) =>
      (__PyEval_GetBuiltin = Module["__PyEval_GetBuiltin"] =
        wasmExports["_PyEval_GetBuiltin"])(a0));
    var _PyType_GenericAlloc = (Module["_PyType_GenericAlloc"] = (a0, a1) =>
      (_PyType_GenericAlloc = Module["_PyType_GenericAlloc"] =
        wasmExports["PyType_GenericAlloc"])(a0, a1));
    var _PyType_GenericNew = (Module["_PyType_GenericNew"] = (a0, a1, a2) =>
      (_PyType_GenericNew = Module["_PyType_GenericNew"] =
        wasmExports["PyType_GenericNew"])(a0, a1, a2));
    var __Py_NewReference = (Module["__Py_NewReference"] = (a0) =>
      (__Py_NewReference = Module["__Py_NewReference"] =
        wasmExports["_Py_NewReference"])(a0));
    var _PyObject_Calloc = (Module["_PyObject_Calloc"] = (a0, a1) =>
      (_PyObject_Calloc = Module["_PyObject_Calloc"] =
        wasmExports["PyObject_Calloc"])(a0, a1));
    var _PyBytes_FromString = (Module["_PyBytes_FromString"] = (a0) =>
      (_PyBytes_FromString = Module["_PyBytes_FromString"] =
        wasmExports["PyBytes_FromString"])(a0));
    var _PyBytes_FromFormatV = (Module["_PyBytes_FromFormatV"] = (a0, a1) =>
      (_PyBytes_FromFormatV = Module["_PyBytes_FromFormatV"] =
        wasmExports["PyBytes_FromFormatV"])(a0, a1));
    var __PyBytesWriter_Resize = (Module["__PyBytesWriter_Resize"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyBytesWriter_Resize = Module["__PyBytesWriter_Resize"] =
        wasmExports["_PyBytesWriter_Resize"])(a0, a1, a2));
    var __PyBytesWriter_Finish = (Module["__PyBytesWriter_Finish"] = (a0, a1) =>
      (__PyBytesWriter_Finish = Module["__PyBytesWriter_Finish"] =
        wasmExports["_PyBytesWriter_Finish"])(a0, a1));
    var __PyBytesWriter_Init = (Module["__PyBytesWriter_Init"] = (a0) =>
      (__PyBytesWriter_Init = Module["__PyBytesWriter_Init"] =
        wasmExports["_PyBytesWriter_Init"])(a0));
    var __PyBytesWriter_Alloc = (Module["__PyBytesWriter_Alloc"] = (a0, a1) =>
      (__PyBytesWriter_Alloc = Module["__PyBytesWriter_Alloc"] =
        wasmExports["_PyBytesWriter_Alloc"])(a0, a1));
    var __PyBytesWriter_WriteBytes = (Module["__PyBytesWriter_WriteBytes"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyBytesWriter_WriteBytes = Module["__PyBytesWriter_WriteBytes"] =
        wasmExports["_PyBytesWriter_WriteBytes"])(a0, a1, a2, a3));
    var __PyBytes_Resize = (Module["__PyBytes_Resize"] = (a0, a1) =>
      (__PyBytes_Resize = Module["__PyBytes_Resize"] =
        wasmExports["_PyBytes_Resize"])(a0, a1));
    var __PyBytesWriter_Dealloc = (Module["__PyBytesWriter_Dealloc"] = (a0) =>
      (__PyBytesWriter_Dealloc = Module["__PyBytesWriter_Dealloc"] =
        wasmExports["_PyBytesWriter_Dealloc"])(a0));
    var _PyBytes_FromFormat = (Module["_PyBytes_FromFormat"] = (a0, a1) =>
      (_PyBytes_FromFormat = Module["_PyBytes_FromFormat"] =
        wasmExports["PyBytes_FromFormat"])(a0, a1));
    var _PyObject_ASCII = (Module["_PyObject_ASCII"] = (a0) =>
      (_PyObject_ASCII = Module["_PyObject_ASCII"] =
        wasmExports["PyObject_ASCII"])(a0));
    var __PyLong_FormatBytesWriter = (Module["__PyLong_FormatBytesWriter"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__PyLong_FormatBytesWriter = Module["__PyLong_FormatBytesWriter"] =
        wasmExports["_PyLong_FormatBytesWriter"])(a0, a1, a2, a3, a4));
    var __PyUnicode_FormatLong = (Module["__PyUnicode_FormatLong"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyUnicode_FormatLong = Module["__PyUnicode_FormatLong"] =
        wasmExports["_PyUnicode_FormatLong"])(a0, a1, a2, a3));
    var _PyOS_double_to_string = (Module["_PyOS_double_to_string"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyOS_double_to_string = Module["_PyOS_double_to_string"] =
        wasmExports["PyOS_double_to_string"])(a0, a1, a2, a3, a4));
    var __PyBytesWriter_Prepare = (Module["__PyBytesWriter_Prepare"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyBytesWriter_Prepare = Module["__PyBytesWriter_Prepare"] =
        wasmExports["_PyBytesWriter_Prepare"])(a0, a1, a2));
    var _PyBytes_DecodeEscape = (Module["_PyBytes_DecodeEscape"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyBytes_DecodeEscape = Module["_PyBytes_DecodeEscape"] =
        wasmExports["PyBytes_DecodeEscape"])(a0, a1, a2, a3, a4));
    var _PyBytes_Size = (Module["_PyBytes_Size"] = (a0) =>
      (_PyBytes_Size = Module["_PyBytes_Size"] = wasmExports["PyBytes_Size"])(
        a0,
      ));
    var __PyBytes_Find = (Module["__PyBytes_Find"] = (a0, a1, a2, a3, a4) =>
      (__PyBytes_Find = Module["__PyBytes_Find"] =
        wasmExports["_PyBytes_Find"])(a0, a1, a2, a3, a4));
    var __PyBytes_ReverseFind = (Module["__PyBytes_ReverseFind"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__PyBytes_ReverseFind = Module["__PyBytes_ReverseFind"] =
        wasmExports["_PyBytes_ReverseFind"])(a0, a1, a2, a3, a4));
    var _PyBytes_Repr = (Module["_PyBytes_Repr"] = (a0, a1) =>
      (_PyBytes_Repr = Module["_PyBytes_Repr"] = wasmExports["PyBytes_Repr"])(
        a0,
        a1,
      ));
    var __PyBytes_Join = (Module["__PyBytes_Join"] = (a0, a1) =>
      (__PyBytes_Join = Module["__PyBytes_Join"] =
        wasmExports["_PyBytes_Join"])(a0, a1));
    var _PyBytes_FromObject = (Module["_PyBytes_FromObject"] = (a0) =>
      (_PyBytes_FromObject = Module["_PyBytes_FromObject"] =
        wasmExports["PyBytes_FromObject"])(a0));
    var _PyErr_BadArgument = (Module["_PyErr_BadArgument"] = () =>
      (_PyErr_BadArgument = Module["_PyErr_BadArgument"] =
        wasmExports["PyErr_BadArgument"])());
    var _PyBytes_Concat = (Module["_PyBytes_Concat"] = (a0, a1) =>
      (_PyBytes_Concat = Module["_PyBytes_Concat"] =
        wasmExports["PyBytes_Concat"])(a0, a1));
    var __PyErr_FormatFromCauseTstate = (Module[
      "__PyErr_FormatFromCauseTstate"
    ] = (a0, a1, a2, a3) =>
      (__PyErr_FormatFromCauseTstate = Module["__PyErr_FormatFromCauseTstate"] =
        wasmExports["_PyErr_FormatFromCauseTstate"])(a0, a1, a2, a3));
    var __Py_FatalErrorFormat = (Module["__Py_FatalErrorFormat"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_FatalErrorFormat = Module["__Py_FatalErrorFormat"] =
        wasmExports["_Py_FatalErrorFormat"])(a0, a1, a2));
    var __PyObject_FastCallDictTstate = (Module[
      "__PyObject_FastCallDictTstate"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyObject_FastCallDictTstate = Module["__PyObject_FastCallDictTstate"] =
        wasmExports["_PyObject_FastCallDictTstate"])(a0, a1, a2, a3, a4));
    var _PyVectorcall_Function = (Module["_PyVectorcall_Function"] = (a0) =>
      (_PyVectorcall_Function = Module["_PyVectorcall_Function"] =
        wasmExports["PyVectorcall_Function"])(a0));
    var __PyErr_NoMemory = (Module["__PyErr_NoMemory"] = (a0) =>
      (__PyErr_NoMemory = Module["__PyErr_NoMemory"] =
        wasmExports["_PyErr_NoMemory"])(a0));
    var _PyObject_VectorcallDict = (Module["_PyObject_VectorcallDict"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyObject_VectorcallDict = Module["_PyObject_VectorcallDict"] =
        wasmExports["PyObject_VectorcallDict"])(a0, a1, a2, a3));
    var __PyStack_AsDict = (Module["__PyStack_AsDict"] = (a0, a1) =>
      (__PyStack_AsDict = Module["__PyStack_AsDict"] =
        wasmExports["_PyStack_AsDict"])(a0, a1));
    var __PyObject_Call = (Module["__PyObject_Call"] = (a0, a1, a2, a3) =>
      (__PyObject_Call = Module["__PyObject_Call"] =
        wasmExports["_PyObject_Call"])(a0, a1, a2, a3));
    var _PyObject_Call = (Module["_PyObject_Call"] = (a0, a1, a2) =>
      (_PyObject_Call = Module["_PyObject_Call"] =
        wasmExports["PyObject_Call"])(a0, a1, a2));
    var _PyCFunction_Call = (Module["_PyCFunction_Call"] = (a0, a1, a2) =>
      (_PyCFunction_Call = Module["_PyCFunction_Call"] =
        wasmExports["PyCFunction_Call"])(a0, a1, a2));
    var __PyFunction_Vectorcall = (Module["__PyFunction_Vectorcall"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyFunction_Vectorcall = Module["__PyFunction_Vectorcall"] =
        wasmExports["_PyFunction_Vectorcall"])(a0, a1, a2, a3));
    var _PyEval_CallObjectWithKeywords = (Module[
      "_PyEval_CallObjectWithKeywords"
    ] = (a0, a1, a2) =>
      (_PyEval_CallObjectWithKeywords = Module[
        "_PyEval_CallObjectWithKeywords"
      ] =
        wasmExports["PyEval_CallObjectWithKeywords"])(a0, a1, a2));
    var _PyObject_CallObject = (Module["_PyObject_CallObject"] = (a0, a1) =>
      (_PyObject_CallObject = Module["_PyObject_CallObject"] =
        wasmExports["PyObject_CallObject"])(a0, a1));
    var __PyObject_Call_Prepend = (Module["__PyObject_Call_Prepend"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__PyObject_Call_Prepend = Module["__PyObject_Call_Prepend"] =
        wasmExports["_PyObject_Call_Prepend"])(a0, a1, a2, a3, a4));
    var _PyObject_CallFunction = (Module["_PyObject_CallFunction"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_CallFunction = Module["_PyObject_CallFunction"] =
        wasmExports["PyObject_CallFunction"])(a0, a1, a2));
    var __Py_VaBuildStack_SizeT = (Module["__Py_VaBuildStack_SizeT"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__Py_VaBuildStack_SizeT = Module["__Py_VaBuildStack_SizeT"] =
        wasmExports["_Py_VaBuildStack_SizeT"])(a0, a1, a2, a3, a4));
    var __Py_VaBuildStack = (Module["__Py_VaBuildStack"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__Py_VaBuildStack = Module["__Py_VaBuildStack"] =
        wasmExports["_Py_VaBuildStack"])(a0, a1, a2, a3, a4));
    var _PyEval_CallFunction = (Module["_PyEval_CallFunction"] = (a0, a1, a2) =>
      (_PyEval_CallFunction = Module["_PyEval_CallFunction"] =
        wasmExports["PyEval_CallFunction"])(a0, a1, a2));
    var __PyObject_CallFunction_SizeT = (Module[
      "__PyObject_CallFunction_SizeT"
    ] = (a0, a1, a2) =>
      (__PyObject_CallFunction_SizeT = Module["__PyObject_CallFunction_SizeT"] =
        wasmExports["_PyObject_CallFunction_SizeT"])(a0, a1, a2));
    var _PyObject_CallMethod = (Module["_PyObject_CallMethod"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyObject_CallMethod = Module["_PyObject_CallMethod"] =
        wasmExports["PyObject_CallMethod"])(a0, a1, a2, a3));
    var _PyCallable_Check = (Module["_PyCallable_Check"] = (a0) =>
      (_PyCallable_Check = Module["_PyCallable_Check"] =
        wasmExports["PyCallable_Check"])(a0));
    var _PyEval_CallMethod = (Module["_PyEval_CallMethod"] = (a0, a1, a2, a3) =>
      (_PyEval_CallMethod = Module["_PyEval_CallMethod"] =
        wasmExports["PyEval_CallMethod"])(a0, a1, a2, a3));
    var __PyObject_CallMethodId = (Module["__PyObject_CallMethodId"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyObject_CallMethodId = Module["__PyObject_CallMethodId"] =
        wasmExports["_PyObject_CallMethodId"])(a0, a1, a2, a3));
    var __PyObject_CallMethod_SizeT = (Module["__PyObject_CallMethod_SizeT"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyObject_CallMethod_SizeT = Module["__PyObject_CallMethod_SizeT"] =
        wasmExports["_PyObject_CallMethod_SizeT"])(a0, a1, a2, a3));
    var __PyObject_CallMethodId_SizeT = (Module[
      "__PyObject_CallMethodId_SizeT"
    ] = (a0, a1, a2, a3) =>
      (__PyObject_CallMethodId_SizeT = Module["__PyObject_CallMethodId_SizeT"] =
        wasmExports["_PyObject_CallMethodId_SizeT"])(a0, a1, a2, a3));
    var _PyObject_CallMethodObjArgs = (Module["_PyObject_CallMethodObjArgs"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_CallMethodObjArgs = Module["_PyObject_CallMethodObjArgs"] =
        wasmExports["PyObject_CallMethodObjArgs"])(a0, a1, a2));
    var _PyCapsule_New = (Module["_PyCapsule_New"] = (a0, a1, a2) =>
      (_PyCapsule_New = Module["_PyCapsule_New"] =
        wasmExports["PyCapsule_New"])(a0, a1, a2));
    var _PyCapsule_IsValid = (Module["_PyCapsule_IsValid"] = (a0, a1) =>
      (_PyCapsule_IsValid = Module["_PyCapsule_IsValid"] =
        wasmExports["PyCapsule_IsValid"])(a0, a1));
    var _PyCapsule_GetPointer = (Module["_PyCapsule_GetPointer"] = (a0, a1) =>
      (_PyCapsule_GetPointer = Module["_PyCapsule_GetPointer"] =
        wasmExports["PyCapsule_GetPointer"])(a0, a1));
    var _PyCapsule_GetName = (Module["_PyCapsule_GetName"] = (a0) =>
      (_PyCapsule_GetName = Module["_PyCapsule_GetName"] =
        wasmExports["PyCapsule_GetName"])(a0));
    var _PyCapsule_GetDestructor = (Module["_PyCapsule_GetDestructor"] = (a0) =>
      (_PyCapsule_GetDestructor = Module["_PyCapsule_GetDestructor"] =
        wasmExports["PyCapsule_GetDestructor"])(a0));
    var _PyCapsule_GetContext = (Module["_PyCapsule_GetContext"] = (a0) =>
      (_PyCapsule_GetContext = Module["_PyCapsule_GetContext"] =
        wasmExports["PyCapsule_GetContext"])(a0));
    var _PyCapsule_SetPointer = (Module["_PyCapsule_SetPointer"] = (a0, a1) =>
      (_PyCapsule_SetPointer = Module["_PyCapsule_SetPointer"] =
        wasmExports["PyCapsule_SetPointer"])(a0, a1));
    var _PyCapsule_SetName = (Module["_PyCapsule_SetName"] = (a0, a1) =>
      (_PyCapsule_SetName = Module["_PyCapsule_SetName"] =
        wasmExports["PyCapsule_SetName"])(a0, a1));
    var _PyCapsule_SetDestructor = (Module["_PyCapsule_SetDestructor"] = (
      a0,
      a1,
    ) =>
      (_PyCapsule_SetDestructor = Module["_PyCapsule_SetDestructor"] =
        wasmExports["PyCapsule_SetDestructor"])(a0, a1));
    var _PyCapsule_SetContext = (Module["_PyCapsule_SetContext"] = (a0, a1) =>
      (_PyCapsule_SetContext = Module["_PyCapsule_SetContext"] =
        wasmExports["PyCapsule_SetContext"])(a0, a1));
    var _PyCapsule_Import = (Module["_PyCapsule_Import"] = (a0, a1) =>
      (_PyCapsule_Import = Module["_PyCapsule_Import"] =
        wasmExports["PyCapsule_Import"])(a0, a1));
    var _PyCell_New = (Module["_PyCell_New"] = (a0) =>
      (_PyCell_New = Module["_PyCell_New"] = wasmExports["PyCell_New"])(a0));
    var _PyCell_Get = (Module["_PyCell_Get"] = (a0) =>
      (_PyCell_Get = Module["_PyCell_Get"] = wasmExports["PyCell_Get"])(a0));
    var _PyCell_Set = (Module["_PyCell_Set"] = (a0, a1) =>
      (_PyCell_Set = Module["_PyCell_Set"] = wasmExports["PyCell_Set"])(
        a0,
        a1,
      ));
    var _PyObject_RichCompare = (Module["_PyObject_RichCompare"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_RichCompare = Module["_PyObject_RichCompare"] =
        wasmExports["PyObject_RichCompare"])(a0, a1, a2));
    var _PyMethod_Function = (Module["_PyMethod_Function"] = (a0) =>
      (_PyMethod_Function = Module["_PyMethod_Function"] =
        wasmExports["PyMethod_Function"])(a0));
    var _PyMethod_Self = (Module["_PyMethod_Self"] = (a0) =>
      (_PyMethod_Self = Module["_PyMethod_Self"] =
        wasmExports["PyMethod_Self"])(a0));
    var _PyMethod_New = (Module["_PyMethod_New"] = (a0, a1) =>
      (_PyMethod_New = Module["_PyMethod_New"] = wasmExports["PyMethod_New"])(
        a0,
        a1,
      ));
    var _PyObject_ClearWeakRefs = (Module["_PyObject_ClearWeakRefs"] = (a0) =>
      (_PyObject_ClearWeakRefs = Module["_PyObject_ClearWeakRefs"] =
        wasmExports["PyObject_ClearWeakRefs"])(a0));
    var __Py_HashPointer = (Module["__Py_HashPointer"] = (a0) =>
      (__Py_HashPointer = Module["__Py_HashPointer"] =
        wasmExports["_Py_HashPointer"])(a0));
    var _PyObject_Hash = (Module["_PyObject_Hash"] = (a0) =>
      (_PyObject_Hash = Module["_PyObject_Hash"] =
        wasmExports["PyObject_Hash"])(a0));
    var __PyType_Lookup = (Module["__PyType_Lookup"] = (a0, a1) =>
      (__PyType_Lookup = Module["__PyType_Lookup"] =
        wasmExports["_PyType_Lookup"])(a0, a1));
    var _PyInstanceMethod_New = (Module["_PyInstanceMethod_New"] = (a0) =>
      (_PyInstanceMethod_New = Module["_PyInstanceMethod_New"] =
        wasmExports["PyInstanceMethod_New"])(a0));
    var _PyInstanceMethod_Function = (Module["_PyInstanceMethod_Function"] = (
      a0,
    ) =>
      (_PyInstanceMethod_Function = Module["_PyInstanceMethod_Function"] =
        wasmExports["PyInstanceMethod_Function"])(a0));
    var __PyCode_Validate = (Module["__PyCode_Validate"] = (a0) =>
      (__PyCode_Validate = Module["__PyCode_Validate"] =
        wasmExports["_PyCode_Validate"])(a0));
    var __PyCode_New = (Module["__PyCode_New"] = (a0) =>
      (__PyCode_New = Module["__PyCode_New"] = wasmExports["_PyCode_New"])(a0));
    var __PyObject_NewVar = (Module["__PyObject_NewVar"] = (a0, a1) =>
      (__PyObject_NewVar = Module["__PyObject_NewVar"] =
        wasmExports["_PyObject_NewVar"])(a0, a1));
    var _PyFrozenSet_New = (Module["_PyFrozenSet_New"] = (a0) =>
      (_PyFrozenSet_New = Module["_PyFrozenSet_New"] =
        wasmExports["PyFrozenSet_New"])(a0));
    var _PyCode_NewWithPosOnlyArgs = (Module["_PyCode_NewWithPosOnlyArgs"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
    ) =>
      (_PyCode_NewWithPosOnlyArgs = Module["_PyCode_NewWithPosOnlyArgs"] =
        wasmExports["PyCode_NewWithPosOnlyArgs"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
        a10,
        a11,
        a12,
        a13,
        a14,
        a15,
        a16,
        a17,
      ));
    var _PyUnicode_Compare = (Module["_PyUnicode_Compare"] = (a0, a1) =>
      (_PyUnicode_Compare = Module["_PyUnicode_Compare"] =
        wasmExports["PyUnicode_Compare"])(a0, a1));
    var _PyCode_New = (Module["_PyCode_New"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
    ) =>
      (_PyCode_New = Module["_PyCode_New"] = wasmExports["PyCode_New"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
        a10,
        a11,
        a12,
        a13,
        a14,
        a15,
        a16,
      ));
    var _PyCode_NewEmpty = (Module["_PyCode_NewEmpty"] = (a0, a1, a2) =>
      (_PyCode_NewEmpty = Module["_PyCode_NewEmpty"] =
        wasmExports["PyCode_NewEmpty"])(a0, a1, a2));
    var _PyUnicode_DecodeFSDefault = (Module["_PyUnicode_DecodeFSDefault"] = (
      a0,
    ) =>
      (_PyUnicode_DecodeFSDefault = Module["_PyUnicode_DecodeFSDefault"] =
        wasmExports["PyUnicode_DecodeFSDefault"])(a0));
    var _PyCode_Addr2Line = (Module["_PyCode_Addr2Line"] = (a0, a1) =>
      (_PyCode_Addr2Line = Module["_PyCode_Addr2Line"] =
        wasmExports["PyCode_Addr2Line"])(a0, a1));
    var __PyCode_CheckLineNumber = (Module["__PyCode_CheckLineNumber"] = (
      a0,
      a1,
    ) =>
      (__PyCode_CheckLineNumber = Module["__PyCode_CheckLineNumber"] =
        wasmExports["_PyCode_CheckLineNumber"])(a0, a1));
    var _PyCode_Addr2Location = (Module["_PyCode_Addr2Location"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_PyCode_Addr2Location = Module["_PyCode_Addr2Location"] =
        wasmExports["PyCode_Addr2Location"])(a0, a1, a2, a3, a4, a5));
    var __PyCode_GetExtra = (Module["__PyCode_GetExtra"] = (a0, a1, a2) =>
      (__PyCode_GetExtra = Module["__PyCode_GetExtra"] =
        wasmExports["_PyCode_GetExtra"])(a0, a1, a2));
    var __PyCode_SetExtra = (Module["__PyCode_SetExtra"] = (a0, a1, a2) =>
      (__PyCode_SetExtra = Module["__PyCode_SetExtra"] =
        wasmExports["_PyCode_SetExtra"])(a0, a1, a2));
    var _PyCode_GetVarnames = (Module["_PyCode_GetVarnames"] = (a0) =>
      (_PyCode_GetVarnames = Module["_PyCode_GetVarnames"] =
        wasmExports["PyCode_GetVarnames"])(a0));
    var _PyCode_GetCellvars = (Module["_PyCode_GetCellvars"] = (a0) =>
      (_PyCode_GetCellvars = Module["_PyCode_GetCellvars"] =
        wasmExports["PyCode_GetCellvars"])(a0));
    var _PyCode_GetFreevars = (Module["_PyCode_GetFreevars"] = (a0) =>
      (_PyCode_GetFreevars = Module["_PyCode_GetFreevars"] =
        wasmExports["PyCode_GetFreevars"])(a0));
    var _PyCode_GetCode = (Module["_PyCode_GetCode"] = (a0) =>
      (_PyCode_GetCode = Module["_PyCode_GetCode"] =
        wasmExports["PyCode_GetCode"])(a0));
    var __PyCode_ConstantKey = (Module["__PyCode_ConstantKey"] = (a0) =>
      (__PyCode_ConstantKey = Module["__PyCode_ConstantKey"] =
        wasmExports["_PyCode_ConstantKey"])(a0));
    var _PyComplex_AsCComplex = (Module["_PyComplex_AsCComplex"] = (a0, a1) =>
      (_PyComplex_AsCComplex = Module["_PyComplex_AsCComplex"] =
        wasmExports["PyComplex_AsCComplex"])(a0, a1));
    var __PySet_NextEntry = (Module["__PySet_NextEntry"] = (a0, a1, a2, a3) =>
      (__PySet_NextEntry = Module["__PySet_NextEntry"] =
        wasmExports["_PySet_NextEntry"])(a0, a1, a2, a3));
    var _PyLong_FromVoidPtr = (Module["_PyLong_FromVoidPtr"] = (a0) =>
      (_PyLong_FromVoidPtr = Module["_PyLong_FromVoidPtr"] =
        wasmExports["PyLong_FromVoidPtr"])(a0));
    var __PyUnicode_Copy = (Module["__PyUnicode_Copy"] = (a0) =>
      (__PyUnicode_Copy = Module["__PyUnicode_Copy"] =
        wasmExports["_PyUnicode_Copy"])(a0));
    var __Py_c_sum = (Module["__Py_c_sum"] = (a0, a1, a2) =>
      (__Py_c_sum = Module["__Py_c_sum"] = wasmExports["_Py_c_sum"])(
        a0,
        a1,
        a2,
      ));
    var __Py_c_diff = (Module["__Py_c_diff"] = (a0, a1, a2) =>
      (__Py_c_diff = Module["__Py_c_diff"] = wasmExports["_Py_c_diff"])(
        a0,
        a1,
        a2,
      ));
    var __Py_c_neg = (Module["__Py_c_neg"] = (a0, a1) =>
      (__Py_c_neg = Module["__Py_c_neg"] = wasmExports["_Py_c_neg"])(a0, a1));
    var __Py_c_prod = (Module["__Py_c_prod"] = (a0, a1, a2) =>
      (__Py_c_prod = Module["__Py_c_prod"] = wasmExports["_Py_c_prod"])(
        a0,
        a1,
        a2,
      ));
    var __Py_c_quot = (Module["__Py_c_quot"] = (a0, a1, a2) =>
      (__Py_c_quot = Module["__Py_c_quot"] = wasmExports["_Py_c_quot"])(
        a0,
        a1,
        a2,
      ));
    var __Py_c_pow = (Module["__Py_c_pow"] = (a0, a1, a2) =>
      (__Py_c_pow = Module["__Py_c_pow"] = wasmExports["_Py_c_pow"])(
        a0,
        a1,
        a2,
      ));
    var _hypot = (Module["_hypot"] = (a0, a1) =>
      (_hypot = Module["_hypot"] = wasmExports["hypot"])(a0, a1));
    var _atan2 = (Module["_atan2"] = (a0, a1) =>
      (_atan2 = Module["_atan2"] = wasmExports["atan2"])(a0, a1));
    var _pow = (Module["_pow"] = (a0, a1) =>
      (_pow = Module["_pow"] = wasmExports["pow"])(a0, a1));
    var _log = (Module["_log"] = (a0) =>
      (_log = Module["_log"] = wasmExports["log"])(a0));
    var _exp = (Module["_exp"] = (a0) =>
      (_exp = Module["_exp"] = wasmExports["exp"])(a0));
    var _sin = (Module["_sin"] = (a0) =>
      (_sin = Module["_sin"] = wasmExports["sin"])(a0));
    var _cos = (Module["_cos"] = (a0) =>
      (_cos = Module["_cos"] = wasmExports["cos"])(a0));
    var __Py_c_abs = (Module["__Py_c_abs"] = (a0) =>
      (__Py_c_abs = Module["__Py_c_abs"] = wasmExports["_Py_c_abs"])(a0));
    var _PyComplex_FromDoubles = (Module["_PyComplex_FromDoubles"] = (a0, a1) =>
      (_PyComplex_FromDoubles = Module["_PyComplex_FromDoubles"] =
        wasmExports["PyComplex_FromDoubles"])(a0, a1));
    var _PyComplex_RealAsDouble = (Module["_PyComplex_RealAsDouble"] = (a0) =>
      (_PyComplex_RealAsDouble = Module["_PyComplex_RealAsDouble"] =
        wasmExports["PyComplex_RealAsDouble"])(a0));
    var _PyComplex_ImagAsDouble = (Module["_PyComplex_ImagAsDouble"] = (a0) =>
      (_PyComplex_ImagAsDouble = Module["_PyComplex_ImagAsDouble"] =
        wasmExports["PyComplex_ImagAsDouble"])(a0));
    var __Py_HashDouble = (Module["__Py_HashDouble"] = (a0, a1) =>
      (__Py_HashDouble = Module["__Py_HashDouble"] =
        wasmExports["_Py_HashDouble"])(a0, a1));
    var __PyUnicode_TransformDecimalAndSpaceToASCII = (Module[
      "__PyUnicode_TransformDecimalAndSpaceToASCII"
    ] = (a0) =>
      (__PyUnicode_TransformDecimalAndSpaceToASCII = Module[
        "__PyUnicode_TransformDecimalAndSpaceToASCII"
      ] =
        wasmExports["_PyUnicode_TransformDecimalAndSpaceToASCII"])(a0));
    var __Py_string_to_number_with_underscores = (Module[
      "__Py_string_to_number_with_underscores"
    ] = (a0, a1, a2, a3, a4, a5) =>
      (__Py_string_to_number_with_underscores = Module[
        "__Py_string_to_number_with_underscores"
      ] =
        wasmExports["_Py_string_to_number_with_underscores"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var __PyUnicodeWriter_Init = (Module["__PyUnicodeWriter_Init"] = (a0) =>
      (__PyUnicodeWriter_Init = Module["__PyUnicodeWriter_Init"] =
        wasmExports["_PyUnicodeWriter_Init"])(a0));
    var __PyUnicodeWriter_Dealloc = (Module["__PyUnicodeWriter_Dealloc"] = (
      a0,
    ) =>
      (__PyUnicodeWriter_Dealloc = Module["__PyUnicodeWriter_Dealloc"] =
        wasmExports["_PyUnicodeWriter_Dealloc"])(a0));
    var __PyUnicodeWriter_Finish = (Module["__PyUnicodeWriter_Finish"] = (a0) =>
      (__PyUnicodeWriter_Finish = Module["__PyUnicodeWriter_Finish"] =
        wasmExports["_PyUnicodeWriter_Finish"])(a0));
    var _PyCMethod_New = (Module["_PyCMethod_New"] = (a0, a1, a2, a3) =>
      (_PyCMethod_New = Module["_PyCMethod_New"] =
        wasmExports["PyCMethod_New"])(a0, a1, a2, a3));
    var _PyMember_GetOne = (Module["_PyMember_GetOne"] = (a0, a1) =>
      (_PyMember_GetOne = Module["_PyMember_GetOne"] =
        wasmExports["PyMember_GetOne"])(a0, a1));
    var _PyMember_SetOne = (Module["_PyMember_SetOne"] = (a0, a1, a2) =>
      (_PyMember_SetOne = Module["_PyMember_SetOne"] =
        wasmExports["PyMember_SetOne"])(a0, a1, a2));
    var _PyTuple_GetSlice = (Module["_PyTuple_GetSlice"] = (a0, a1, a2) =>
      (_PyTuple_GetSlice = Module["_PyTuple_GetSlice"] =
        wasmExports["PyTuple_GetSlice"])(a0, a1, a2));
    var _PyDescr_NewMethod = (Module["_PyDescr_NewMethod"] = (a0, a1) =>
      (_PyDescr_NewMethod = Module["_PyDescr_NewMethod"] =
        wasmExports["PyDescr_NewMethod"])(a0, a1));
    var __PyObject_FunctionStr = (Module["__PyObject_FunctionStr"] = (a0) =>
      (__PyObject_FunctionStr = Module["__PyObject_FunctionStr"] =
        wasmExports["_PyObject_FunctionStr"])(a0));
    var _PyDescr_NewClassMethod = (Module["_PyDescr_NewClassMethod"] = (
      a0,
      a1,
    ) =>
      (_PyDescr_NewClassMethod = Module["_PyDescr_NewClassMethod"] =
        wasmExports["PyDescr_NewClassMethod"])(a0, a1));
    var _PyDescr_NewMember = (Module["_PyDescr_NewMember"] = (a0, a1) =>
      (_PyDescr_NewMember = Module["_PyDescr_NewMember"] =
        wasmExports["PyDescr_NewMember"])(a0, a1));
    var _PyDescr_NewGetSet = (Module["_PyDescr_NewGetSet"] = (a0, a1) =>
      (_PyDescr_NewGetSet = Module["_PyDescr_NewGetSet"] =
        wasmExports["PyDescr_NewGetSet"])(a0, a1));
    var _PyDescr_NewWrapper = (Module["_PyDescr_NewWrapper"] = (a0, a1, a2) =>
      (_PyDescr_NewWrapper = Module["_PyDescr_NewWrapper"] =
        wasmExports["PyDescr_NewWrapper"])(a0, a1, a2));
    var _PyDescr_IsData = (Module["_PyDescr_IsData"] = (a0) =>
      (_PyDescr_IsData = Module["_PyDescr_IsData"] =
        wasmExports["PyDescr_IsData"])(a0));
    var _PyDictProxy_New = (Module["_PyDictProxy_New"] = (a0) =>
      (_PyDictProxy_New = Module["_PyDictProxy_New"] =
        wasmExports["PyDictProxy_New"])(a0));
    var _PyObject_GC_UnTrack = (Module["_PyObject_GC_UnTrack"] = (a0) =>
      (_PyObject_GC_UnTrack = Module["_PyObject_GC_UnTrack"] =
        wasmExports["PyObject_GC_UnTrack"])(a0));
    var __PyTrash_cond = (Module["__PyTrash_cond"] = (a0, a1) =>
      (__PyTrash_cond = Module["__PyTrash_cond"] =
        wasmExports["_PyTrash_cond"])(a0, a1));
    var __PyTrash_begin = (Module["__PyTrash_begin"] = (a0, a1) =>
      (__PyTrash_begin = Module["__PyTrash_begin"] =
        wasmExports["_PyTrash_begin"])(a0, a1));
    var __PyTrash_end = (Module["__PyTrash_end"] = (a0) =>
      (__PyTrash_end = Module["__PyTrash_end"] = wasmExports["_PyTrash_end"])(
        a0,
      ));
    var _PyWrapper_New = (Module["_PyWrapper_New"] = (a0, a1) =>
      (_PyWrapper_New = Module["_PyWrapper_New"] =
        wasmExports["PyWrapper_New"])(a0, a1));
    var _PyType_GetQualName = (Module["_PyType_GetQualName"] = (a0) =>
      (_PyType_GetQualName = Module["_PyType_GetQualName"] =
        wasmExports["PyType_GetQualName"])(a0));
    var __PyType_GetDocFromInternalDoc = (Module[
      "__PyType_GetDocFromInternalDoc"
    ] = (a0, a1) =>
      (__PyType_GetDocFromInternalDoc = Module[
        "__PyType_GetDocFromInternalDoc"
      ] =
        wasmExports["_PyType_GetDocFromInternalDoc"])(a0, a1));
    var __PyType_GetTextSignatureFromInternalDoc = (Module[
      "__PyType_GetTextSignatureFromInternalDoc"
    ] = (a0, a1) =>
      (__PyType_GetTextSignatureFromInternalDoc = Module[
        "__PyType_GetTextSignatureFromInternalDoc"
      ] =
        wasmExports["_PyType_GetTextSignatureFromInternalDoc"])(a0, a1));
    var _PyDict_Contains = (Module["_PyDict_Contains"] = (a0, a1) =>
      (_PyDict_Contains = Module["_PyDict_Contains"] =
        wasmExports["PyDict_Contains"])(a0, a1));
    var __PyArg_UnpackStack = (Module["__PyArg_UnpackStack"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__PyArg_UnpackStack = Module["__PyArg_UnpackStack"] =
        wasmExports["_PyArg_UnpackStack"])(a0, a1, a2, a3, a4, a5));
    var __PyObject_IsAbstract = (Module["__PyObject_IsAbstract"] = (a0) =>
      (__PyObject_IsAbstract = Module["__PyObject_IsAbstract"] =
        wasmExports["_PyObject_IsAbstract"])(a0));
    var __PyUnicode_EqualToASCIIString = (Module[
      "__PyUnicode_EqualToASCIIString"
    ] = (a0, a1) =>
      (__PyUnicode_EqualToASCIIString = Module[
        "__PyUnicode_EqualToASCIIString"
      ] =
        wasmExports["_PyUnicode_EqualToASCIIString"])(a0, a1));
    var _PyException_GetCause = (Module["_PyException_GetCause"] = (a0) =>
      (_PyException_GetCause = Module["_PyException_GetCause"] =
        wasmExports["PyException_GetCause"])(a0));
    var _PyException_SetCause = (Module["_PyException_SetCause"] = (a0, a1) =>
      (_PyException_SetCause = Module["_PyException_SetCause"] =
        wasmExports["PyException_SetCause"])(a0, a1));
    var _PyException_GetContext = (Module["_PyException_GetContext"] = (a0) =>
      (_PyException_GetContext = Module["_PyException_GetContext"] =
        wasmExports["PyException_GetContext"])(a0));
    var _PyException_SetContext = (Module["_PyException_SetContext"] = (
      a0,
      a1,
    ) =>
      (_PyException_SetContext = Module["_PyException_SetContext"] =
        wasmExports["PyException_SetContext"])(a0, a1));
    var _PyExceptionClass_Name = (Module["_PyExceptionClass_Name"] = (a0) =>
      (_PyExceptionClass_Name = Module["_PyExceptionClass_Name"] =
        wasmExports["PyExceptionClass_Name"])(a0));
    var _PyUnicodeEncodeError_GetEncoding = (Module[
      "_PyUnicodeEncodeError_GetEncoding"
    ] = (a0) =>
      (_PyUnicodeEncodeError_GetEncoding = Module[
        "_PyUnicodeEncodeError_GetEncoding"
      ] =
        wasmExports["PyUnicodeEncodeError_GetEncoding"])(a0));
    var _PyUnicodeDecodeError_GetEncoding = (Module[
      "_PyUnicodeDecodeError_GetEncoding"
    ] = (a0) =>
      (_PyUnicodeDecodeError_GetEncoding = Module[
        "_PyUnicodeDecodeError_GetEncoding"
      ] =
        wasmExports["PyUnicodeDecodeError_GetEncoding"])(a0));
    var _PyUnicodeEncodeError_GetObject = (Module[
      "_PyUnicodeEncodeError_GetObject"
    ] = (a0) =>
      (_PyUnicodeEncodeError_GetObject = Module[
        "_PyUnicodeEncodeError_GetObject"
      ] =
        wasmExports["PyUnicodeEncodeError_GetObject"])(a0));
    var _PyUnicodeDecodeError_GetObject = (Module[
      "_PyUnicodeDecodeError_GetObject"
    ] = (a0) =>
      (_PyUnicodeDecodeError_GetObject = Module[
        "_PyUnicodeDecodeError_GetObject"
      ] =
        wasmExports["PyUnicodeDecodeError_GetObject"])(a0));
    var _PyUnicodeTranslateError_GetObject = (Module[
      "_PyUnicodeTranslateError_GetObject"
    ] = (a0) =>
      (_PyUnicodeTranslateError_GetObject = Module[
        "_PyUnicodeTranslateError_GetObject"
      ] =
        wasmExports["PyUnicodeTranslateError_GetObject"])(a0));
    var _PyUnicodeEncodeError_GetStart = (Module[
      "_PyUnicodeEncodeError_GetStart"
    ] = (a0, a1) =>
      (_PyUnicodeEncodeError_GetStart = Module[
        "_PyUnicodeEncodeError_GetStart"
      ] =
        wasmExports["PyUnicodeEncodeError_GetStart"])(a0, a1));
    var _PyUnicodeDecodeError_GetStart = (Module[
      "_PyUnicodeDecodeError_GetStart"
    ] = (a0, a1) =>
      (_PyUnicodeDecodeError_GetStart = Module[
        "_PyUnicodeDecodeError_GetStart"
      ] =
        wasmExports["PyUnicodeDecodeError_GetStart"])(a0, a1));
    var _PyUnicodeTranslateError_GetStart = (Module[
      "_PyUnicodeTranslateError_GetStart"
    ] = (a0, a1) =>
      (_PyUnicodeTranslateError_GetStart = Module[
        "_PyUnicodeTranslateError_GetStart"
      ] =
        wasmExports["PyUnicodeTranslateError_GetStart"])(a0, a1));
    var _PyUnicodeEncodeError_SetStart = (Module[
      "_PyUnicodeEncodeError_SetStart"
    ] = (a0, a1) =>
      (_PyUnicodeEncodeError_SetStart = Module[
        "_PyUnicodeEncodeError_SetStart"
      ] =
        wasmExports["PyUnicodeEncodeError_SetStart"])(a0, a1));
    var _PyUnicodeDecodeError_SetStart = (Module[
      "_PyUnicodeDecodeError_SetStart"
    ] = (a0, a1) =>
      (_PyUnicodeDecodeError_SetStart = Module[
        "_PyUnicodeDecodeError_SetStart"
      ] =
        wasmExports["PyUnicodeDecodeError_SetStart"])(a0, a1));
    var _PyUnicodeTranslateError_SetStart = (Module[
      "_PyUnicodeTranslateError_SetStart"
    ] = (a0, a1) =>
      (_PyUnicodeTranslateError_SetStart = Module[
        "_PyUnicodeTranslateError_SetStart"
      ] =
        wasmExports["PyUnicodeTranslateError_SetStart"])(a0, a1));
    var _PyUnicodeEncodeError_GetEnd = (Module["_PyUnicodeEncodeError_GetEnd"] =
      (a0, a1) =>
        (_PyUnicodeEncodeError_GetEnd = Module["_PyUnicodeEncodeError_GetEnd"] =
          wasmExports["PyUnicodeEncodeError_GetEnd"])(a0, a1));
    var _PyUnicodeDecodeError_GetEnd = (Module["_PyUnicodeDecodeError_GetEnd"] =
      (a0, a1) =>
        (_PyUnicodeDecodeError_GetEnd = Module["_PyUnicodeDecodeError_GetEnd"] =
          wasmExports["PyUnicodeDecodeError_GetEnd"])(a0, a1));
    var _PyUnicodeTranslateError_GetEnd = (Module[
      "_PyUnicodeTranslateError_GetEnd"
    ] = (a0, a1) =>
      (_PyUnicodeTranslateError_GetEnd = Module[
        "_PyUnicodeTranslateError_GetEnd"
      ] =
        wasmExports["PyUnicodeTranslateError_GetEnd"])(a0, a1));
    var _PyUnicodeEncodeError_SetEnd = (Module["_PyUnicodeEncodeError_SetEnd"] =
      (a0, a1) =>
        (_PyUnicodeEncodeError_SetEnd = Module["_PyUnicodeEncodeError_SetEnd"] =
          wasmExports["PyUnicodeEncodeError_SetEnd"])(a0, a1));
    var _PyUnicodeDecodeError_SetEnd = (Module["_PyUnicodeDecodeError_SetEnd"] =
      (a0, a1) =>
        (_PyUnicodeDecodeError_SetEnd = Module["_PyUnicodeDecodeError_SetEnd"] =
          wasmExports["PyUnicodeDecodeError_SetEnd"])(a0, a1));
    var _PyUnicodeTranslateError_SetEnd = (Module[
      "_PyUnicodeTranslateError_SetEnd"
    ] = (a0, a1) =>
      (_PyUnicodeTranslateError_SetEnd = Module[
        "_PyUnicodeTranslateError_SetEnd"
      ] =
        wasmExports["PyUnicodeTranslateError_SetEnd"])(a0, a1));
    var _PyUnicodeEncodeError_GetReason = (Module[
      "_PyUnicodeEncodeError_GetReason"
    ] = (a0) =>
      (_PyUnicodeEncodeError_GetReason = Module[
        "_PyUnicodeEncodeError_GetReason"
      ] =
        wasmExports["PyUnicodeEncodeError_GetReason"])(a0));
    var _PyUnicodeDecodeError_GetReason = (Module[
      "_PyUnicodeDecodeError_GetReason"
    ] = (a0) =>
      (_PyUnicodeDecodeError_GetReason = Module[
        "_PyUnicodeDecodeError_GetReason"
      ] =
        wasmExports["PyUnicodeDecodeError_GetReason"])(a0));
    var _PyUnicodeTranslateError_GetReason = (Module[
      "_PyUnicodeTranslateError_GetReason"
    ] = (a0) =>
      (_PyUnicodeTranslateError_GetReason = Module[
        "_PyUnicodeTranslateError_GetReason"
      ] =
        wasmExports["PyUnicodeTranslateError_GetReason"])(a0));
    var _PyUnicodeEncodeError_SetReason = (Module[
      "_PyUnicodeEncodeError_SetReason"
    ] = (a0, a1) =>
      (_PyUnicodeEncodeError_SetReason = Module[
        "_PyUnicodeEncodeError_SetReason"
      ] =
        wasmExports["PyUnicodeEncodeError_SetReason"])(a0, a1));
    var _PyUnicodeDecodeError_SetReason = (Module[
      "_PyUnicodeDecodeError_SetReason"
    ] = (a0, a1) =>
      (_PyUnicodeDecodeError_SetReason = Module[
        "_PyUnicodeDecodeError_SetReason"
      ] =
        wasmExports["PyUnicodeDecodeError_SetReason"])(a0, a1));
    var _PyUnicodeTranslateError_SetReason = (Module[
      "_PyUnicodeTranslateError_SetReason"
    ] = (a0, a1) =>
      (_PyUnicodeTranslateError_SetReason = Module[
        "_PyUnicodeTranslateError_SetReason"
      ] =
        wasmExports["PyUnicodeTranslateError_SetReason"])(a0, a1));
    var _PyUnicodeDecodeError_Create = (Module["_PyUnicodeDecodeError_Create"] =
      (a0, a1, a2, a3, a4, a5) =>
        (_PyUnicodeDecodeError_Create = Module["_PyUnicodeDecodeError_Create"] =
          wasmExports["PyUnicodeDecodeError_Create"])(a0, a1, a2, a3, a4, a5));
    var __PyUnicodeTranslateError_Create = (Module[
      "__PyUnicodeTranslateError_Create"
    ] = (a0, a1, a2, a3) =>
      (__PyUnicodeTranslateError_Create = Module[
        "__PyUnicodeTranslateError_Create"
      ] =
        wasmExports["_PyUnicodeTranslateError_Create"])(a0, a1, a2, a3));
    var _PyModule_GetDict = (Module["_PyModule_GetDict"] = (a0) =>
      (_PyModule_GetDict = Module["_PyModule_GetDict"] =
        wasmExports["PyModule_GetDict"])(a0));
    var _PyErr_NewException = (Module["_PyErr_NewException"] = (a0, a1, a2) =>
      (_PyErr_NewException = Module["_PyErr_NewException"] =
        wasmExports["PyErr_NewException"])(a0, a1, a2));
    var __PyErr_TrySetFromCause = (Module["__PyErr_TrySetFromCause"] = (
      a0,
      a1,
    ) =>
      (__PyErr_TrySetFromCause = Module["__PyErr_TrySetFromCause"] =
        wasmExports["_PyErr_TrySetFromCause"])(a0, a1));
    var _PySet_Add = (Module["_PySet_Add"] = (a0, a1) =>
      (_PySet_Add = Module["_PySet_Add"] = wasmExports["PySet_Add"])(a0, a1));
    var _PySet_Contains = (Module["_PySet_Contains"] = (a0, a1) =>
      (_PySet_Contains = Module["_PySet_Contains"] =
        wasmExports["PySet_Contains"])(a0, a1));
    var _PyDict_Copy = (Module["_PyDict_Copy"] = (a0) =>
      (_PyDict_Copy = Module["_PyDict_Copy"] = wasmExports["PyDict_Copy"])(a0));
    var _PyUnicode_ReadChar = (Module["_PyUnicode_ReadChar"] = (a0, a1) =>
      (_PyUnicode_ReadChar = Module["_PyUnicode_ReadChar"] =
        wasmExports["PyUnicode_ReadChar"])(a0, a1));
    var _PyObject_GenericGetDict = (Module["_PyObject_GenericGetDict"] = (
      a0,
      a1,
    ) =>
      (_PyObject_GenericGetDict = Module["_PyObject_GenericGetDict"] =
        wasmExports["PyObject_GenericGetDict"])(a0, a1));
    var _PyObject_GenericSetDict = (Module["_PyObject_GenericSetDict"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyObject_GenericSetDict = Module["_PyObject_GenericSetDict"] =
        wasmExports["PyObject_GenericSetDict"])(a0, a1, a2));
    var __PyUnicodeWriter_WriteASCIIString = (Module[
      "__PyUnicodeWriter_WriteASCIIString"
    ] = (a0, a1, a2) =>
      (__PyUnicodeWriter_WriteASCIIString = Module[
        "__PyUnicodeWriter_WriteASCIIString"
      ] =
        wasmExports["_PyUnicodeWriter_WriteASCIIString"])(a0, a1, a2));
    var _PyObject_GC_Track = (Module["_PyObject_GC_Track"] = (a0) =>
      (_PyObject_GC_Track = Module["_PyObject_GC_Track"] =
        wasmExports["PyObject_GC_Track"])(a0));
    var __PyUnicodeWriter_WriteStr = (Module["__PyUnicodeWriter_WriteStr"] = (
      a0,
      a1,
    ) =>
      (__PyUnicodeWriter_WriteStr = Module["__PyUnicodeWriter_WriteStr"] =
        wasmExports["_PyUnicodeWriter_WriteStr"])(a0, a1));
    var __PyGen_Finalize = (Module["__PyGen_Finalize"] = (a0) =>
      (__PyGen_Finalize = Module["__PyGen_Finalize"] =
        wasmExports["_PyGen_Finalize"])(a0));
    var _PyErr_WriteUnraisable = (Module["_PyErr_WriteUnraisable"] = (a0) =>
      (_PyErr_WriteUnraisable = Module["_PyErr_WriteUnraisable"] =
        wasmExports["PyErr_WriteUnraisable"])(a0));
    var _PyObject_CallFinalizerFromDealloc = (Module[
      "_PyObject_CallFinalizerFromDealloc"
    ] = (a0) =>
      (_PyObject_CallFinalizerFromDealloc = Module[
        "_PyObject_CallFinalizerFromDealloc"
      ] =
        wasmExports["PyObject_CallFinalizerFromDealloc"])(a0));
    var __PyObject_GC_NewVar = (Module["__PyObject_GC_NewVar"] = (a0, a1) =>
      (__PyObject_GC_NewVar = Module["__PyObject_GC_NewVar"] =
        wasmExports["_PyObject_GC_NewVar"])(a0, a1));
    var _PyGen_NewWithQualName = (Module["_PyGen_NewWithQualName"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyGen_NewWithQualName = Module["_PyGen_NewWithQualName"] =
        wasmExports["PyGen_NewWithQualName"])(a0, a1, a2));
    var _PyFrame_GetCode = (Module["_PyFrame_GetCode"] = (a0) =>
      (_PyFrame_GetCode = Module["_PyFrame_GetCode"] =
        wasmExports["PyFrame_GetCode"])(a0));
    var _PyGen_New = (Module["_PyGen_New"] = (a0) =>
      (_PyGen_New = Module["_PyGen_New"] = wasmExports["PyGen_New"])(a0));
    var _PyCoro_New = (Module["_PyCoro_New"] = (a0, a1, a2) =>
      (_PyCoro_New = Module["_PyCoro_New"] = wasmExports["PyCoro_New"])(
        a0,
        a1,
        a2,
      ));
    var _PyAsyncGen_New = (Module["_PyAsyncGen_New"] = (a0, a1, a2) =>
      (_PyAsyncGen_New = Module["_PyAsyncGen_New"] =
        wasmExports["PyAsyncGen_New"])(a0, a1, a2));
    var __PyErr_ChainStackItem = (Module["__PyErr_ChainStackItem"] = (a0) =>
      (__PyErr_ChainStackItem = Module["__PyErr_ChainStackItem"] =
        wasmExports["_PyErr_ChainStackItem"])(a0));
    var __PyEval_EvalFrameDefault = (Module["__PyEval_EvalFrameDefault"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyEval_EvalFrameDefault = Module["__PyEval_EvalFrameDefault"] =
        wasmExports["_PyEval_EvalFrameDefault"])(a0, a1, a2));
    var _PyFile_FromFd = (Module["_PyFile_FromFd"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
    ) =>
      (_PyFile_FromFd = Module["_PyFile_FromFd"] =
        wasmExports["PyFile_FromFd"])(a0, a1, a2, a3, a4, a5, a6, a7));
    var _PyFile_GetLine = (Module["_PyFile_GetLine"] = (a0, a1) =>
      (_PyFile_GetLine = Module["_PyFile_GetLine"] =
        wasmExports["PyFile_GetLine"])(a0, a1));
    var _PyFile_WriteObject = (Module["_PyFile_WriteObject"] = (a0, a1, a2) =>
      (_PyFile_WriteObject = Module["_PyFile_WriteObject"] =
        wasmExports["PyFile_WriteObject"])(a0, a1, a2));
    var _PyFile_WriteString = (Module["_PyFile_WriteString"] = (a0, a1) =>
      (_PyFile_WriteString = Module["_PyFile_WriteString"] =
        wasmExports["PyFile_WriteString"])(a0, a1));
    var _PyObject_AsFileDescriptor = (Module["_PyObject_AsFileDescriptor"] = (
      a0,
    ) =>
      (_PyObject_AsFileDescriptor = Module["_PyObject_AsFileDescriptor"] =
        wasmExports["PyObject_AsFileDescriptor"])(a0));
    var __PyLong_FileDescriptor_Converter = (Module[
      "__PyLong_FileDescriptor_Converter"
    ] = (a0, a1) =>
      (__PyLong_FileDescriptor_Converter = Module[
        "__PyLong_FileDescriptor_Converter"
      ] =
        wasmExports["_PyLong_FileDescriptor_Converter"])(a0, a1));
    var _flockfile = (Module["_flockfile"] = (a0) =>
      (_flockfile = Module["_flockfile"] = wasmExports["flockfile"])(a0));
    var _getc_unlocked = (Module["_getc_unlocked"] = (a0) =>
      (_getc_unlocked = Module["_getc_unlocked"] =
        wasmExports["getc_unlocked"])(a0));
    var _funlockfile = (Module["_funlockfile"] = (a0) =>
      (_funlockfile = Module["_funlockfile"] = wasmExports["funlockfile"])(a0));
    var _PyFile_NewStdPrinter = (Module["_PyFile_NewStdPrinter"] = (a0) =>
      (_PyFile_NewStdPrinter = Module["_PyFile_NewStdPrinter"] =
        wasmExports["PyFile_NewStdPrinter"])(a0));
    var _PyFile_SetOpenCodeHook = (Module["_PyFile_SetOpenCodeHook"] = (
      a0,
      a1,
    ) =>
      (_PyFile_SetOpenCodeHook = Module["_PyFile_SetOpenCodeHook"] =
        wasmExports["PyFile_SetOpenCodeHook"])(a0, a1));
    var _Py_IsInitialized = (Module["_Py_IsInitialized"] = () =>
      (_Py_IsInitialized = Module["_Py_IsInitialized"] =
        wasmExports["Py_IsInitialized"])());
    var _PyFile_OpenCodeObject = (Module["_PyFile_OpenCodeObject"] = (a0) =>
      (_PyFile_OpenCodeObject = Module["_PyFile_OpenCodeObject"] =
        wasmExports["PyFile_OpenCodeObject"])(a0));
    var _PyFile_OpenCode = (Module["_PyFile_OpenCode"] = (a0) =>
      (_PyFile_OpenCode = Module["_PyFile_OpenCode"] =
        wasmExports["PyFile_OpenCode"])(a0));
    var __PyUnicode_AsUTF8String = (Module["__PyUnicode_AsUTF8String"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_AsUTF8String = Module["__PyUnicode_AsUTF8String"] =
        wasmExports["_PyUnicode_AsUTF8String"])(a0, a1));
    var __Py_write = (Module["__Py_write"] = (a0, a1, a2) =>
      (__Py_write = Module["__Py_write"] = wasmExports["_Py_write"])(
        a0,
        a1,
        a2,
      ));
    var _PyFloat_GetMax = (Module["_PyFloat_GetMax"] = () =>
      (_PyFloat_GetMax = Module["_PyFloat_GetMax"] =
        wasmExports["PyFloat_GetMax"])());
    var _PyFloat_GetMin = (Module["_PyFloat_GetMin"] = () =>
      (_PyFloat_GetMin = Module["_PyFloat_GetMin"] =
        wasmExports["PyFloat_GetMin"])());
    var _PyFloat_GetInfo = (Module["_PyFloat_GetInfo"] = () =>
      (_PyFloat_GetInfo = Module["_PyFloat_GetInfo"] =
        wasmExports["PyFloat_GetInfo"])());
    var _PyStructSequence_New = (Module["_PyStructSequence_New"] = (a0) =>
      (_PyStructSequence_New = Module["_PyStructSequence_New"] =
        wasmExports["PyStructSequence_New"])(a0));
    var __PyUnicode_FromASCII = (Module["__PyUnicode_FromASCII"] = (a0, a1) =>
      (__PyUnicode_FromASCII = Module["__PyUnicode_FromASCII"] =
        wasmExports["_PyUnicode_FromASCII"])(a0, a1));
    var _frexp = (Module["_frexp"] = (a0, a1) =>
      (_frexp = Module["_frexp"] = wasmExports["frexp"])(a0, a1));
    var _modf = (Module["_modf"] = (a0, a1) =>
      (_modf = Module["_modf"] = wasmExports["modf"])(a0, a1));
    var _PyLong_FromDouble = (Module["_PyLong_FromDouble"] = (a0) =>
      (_PyLong_FromDouble = Module["_PyLong_FromDouble"] =
        wasmExports["PyLong_FromDouble"])(a0));
    var __PyLong_Lshift = (Module["__PyLong_Lshift"] = (a0, a1) =>
      (__PyLong_Lshift = Module["__PyLong_Lshift"] =
        wasmExports["_PyLong_Lshift"])(a0, a1));
    var _PyStructSequence_InitType2 = (Module["_PyStructSequence_InitType2"] = (
      a0,
      a1,
    ) =>
      (_PyStructSequence_InitType2 = Module["_PyStructSequence_InitType2"] =
        wasmExports["PyStructSequence_InitType2"])(a0, a1));
    var __PyFloat_DebugMallocStats = (Module["__PyFloat_DebugMallocStats"] = (
      a0,
    ) =>
      (__PyFloat_DebugMallocStats = Module["__PyFloat_DebugMallocStats"] =
        wasmExports["_PyFloat_DebugMallocStats"])(a0));
    var __PyDebugAllocatorStats = (Module["__PyDebugAllocatorStats"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyDebugAllocatorStats = Module["__PyDebugAllocatorStats"] =
        wasmExports["_PyDebugAllocatorStats"])(a0, a1, a2, a3));
    var _PyFloat_Pack2 = (Module["_PyFloat_Pack2"] = (a0, a1, a2) =>
      (_PyFloat_Pack2 = Module["_PyFloat_Pack2"] =
        wasmExports["PyFloat_Pack2"])(a0, a1, a2));
    var _ldexp = (Module["_ldexp"] = (a0, a1) =>
      (_ldexp = Module["_ldexp"] = wasmExports["ldexp"])(a0, a1));
    var _PyFloat_Pack4 = (Module["_PyFloat_Pack4"] = (a0, a1, a2) =>
      (_PyFloat_Pack4 = Module["_PyFloat_Pack4"] =
        wasmExports["PyFloat_Pack4"])(a0, a1, a2));
    var _PyFloat_Pack8 = (Module["_PyFloat_Pack8"] = (a0, a1, a2) =>
      (_PyFloat_Pack8 = Module["_PyFloat_Pack8"] =
        wasmExports["PyFloat_Pack8"])(a0, a1, a2));
    var _PyFloat_Unpack2 = (Module["_PyFloat_Unpack2"] = (a0, a1) =>
      (_PyFloat_Unpack2 = Module["_PyFloat_Unpack2"] =
        wasmExports["PyFloat_Unpack2"])(a0, a1));
    var __Py_dg_infinity = (Module["__Py_dg_infinity"] = (a0) =>
      (__Py_dg_infinity = Module["__Py_dg_infinity"] =
        wasmExports["_Py_dg_infinity"])(a0));
    var __Py_dg_stdnan = (Module["__Py_dg_stdnan"] = (a0) =>
      (__Py_dg_stdnan = Module["__Py_dg_stdnan"] =
        wasmExports["_Py_dg_stdnan"])(a0));
    var _PyFloat_Unpack4 = (Module["_PyFloat_Unpack4"] = (a0, a1) =>
      (_PyFloat_Unpack4 = Module["_PyFloat_Unpack4"] =
        wasmExports["PyFloat_Unpack4"])(a0, a1));
    var _PyFloat_Unpack8 = (Module["_PyFloat_Unpack8"] = (a0, a1) =>
      (_PyFloat_Unpack8 = Module["_PyFloat_Unpack8"] =
        wasmExports["PyFloat_Unpack8"])(a0, a1));
    var _fmod = (Module["_fmod"] = (a0, a1) =>
      (_fmod = Module["_fmod"] = wasmExports["fmod"])(a0, a1));
    var _PyErr_SetFromErrno = (Module["_PyErr_SetFromErrno"] = (a0) =>
      (_PyErr_SetFromErrno = Module["_PyErr_SetFromErrno"] =
        wasmExports["PyErr_SetFromErrno"])(a0));
    var _round = (Module["_round"] = (a0) =>
      (_round = Module["_round"] = wasmExports["round"])(a0));
    var __Py_dg_dtoa = (Module["__Py_dg_dtoa"] = (a0, a1, a2, a3, a4, a5) =>
      (__Py_dg_dtoa = Module["__Py_dg_dtoa"] = wasmExports["_Py_dg_dtoa"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var __Py_dg_strtod = (Module["__Py_dg_strtod"] = (a0, a1) =>
      (__Py_dg_strtod = Module["__Py_dg_strtod"] =
        wasmExports["_Py_dg_strtod"])(a0, a1));
    var __Py_dg_freedtoa = (Module["__Py_dg_freedtoa"] = (a0) =>
      (__Py_dg_freedtoa = Module["__Py_dg_freedtoa"] =
        wasmExports["_Py_dg_freedtoa"])(a0));
    var __Py_parse_inf_or_nan = (Module["__Py_parse_inf_or_nan"] = (a0, a1) =>
      (__Py_parse_inf_or_nan = Module["__Py_parse_inf_or_nan"] =
        wasmExports["_Py_parse_inf_or_nan"])(a0, a1));
    var _strtol = (Module["_strtol"] = (a0, a1, a2) =>
      (_strtol = Module["_strtol"] = wasmExports["strtol"])(a0, a1, a2));
    var __PyFloat_FormatAdvancedWriter = (Module[
      "__PyFloat_FormatAdvancedWriter"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyFloat_FormatAdvancedWriter = Module[
        "__PyFloat_FormatAdvancedWriter"
      ] =
        wasmExports["_PyFloat_FormatAdvancedWriter"])(a0, a1, a2, a3, a4));
    var _PyFrame_GetLineNumber = (Module["_PyFrame_GetLineNumber"] = (a0) =>
      (_PyFrame_GetLineNumber = Module["_PyFrame_GetLineNumber"] =
        wasmExports["PyFrame_GetLineNumber"])(a0));
    var _PyFrame_New = (Module["_PyFrame_New"] = (a0, a1, a2, a3) =>
      (_PyFrame_New = Module["_PyFrame_New"] = wasmExports["PyFrame_New"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _PyFrame_FastToLocalsWithError = (Module[
      "_PyFrame_FastToLocalsWithError"
    ] = (a0) =>
      (_PyFrame_FastToLocalsWithError = Module[
        "_PyFrame_FastToLocalsWithError"
      ] =
        wasmExports["PyFrame_FastToLocalsWithError"])(a0));
    var _PyFrame_FastToLocals = (Module["_PyFrame_FastToLocals"] = (a0) =>
      (_PyFrame_FastToLocals = Module["_PyFrame_FastToLocals"] =
        wasmExports["PyFrame_FastToLocals"])(a0));
    var _PyFrame_LocalsToFast = (Module["_PyFrame_LocalsToFast"] = (a0, a1) =>
      (_PyFrame_LocalsToFast = Module["_PyFrame_LocalsToFast"] =
        wasmExports["PyFrame_LocalsToFast"])(a0, a1));
    var __PyFrame_IsEntryFrame = (Module["__PyFrame_IsEntryFrame"] = (a0) =>
      (__PyFrame_IsEntryFrame = Module["__PyFrame_IsEntryFrame"] =
        wasmExports["_PyFrame_IsEntryFrame"])(a0));
    var _PyFrame_GetBack = (Module["_PyFrame_GetBack"] = (a0) =>
      (_PyFrame_GetBack = Module["_PyFrame_GetBack"] =
        wasmExports["PyFrame_GetBack"])(a0));
    var _PyFrame_GetLocals = (Module["_PyFrame_GetLocals"] = (a0) =>
      (_PyFrame_GetLocals = Module["_PyFrame_GetLocals"] =
        wasmExports["PyFrame_GetLocals"])(a0));
    var _PyFrame_GetGlobals = (Module["_PyFrame_GetGlobals"] = (a0) =>
      (_PyFrame_GetGlobals = Module["_PyFrame_GetGlobals"] =
        wasmExports["PyFrame_GetGlobals"])(a0));
    var _PyFrame_GetBuiltins = (Module["_PyFrame_GetBuiltins"] = (a0) =>
      (_PyFrame_GetBuiltins = Module["_PyFrame_GetBuiltins"] =
        wasmExports["PyFrame_GetBuiltins"])(a0));
    var _PyFrame_GetLasti = (Module["_PyFrame_GetLasti"] = (a0) =>
      (_PyFrame_GetLasti = Module["_PyFrame_GetLasti"] =
        wasmExports["PyFrame_GetLasti"])(a0));
    var _PyFrame_GetGenerator = (Module["_PyFrame_GetGenerator"] = (a0) =>
      (_PyFrame_GetGenerator = Module["_PyFrame_GetGenerator"] =
        wasmExports["PyFrame_GetGenerator"])(a0));
    var _PyCompile_OpcodeStackEffect = (Module["_PyCompile_OpcodeStackEffect"] =
      (a0, a1) =>
        (_PyCompile_OpcodeStackEffect = Module["_PyCompile_OpcodeStackEffect"] =
          wasmExports["PyCompile_OpcodeStackEffect"])(a0, a1));
    var _PyFunction_NewWithQualName = (Module["_PyFunction_NewWithQualName"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyFunction_NewWithQualName = Module["_PyFunction_NewWithQualName"] =
        wasmExports["PyFunction_NewWithQualName"])(a0, a1, a2));
    var _PyFunction_New = (Module["_PyFunction_New"] = (a0, a1) =>
      (_PyFunction_New = Module["_PyFunction_New"] =
        wasmExports["PyFunction_New"])(a0, a1));
    var _PyFunction_GetCode = (Module["_PyFunction_GetCode"] = (a0) =>
      (_PyFunction_GetCode = Module["_PyFunction_GetCode"] =
        wasmExports["PyFunction_GetCode"])(a0));
    var _PyFunction_GetGlobals = (Module["_PyFunction_GetGlobals"] = (a0) =>
      (_PyFunction_GetGlobals = Module["_PyFunction_GetGlobals"] =
        wasmExports["PyFunction_GetGlobals"])(a0));
    var _PyFunction_GetModule = (Module["_PyFunction_GetModule"] = (a0) =>
      (_PyFunction_GetModule = Module["_PyFunction_GetModule"] =
        wasmExports["PyFunction_GetModule"])(a0));
    var _PyFunction_GetDefaults = (Module["_PyFunction_GetDefaults"] = (a0) =>
      (_PyFunction_GetDefaults = Module["_PyFunction_GetDefaults"] =
        wasmExports["PyFunction_GetDefaults"])(a0));
    var _PyFunction_SetDefaults = (Module["_PyFunction_SetDefaults"] = (
      a0,
      a1,
    ) =>
      (_PyFunction_SetDefaults = Module["_PyFunction_SetDefaults"] =
        wasmExports["PyFunction_SetDefaults"])(a0, a1));
    var _PyFunction_GetKwDefaults = (Module["_PyFunction_GetKwDefaults"] = (
      a0,
    ) =>
      (_PyFunction_GetKwDefaults = Module["_PyFunction_GetKwDefaults"] =
        wasmExports["PyFunction_GetKwDefaults"])(a0));
    var _PyFunction_SetKwDefaults = (Module["_PyFunction_SetKwDefaults"] = (
      a0,
      a1,
    ) =>
      (_PyFunction_SetKwDefaults = Module["_PyFunction_SetKwDefaults"] =
        wasmExports["PyFunction_SetKwDefaults"])(a0, a1));
    var _PyFunction_GetClosure = (Module["_PyFunction_GetClosure"] = (a0) =>
      (_PyFunction_GetClosure = Module["_PyFunction_GetClosure"] =
        wasmExports["PyFunction_GetClosure"])(a0));
    var _PyFunction_SetClosure = (Module["_PyFunction_SetClosure"] = (a0, a1) =>
      (_PyFunction_SetClosure = Module["_PyFunction_SetClosure"] =
        wasmExports["PyFunction_SetClosure"])(a0, a1));
    var _PyFunction_GetAnnotations = (Module["_PyFunction_GetAnnotations"] = (
      a0,
    ) =>
      (_PyFunction_GetAnnotations = Module["_PyFunction_GetAnnotations"] =
        wasmExports["PyFunction_GetAnnotations"])(a0));
    var _PyFunction_SetAnnotations = (Module["_PyFunction_SetAnnotations"] = (
      a0,
      a1,
    ) =>
      (_PyFunction_SetAnnotations = Module["_PyFunction_SetAnnotations"] =
        wasmExports["PyFunction_SetAnnotations"])(a0, a1));
    var _PyClassMethod_New = (Module["_PyClassMethod_New"] = (a0) =>
      (_PyClassMethod_New = Module["_PyClassMethod_New"] =
        wasmExports["PyClassMethod_New"])(a0));
    var _PyStaticMethod_New = (Module["_PyStaticMethod_New"] = (a0) =>
      (_PyStaticMethod_New = Module["_PyStaticMethod_New"] =
        wasmExports["PyStaticMethod_New"])(a0));
    var __PyInterpreterState_LookUpID = (Module[
      "__PyInterpreterState_LookUpID"
    ] = (a0) =>
      (__PyInterpreterState_LookUpID = Module["__PyInterpreterState_LookUpID"] =
        wasmExports["_PyInterpreterState_LookUpID"])(a0));
    var __PyInterpreterState_IDDecref = (Module[
      "__PyInterpreterState_IDDecref"
    ] = (a0) =>
      (__PyInterpreterState_IDDecref = Module["__PyInterpreterState_IDDecref"] =
        wasmExports["_PyInterpreterState_IDDecref"])(a0));
    var _PyLong_FromLongLong = (Module["_PyLong_FromLongLong"] = (a0) =>
      (_PyLong_FromLongLong = Module["_PyLong_FromLongLong"] =
        wasmExports["PyLong_FromLongLong"])(a0));
    var _PyLong_AsLongLongAndOverflow = (Module[
      "_PyLong_AsLongLongAndOverflow"
    ] = (a0, a1) =>
      (_PyLong_AsLongLongAndOverflow = Module["_PyLong_AsLongLongAndOverflow"] =
        wasmExports["PyLong_AsLongLongAndOverflow"])(a0, a1));
    var _PyArg_ParseTupleAndKeywords = (Module["_PyArg_ParseTupleAndKeywords"] =
      (a0, a1, a2, a3, a4) =>
        (_PyArg_ParseTupleAndKeywords = Module["_PyArg_ParseTupleAndKeywords"] =
          wasmExports["PyArg_ParseTupleAndKeywords"])(a0, a1, a2, a3, a4));
    var __PyInterpreterState_IDIncref = (Module[
      "__PyInterpreterState_IDIncref"
    ] = (a0) =>
      (__PyInterpreterState_IDIncref = Module["__PyInterpreterState_IDIncref"] =
        wasmExports["_PyInterpreterState_IDIncref"])(a0));
    var __PyInterpreterID_New = (Module["__PyInterpreterID_New"] = (a0) =>
      (__PyInterpreterID_New = Module["__PyInterpreterID_New"] =
        wasmExports["_PyInterpreterID_New"])(a0));
    var __PyInterpreterState_GetIDObject = (Module[
      "__PyInterpreterState_GetIDObject"
    ] = (a0) =>
      (__PyInterpreterState_GetIDObject = Module[
        "__PyInterpreterState_GetIDObject"
      ] =
        wasmExports["_PyInterpreterState_GetIDObject"])(a0));
    var __PyInterpreterState_IDInitref = (Module[
      "__PyInterpreterState_IDInitref"
    ] = (a0) =>
      (__PyInterpreterState_IDInitref = Module[
        "__PyInterpreterState_IDInitref"
      ] =
        wasmExports["_PyInterpreterState_IDInitref"])(a0));
    var _PyInterpreterState_GetID = (Module["_PyInterpreterState_GetID"] = (
      a0,
    ) =>
      (_PyInterpreterState_GetID = Module["_PyInterpreterState_GetID"] =
        wasmExports["PyInterpreterState_GetID"])(a0));
    var __PyInterpreterID_LookUp = (Module["__PyInterpreterID_LookUp"] = (a0) =>
      (__PyInterpreterID_LookUp = Module["__PyInterpreterID_LookUp"] =
        wasmExports["_PyInterpreterID_LookUp"])(a0));
    var _PyLong_AsLongLong = (Module["_PyLong_AsLongLong"] = (a0) =>
      (_PyLong_AsLongLong = Module["_PyLong_AsLongLong"] =
        wasmExports["PyLong_AsLongLong"])(a0));
    var _PyCallIter_New = (Module["_PyCallIter_New"] = (a0, a1) =>
      (_PyCallIter_New = Module["_PyCallIter_New"] =
        wasmExports["PyCallIter_New"])(a0, a1));
    var __PyList_DebugMallocStats = (Module["__PyList_DebugMallocStats"] = (
      a0,
    ) =>
      (__PyList_DebugMallocStats = Module["__PyList_DebugMallocStats"] =
        wasmExports["_PyList_DebugMallocStats"])(a0));
    var _PyList_SetItem = (Module["_PyList_SetItem"] = (a0, a1, a2) =>
      (_PyList_SetItem = Module["_PyList_SetItem"] =
        wasmExports["PyList_SetItem"])(a0, a1, a2));
    var _PyList_Insert = (Module["_PyList_Insert"] = (a0, a1, a2) =>
      (_PyList_Insert = Module["_PyList_Insert"] =
        wasmExports["PyList_Insert"])(a0, a1, a2));
    var _PyList_GetSlice = (Module["_PyList_GetSlice"] = (a0, a1, a2) =>
      (_PyList_GetSlice = Module["_PyList_GetSlice"] =
        wasmExports["PyList_GetSlice"])(a0, a1, a2));
    var _Py_ReprEnter = (Module["_Py_ReprEnter"] = (a0) =>
      (_Py_ReprEnter = Module["_Py_ReprEnter"] = wasmExports["Py_ReprEnter"])(
        a0,
      ));
    var __PyUnicodeWriter_WriteChar = (Module["__PyUnicodeWriter_WriteChar"] = (
      a0,
      a1,
    ) =>
      (__PyUnicodeWriter_WriteChar = Module["__PyUnicodeWriter_WriteChar"] =
        wasmExports["_PyUnicodeWriter_WriteChar"])(a0, a1));
    var _Py_ReprLeave = (Module["_Py_ReprLeave"] = (a0) =>
      (_Py_ReprLeave = Module["_Py_ReprLeave"] = wasmExports["Py_ReprLeave"])(
        a0,
      ));
    var __PyEval_SliceIndexNotNone = (Module["__PyEval_SliceIndexNotNone"] = (
      a0,
      a1,
    ) =>
      (__PyEval_SliceIndexNotNone = Module["__PyEval_SliceIndexNotNone"] =
        wasmExports["_PyEval_SliceIndexNotNone"])(a0, a1));
    var _PyObject_HashNotImplemented = (Module["_PyObject_HashNotImplemented"] =
      (a0) =>
        (_PyObject_HashNotImplemented = Module["_PyObject_HashNotImplemented"] =
          wasmExports["PyObject_HashNotImplemented"])(a0));
    var __PyLong_New = (Module["__PyLong_New"] = (a0) =>
      (__PyLong_New = Module["__PyLong_New"] = wasmExports["_PyLong_New"])(a0));
    var _PyLong_FromUnsignedLong = (Module["_PyLong_FromUnsignedLong"] = (a0) =>
      (_PyLong_FromUnsignedLong = Module["_PyLong_FromUnsignedLong"] =
        wasmExports["PyLong_FromUnsignedLong"])(a0));
    var _PyLong_FromUnsignedLongLong = (Module["_PyLong_FromUnsignedLongLong"] =
      (a0) =>
        (_PyLong_FromUnsignedLongLong = Module["_PyLong_FromUnsignedLongLong"] =
          wasmExports["PyLong_FromUnsignedLongLong"])(a0));
    var _PyLong_FromSize_t = (Module["_PyLong_FromSize_t"] = (a0) =>
      (_PyLong_FromSize_t = Module["_PyLong_FromSize_t"] =
        wasmExports["PyLong_FromSize_t"])(a0));
    var _PyLong_AsUnsignedLong = (Module["_PyLong_AsUnsignedLong"] = (a0) =>
      (_PyLong_AsUnsignedLong = Module["_PyLong_AsUnsignedLong"] =
        wasmExports["PyLong_AsUnsignedLong"])(a0));
    var _PyLong_AsSize_t = (Module["_PyLong_AsSize_t"] = (a0) =>
      (_PyLong_AsSize_t = Module["_PyLong_AsSize_t"] =
        wasmExports["PyLong_AsSize_t"])(a0));
    var _PyLong_AsUnsignedLongMask = (Module["_PyLong_AsUnsignedLongMask"] = (
      a0,
    ) =>
      (_PyLong_AsUnsignedLongMask = Module["_PyLong_AsUnsignedLongMask"] =
        wasmExports["PyLong_AsUnsignedLongMask"])(a0));
    var __PyLong_FromByteArray = (Module["__PyLong_FromByteArray"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyLong_FromByteArray = Module["__PyLong_FromByteArray"] =
        wasmExports["_PyLong_FromByteArray"])(a0, a1, a2, a3));
    var _PyLong_AsVoidPtr = (Module["_PyLong_AsVoidPtr"] = (a0) =>
      (_PyLong_AsVoidPtr = Module["_PyLong_AsVoidPtr"] =
        wasmExports["PyLong_AsVoidPtr"])(a0));
    var _PyLong_AsUnsignedLongLong = (Module["_PyLong_AsUnsignedLongLong"] = (
      a0,
    ) =>
      (_PyLong_AsUnsignedLongLong = Module["_PyLong_AsUnsignedLongLong"] =
        wasmExports["PyLong_AsUnsignedLongLong"])(a0));
    var _PyLong_AsUnsignedLongLongMask = (Module[
      "_PyLong_AsUnsignedLongLongMask"
    ] = (a0) =>
      (_PyLong_AsUnsignedLongLongMask = Module[
        "_PyLong_AsUnsignedLongLongMask"
      ] =
        wasmExports["PyLong_AsUnsignedLongLongMask"])(a0));
    var __PyLong_UnsignedShort_Converter = (Module[
      "__PyLong_UnsignedShort_Converter"
    ] = (a0, a1) =>
      (__PyLong_UnsignedShort_Converter = Module[
        "__PyLong_UnsignedShort_Converter"
      ] =
        wasmExports["_PyLong_UnsignedShort_Converter"])(a0, a1));
    var __PyLong_UnsignedInt_Converter = (Module[
      "__PyLong_UnsignedInt_Converter"
    ] = (a0, a1) =>
      (__PyLong_UnsignedInt_Converter = Module[
        "__PyLong_UnsignedInt_Converter"
      ] =
        wasmExports["_PyLong_UnsignedInt_Converter"])(a0, a1));
    var __PyLong_UnsignedLong_Converter = (Module[
      "__PyLong_UnsignedLong_Converter"
    ] = (a0, a1) =>
      (__PyLong_UnsignedLong_Converter = Module[
        "__PyLong_UnsignedLong_Converter"
      ] =
        wasmExports["_PyLong_UnsignedLong_Converter"])(a0, a1));
    var __PyLong_UnsignedLongLong_Converter = (Module[
      "__PyLong_UnsignedLongLong_Converter"
    ] = (a0, a1) =>
      (__PyLong_UnsignedLongLong_Converter = Module[
        "__PyLong_UnsignedLongLong_Converter"
      ] =
        wasmExports["_PyLong_UnsignedLongLong_Converter"])(a0, a1));
    var __PyLong_Size_t_Converter = (Module["__PyLong_Size_t_Converter"] = (
      a0,
      a1,
    ) =>
      (__PyLong_Size_t_Converter = Module["__PyLong_Size_t_Converter"] =
        wasmExports["_PyLong_Size_t_Converter"])(a0, a1));
    var __PyUnicodeWriter_PrepareInternal = (Module[
      "__PyUnicodeWriter_PrepareInternal"
    ] = (a0, a1, a2) =>
      (__PyUnicodeWriter_PrepareInternal = Module[
        "__PyUnicodeWriter_PrepareInternal"
      ] =
        wasmExports["_PyUnicodeWriter_PrepareInternal"])(a0, a1, a2));
    var __PyLong_FormatWriter = (Module["__PyLong_FormatWriter"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyLong_FormatWriter = Module["__PyLong_FormatWriter"] =
        wasmExports["_PyLong_FormatWriter"])(a0, a1, a2, a3));
    var __PyLong_Frexp = (Module["__PyLong_Frexp"] = (a0, a1) =>
      (__PyLong_Frexp = Module["__PyLong_Frexp"] =
        wasmExports["_PyLong_Frexp"])(a0, a1));
    var __PyLong_Rshift = (Module["__PyLong_Rshift"] = (a0, a1) =>
      (__PyLong_Rshift = Module["__PyLong_Rshift"] =
        wasmExports["_PyLong_Rshift"])(a0, a1));
    var __PyLong_GCD = (Module["__PyLong_GCD"] = (a0, a1) =>
      (__PyLong_GCD = Module["__PyLong_GCD"] = wasmExports["_PyLong_GCD"])(
        a0,
        a1,
      ));
    var __PyLong_DivmodNear = (Module["__PyLong_DivmodNear"] = (a0, a1) =>
      (__PyLong_DivmodNear = Module["__PyLong_DivmodNear"] =
        wasmExports["_PyLong_DivmodNear"])(a0, a1));
    var _PyLong_GetInfo = (Module["_PyLong_GetInfo"] = () =>
      (_PyLong_GetInfo = Module["_PyLong_GetInfo"] =
        wasmExports["PyLong_GetInfo"])());
    var __PyUnicode_Equal = (Module["__PyUnicode_Equal"] = (a0, a1) =>
      (__PyUnicode_Equal = Module["__PyUnicode_Equal"] =
        wasmExports["_PyUnicode_Equal"])(a0, a1));
    var _PyObject_Bytes = (Module["_PyObject_Bytes"] = (a0) =>
      (_PyObject_Bytes = Module["_PyObject_Bytes"] =
        wasmExports["PyObject_Bytes"])(a0));
    var __PyLong_FormatAdvancedWriter = (Module[
      "__PyLong_FormatAdvancedWriter"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyLong_FormatAdvancedWriter = Module["__PyLong_FormatAdvancedWriter"] =
        wasmExports["_PyLong_FormatAdvancedWriter"])(a0, a1, a2, a3, a4));
    var __PyDict_DebugMallocStats = (Module["__PyDict_DebugMallocStats"] = (
      a0,
    ) =>
      (__PyDict_DebugMallocStats = Module["__PyDict_DebugMallocStats"] =
        wasmExports["_PyDict_DebugMallocStats"])(a0));
    var __PyDict_CheckConsistency = (Module["__PyDict_CheckConsistency"] = (
      a0,
      a1,
    ) =>
      (__PyDict_CheckConsistency = Module["__PyDict_CheckConsistency"] =
        wasmExports["_PyDict_CheckConsistency"])(a0, a1));
    var __PyObject_AssertFailed = (Module["__PyObject_AssertFailed"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__PyObject_AssertFailed = Module["__PyObject_AssertFailed"] =
        wasmExports["_PyObject_AssertFailed"])(a0, a1, a2, a3, a4, a5));
    var __PyDict_HasOnlyStringKeys = (Module["__PyDict_HasOnlyStringKeys"] = (
      a0,
    ) =>
      (__PyDict_HasOnlyStringKeys = Module["__PyDict_HasOnlyStringKeys"] =
        wasmExports["_PyDict_HasOnlyStringKeys"])(a0));
    var __PyDict_Next = (Module["__PyDict_Next"] = (a0, a1, a2, a3, a4) =>
      (__PyDict_Next = Module["__PyDict_Next"] = wasmExports["_PyDict_Next"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var __PyDict_MaybeUntrack = (Module["__PyDict_MaybeUntrack"] = (a0) =>
      (__PyDict_MaybeUntrack = Module["__PyDict_MaybeUntrack"] =
        wasmExports["_PyDict_MaybeUntrack"])(a0));
    var _PyObject_IS_GC = (Module["_PyObject_IS_GC"] = (a0) =>
      (_PyObject_IS_GC = Module["_PyObject_IS_GC"] =
        wasmExports["PyObject_IS_GC"])(a0));
    var __PyDict_NewPresized = (Module["__PyDict_NewPresized"] = (a0) =>
      (__PyDict_NewPresized = Module["__PyDict_NewPresized"] =
        wasmExports["_PyDict_NewPresized"])(a0));
    var _PyDict_GetItem = (Module["_PyDict_GetItem"] = (a0, a1) =>
      (_PyDict_GetItem = Module["_PyDict_GetItem"] =
        wasmExports["PyDict_GetItem"])(a0, a1));
    var __PyErr_Fetch = (Module["__PyErr_Fetch"] = (a0, a1, a2, a3) =>
      (__PyErr_Fetch = Module["__PyErr_Fetch"] = wasmExports["_PyErr_Fetch"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var __PyErr_Restore = (Module["__PyErr_Restore"] = (a0, a1, a2, a3) =>
      (__PyErr_Restore = Module["__PyErr_Restore"] =
        wasmExports["_PyErr_Restore"])(a0, a1, a2, a3));
    var __PyDict_GetItem_KnownHash = (Module["__PyDict_GetItem_KnownHash"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyDict_GetItem_KnownHash = Module["__PyDict_GetItem_KnownHash"] =
        wasmExports["_PyDict_GetItem_KnownHash"])(a0, a1, a2));
    var __PyDict_GetItemWithError = (Module["__PyDict_GetItemWithError"] = (
      a0,
      a1,
    ) =>
      (__PyDict_GetItemWithError = Module["__PyDict_GetItemWithError"] =
        wasmExports["_PyDict_GetItemWithError"])(a0, a1));
    var __PyDict_GetItemIdWithError = (Module["__PyDict_GetItemIdWithError"] = (
      a0,
      a1,
    ) =>
      (__PyDict_GetItemIdWithError = Module["__PyDict_GetItemIdWithError"] =
        wasmExports["_PyDict_GetItemIdWithError"])(a0, a1));
    var __PyDict_GetItemStringWithError = (Module[
      "__PyDict_GetItemStringWithError"
    ] = (a0, a1) =>
      (__PyDict_GetItemStringWithError = Module[
        "__PyDict_GetItemStringWithError"
      ] =
        wasmExports["_PyDict_GetItemStringWithError"])(a0, a1));
    var __PyDict_SetItem_KnownHash = (Module["__PyDict_SetItem_KnownHash"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyDict_SetItem_KnownHash = Module["__PyDict_SetItem_KnownHash"] =
        wasmExports["_PyDict_SetItem_KnownHash"])(a0, a1, a2, a3));
    var _PyDict_DelItem = (Module["_PyDict_DelItem"] = (a0, a1) =>
      (_PyDict_DelItem = Module["_PyDict_DelItem"] =
        wasmExports["PyDict_DelItem"])(a0, a1));
    var __PyErr_SetKeyError = (Module["__PyErr_SetKeyError"] = (a0) =>
      (__PyErr_SetKeyError = Module["__PyErr_SetKeyError"] =
        wasmExports["_PyErr_SetKeyError"])(a0));
    var __PyDict_DelItem_KnownHash = (Module["__PyDict_DelItem_KnownHash"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyDict_DelItem_KnownHash = Module["__PyDict_DelItem_KnownHash"] =
        wasmExports["_PyDict_DelItem_KnownHash"])(a0, a1, a2));
    var __PyDict_DelItemIf = (Module["__PyDict_DelItemIf"] = (a0, a1, a2) =>
      (__PyDict_DelItemIf = Module["__PyDict_DelItemIf"] =
        wasmExports["_PyDict_DelItemIf"])(a0, a1, a2));
    var _PyDict_Clear = (Module["_PyDict_Clear"] = (a0) =>
      (_PyDict_Clear = Module["_PyDict_Clear"] = wasmExports["PyDict_Clear"])(
        a0,
      ));
    var __PyDict_Pop = (Module["__PyDict_Pop"] = (a0, a1, a2) =>
      (__PyDict_Pop = Module["__PyDict_Pop"] = wasmExports["_PyDict_Pop"])(
        a0,
        a1,
        a2,
      ));
    var _PyDict_MergeFromSeq2 = (Module["_PyDict_MergeFromSeq2"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyDict_MergeFromSeq2 = Module["_PyDict_MergeFromSeq2"] =
        wasmExports["PyDict_MergeFromSeq2"])(a0, a1, a2));
    var _PyDict_SetDefault = (Module["_PyDict_SetDefault"] = (a0, a1, a2) =>
      (_PyDict_SetDefault = Module["_PyDict_SetDefault"] =
        wasmExports["PyDict_SetDefault"])(a0, a1, a2));
    var _PyDict_Update = (Module["_PyDict_Update"] = (a0, a1) =>
      (_PyDict_Update = Module["_PyDict_Update"] =
        wasmExports["PyDict_Update"])(a0, a1));
    var _PyDict_Merge = (Module["_PyDict_Merge"] = (a0, a1, a2) =>
      (_PyDict_Merge = Module["_PyDict_Merge"] = wasmExports["PyDict_Merge"])(
        a0,
        a1,
        a2,
      ));
    var __PyDict_MergeEx = (Module["__PyDict_MergeEx"] = (a0, a1, a2) =>
      (__PyDict_MergeEx = Module["__PyDict_MergeEx"] =
        wasmExports["_PyDict_MergeEx"])(a0, a1, a2));
    var _PyDict_Size = (Module["_PyDict_Size"] = (a0) =>
      (_PyDict_Size = Module["_PyDict_Size"] = wasmExports["PyDict_Size"])(a0));
    var __PyDict_SizeOf = (Module["__PyDict_SizeOf"] = (a0) =>
      (__PyDict_SizeOf = Module["__PyDict_SizeOf"] =
        wasmExports["_PyDict_SizeOf"])(a0));
    var __PyDict_Contains_KnownHash = (Module["__PyDict_Contains_KnownHash"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyDict_Contains_KnownHash = Module["__PyDict_Contains_KnownHash"] =
        wasmExports["_PyDict_Contains_KnownHash"])(a0, a1, a2));
    var __PyDict_ContainsId = (Module["__PyDict_ContainsId"] = (a0, a1) =>
      (__PyDict_ContainsId = Module["__PyDict_ContainsId"] =
        wasmExports["_PyDict_ContainsId"])(a0, a1));
    var _PyArg_ValidateKeywordArguments = (Module[
      "_PyArg_ValidateKeywordArguments"
    ] = (a0) =>
      (_PyArg_ValidateKeywordArguments = Module[
        "_PyArg_ValidateKeywordArguments"
      ] =
        wasmExports["PyArg_ValidateKeywordArguments"])(a0));
    var _PyDict_GetItemString = (Module["_PyDict_GetItemString"] = (a0, a1) =>
      (_PyDict_GetItemString = Module["_PyDict_GetItemString"] =
        wasmExports["PyDict_GetItemString"])(a0, a1));
    var __PyDict_SetItemId = (Module["__PyDict_SetItemId"] = (a0, a1, a2) =>
      (__PyDict_SetItemId = Module["__PyDict_SetItemId"] =
        wasmExports["_PyDict_SetItemId"])(a0, a1, a2));
    var __PyDict_DelItemId = (Module["__PyDict_DelItemId"] = (a0, a1) =>
      (__PyDict_DelItemId = Module["__PyDict_DelItemId"] =
        wasmExports["_PyDict_DelItemId"])(a0, a1));
    var _PyDict_DelItemString = (Module["_PyDict_DelItemString"] = (a0, a1) =>
      (_PyDict_DelItemString = Module["_PyDict_DelItemString"] =
        wasmExports["PyDict_DelItemString"])(a0, a1));
    var __PyDictView_New = (Module["__PyDictView_New"] = (a0, a1) =>
      (__PyDictView_New = Module["__PyDictView_New"] =
        wasmExports["_PyDictView_New"])(a0, a1));
    var __PyDictView_Intersect = (Module["__PyDictView_Intersect"] = (a0, a1) =>
      (__PyDictView_Intersect = Module["__PyDictView_Intersect"] =
        wasmExports["_PyDictView_Intersect"])(a0, a1));
    var _PyODict_New = (Module["_PyODict_New"] = () =>
      (_PyODict_New = Module["_PyODict_New"] = wasmExports["PyODict_New"])());
    var _PyODict_SetItem = (Module["_PyODict_SetItem"] = (a0, a1, a2) =>
      (_PyODict_SetItem = Module["_PyODict_SetItem"] =
        wasmExports["PyODict_SetItem"])(a0, a1, a2));
    var __PyErr_ChainExceptions = (Module["__PyErr_ChainExceptions"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyErr_ChainExceptions = Module["__PyErr_ChainExceptions"] =
        wasmExports["_PyErr_ChainExceptions"])(a0, a1, a2));
    var _PyODict_DelItem = (Module["_PyODict_DelItem"] = (a0, a1) =>
      (_PyODict_DelItem = Module["_PyODict_DelItem"] =
        wasmExports["PyODict_DelItem"])(a0, a1));
    var _PyMemoryView_FromMemory = (Module["_PyMemoryView_FromMemory"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyMemoryView_FromMemory = Module["_PyMemoryView_FromMemory"] =
        wasmExports["PyMemoryView_FromMemory"])(a0, a1, a2));
    var _PyMemoryView_FromBuffer = (Module["_PyMemoryView_FromBuffer"] = (a0) =>
      (_PyMemoryView_FromBuffer = Module["_PyMemoryView_FromBuffer"] =
        wasmExports["PyMemoryView_FromBuffer"])(a0));
    var _PyMemoryView_GetContiguous = (Module["_PyMemoryView_GetContiguous"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyMemoryView_GetContiguous = Module["_PyMemoryView_GetContiguous"] =
        wasmExports["PyMemoryView_GetContiguous"])(a0, a1, a2));
    var _PyUnicode_AsASCIIString = (Module["_PyUnicode_AsASCIIString"] = (a0) =>
      (_PyUnicode_AsASCIIString = Module["_PyUnicode_AsASCIIString"] =
        wasmExports["PyUnicode_AsASCIIString"])(a0));
    var _PyCFunction_New = (Module["_PyCFunction_New"] = (a0, a1) =>
      (_PyCFunction_New = Module["_PyCFunction_New"] =
        wasmExports["PyCFunction_New"])(a0, a1));
    var _PyCFunction_NewEx = (Module["_PyCFunction_NewEx"] = (a0, a1, a2) =>
      (_PyCFunction_NewEx = Module["_PyCFunction_NewEx"] =
        wasmExports["PyCFunction_NewEx"])(a0, a1, a2));
    var _PyCFunction_GetFunction = (Module["_PyCFunction_GetFunction"] = (a0) =>
      (_PyCFunction_GetFunction = Module["_PyCFunction_GetFunction"] =
        wasmExports["PyCFunction_GetFunction"])(a0));
    var _PyCFunction_GetSelf = (Module["_PyCFunction_GetSelf"] = (a0) =>
      (_PyCFunction_GetSelf = Module["_PyCFunction_GetSelf"] =
        wasmExports["PyCFunction_GetSelf"])(a0));
    var _PyCFunction_GetFlags = (Module["_PyCFunction_GetFlags"] = (a0) =>
      (_PyCFunction_GetFlags = Module["_PyCFunction_GetFlags"] =
        wasmExports["PyCFunction_GetFlags"])(a0));
    var _PyModuleDef_Init = (Module["_PyModuleDef_Init"] = (a0) =>
      (_PyModuleDef_Init = Module["_PyModuleDef_Init"] =
        wasmExports["PyModuleDef_Init"])(a0));
    var _PyModule_NewObject = (Module["_PyModule_NewObject"] = (a0) =>
      (_PyModule_NewObject = Module["_PyModule_NewObject"] =
        wasmExports["PyModule_NewObject"])(a0));
    var _PyModule_New = (Module["_PyModule_New"] = (a0) =>
      (_PyModule_New = Module["_PyModule_New"] = wasmExports["PyModule_New"])(
        a0,
      ));
    var __PyImport_IsInitialized = (Module["__PyImport_IsInitialized"] = (a0) =>
      (__PyImport_IsInitialized = Module["__PyImport_IsInitialized"] =
        wasmExports["_PyImport_IsInitialized"])(a0));
    var __PyModule_CreateInitialized = (Module["__PyModule_CreateInitialized"] =
      (a0, a1) =>
        (__PyModule_CreateInitialized = Module["__PyModule_CreateInitialized"] =
          wasmExports["_PyModule_CreateInitialized"])(a0, a1));
    var _strrchr = (Module["_strrchr"] = (a0, a1) =>
      (_strrchr = Module["_strrchr"] = wasmExports["strrchr"])(a0, a1));
    var _PyModule_GetNameObject = (Module["_PyModule_GetNameObject"] = (a0) =>
      (_PyModule_GetNameObject = Module["_PyModule_GetNameObject"] =
        wasmExports["PyModule_GetNameObject"])(a0));
    var _PyModule_SetDocString = (Module["_PyModule_SetDocString"] = (a0, a1) =>
      (_PyModule_SetDocString = Module["_PyModule_SetDocString"] =
        wasmExports["PyModule_SetDocString"])(a0, a1));
    var _PyModule_FromDefAndSpec2 = (Module["_PyModule_FromDefAndSpec2"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyModule_FromDefAndSpec2 = Module["_PyModule_FromDefAndSpec2"] =
        wasmExports["PyModule_FromDefAndSpec2"])(a0, a1, a2));
    var _PyModule_ExecDef = (Module["_PyModule_ExecDef"] = (a0, a1) =>
      (_PyModule_ExecDef = Module["_PyModule_ExecDef"] =
        wasmExports["PyModule_ExecDef"])(a0, a1));
    var _PyModule_GetName = (Module["_PyModule_GetName"] = (a0) =>
      (_PyModule_GetName = Module["_PyModule_GetName"] =
        wasmExports["PyModule_GetName"])(a0));
    var _PyModule_GetFilenameObject = (Module["_PyModule_GetFilenameObject"] = (
      a0,
    ) =>
      (_PyModule_GetFilenameObject = Module["_PyModule_GetFilenameObject"] =
        wasmExports["PyModule_GetFilenameObject"])(a0));
    var _PyModule_GetFilename = (Module["_PyModule_GetFilename"] = (a0) =>
      (_PyModule_GetFilename = Module["_PyModule_GetFilename"] =
        wasmExports["PyModule_GetFilename"])(a0));
    var _PyModule_GetDef = (Module["_PyModule_GetDef"] = (a0) =>
      (_PyModule_GetDef = Module["_PyModule_GetDef"] =
        wasmExports["PyModule_GetDef"])(a0));
    var _PyModule_GetState = (Module["_PyModule_GetState"] = (a0) =>
      (_PyModule_GetState = Module["_PyModule_GetState"] =
        wasmExports["PyModule_GetState"])(a0));
    var __PyModule_Clear = (Module["__PyModule_Clear"] = (a0) =>
      (__PyModule_Clear = Module["__PyModule_Clear"] =
        wasmExports["_PyModule_Clear"])(a0));
    var __PyModule_ClearDict = (Module["__PyModule_ClearDict"] = (a0) =>
      (__PyModule_ClearDict = Module["__PyModule_ClearDict"] =
        wasmExports["_PyModule_ClearDict"])(a0));
    var __PyModuleSpec_IsInitializing = (Module[
      "__PyModuleSpec_IsInitializing"
    ] = (a0) =>
      (__PyModuleSpec_IsInitializing = Module["__PyModuleSpec_IsInitializing"] =
        wasmExports["_PyModuleSpec_IsInitializing"])(a0));
    var _PySys_FormatStderr = (Module["_PySys_FormatStderr"] = (a0, a1) =>
      (_PySys_FormatStderr = Module["_PySys_FormatStderr"] =
        wasmExports["PySys_FormatStderr"])(a0, a1));
    var __PyNamespace_New = (Module["__PyNamespace_New"] = (a0) =>
      (__PyNamespace_New = Module["__PyNamespace_New"] =
        wasmExports["_PyNamespace_New"])(a0));
    var __PyObject_CheckConsistency = (Module["__PyObject_CheckConsistency"] = (
      a0,
      a1,
    ) =>
      (__PyObject_CheckConsistency = Module["__PyObject_CheckConsistency"] =
        wasmExports["_PyObject_CheckConsistency"])(a0, a1));
    var __PyType_CheckConsistency = (Module["__PyType_CheckConsistency"] = (
      a0,
    ) =>
      (__PyType_CheckConsistency = Module["__PyType_CheckConsistency"] =
        wasmExports["_PyType_CheckConsistency"])(a0));
    var __PyUnicode_CheckConsistency = (Module["__PyUnicode_CheckConsistency"] =
      (a0, a1) =>
        (__PyUnicode_CheckConsistency = Module["__PyUnicode_CheckConsistency"] =
          wasmExports["_PyUnicode_CheckConsistency"])(a0, a1));
    var __PyObject_IsFreed = (Module["__PyObject_IsFreed"] = (a0) =>
      (__PyObject_IsFreed = Module["__PyObject_IsFreed"] =
        wasmExports["_PyObject_IsFreed"])(a0));
    var _fiprintf = (Module["_fiprintf"] = (a0, a1, a2) =>
      (_fiprintf = Module["_fiprintf"] = wasmExports["fiprintf"])(a0, a1, a2));
    var _fwrite = (Module["_fwrite"] = (a0, a1, a2, a3) =>
      (_fwrite = Module["_fwrite"] = wasmExports["fwrite"])(a0, a1, a2, a3));
    var _fputc = (Module["_fputc"] = (a0, a1) =>
      (_fputc = Module["_fputc"] = wasmExports["fputc"])(a0, a1));
    var __PyObject_Dump = (Module["__PyObject_Dump"] = (a0) =>
      (__PyObject_Dump = Module["__PyObject_Dump"] =
        wasmExports["_PyObject_Dump"])(a0));
    var _Py_IncRef = (Module["_Py_IncRef"] = (a0) =>
      (_Py_IncRef = Module["_Py_IncRef"] = wasmExports["Py_IncRef"])(a0));
    var _Py_DecRef = (Module["_Py_DecRef"] = (a0) =>
      (_Py_DecRef = Module["_Py_DecRef"] = wasmExports["Py_DecRef"])(a0));
    var __Py_IncRef = (Module["__Py_IncRef"] = (a0) =>
      (__Py_IncRef = Module["__Py_IncRef"] = wasmExports["_Py_IncRef"])(a0));
    var __Py_DecRef = (Module["__Py_DecRef"] = (a0) =>
      (__Py_DecRef = Module["__Py_DecRef"] = wasmExports["_Py_DecRef"])(a0));
    var _PyObject_Init = (Module["_PyObject_Init"] = (a0, a1) =>
      (_PyObject_Init = Module["_PyObject_Init"] =
        wasmExports["PyObject_Init"])(a0, a1));
    var _PyObject_InitVar = (Module["_PyObject_InitVar"] = (a0, a1, a2) =>
      (_PyObject_InitVar = Module["_PyObject_InitVar"] =
        wasmExports["PyObject_InitVar"])(a0, a1, a2));
    var _PyObject_CallFinalizer = (Module["_PyObject_CallFinalizer"] = (a0) =>
      (_PyObject_CallFinalizer = Module["_PyObject_CallFinalizer"] =
        wasmExports["PyObject_CallFinalizer"])(a0));
    var _PyObject_Print = (Module["_PyObject_Print"] = (a0, a1, a2) =>
      (_PyObject_Print = Module["_PyObject_Print"] =
        wasmExports["PyObject_Print"])(a0, a1, a2));
    var _ferror = (Module["_ferror"] = (a0) =>
      (_ferror = Module["_ferror"] = wasmExports["ferror"])(a0));
    var __Py_BreakPoint = (Module["__Py_BreakPoint"] = () =>
      (__Py_BreakPoint = Module["__Py_BreakPoint"] =
        wasmExports["_Py_BreakPoint"])());
    var _PyGILState_Ensure = (Module["_PyGILState_Ensure"] = () =>
      (_PyGILState_Ensure = Module["_PyGILState_Ensure"] =
        wasmExports["PyGILState_Ensure"])());
    var _PyGILState_Release = (Module["_PyGILState_Release"] = (a0) =>
      (_PyGILState_Release = Module["_PyGILState_Release"] =
        wasmExports["PyGILState_Release"])(a0));
    var __PyUnicode_AsASCIIString = (Module["__PyUnicode_AsASCIIString"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_AsASCIIString = Module["__PyUnicode_AsASCIIString"] =
        wasmExports["_PyUnicode_AsASCIIString"])(a0, a1));
    var _PyUnicode_DecodeASCII = (Module["_PyUnicode_DecodeASCII"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_DecodeASCII = Module["_PyUnicode_DecodeASCII"] =
        wasmExports["PyUnicode_DecodeASCII"])(a0, a1, a2));
    var __PyObject_GenericGetAttrWithDict = (Module[
      "__PyObject_GenericGetAttrWithDict"
    ] = (a0, a1, a2, a3) =>
      (__PyObject_GenericGetAttrWithDict = Module[
        "__PyObject_GenericGetAttrWithDict"
      ] =
        wasmExports["_PyObject_GenericGetAttrWithDict"])(a0, a1, a2, a3));
    var _PyObject_HasAttrString = (Module["_PyObject_HasAttrString"] = (
      a0,
      a1,
    ) =>
      (_PyObject_HasAttrString = Module["_PyObject_HasAttrString"] =
        wasmExports["PyObject_HasAttrString"])(a0, a1));
    var __PyObject_LookupAttrId = (Module["__PyObject_LookupAttrId"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyObject_LookupAttrId = Module["__PyObject_LookupAttrId"] =
        wasmExports["_PyObject_LookupAttrId"])(a0, a1, a2));
    var __PyObject_GetDictPtr = (Module["__PyObject_GetDictPtr"] = (a0) =>
      (__PyObject_GetDictPtr = Module["__PyObject_GetDictPtr"] =
        wasmExports["_PyObject_GetDictPtr"])(a0));
    var __PyObject_GenericSetAttrWithDict = (Module[
      "__PyObject_GenericSetAttrWithDict"
    ] = (a0, a1, a2, a3) =>
      (__PyObject_GenericSetAttrWithDict = Module[
        "__PyObject_GenericSetAttrWithDict"
      ] =
        wasmExports["_PyObject_GenericSetAttrWithDict"])(a0, a1, a2, a3));
    var _PyObject_Not = (Module["_PyObject_Not"] = (a0) =>
      (_PyObject_Not = Module["_PyObject_Not"] = wasmExports["PyObject_Not"])(
        a0,
      ));
    var _PyEval_GetLocals = (Module["_PyEval_GetLocals"] = () =>
      (_PyEval_GetLocals = Module["_PyEval_GetLocals"] =
        wasmExports["PyEval_GetLocals"])());
    var __PyObject_DebugTypeStats = (Module["__PyObject_DebugTypeStats"] = (
      a0,
    ) =>
      (__PyObject_DebugTypeStats = Module["__PyObject_DebugTypeStats"] =
        wasmExports["_PyObject_DebugTypeStats"])(a0));
    var __PyTuple_DebugMallocStats = (Module["__PyTuple_DebugMallocStats"] = (
      a0,
    ) =>
      (__PyTuple_DebugMallocStats = Module["__PyTuple_DebugMallocStats"] =
        wasmExports["_PyTuple_DebugMallocStats"])(a0));
    var _PyThreadState_GetDict = (Module["_PyThreadState_GetDict"] = () =>
      (_PyThreadState_GetDict = Module["_PyThreadState_GetDict"] =
        wasmExports["PyThreadState_GetDict"])());
    var _PyObject_GET_WEAKREFS_LISTPTR = (Module[
      "_PyObject_GET_WEAKREFS_LISTPTR"
    ] = (a0) =>
      (_PyObject_GET_WEAKREFS_LISTPTR = Module[
        "_PyObject_GET_WEAKREFS_LISTPTR"
      ] =
        wasmExports["PyObject_GET_WEAKREFS_LISTPTR"])(a0));
    var _Py_NewRef = (Module["_Py_NewRef"] = (a0) =>
      (_Py_NewRef = Module["_Py_NewRef"] = wasmExports["Py_NewRef"])(a0));
    var _Py_XNewRef = (Module["_Py_XNewRef"] = (a0) =>
      (_Py_XNewRef = Module["_Py_XNewRef"] = wasmExports["Py_XNewRef"])(a0));
    var _Py_Is = (Module["_Py_Is"] = (a0, a1) =>
      (_Py_Is = Module["_Py_Is"] = wasmExports["Py_Is"])(a0, a1));
    var _Py_IsNone = (Module["_Py_IsNone"] = (a0) =>
      (_Py_IsNone = Module["_Py_IsNone"] = wasmExports["Py_IsNone"])(a0));
    var _Py_IsTrue = (Module["_Py_IsTrue"] = (a0) =>
      (_Py_IsTrue = Module["_Py_IsTrue"] = wasmExports["Py_IsTrue"])(a0));
    var _Py_IsFalse = (Module["_Py_IsFalse"] = (a0) =>
      (_Py_IsFalse = Module["_Py_IsFalse"] = wasmExports["Py_IsFalse"])(a0));
    var __PyMem_SetDefaultAllocator = (Module["__PyMem_SetDefaultAllocator"] = (
      a0,
      a1,
    ) =>
      (__PyMem_SetDefaultAllocator = Module["__PyMem_SetDefaultAllocator"] =
        wasmExports["_PyMem_SetDefaultAllocator"])(a0, a1));
    var __PyMem_GetAllocatorName = (Module["__PyMem_GetAllocatorName"] = (
      a0,
      a1,
    ) =>
      (__PyMem_GetAllocatorName = Module["__PyMem_GetAllocatorName"] =
        wasmExports["_PyMem_GetAllocatorName"])(a0, a1));
    var __PyMem_SetupAllocators = (Module["__PyMem_SetupAllocators"] = (a0) =>
      (__PyMem_SetupAllocators = Module["__PyMem_SetupAllocators"] =
        wasmExports["_PyMem_SetupAllocators"])(a0));
    var _calloc = (Module["_calloc"] = (a0, a1) =>
      (_calloc = Module["_calloc"] = wasmExports["calloc"])(a0, a1));
    var _realloc = (Module["_realloc"] = (a0, a1) =>
      (_realloc = Module["_realloc"] = wasmExports["realloc"])(a0, a1));
    var _PyMem_SetAllocator = (Module["_PyMem_SetAllocator"] = (a0, a1) =>
      (_PyMem_SetAllocator = Module["_PyMem_SetAllocator"] =
        wasmExports["PyMem_SetAllocator"])(a0, a1));
    var _PyMem_SetupDebugHooks = (Module["_PyMem_SetupDebugHooks"] = () =>
      (_PyMem_SetupDebugHooks = Module["_PyMem_SetupDebugHooks"] =
        wasmExports["PyMem_SetupDebugHooks"])());
    var __PyMem_GetCurrentAllocatorName = (Module[
      "__PyMem_GetCurrentAllocatorName"
    ] = () =>
      (__PyMem_GetCurrentAllocatorName = Module[
        "__PyMem_GetCurrentAllocatorName"
      ] =
        wasmExports["_PyMem_GetCurrentAllocatorName"])());
    var _PyMem_GetAllocator = (Module["_PyMem_GetAllocator"] = (a0, a1) =>
      (_PyMem_GetAllocator = Module["_PyMem_GetAllocator"] =
        wasmExports["PyMem_GetAllocator"])(a0, a1));
    var _PyObject_GetArenaAllocator = (Module["_PyObject_GetArenaAllocator"] = (
      a0,
    ) =>
      (_PyObject_GetArenaAllocator = Module["_PyObject_GetArenaAllocator"] =
        wasmExports["PyObject_GetArenaAllocator"])(a0));
    var _PyObject_SetArenaAllocator = (Module["_PyObject_SetArenaAllocator"] = (
      a0,
    ) =>
      (_PyObject_SetArenaAllocator = Module["_PyObject_SetArenaAllocator"] =
        wasmExports["PyObject_SetArenaAllocator"])(a0));
    var _PyMem_RawMalloc = (Module["_PyMem_RawMalloc"] = (a0) =>
      (_PyMem_RawMalloc = Module["_PyMem_RawMalloc"] =
        wasmExports["PyMem_RawMalloc"])(a0));
    var _PyMem_RawCalloc = (Module["_PyMem_RawCalloc"] = (a0, a1) =>
      (_PyMem_RawCalloc = Module["_PyMem_RawCalloc"] =
        wasmExports["PyMem_RawCalloc"])(a0, a1));
    var __PyMem_RawWcsdup = (Module["__PyMem_RawWcsdup"] = (a0) =>
      (__PyMem_RawWcsdup = Module["__PyMem_RawWcsdup"] =
        wasmExports["_PyMem_RawWcsdup"])(a0));
    var _wcslen = (Module["_wcslen"] = (a0) =>
      (_wcslen = Module["_wcslen"] = wasmExports["wcslen"])(a0));
    var __PyMem_RawStrdup = (Module["__PyMem_RawStrdup"] = (a0) =>
      (__PyMem_RawStrdup = Module["__PyMem_RawStrdup"] =
        wasmExports["_PyMem_RawStrdup"])(a0));
    var __PyMem_Strdup = (Module["__PyMem_Strdup"] = (a0) =>
      (__PyMem_Strdup = Module["__PyMem_Strdup"] =
        wasmExports["_PyMem_Strdup"])(a0));
    var __Py_GetAllocatedBlocks = (Module["__Py_GetAllocatedBlocks"] = () =>
      (__Py_GetAllocatedBlocks = Module["__Py_GetAllocatedBlocks"] =
        wasmExports["_Py_GetAllocatedBlocks"])());
    var _PyPickleBuffer_FromObject = (Module["_PyPickleBuffer_FromObject"] = (
      a0,
    ) =>
      (_PyPickleBuffer_FromObject = Module["_PyPickleBuffer_FromObject"] =
        wasmExports["PyPickleBuffer_FromObject"])(a0));
    var _PyPickleBuffer_GetBuffer = (Module["_PyPickleBuffer_GetBuffer"] = (
      a0,
    ) =>
      (_PyPickleBuffer_GetBuffer = Module["_PyPickleBuffer_GetBuffer"] =
        wasmExports["PyPickleBuffer_GetBuffer"])(a0));
    var _PyPickleBuffer_Release = (Module["_PyPickleBuffer_Release"] = (a0) =>
      (_PyPickleBuffer_Release = Module["_PyPickleBuffer_Release"] =
        wasmExports["PyPickleBuffer_Release"])(a0));
    var __PySlice_GetLongIndices = (Module["__PySlice_GetLongIndices"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__PySlice_GetLongIndices = Module["__PySlice_GetLongIndices"] =
        wasmExports["_PySlice_GetLongIndices"])(a0, a1, a2, a3, a4));
    var _PySet_Size = (Module["_PySet_Size"] = (a0) =>
      (_PySet_Size = Module["_PySet_Size"] = wasmExports["PySet_Size"])(a0));
    var _PySet_Clear = (Module["_PySet_Clear"] = (a0) =>
      (_PySet_Clear = Module["_PySet_Clear"] = wasmExports["PySet_Clear"])(a0));
    var _PySet_Pop = (Module["_PySet_Pop"] = (a0) =>
      (_PySet_Pop = Module["_PySet_Pop"] = wasmExports["PySet_Pop"])(a0));
    var __PyUnicode_EQ = (Module["__PyUnicode_EQ"] = (a0, a1) =>
      (__PyUnicode_EQ = Module["__PyUnicode_EQ"] =
        wasmExports["_PyUnicode_EQ"])(a0, a1));
    var _PySlice_New = (Module["_PySlice_New"] = (a0, a1, a2) =>
      (_PySlice_New = Module["_PySlice_New"] = wasmExports["PySlice_New"])(
        a0,
        a1,
        a2,
      ));
    var _PySlice_GetIndices = (Module["_PySlice_GetIndices"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PySlice_GetIndices = Module["_PySlice_GetIndices"] =
        wasmExports["PySlice_GetIndices"])(a0, a1, a2, a3, a4));
    var _PySlice_GetIndicesEx = (Module["_PySlice_GetIndicesEx"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_PySlice_GetIndicesEx = Module["_PySlice_GetIndicesEx"] =
        wasmExports["PySlice_GetIndicesEx"])(a0, a1, a2, a3, a4, a5));
    var _PyStructSequence_SetItem = (Module["_PyStructSequence_SetItem"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyStructSequence_SetItem = Module["_PyStructSequence_SetItem"] =
        wasmExports["PyStructSequence_SetItem"])(a0, a1, a2));
    var _PyStructSequence_GetItem = (Module["_PyStructSequence_GetItem"] = (
      a0,
      a1,
    ) =>
      (_PyStructSequence_GetItem = Module["_PyStructSequence_GetItem"] =
        wasmExports["PyStructSequence_GetItem"])(a0, a1));
    var __PyStructSequence_InitType = (Module["__PyStructSequence_InitType"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyStructSequence_InitType = Module["__PyStructSequence_InitType"] =
        wasmExports["_PyStructSequence_InitType"])(a0, a1, a2));
    var _PyStructSequence_InitType = (Module["_PyStructSequence_InitType"] = (
      a0,
      a1,
    ) =>
      (_PyStructSequence_InitType = Module["_PyStructSequence_InitType"] =
        wasmExports["PyStructSequence_InitType"])(a0, a1));
    var __PyStructSequence_NewType = (Module["__PyStructSequence_NewType"] = (
      a0,
      a1,
    ) =>
      (__PyStructSequence_NewType = Module["__PyStructSequence_NewType"] =
        wasmExports["_PyStructSequence_NewType"])(a0, a1));
    var _PyStructSequence_NewType = (Module["_PyStructSequence_NewType"] = (
      a0,
    ) =>
      (_PyStructSequence_NewType = Module["_PyStructSequence_NewType"] =
        wasmExports["PyStructSequence_NewType"])(a0));
    var _PyTuple_SetItem = (Module["_PyTuple_SetItem"] = (a0, a1, a2) =>
      (_PyTuple_SetItem = Module["_PyTuple_SetItem"] =
        wasmExports["PyTuple_SetItem"])(a0, a1, a2));
    var __PyTuple_MaybeUntrack = (Module["__PyTuple_MaybeUntrack"] = (a0) =>
      (__PyTuple_MaybeUntrack = Module["__PyTuple_MaybeUntrack"] =
        wasmExports["_PyTuple_MaybeUntrack"])(a0));
    var __PyObject_GC_Resize = (Module["__PyObject_GC_Resize"] = (a0, a1) =>
      (__PyObject_GC_Resize = Module["__PyObject_GC_Resize"] =
        wasmExports["_PyObject_GC_Resize"])(a0, a1));
    var _PyType_ClearCache = (Module["_PyType_ClearCache"] = () =>
      (_PyType_ClearCache = Module["_PyType_ClearCache"] =
        wasmExports["PyType_ClearCache"])());
    var _PyType_Modified = (Module["_PyType_Modified"] = (a0) =>
      (_PyType_Modified = Module["_PyType_Modified"] =
        wasmExports["PyType_Modified"])(a0));
    var __PyObject_LookupSpecialId = (Module["__PyObject_LookupSpecialId"] = (
      a0,
      a1,
    ) =>
      (__PyObject_LookupSpecialId = Module["__PyObject_LookupSpecialId"] =
        wasmExports["_PyObject_LookupSpecialId"])(a0, a1));
    var _PyType_GetFlags = (Module["_PyType_GetFlags"] = (a0) =>
      (_PyType_GetFlags = Module["_PyType_GetFlags"] =
        wasmExports["PyType_GetFlags"])(a0));
    var _PyType_SUPPORTS_WEAKREFS = (Module["_PyType_SUPPORTS_WEAKREFS"] = (
      a0,
    ) =>
      (_PyType_SUPPORTS_WEAKREFS = Module["_PyType_SUPPORTS_WEAKREFS"] =
        wasmExports["PyType_SUPPORTS_WEAKREFS"])(a0));
    var __PyType_CalculateMetaclass = (Module["__PyType_CalculateMetaclass"] = (
      a0,
      a1,
    ) =>
      (__PyType_CalculateMetaclass = Module["__PyType_CalculateMetaclass"] =
        wasmExports["_PyType_CalculateMetaclass"])(a0, a1));
    var _PyType_FromModuleAndSpec = (Module["_PyType_FromModuleAndSpec"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyType_FromModuleAndSpec = Module["_PyType_FromModuleAndSpec"] =
        wasmExports["PyType_FromModuleAndSpec"])(a0, a1, a2));
    var __PyWeakref_ClearRef = (Module["__PyWeakref_ClearRef"] = (a0) =>
      (__PyWeakref_ClearRef = Module["__PyWeakref_ClearRef"] =
        wasmExports["_PyWeakref_ClearRef"])(a0));
    var _PyType_FromSpec = (Module["_PyType_FromSpec"] = (a0) =>
      (_PyType_FromSpec = Module["_PyType_FromSpec"] =
        wasmExports["PyType_FromSpec"])(a0));
    var _PyType_GetName = (Module["_PyType_GetName"] = (a0) =>
      (_PyType_GetName = Module["_PyType_GetName"] =
        wasmExports["PyType_GetName"])(a0));
    var _PyType_GetSlot = (Module["_PyType_GetSlot"] = (a0, a1) =>
      (_PyType_GetSlot = Module["_PyType_GetSlot"] =
        wasmExports["PyType_GetSlot"])(a0, a1));
    var _PyType_GetModule = (Module["_PyType_GetModule"] = (a0) =>
      (_PyType_GetModule = Module["_PyType_GetModule"] =
        wasmExports["PyType_GetModule"])(a0));
    var _PyType_GetModuleState = (Module["_PyType_GetModuleState"] = (a0) =>
      (_PyType_GetModuleState = Module["_PyType_GetModuleState"] =
        wasmExports["PyType_GetModuleState"])(a0));
    var _PyType_GetModuleByDef = (Module["_PyType_GetModuleByDef"] = (a0, a1) =>
      (_PyType_GetModuleByDef = Module["_PyType_GetModuleByDef"] =
        wasmExports["PyType_GetModuleByDef"])(a0, a1));
    var __PyType_LookupId = (Module["__PyType_LookupId"] = (a0, a1) =>
      (__PyType_LookupId = Module["__PyType_LookupId"] =
        wasmExports["_PyType_LookupId"])(a0, a1));
    var _PyArg_ParseTuple = (Module["_PyArg_ParseTuple"] = (a0, a1, a2) =>
      (_PyArg_ParseTuple = Module["_PyArg_ParseTuple"] =
        wasmExports["PyArg_ParseTuple"])(a0, a1, a2));
    var _PyUnicode_IsIdentifier = (Module["_PyUnicode_IsIdentifier"] = (a0) =>
      (_PyUnicode_IsIdentifier = Module["_PyUnicode_IsIdentifier"] =
        wasmExports["PyUnicode_IsIdentifier"])(a0));
    var _PyEval_GetGlobals = (Module["_PyEval_GetGlobals"] = () =>
      (_PyEval_GetGlobals = Module["_PyEval_GetGlobals"] =
        wasmExports["PyEval_GetGlobals"])());
    var _PyWeakref_NewRef = (Module["_PyWeakref_NewRef"] = (a0, a1) =>
      (_PyWeakref_NewRef = Module["_PyWeakref_NewRef"] =
        wasmExports["PyWeakref_NewRef"])(a0, a1));
    var _PyImport_GetModule = (Module["_PyImport_GetModule"] = (a0) =>
      (_PyImport_GetModule = Module["_PyImport_GetModule"] =
        wasmExports["PyImport_GetModule"])(a0));
    var _PyImport_Import = (Module["_PyImport_Import"] = (a0) =>
      (_PyImport_Import = Module["_PyImport_Import"] =
        wasmExports["PyImport_Import"])(a0));
    var __Py_GetErrorHandler = (Module["__Py_GetErrorHandler"] = (a0) =>
      (__Py_GetErrorHandler = Module["__Py_GetErrorHandler"] =
        wasmExports["_Py_GetErrorHandler"])(a0));
    var __PyUnicode_FastCopyCharacters = (Module[
      "__PyUnicode_FastCopyCharacters"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyUnicode_FastCopyCharacters = Module[
        "__PyUnicode_FastCopyCharacters"
      ] =
        wasmExports["_PyUnicode_FastCopyCharacters"])(a0, a1, a2, a3, a4));
    var _PyUnicode_CopyCharacters = (Module["_PyUnicode_CopyCharacters"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyUnicode_CopyCharacters = Module["_PyUnicode_CopyCharacters"] =
        wasmExports["PyUnicode_CopyCharacters"])(a0, a1, a2, a3, a4));
    var _PyUnicode_Resize = (Module["_PyUnicode_Resize"] = (a0, a1) =>
      (_PyUnicode_Resize = Module["_PyUnicode_Resize"] =
        wasmExports["PyUnicode_Resize"])(a0, a1));
    var _PyUnicode_FromUnicode = (Module["_PyUnicode_FromUnicode"] = (a0, a1) =>
      (_PyUnicode_FromUnicode = Module["_PyUnicode_FromUnicode"] =
        wasmExports["PyUnicode_FromUnicode"])(a0, a1));
    var _PyUnicode_FromWideChar = (Module["_PyUnicode_FromWideChar"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_FromWideChar = Module["_PyUnicode_FromWideChar"] =
        wasmExports["PyUnicode_FromWideChar"])(a0, a1));
    var _PyUnicode_FromKindAndData = (Module["_PyUnicode_FromKindAndData"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_FromKindAndData = Module["_PyUnicode_FromKindAndData"] =
        wasmExports["PyUnicode_FromKindAndData"])(a0, a1, a2));
    var __PyUnicode_FindMaxChar = (Module["__PyUnicode_FindMaxChar"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyUnicode_FindMaxChar = Module["__PyUnicode_FindMaxChar"] =
        wasmExports["_PyUnicode_FindMaxChar"])(a0, a1, a2));
    var _PyUnicode_AsUCS4 = (Module["_PyUnicode_AsUCS4"] = (a0, a1, a2, a3) =>
      (_PyUnicode_AsUCS4 = Module["_PyUnicode_AsUCS4"] =
        wasmExports["PyUnicode_AsUCS4"])(a0, a1, a2, a3));
    var _PyUnicode_AsUCS4Copy = (Module["_PyUnicode_AsUCS4Copy"] = (a0) =>
      (_PyUnicode_AsUCS4Copy = Module["_PyUnicode_AsUCS4Copy"] =
        wasmExports["PyUnicode_AsUCS4Copy"])(a0));
    var _PyUnicode_Fill = (Module["_PyUnicode_Fill"] = (a0, a1, a2, a3) =>
      (_PyUnicode_Fill = Module["_PyUnicode_Fill"] =
        wasmExports["PyUnicode_Fill"])(a0, a1, a2, a3));
    var __PyUnicodeWriter_WriteLatin1String = (Module[
      "__PyUnicodeWriter_WriteLatin1String"
    ] = (a0, a1, a2) =>
      (__PyUnicodeWriter_WriteLatin1String = Module[
        "__PyUnicodeWriter_WriteLatin1String"
      ] =
        wasmExports["_PyUnicodeWriter_WriteLatin1String"])(a0, a1, a2));
    var _PyUnicode_AsWideChar = (Module["_PyUnicode_AsWideChar"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_AsWideChar = Module["_PyUnicode_AsWideChar"] =
        wasmExports["PyUnicode_AsWideChar"])(a0, a1, a2));
    var _PyUnicode_AsWideCharString = (Module["_PyUnicode_AsWideCharString"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_AsWideCharString = Module["_PyUnicode_AsWideCharString"] =
        wasmExports["PyUnicode_AsWideCharString"])(a0, a1));
    var __PyUnicode_WideCharString_Converter = (Module[
      "__PyUnicode_WideCharString_Converter"
    ] = (a0, a1) =>
      (__PyUnicode_WideCharString_Converter = Module[
        "__PyUnicode_WideCharString_Converter"
      ] =
        wasmExports["_PyUnicode_WideCharString_Converter"])(a0, a1));
    var _PyUnicode_AsUnicodeAndSize = (Module["_PyUnicode_AsUnicodeAndSize"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_AsUnicodeAndSize = Module["_PyUnicode_AsUnicodeAndSize"] =
        wasmExports["PyUnicode_AsUnicodeAndSize"])(a0, a1));
    var __PyUnicode_AsUnicode = (Module["__PyUnicode_AsUnicode"] = (a0) =>
      (__PyUnicode_AsUnicode = Module["__PyUnicode_AsUnicode"] =
        wasmExports["_PyUnicode_AsUnicode"])(a0));
    var __PyUnicode_WideCharString_Opt_Converter = (Module[
      "__PyUnicode_WideCharString_Opt_Converter"
    ] = (a0, a1) =>
      (__PyUnicode_WideCharString_Opt_Converter = Module[
        "__PyUnicode_WideCharString_Opt_Converter"
      ] =
        wasmExports["_PyUnicode_WideCharString_Opt_Converter"])(a0, a1));
    var _PyUnicode_FromOrdinal = (Module["_PyUnicode_FromOrdinal"] = (a0) =>
      (_PyUnicode_FromOrdinal = Module["_PyUnicode_FromOrdinal"] =
        wasmExports["PyUnicode_FromOrdinal"])(a0));
    var _PyUnicode_FromObject = (Module["_PyUnicode_FromObject"] = (a0) =>
      (_PyUnicode_FromObject = Module["_PyUnicode_FromObject"] =
        wasmExports["PyUnicode_FromObject"])(a0));
    var __PyInterpreterState_GetConfig = (Module[
      "__PyInterpreterState_GetConfig"
    ] = (a0) =>
      (__PyInterpreterState_GetConfig = Module[
        "__PyInterpreterState_GetConfig"
      ] =
        wasmExports["_PyInterpreterState_GetConfig"])(a0));
    var __PyCodec_Lookup = (Module["__PyCodec_Lookup"] = (a0) =>
      (__PyCodec_Lookup = Module["__PyCodec_Lookup"] =
        wasmExports["_PyCodec_Lookup"])(a0));
    var _PyCodec_LookupError = (Module["_PyCodec_LookupError"] = (a0) =>
      (_PyCodec_LookupError = Module["_PyCodec_LookupError"] =
        wasmExports["PyCodec_LookupError"])(a0));
    var _PyUnicode_DecodeUTF16Stateful = (Module[
      "_PyUnicode_DecodeUTF16Stateful"
    ] = (a0, a1, a2, a3, a4) =>
      (_PyUnicode_DecodeUTF16Stateful = Module[
        "_PyUnicode_DecodeUTF16Stateful"
      ] =
        wasmExports["PyUnicode_DecodeUTF16Stateful"])(a0, a1, a2, a3, a4));
    var _PyUnicode_DecodeUTF32Stateful = (Module[
      "_PyUnicode_DecodeUTF32Stateful"
    ] = (a0, a1, a2, a3, a4) =>
      (_PyUnicode_DecodeUTF32Stateful = Module[
        "_PyUnicode_DecodeUTF32Stateful"
      ] =
        wasmExports["PyUnicode_DecodeUTF32Stateful"])(a0, a1, a2, a3, a4));
    var __PyCodec_DecodeText = (Module["__PyCodec_DecodeText"] = (a0, a1, a2) =>
      (__PyCodec_DecodeText = Module["__PyCodec_DecodeText"] =
        wasmExports["_PyCodec_DecodeText"])(a0, a1, a2));
    var _PyUnicode_DecodeUTF16 = (Module["_PyUnicode_DecodeUTF16"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyUnicode_DecodeUTF16 = Module["_PyUnicode_DecodeUTF16"] =
        wasmExports["PyUnicode_DecodeUTF16"])(a0, a1, a2, a3));
    var _PyUnicode_DecodeUTF32 = (Module["_PyUnicode_DecodeUTF32"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyUnicode_DecodeUTF32 = Module["_PyUnicode_DecodeUTF32"] =
        wasmExports["PyUnicode_DecodeUTF32"])(a0, a1, a2, a3));
    var _PyUnicode_AsDecodedObject = (Module["_PyUnicode_AsDecodedObject"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_AsDecodedObject = Module["_PyUnicode_AsDecodedObject"] =
        wasmExports["PyUnicode_AsDecodedObject"])(a0, a1, a2));
    var _PyCodec_Decode = (Module["_PyCodec_Decode"] = (a0, a1, a2) =>
      (_PyCodec_Decode = Module["_PyCodec_Decode"] =
        wasmExports["PyCodec_Decode"])(a0, a1, a2));
    var _PyUnicode_AsDecodedUnicode = (Module["_PyUnicode_AsDecodedUnicode"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_AsDecodedUnicode = Module["_PyUnicode_AsDecodedUnicode"] =
        wasmExports["PyUnicode_AsDecodedUnicode"])(a0, a1, a2));
    var _PyUnicode_AsEncodedObject = (Module["_PyUnicode_AsEncodedObject"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_AsEncodedObject = Module["_PyUnicode_AsEncodedObject"] =
        wasmExports["PyUnicode_AsEncodedObject"])(a0, a1, a2));
    var _PyCodec_Encode = (Module["_PyCodec_Encode"] = (a0, a1, a2) =>
      (_PyCodec_Encode = Module["_PyCodec_Encode"] =
        wasmExports["PyCodec_Encode"])(a0, a1, a2));
    var _PyUnicode_EncodeLocale = (Module["_PyUnicode_EncodeLocale"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_EncodeLocale = Module["_PyUnicode_EncodeLocale"] =
        wasmExports["PyUnicode_EncodeLocale"])(a0, a1));
    var __Py_EncodeLocaleEx = (Module["__Py_EncodeLocaleEx"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__Py_EncodeLocaleEx = Module["__Py_EncodeLocaleEx"] =
        wasmExports["_Py_EncodeLocaleEx"])(a0, a1, a2, a3, a4, a5));
    var _PyCodec_StrictErrors = (Module["_PyCodec_StrictErrors"] = (a0) =>
      (_PyCodec_StrictErrors = Module["_PyCodec_StrictErrors"] =
        wasmExports["PyCodec_StrictErrors"])(a0));
    var _PyUnicode_EncodeFSDefault = (Module["_PyUnicode_EncodeFSDefault"] = (
      a0,
    ) =>
      (_PyUnicode_EncodeFSDefault = Module["_PyUnicode_EncodeFSDefault"] =
        wasmExports["PyUnicode_EncodeFSDefault"])(a0));
    var __PyUnicode_EncodeUTF16 = (Module["__PyUnicode_EncodeUTF16"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyUnicode_EncodeUTF16 = Module["__PyUnicode_EncodeUTF16"] =
        wasmExports["_PyUnicode_EncodeUTF16"])(a0, a1, a2));
    var __PyUnicode_EncodeUTF32 = (Module["__PyUnicode_EncodeUTF32"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyUnicode_EncodeUTF32 = Module["__PyUnicode_EncodeUTF32"] =
        wasmExports["_PyUnicode_EncodeUTF32"])(a0, a1, a2));
    var __PyUnicode_AsLatin1String = (Module["__PyUnicode_AsLatin1String"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_AsLatin1String = Module["__PyUnicode_AsLatin1String"] =
        wasmExports["_PyUnicode_AsLatin1String"])(a0, a1));
    var __PyCodec_EncodeText = (Module["__PyCodec_EncodeText"] = (a0, a1, a2) =>
      (__PyCodec_EncodeText = Module["__PyCodec_EncodeText"] =
        wasmExports["_PyCodec_EncodeText"])(a0, a1, a2));
    var _wcscmp = (Module["_wcscmp"] = (a0, a1) =>
      (_wcscmp = Module["_wcscmp"] = wasmExports["wcscmp"])(a0, a1));
    var _PyUnicode_AsEncodedUnicode = (Module["_PyUnicode_AsEncodedUnicode"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_AsEncodedUnicode = Module["_PyUnicode_AsEncodedUnicode"] =
        wasmExports["PyUnicode_AsEncodedUnicode"])(a0, a1, a2));
    var _PyUnicode_DecodeLocaleAndSize = (Module[
      "_PyUnicode_DecodeLocaleAndSize"
    ] = (a0, a1, a2) =>
      (_PyUnicode_DecodeLocaleAndSize = Module[
        "_PyUnicode_DecodeLocaleAndSize"
      ] =
        wasmExports["PyUnicode_DecodeLocaleAndSize"])(a0, a1, a2));
    var __Py_DecodeLocaleEx = (Module["__Py_DecodeLocaleEx"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__Py_DecodeLocaleEx = Module["__Py_DecodeLocaleEx"] =
        wasmExports["_Py_DecodeLocaleEx"])(a0, a1, a2, a3, a4, a5));
    var _PyUnicode_DecodeLocale = (Module["_PyUnicode_DecodeLocale"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_DecodeLocale = Module["_PyUnicode_DecodeLocale"] =
        wasmExports["PyUnicode_DecodeLocale"])(a0, a1));
    var _PyUnicode_DecodeFSDefaultAndSize = (Module[
      "_PyUnicode_DecodeFSDefaultAndSize"
    ] = (a0, a1) =>
      (_PyUnicode_DecodeFSDefaultAndSize = Module[
        "_PyUnicode_DecodeFSDefaultAndSize"
      ] =
        wasmExports["PyUnicode_DecodeFSDefaultAndSize"])(a0, a1));
    var _PyUnicode_FSConverter = (Module["_PyUnicode_FSConverter"] = (a0, a1) =>
      (_PyUnicode_FSConverter = Module["_PyUnicode_FSConverter"] =
        wasmExports["PyUnicode_FSConverter"])(a0, a1));
    var _PyOS_FSPath = (Module["_PyOS_FSPath"] = (a0) =>
      (_PyOS_FSPath = Module["_PyOS_FSPath"] = wasmExports["PyOS_FSPath"])(a0));
    var _PyUnicode_FSDecoder = (Module["_PyUnicode_FSDecoder"] = (a0, a1) =>
      (_PyUnicode_FSDecoder = Module["_PyUnicode_FSDecoder"] =
        wasmExports["PyUnicode_FSDecoder"])(a0, a1));
    var _PyUnicode_AsUnicode = (Module["_PyUnicode_AsUnicode"] = (a0) =>
      (_PyUnicode_AsUnicode = Module["_PyUnicode_AsUnicode"] =
        wasmExports["PyUnicode_AsUnicode"])(a0));
    var _PyUnicode_GetSize = (Module["_PyUnicode_GetSize"] = (a0) =>
      (_PyUnicode_GetSize = Module["_PyUnicode_GetSize"] =
        wasmExports["PyUnicode_GetSize"])(a0));
    var _PyUnicode_GetLength = (Module["_PyUnicode_GetLength"] = (a0) =>
      (_PyUnicode_GetLength = Module["_PyUnicode_GetLength"] =
        wasmExports["PyUnicode_GetLength"])(a0));
    var _PyUnicode_WriteChar = (Module["_PyUnicode_WriteChar"] = (a0, a1, a2) =>
      (_PyUnicode_WriteChar = Module["_PyUnicode_WriteChar"] =
        wasmExports["PyUnicode_WriteChar"])(a0, a1, a2));
    var _PyUnicode_DecodeUTF7 = (Module["_PyUnicode_DecodeUTF7"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_DecodeUTF7 = Module["_PyUnicode_DecodeUTF7"] =
        wasmExports["PyUnicode_DecodeUTF7"])(a0, a1, a2));
    var _PyUnicode_DecodeUTF7Stateful = (Module[
      "_PyUnicode_DecodeUTF7Stateful"
    ] = (a0, a1, a2, a3) =>
      (_PyUnicode_DecodeUTF7Stateful = Module["_PyUnicode_DecodeUTF7Stateful"] =
        wasmExports["PyUnicode_DecodeUTF7Stateful"])(a0, a1, a2, a3));
    var __PyUnicode_EncodeUTF7 = (Module["__PyUnicode_EncodeUTF7"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyUnicode_EncodeUTF7 = Module["__PyUnicode_EncodeUTF7"] =
        wasmExports["_PyUnicode_EncodeUTF7"])(a0, a1, a2, a3));
    var __Py_DecodeUTF8Ex = (Module["__Py_DecodeUTF8Ex"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__Py_DecodeUTF8Ex = Module["__Py_DecodeUTF8Ex"] =
        wasmExports["_Py_DecodeUTF8Ex"])(a0, a1, a2, a3, a4, a5));
    var __Py_DecodeUTF8_surrogateescape = (Module[
      "__Py_DecodeUTF8_surrogateescape"
    ] = (a0, a1, a2) =>
      (__Py_DecodeUTF8_surrogateescape = Module[
        "__Py_DecodeUTF8_surrogateescape"
      ] =
        wasmExports["_Py_DecodeUTF8_surrogateescape"])(a0, a1, a2));
    var __Py_EncodeUTF8Ex = (Module["__Py_EncodeUTF8Ex"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__Py_EncodeUTF8Ex = Module["__Py_EncodeUTF8Ex"] =
        wasmExports["_Py_EncodeUTF8Ex"])(a0, a1, a2, a3, a4, a5));
    var _PyUnicode_AsUTF32String = (Module["_PyUnicode_AsUTF32String"] = (a0) =>
      (_PyUnicode_AsUTF32String = Module["_PyUnicode_AsUTF32String"] =
        wasmExports["PyUnicode_AsUTF32String"])(a0));
    var _PyUnicode_AsUTF16String = (Module["_PyUnicode_AsUTF16String"] = (a0) =>
      (_PyUnicode_AsUTF16String = Module["_PyUnicode_AsUTF16String"] =
        wasmExports["PyUnicode_AsUTF16String"])(a0));
    var __PyUnicode_DecodeUnicodeEscapeStateful = (Module[
      "__PyUnicode_DecodeUnicodeEscapeStateful"
    ] = (a0, a1, a2, a3) =>
      (__PyUnicode_DecodeUnicodeEscapeStateful = Module[
        "__PyUnicode_DecodeUnicodeEscapeStateful"
      ] =
        wasmExports["_PyUnicode_DecodeUnicodeEscapeStateful"])(a0, a1, a2, a3));
    var _PyUnicode_DecodeUnicodeEscape = (Module[
      "_PyUnicode_DecodeUnicodeEscape"
    ] = (a0, a1, a2) =>
      (_PyUnicode_DecodeUnicodeEscape = Module[
        "_PyUnicode_DecodeUnicodeEscape"
      ] =
        wasmExports["PyUnicode_DecodeUnicodeEscape"])(a0, a1, a2));
    var _PyUnicode_AsUnicodeEscapeString = (Module[
      "_PyUnicode_AsUnicodeEscapeString"
    ] = (a0) =>
      (_PyUnicode_AsUnicodeEscapeString = Module[
        "_PyUnicode_AsUnicodeEscapeString"
      ] =
        wasmExports["PyUnicode_AsUnicodeEscapeString"])(a0));
    var __PyUnicode_DecodeRawUnicodeEscapeStateful = (Module[
      "__PyUnicode_DecodeRawUnicodeEscapeStateful"
    ] = (a0, a1, a2, a3) =>
      (__PyUnicode_DecodeRawUnicodeEscapeStateful = Module[
        "__PyUnicode_DecodeRawUnicodeEscapeStateful"
      ] =
        wasmExports["_PyUnicode_DecodeRawUnicodeEscapeStateful"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _PyUnicode_DecodeRawUnicodeEscape = (Module[
      "_PyUnicode_DecodeRawUnicodeEscape"
    ] = (a0, a1, a2) =>
      (_PyUnicode_DecodeRawUnicodeEscape = Module[
        "_PyUnicode_DecodeRawUnicodeEscape"
      ] =
        wasmExports["PyUnicode_DecodeRawUnicodeEscape"])(a0, a1, a2));
    var _PyUnicode_AsRawUnicodeEscapeString = (Module[
      "_PyUnicode_AsRawUnicodeEscapeString"
    ] = (a0) =>
      (_PyUnicode_AsRawUnicodeEscapeString = Module[
        "_PyUnicode_AsRawUnicodeEscapeString"
      ] =
        wasmExports["PyUnicode_AsRawUnicodeEscapeString"])(a0));
    var _PyUnicode_AsLatin1String = (Module["_PyUnicode_AsLatin1String"] = (
      a0,
    ) =>
      (_PyUnicode_AsLatin1String = Module["_PyUnicode_AsLatin1String"] =
        wasmExports["PyUnicode_AsLatin1String"])(a0));
    var __PyUnicodeWriter_PrepareKindInternal = (Module[
      "__PyUnicodeWriter_PrepareKindInternal"
    ] = (a0, a1) =>
      (__PyUnicodeWriter_PrepareKindInternal = Module[
        "__PyUnicodeWriter_PrepareKindInternal"
      ] =
        wasmExports["_PyUnicodeWriter_PrepareKindInternal"])(a0, a1));
    var _PyUnicode_DecodeCharmap = (Module["_PyUnicode_DecodeCharmap"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyUnicode_DecodeCharmap = Module["_PyUnicode_DecodeCharmap"] =
        wasmExports["PyUnicode_DecodeCharmap"])(a0, a1, a2, a3));
    var _PyUnicode_BuildEncodingMap = (Module["_PyUnicode_BuildEncodingMap"] = (
      a0,
    ) =>
      (_PyUnicode_BuildEncodingMap = Module["_PyUnicode_BuildEncodingMap"] =
        wasmExports["PyUnicode_BuildEncodingMap"])(a0));
    var __PyUnicode_EncodeCharmap = (Module["__PyUnicode_EncodeCharmap"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyUnicode_EncodeCharmap = Module["__PyUnicode_EncodeCharmap"] =
        wasmExports["_PyUnicode_EncodeCharmap"])(a0, a1, a2));
    var _PyUnicode_AsCharmapString = (Module["_PyUnicode_AsCharmapString"] = (
      a0,
      a1,
    ) =>
      (_PyUnicode_AsCharmapString = Module["_PyUnicode_AsCharmapString"] =
        wasmExports["PyUnicode_AsCharmapString"])(a0, a1));
    var _PyUnicode_Translate = (Module["_PyUnicode_Translate"] = (a0, a1, a2) =>
      (_PyUnicode_Translate = Module["_PyUnicode_Translate"] =
        wasmExports["PyUnicode_Translate"])(a0, a1, a2));
    var __PyUnicode_IsWhitespace = (Module["__PyUnicode_IsWhitespace"] = (a0) =>
      (__PyUnicode_IsWhitespace = Module["__PyUnicode_IsWhitespace"] =
        wasmExports["_PyUnicode_IsWhitespace"])(a0));
    var __PyUnicode_ToDecimalDigit = (Module["__PyUnicode_ToDecimalDigit"] = (
      a0,
    ) =>
      (__PyUnicode_ToDecimalDigit = Module["__PyUnicode_ToDecimalDigit"] =
        wasmExports["_PyUnicode_ToDecimalDigit"])(a0));
    var __PyUnicode_InsertThousandsGrouping = (Module[
      "__PyUnicode_InsertThousandsGrouping"
    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) =>
      (__PyUnicode_InsertThousandsGrouping = Module[
        "__PyUnicode_InsertThousandsGrouping"
      ] =
        wasmExports["_PyUnicode_InsertThousandsGrouping"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var _PyUnicode_Count = (Module["_PyUnicode_Count"] = (a0, a1, a2, a3) =>
      (_PyUnicode_Count = Module["_PyUnicode_Count"] =
        wasmExports["PyUnicode_Count"])(a0, a1, a2, a3));
    var _PyUnicode_Find = (Module["_PyUnicode_Find"] = (a0, a1, a2, a3, a4) =>
      (_PyUnicode_Find = Module["_PyUnicode_Find"] =
        wasmExports["PyUnicode_Find"])(a0, a1, a2, a3, a4));
    var _PyUnicode_FindChar = (Module["_PyUnicode_FindChar"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyUnicode_FindChar = Module["_PyUnicode_FindChar"] =
        wasmExports["PyUnicode_FindChar"])(a0, a1, a2, a3, a4));
    var _PyUnicode_Tailmatch = (Module["_PyUnicode_Tailmatch"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyUnicode_Tailmatch = Module["_PyUnicode_Tailmatch"] =
        wasmExports["PyUnicode_Tailmatch"])(a0, a1, a2, a3, a4));
    var __PyUnicode_JoinArray = (Module["__PyUnicode_JoinArray"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyUnicode_JoinArray = Module["__PyUnicode_JoinArray"] =
        wasmExports["_PyUnicode_JoinArray"])(a0, a1, a2));
    var __PyUnicode_FastFill = (Module["__PyUnicode_FastFill"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyUnicode_FastFill = Module["__PyUnicode_FastFill"] =
        wasmExports["_PyUnicode_FastFill"])(a0, a1, a2, a3));
    var _PyUnicode_Splitlines = (Module["_PyUnicode_Splitlines"] = (a0, a1) =>
      (_PyUnicode_Splitlines = Module["_PyUnicode_Splitlines"] =
        wasmExports["PyUnicode_Splitlines"])(a0, a1));
    var __PyUnicode_IsLinebreak = (Module["__PyUnicode_IsLinebreak"] = (a0) =>
      (__PyUnicode_IsLinebreak = Module["__PyUnicode_IsLinebreak"] =
        wasmExports["_PyUnicode_IsLinebreak"])(a0));
    var _wmemcmp = (Module["_wmemcmp"] = (a0, a1, a2) =>
      (_wmemcmp = Module["_wmemcmp"] = wasmExports["wmemcmp"])(a0, a1, a2));
    var __PyUnicode_EqualToASCIIId = (Module["__PyUnicode_EqualToASCIIId"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_EqualToASCIIId = Module["__PyUnicode_EqualToASCIIId"] =
        wasmExports["_PyUnicode_EqualToASCIIId"])(a0, a1));
    var _PyUnicode_RichCompare = (Module["_PyUnicode_RichCompare"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyUnicode_RichCompare = Module["_PyUnicode_RichCompare"] =
        wasmExports["PyUnicode_RichCompare"])(a0, a1, a2));
    var _PyUnicode_Contains = (Module["_PyUnicode_Contains"] = (a0, a1) =>
      (_PyUnicode_Contains = Module["_PyUnicode_Contains"] =
        wasmExports["PyUnicode_Contains"])(a0, a1));
    var _PyUnicode_Concat = (Module["_PyUnicode_Concat"] = (a0, a1) =>
      (_PyUnicode_Concat = Module["_PyUnicode_Concat"] =
        wasmExports["PyUnicode_Concat"])(a0, a1));
    var _PyUnicode_Append = (Module["_PyUnicode_Append"] = (a0, a1) =>
      (_PyUnicode_Append = Module["_PyUnicode_Append"] =
        wasmExports["PyUnicode_Append"])(a0, a1));
    var __PyUnicode_IsXidStart = (Module["__PyUnicode_IsXidStart"] = (a0) =>
      (__PyUnicode_IsXidStart = Module["__PyUnicode_IsXidStart"] =
        wasmExports["_PyUnicode_IsXidStart"])(a0));
    var __PyUnicode_IsXidContinue = (Module["__PyUnicode_IsXidContinue"] = (
      a0,
    ) =>
      (__PyUnicode_IsXidContinue = Module["__PyUnicode_IsXidContinue"] =
        wasmExports["_PyUnicode_IsXidContinue"])(a0));
    var __PyUnicode_XStrip = (Module["__PyUnicode_XStrip"] = (a0, a1, a2) =>
      (__PyUnicode_XStrip = Module["__PyUnicode_XStrip"] =
        wasmExports["_PyUnicode_XStrip"])(a0, a1, a2));
    var _PyUnicode_Replace = (Module["_PyUnicode_Replace"] = (a0, a1, a2, a3) =>
      (_PyUnicode_Replace = Module["_PyUnicode_Replace"] =
        wasmExports["PyUnicode_Replace"])(a0, a1, a2, a3));
    var _PyUnicode_Split = (Module["_PyUnicode_Split"] = (a0, a1, a2) =>
      (_PyUnicode_Split = Module["_PyUnicode_Split"] =
        wasmExports["PyUnicode_Split"])(a0, a1, a2));
    var _PyUnicode_Partition = (Module["_PyUnicode_Partition"] = (a0, a1) =>
      (_PyUnicode_Partition = Module["_PyUnicode_Partition"] =
        wasmExports["PyUnicode_Partition"])(a0, a1));
    var _PyUnicode_RPartition = (Module["_PyUnicode_RPartition"] = (a0, a1) =>
      (_PyUnicode_RPartition = Module["_PyUnicode_RPartition"] =
        wasmExports["PyUnicode_RPartition"])(a0, a1));
    var _PyUnicode_RSplit = (Module["_PyUnicode_RSplit"] = (a0, a1, a2) =>
      (_PyUnicode_RSplit = Module["_PyUnicode_RSplit"] =
        wasmExports["PyUnicode_RSplit"])(a0, a1, a2));
    var __PyUnicodeWriter_WriteSubstring = (Module[
      "__PyUnicodeWriter_WriteSubstring"
    ] = (a0, a1, a2, a3) =>
      (__PyUnicodeWriter_WriteSubstring = Module[
        "__PyUnicodeWriter_WriteSubstring"
      ] =
        wasmExports["_PyUnicodeWriter_WriteSubstring"])(a0, a1, a2, a3));
    var _PyUnicode_Format = (Module["_PyUnicode_Format"] = (a0, a1) =>
      (_PyUnicode_Format = Module["_PyUnicode_Format"] =
        wasmExports["PyUnicode_Format"])(a0, a1));
    var __PyErr_WriteUnraisableMsg = (Module["__PyErr_WriteUnraisableMsg"] = (
      a0,
      a1,
    ) =>
      (__PyErr_WriteUnraisableMsg = Module["__PyErr_WriteUnraisableMsg"] =
        wasmExports["_PyErr_WriteUnraisableMsg"])(a0, a1));
    var _PyUnicode_InternImmortal = (Module["_PyUnicode_InternImmortal"] = (
      a0,
    ) =>
      (_PyUnicode_InternImmortal = Module["_PyUnicode_InternImmortal"] =
        wasmExports["PyUnicode_InternImmortal"])(a0));
    var _PyInit__string = (Module["_PyInit__string"] = () =>
      (_PyInit__string = Module["_PyInit__string"] =
        wasmExports["PyInit__string"])());
    var __PyUnicode_IsLowercase = (Module["__PyUnicode_IsLowercase"] = (a0) =>
      (__PyUnicode_IsLowercase = Module["__PyUnicode_IsLowercase"] =
        wasmExports["_PyUnicode_IsLowercase"])(a0));
    var __PyUnicode_IsUppercase = (Module["__PyUnicode_IsUppercase"] = (a0) =>
      (__PyUnicode_IsUppercase = Module["__PyUnicode_IsUppercase"] =
        wasmExports["_PyUnicode_IsUppercase"])(a0));
    var __PyUnicode_IsTitlecase = (Module["__PyUnicode_IsTitlecase"] = (a0) =>
      (__PyUnicode_IsTitlecase = Module["__PyUnicode_IsTitlecase"] =
        wasmExports["_PyUnicode_IsTitlecase"])(a0));
    var __PyUnicode_IsDecimalDigit = (Module["__PyUnicode_IsDecimalDigit"] = (
      a0,
    ) =>
      (__PyUnicode_IsDecimalDigit = Module["__PyUnicode_IsDecimalDigit"] =
        wasmExports["_PyUnicode_IsDecimalDigit"])(a0));
    var __PyUnicode_IsDigit = (Module["__PyUnicode_IsDigit"] = (a0) =>
      (__PyUnicode_IsDigit = Module["__PyUnicode_IsDigit"] =
        wasmExports["_PyUnicode_IsDigit"])(a0));
    var __PyUnicode_IsNumeric = (Module["__PyUnicode_IsNumeric"] = (a0) =>
      (__PyUnicode_IsNumeric = Module["__PyUnicode_IsNumeric"] =
        wasmExports["_PyUnicode_IsNumeric"])(a0));
    var __PyUnicode_IsAlpha = (Module["__PyUnicode_IsAlpha"] = (a0) =>
      (__PyUnicode_IsAlpha = Module["__PyUnicode_IsAlpha"] =
        wasmExports["_PyUnicode_IsAlpha"])(a0));
    var __PyUnicode_FormatAdvancedWriter = (Module[
      "__PyUnicode_FormatAdvancedWriter"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyUnicode_FormatAdvancedWriter = Module[
        "__PyUnicode_FormatAdvancedWriter"
      ] =
        wasmExports["_PyUnicode_FormatAdvancedWriter"])(a0, a1, a2, a3, a4));
    var __PyUnicode_ToTitleFull = (Module["__PyUnicode_ToTitleFull"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_ToTitleFull = Module["__PyUnicode_ToTitleFull"] =
        wasmExports["_PyUnicode_ToTitleFull"])(a0, a1));
    var __PyUnicode_IsCaseIgnorable = (Module["__PyUnicode_IsCaseIgnorable"] = (
      a0,
    ) =>
      (__PyUnicode_IsCaseIgnorable = Module["__PyUnicode_IsCaseIgnorable"] =
        wasmExports["_PyUnicode_IsCaseIgnorable"])(a0));
    var __PyUnicode_IsCased = (Module["__PyUnicode_IsCased"] = (a0) =>
      (__PyUnicode_IsCased = Module["__PyUnicode_IsCased"] =
        wasmExports["_PyUnicode_IsCased"])(a0));
    var __PyUnicode_ToLowerFull = (Module["__PyUnicode_ToLowerFull"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_ToLowerFull = Module["__PyUnicode_ToLowerFull"] =
        wasmExports["_PyUnicode_ToLowerFull"])(a0, a1));
    var __PyUnicode_ToFoldedFull = (Module["__PyUnicode_ToFoldedFull"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_ToFoldedFull = Module["__PyUnicode_ToFoldedFull"] =
        wasmExports["_PyUnicode_ToFoldedFull"])(a0, a1));
    var __PyUnicode_ToUpperFull = (Module["__PyUnicode_ToUpperFull"] = (
      a0,
      a1,
    ) =>
      (__PyUnicode_ToUpperFull = Module["__PyUnicode_ToUpperFull"] =
        wasmExports["_PyUnicode_ToUpperFull"])(a0, a1));
    var __PyUnicode_ToNumeric = (Module["__PyUnicode_ToNumeric"] = (a0) =>
      (__PyUnicode_ToNumeric = Module["__PyUnicode_ToNumeric"] =
        wasmExports["_PyUnicode_ToNumeric"])(a0));
    var __PyUnicode_ToTitlecase = (Module["__PyUnicode_ToTitlecase"] = (a0) =>
      (__PyUnicode_ToTitlecase = Module["__PyUnicode_ToTitlecase"] =
        wasmExports["_PyUnicode_ToTitlecase"])(a0));
    var __PyUnicode_ToDigit = (Module["__PyUnicode_ToDigit"] = (a0) =>
      (__PyUnicode_ToDigit = Module["__PyUnicode_ToDigit"] =
        wasmExports["_PyUnicode_ToDigit"])(a0));
    var __PyUnicode_ToUppercase = (Module["__PyUnicode_ToUppercase"] = (a0) =>
      (__PyUnicode_ToUppercase = Module["__PyUnicode_ToUppercase"] =
        wasmExports["_PyUnicode_ToUppercase"])(a0));
    var __PyUnicode_ToLowercase = (Module["__PyUnicode_ToLowercase"] = (a0) =>
      (__PyUnicode_ToLowercase = Module["__PyUnicode_ToLowercase"] =
        wasmExports["_PyUnicode_ToLowercase"])(a0));
    var __PyWeakref_GetWeakrefCount = (Module["__PyWeakref_GetWeakrefCount"] = (
      a0,
    ) =>
      (__PyWeakref_GetWeakrefCount = Module["__PyWeakref_GetWeakrefCount"] =
        wasmExports["_PyWeakref_GetWeakrefCount"])(a0));
    var _PyWeakref_NewProxy = (Module["_PyWeakref_NewProxy"] = (a0, a1) =>
      (_PyWeakref_NewProxy = Module["_PyWeakref_NewProxy"] =
        wasmExports["PyWeakref_NewProxy"])(a0, a1));
    var _PyWeakref_GetObject = (Module["_PyWeakref_GetObject"] = (a0) =>
      (_PyWeakref_GetObject = Module["_PyWeakref_GetObject"] =
        wasmExports["PyWeakref_GetObject"])(a0));
    var _PyErr_ResourceWarning = (Module["_PyErr_ResourceWarning"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyErr_ResourceWarning = Module["_PyErr_ResourceWarning"] =
        wasmExports["PyErr_ResourceWarning"])(a0, a1, a2, a3));
    var _PyErr_WarnExplicit = (Module["_PyErr_WarnExplicit"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_PyErr_WarnExplicit = Module["_PyErr_WarnExplicit"] =
        wasmExports["PyErr_WarnExplicit"])(a0, a1, a2, a3, a4, a5));
    var _PyErr_WarnExplicitFormat = (Module["_PyErr_WarnExplicitFormat"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
    ) =>
      (_PyErr_WarnExplicitFormat = Module["_PyErr_WarnExplicitFormat"] =
        wasmExports["PyErr_WarnExplicitFormat"])(a0, a1, a2, a3, a4, a5, a6));
    var __Py_IsFinalizing = (Module["__Py_IsFinalizing"] = () =>
      (__Py_IsFinalizing = Module["__Py_IsFinalizing"] =
        wasmExports["_Py_IsFinalizing"])());
    var __PyWarnings_Init = (Module["__PyWarnings_Init"] = () =>
      (__PyWarnings_Init = Module["__PyWarnings_Init"] =
        wasmExports["_PyWarnings_Init"])());
    var __PySys_GetAttr = (Module["__PySys_GetAttr"] = (a0, a1) =>
      (__PySys_GetAttr = Module["__PySys_GetAttr"] =
        wasmExports["_PySys_GetAttr"])(a0, a1));
    var __Py_DisplaySourceLine = (Module["__Py_DisplaySourceLine"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (__Py_DisplaySourceLine = Module["__Py_DisplaySourceLine"] =
        wasmExports["_Py_DisplaySourceLine"])(a0, a1, a2, a3, a4, a5));
    var _PyModule_AddObjectRef = (Module["_PyModule_AddObjectRef"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyModule_AddObjectRef = Module["_PyModule_AddObjectRef"] =
        wasmExports["PyModule_AddObjectRef"])(a0, a1, a2));
    var _PyInit__ast = (Module["_PyInit__ast"] = () =>
      (_PyInit__ast = Module["_PyInit__ast"] = wasmExports["PyInit__ast"])());
    var _Py_GetRecursionLimit = (Module["_Py_GetRecursionLimit"] = () =>
      (_Py_GetRecursionLimit = Module["_Py_GetRecursionLimit"] =
        wasmExports["Py_GetRecursionLimit"])());
    var _PyModule_AddIntConstant = (Module["_PyModule_AddIntConstant"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyModule_AddIntConstant = Module["_PyModule_AddIntConstant"] =
        wasmExports["PyModule_AddIntConstant"])(a0, a1, a2));
    var _PyInit__tokenize = (Module["_PyInit__tokenize"] = () =>
      (_PyInit__tokenize = Module["_PyInit__tokenize"] =
        wasmExports["PyInit__tokenize"])());
    var _PyModule_AddType = (Module["_PyModule_AddType"] = (a0, a1) =>
      (_PyModule_AddType = Module["_PyModule_AddType"] =
        wasmExports["PyModule_AddType"])(a0, a1));
    var _snprintf = (Module["_snprintf"] = (a0, a1, a2, a3) =>
      (_snprintf = Module["_snprintf"] = wasmExports["snprintf"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _PyImport_ImportModuleLevelObject = (Module[
      "_PyImport_ImportModuleLevelObject"
    ] = (a0, a1, a2, a3, a4) =>
      (_PyImport_ImportModuleLevelObject = Module[
        "_PyImport_ImportModuleLevelObject"
      ] =
        wasmExports["PyImport_ImportModuleLevelObject"])(a0, a1, a2, a3, a4));
    var _PyEval_MergeCompilerFlags = (Module["_PyEval_MergeCompilerFlags"] = (
      a0,
    ) =>
      (_PyEval_MergeCompilerFlags = Module["_PyEval_MergeCompilerFlags"] =
        wasmExports["PyEval_MergeCompilerFlags"])(a0));
    var __PyArena_New = (Module["__PyArena_New"] = () =>
      (__PyArena_New = Module["__PyArena_New"] =
        wasmExports["_PyArena_New"])());
    var __PyArena_Free = (Module["__PyArena_Free"] = (a0) =>
      (__PyArena_Free = Module["__PyArena_Free"] =
        wasmExports["_PyArena_Free"])(a0));
    var __PyAST_Compile = (Module["__PyAST_Compile"] = (a0, a1, a2, a3, a4) =>
      (__PyAST_Compile = Module["__PyAST_Compile"] =
        wasmExports["_PyAST_Compile"])(a0, a1, a2, a3, a4));
    var __Py_SourceAsString = (Module["__Py_SourceAsString"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__Py_SourceAsString = Module["__Py_SourceAsString"] =
        wasmExports["_Py_SourceAsString"])(a0, a1, a2, a3, a4));
    var _Py_CompileStringObject = (Module["_Py_CompileStringObject"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_Py_CompileStringObject = Module["_Py_CompileStringObject"] =
        wasmExports["Py_CompileStringObject"])(a0, a1, a2, a3, a4));
    var _PyEval_GetBuiltins = (Module["_PyEval_GetBuiltins"] = () =>
      (_PyEval_GetBuiltins = Module["_PyEval_GetBuiltins"] =
        wasmExports["PyEval_GetBuiltins"])());
    var _PyEval_EvalCode = (Module["_PyEval_EvalCode"] = (a0, a1, a2) =>
      (_PyEval_EvalCode = Module["_PyEval_EvalCode"] =
        wasmExports["PyEval_EvalCode"])(a0, a1, a2));
    var _PyRun_StringFlags = (Module["_PyRun_StringFlags"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyRun_StringFlags = Module["_PyRun_StringFlags"] =
        wasmExports["PyRun_StringFlags"])(a0, a1, a2, a3, a4));
    var _PyEval_EvalCodeEx = (Module["_PyEval_EvalCodeEx"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
    ) =>
      (_PyEval_EvalCodeEx = Module["_PyEval_EvalCodeEx"] =
        wasmExports["PyEval_EvalCodeEx"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
        a10,
      ));
    var __PyArg_UnpackKeywordsWithVararg = (Module[
      "__PyArg_UnpackKeywordsWithVararg"
    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) =>
      (__PyArg_UnpackKeywordsWithVararg = Module[
        "__PyArg_UnpackKeywordsWithVararg"
      ] =
        wasmExports["_PyArg_UnpackKeywordsWithVararg"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
        a9,
      ));
    var __PyEval_SetSwitchInterval = (Module["__PyEval_SetSwitchInterval"] = (
      a0,
    ) =>
      (__PyEval_SetSwitchInterval = Module["__PyEval_SetSwitchInterval"] =
        wasmExports["_PyEval_SetSwitchInterval"])(a0));
    var __PyEval_GetSwitchInterval = (Module["__PyEval_GetSwitchInterval"] =
      () =>
        (__PyEval_GetSwitchInterval = Module["__PyEval_GetSwitchInterval"] =
          wasmExports["_PyEval_GetSwitchInterval"])());
    var __Py_FatalError_TstateNULL = (Module["__Py_FatalError_TstateNULL"] = (
      a0,
    ) =>
      (__Py_FatalError_TstateNULL = Module["__Py_FatalError_TstateNULL"] =
        wasmExports["_Py_FatalError_TstateNULL"])(a0));
    var _PyEval_ThreadsInitialized = (Module["_PyEval_ThreadsInitialized"] =
      () =>
        (_PyEval_ThreadsInitialized = Module["_PyEval_ThreadsInitialized"] =
          wasmExports["PyEval_ThreadsInitialized"])());
    var _PyThread_init_thread = (Module["_PyThread_init_thread"] = () =>
      (_PyThread_init_thread = Module["_PyThread_init_thread"] =
        wasmExports["PyThread_init_thread"])());
    var _pthread_mutex_init = (Module["_pthread_mutex_init"] = (a0, a1) =>
      (_pthread_mutex_init = Module["_pthread_mutex_init"] =
        wasmExports["pthread_mutex_init"])(a0, a1));
    var _pthread_mutex_lock = (Module["_pthread_mutex_lock"] = (a0) =>
      (_pthread_mutex_lock = Module["_pthread_mutex_lock"] =
        wasmExports["pthread_mutex_lock"])(a0));
    var _pthread_cond_timedwait = (Module["_pthread_cond_timedwait"] = (
      a0,
      a1,
      a2,
    ) =>
      (_pthread_cond_timedwait = Module["_pthread_cond_timedwait"] =
        wasmExports["pthread_cond_timedwait"])(a0, a1, a2));
    var _pthread_mutex_unlock = (Module["_pthread_mutex_unlock"] = (a0) =>
      (_pthread_mutex_unlock = Module["_pthread_mutex_unlock"] =
        wasmExports["pthread_mutex_unlock"])(a0));
    var _pthread_cond_signal = (Module["_pthread_cond_signal"] = (a0) =>
      (_pthread_cond_signal = Module["_pthread_cond_signal"] =
        wasmExports["pthread_cond_signal"])(a0));
    var _PyThread_exit_thread = (Module["_PyThread_exit_thread"] = () =>
      (_PyThread_exit_thread = Module["_PyThread_exit_thread"] =
        wasmExports["PyThread_exit_thread"])());
    var _PyThread_get_thread_ident = (Module["_PyThread_get_thread_ident"] =
      () =>
        (_PyThread_get_thread_ident = Module["_PyThread_get_thread_ident"] =
          wasmExports["PyThread_get_thread_ident"])());
    var _pthread_cond_destroy = (Module["_pthread_cond_destroy"] = (a0) =>
      (_pthread_cond_destroy = Module["_pthread_cond_destroy"] =
        wasmExports["pthread_cond_destroy"])(a0));
    var _pthread_mutex_destroy = (Module["_pthread_mutex_destroy"] = (a0) =>
      (_pthread_mutex_destroy = Module["_pthread_mutex_destroy"] =
        wasmExports["pthread_mutex_destroy"])(a0));
    var _PyEval_InitThreads = (Module["_PyEval_InitThreads"] = () =>
      (_PyEval_InitThreads = Module["_PyEval_InitThreads"] =
        wasmExports["PyEval_InitThreads"])());
    var _PyEval_AcquireLock = (Module["_PyEval_AcquireLock"] = () =>
      (_PyEval_AcquireLock = Module["_PyEval_AcquireLock"] =
        wasmExports["PyEval_AcquireLock"])());
    var _PyEval_ReleaseLock = (Module["_PyEval_ReleaseLock"] = () =>
      (_PyEval_ReleaseLock = Module["_PyEval_ReleaseLock"] =
        wasmExports["PyEval_ReleaseLock"])());
    var _pthread_cond_wait = (Module["_pthread_cond_wait"] = (a0, a1) =>
      (_pthread_cond_wait = Module["_pthread_cond_wait"] =
        wasmExports["pthread_cond_wait"])(a0, a1));
    var _PyEval_AcquireThread = (Module["_PyEval_AcquireThread"] = (a0) =>
      (_PyEval_AcquireThread = Module["_PyEval_AcquireThread"] =
        wasmExports["PyEval_AcquireThread"])(a0));
    var __PyThreadState_Swap = (Module["__PyThreadState_Swap"] = (a0, a1) =>
      (__PyThreadState_Swap = Module["__PyThreadState_Swap"] =
        wasmExports["_PyThreadState_Swap"])(a0, a1));
    var _PyEval_ReleaseThread = (Module["_PyEval_ReleaseThread"] = (a0) =>
      (_PyEval_ReleaseThread = Module["_PyEval_ReleaseThread"] =
        wasmExports["PyEval_ReleaseThread"])(a0));
    var __PyThread_at_fork_reinit = (Module["__PyThread_at_fork_reinit"] = (
      a0,
    ) =>
      (__PyThread_at_fork_reinit = Module["__PyThread_at_fork_reinit"] =
        wasmExports["_PyThread_at_fork_reinit"])(a0));
    var __PyThreadState_DeleteExcept = (Module["__PyThreadState_DeleteExcept"] =
      (a0, a1) =>
        (__PyThreadState_DeleteExcept = Module["__PyThreadState_DeleteExcept"] =
          wasmExports["_PyThreadState_DeleteExcept"])(a0, a1));
    var __PyEval_SignalAsyncExc = (Module["__PyEval_SignalAsyncExc"] = (a0) =>
      (__PyEval_SignalAsyncExc = Module["__PyEval_SignalAsyncExc"] =
        wasmExports["_PyEval_SignalAsyncExc"])(a0));
    var __PyEval_SignalReceived = (Module["__PyEval_SignalReceived"] = (a0) =>
      (__PyEval_SignalReceived = Module["__PyEval_SignalReceived"] =
        wasmExports["_PyEval_SignalReceived"])(a0));
    var __PyEval_AddPendingCall = (Module["__PyEval_AddPendingCall"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyEval_AddPendingCall = Module["__PyEval_AddPendingCall"] =
        wasmExports["_PyEval_AddPendingCall"])(a0, a1, a2));
    var _Py_AddPendingCall = (Module["_Py_AddPendingCall"] = (a0, a1) =>
      (_Py_AddPendingCall = Module["_Py_AddPendingCall"] =
        wasmExports["Py_AddPendingCall"])(a0, a1));
    var __PyErr_Print = (Module["__PyErr_Print"] = (a0) =>
      (__PyErr_Print = Module["__PyErr_Print"] = wasmExports["_PyErr_Print"])(
        a0,
      ));
    var _Py_MakePendingCalls = (Module["_Py_MakePendingCalls"] = () =>
      (_Py_MakePendingCalls = Module["_Py_MakePendingCalls"] =
        wasmExports["Py_MakePendingCalls"])());
    var __PyErr_CheckSignalsTstate = (Module["__PyErr_CheckSignalsTstate"] = (
      a0,
    ) =>
      (__PyErr_CheckSignalsTstate = Module["__PyErr_CheckSignalsTstate"] =
        wasmExports["_PyErr_CheckSignalsTstate"])(a0));
    var _PyThread_free_lock = (Module["_PyThread_free_lock"] = (a0) =>
      (_PyThread_free_lock = Module["_PyThread_free_lock"] =
        wasmExports["PyThread_free_lock"])(a0));
    var _Py_SetRecursionLimit = (Module["_Py_SetRecursionLimit"] = (a0) =>
      (_Py_SetRecursionLimit = Module["_Py_SetRecursionLimit"] =
        wasmExports["Py_SetRecursionLimit"])(a0));
    var _PyEval_EvalFrame = (Module["_PyEval_EvalFrame"] = (a0) =>
      (_PyEval_EvalFrame = Module["_PyEval_EvalFrame"] =
        wasmExports["PyEval_EvalFrame"])(a0));
    var _PyEval_EvalFrameEx = (Module["_PyEval_EvalFrameEx"] = (a0, a1) =>
      (_PyEval_EvalFrameEx = Module["_PyEval_EvalFrameEx"] =
        wasmExports["PyEval_EvalFrameEx"])(a0, a1));
    var _PyTraceBack_Here = (Module["_PyTraceBack_Here"] = (a0) =>
      (_PyTraceBack_Here = Module["_PyTraceBack_Here"] =
        wasmExports["PyTraceBack_Here"])(a0));
    var __PyErr_SetNone = (Module["__PyErr_SetNone"] = (a0, a1) =>
      (__PyErr_SetNone = Module["__PyErr_SetNone"] =
        wasmExports["_PyErr_SetNone"])(a0, a1));
    var _PyErr_SetImportError = (Module["_PyErr_SetImportError"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyErr_SetImportError = Module["_PyErr_SetImportError"] =
        wasmExports["PyErr_SetImportError"])(a0, a1, a2));
    var _PyErr_SetExcInfo = (Module["_PyErr_SetExcInfo"] = (a0, a1, a2) =>
      (_PyErr_SetExcInfo = Module["_PyErr_SetExcInfo"] =
        wasmExports["PyErr_SetExcInfo"])(a0, a1, a2));
    var __PyErr_NormalizeException = (Module["__PyErr_NormalizeException"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyErr_NormalizeException = Module["__PyErr_NormalizeException"] =
        wasmExports["_PyErr_NormalizeException"])(a0, a1, a2, a3));
    var __PyErr_GetTopmostException = (Module["__PyErr_GetTopmostException"] = (
      a0,
    ) =>
      (__PyErr_GetTopmostException = Module["__PyErr_GetTopmostException"] =
        wasmExports["_PyErr_GetTopmostException"])(a0));
    var __PyErr_SetObject = (Module["__PyErr_SetObject"] = (a0, a1, a2) =>
      (__PyErr_SetObject = Module["__PyErr_SetObject"] =
        wasmExports["_PyErr_SetObject"])(a0, a1, a2));
    var _PyThreadState_EnterTracing = (Module["_PyThreadState_EnterTracing"] = (
      a0,
    ) =>
      (_PyThreadState_EnterTracing = Module["_PyThreadState_EnterTracing"] =
        wasmExports["PyThreadState_EnterTracing"])(a0));
    var _PyThreadState_LeaveTracing = (Module["_PyThreadState_LeaveTracing"] = (
      a0,
    ) =>
      (_PyThreadState_LeaveTracing = Module["_PyThreadState_LeaveTracing"] =
        wasmExports["PyThreadState_LeaveTracing"])(a0));
    var __PyEval_SetProfile = (Module["__PyEval_SetProfile"] = (a0, a1, a2) =>
      (__PyEval_SetProfile = Module["__PyEval_SetProfile"] =
        wasmExports["_PyEval_SetProfile"])(a0, a1, a2));
    var _PyEval_SetProfile = (Module["_PyEval_SetProfile"] = (a0, a1) =>
      (_PyEval_SetProfile = Module["_PyEval_SetProfile"] =
        wasmExports["PyEval_SetProfile"])(a0, a1));
    var __PyEval_SetTrace = (Module["__PyEval_SetTrace"] = (a0, a1, a2) =>
      (__PyEval_SetTrace = Module["__PyEval_SetTrace"] =
        wasmExports["_PyEval_SetTrace"])(a0, a1, a2));
    var _PyEval_SetTrace = (Module["_PyEval_SetTrace"] = (a0, a1) =>
      (_PyEval_SetTrace = Module["_PyEval_SetTrace"] =
        wasmExports["PyEval_SetTrace"])(a0, a1));
    var _PyEval_GetFrame = (Module["_PyEval_GetFrame"] = () =>
      (_PyEval_GetFrame = Module["_PyEval_GetFrame"] =
        wasmExports["PyEval_GetFrame"])());
    var __PyEval_GetBuiltinId = (Module["__PyEval_GetBuiltinId"] = (a0) =>
      (__PyEval_GetBuiltinId = Module["__PyEval_GetBuiltinId"] =
        wasmExports["_PyEval_GetBuiltinId"])(a0));
    var _PyEval_GetFuncName = (Module["_PyEval_GetFuncName"] = (a0) =>
      (_PyEval_GetFuncName = Module["_PyEval_GetFuncName"] =
        wasmExports["PyEval_GetFuncName"])(a0));
    var _PyEval_GetFuncDesc = (Module["_PyEval_GetFuncDesc"] = (a0) =>
      (_PyEval_GetFuncDesc = Module["_PyEval_GetFuncDesc"] =
        wasmExports["PyEval_GetFuncDesc"])(a0));
    var __PyEval_RequestCodeExtraIndex = (Module[
      "__PyEval_RequestCodeExtraIndex"
    ] = (a0) =>
      (__PyEval_RequestCodeExtraIndex = Module[
        "__PyEval_RequestCodeExtraIndex"
      ] =
        wasmExports["_PyEval_RequestCodeExtraIndex"])(a0));
    var _PyCodec_Register = (Module["_PyCodec_Register"] = (a0) =>
      (_PyCodec_Register = Module["_PyCodec_Register"] =
        wasmExports["PyCodec_Register"])(a0));
    var _PyCodec_Unregister = (Module["_PyCodec_Unregister"] = (a0) =>
      (_PyCodec_Unregister = Module["_PyCodec_Unregister"] =
        wasmExports["PyCodec_Unregister"])(a0));
    var _PyInterpreterState_Get = (Module["_PyInterpreterState_Get"] = () =>
      (_PyInterpreterState_Get = Module["_PyInterpreterState_Get"] =
        wasmExports["PyInterpreterState_Get"])());
    var _PyCodec_KnownEncoding = (Module["_PyCodec_KnownEncoding"] = (a0) =>
      (_PyCodec_KnownEncoding = Module["_PyCodec_KnownEncoding"] =
        wasmExports["PyCodec_KnownEncoding"])(a0));
    var __PyCodecInfo_GetIncrementalDecoder = (Module[
      "__PyCodecInfo_GetIncrementalDecoder"
    ] = (a0, a1) =>
      (__PyCodecInfo_GetIncrementalDecoder = Module[
        "__PyCodecInfo_GetIncrementalDecoder"
      ] =
        wasmExports["_PyCodecInfo_GetIncrementalDecoder"])(a0, a1));
    var __PyCodecInfo_GetIncrementalEncoder = (Module[
      "__PyCodecInfo_GetIncrementalEncoder"
    ] = (a0, a1) =>
      (__PyCodecInfo_GetIncrementalEncoder = Module[
        "__PyCodecInfo_GetIncrementalEncoder"
      ] =
        wasmExports["_PyCodecInfo_GetIncrementalEncoder"])(a0, a1));
    var _PyCodec_Encoder = (Module["_PyCodec_Encoder"] = (a0) =>
      (_PyCodec_Encoder = Module["_PyCodec_Encoder"] =
        wasmExports["PyCodec_Encoder"])(a0));
    var _PyCodec_Decoder = (Module["_PyCodec_Decoder"] = (a0) =>
      (_PyCodec_Decoder = Module["_PyCodec_Decoder"] =
        wasmExports["PyCodec_Decoder"])(a0));
    var _PyCodec_IncrementalEncoder = (Module["_PyCodec_IncrementalEncoder"] = (
      a0,
      a1,
    ) =>
      (_PyCodec_IncrementalEncoder = Module["_PyCodec_IncrementalEncoder"] =
        wasmExports["PyCodec_IncrementalEncoder"])(a0, a1));
    var _PyCodec_IncrementalDecoder = (Module["_PyCodec_IncrementalDecoder"] = (
      a0,
      a1,
    ) =>
      (_PyCodec_IncrementalDecoder = Module["_PyCodec_IncrementalDecoder"] =
        wasmExports["PyCodec_IncrementalDecoder"])(a0, a1));
    var _PyCodec_StreamReader = (Module["_PyCodec_StreamReader"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyCodec_StreamReader = Module["_PyCodec_StreamReader"] =
        wasmExports["PyCodec_StreamReader"])(a0, a1, a2));
    var _PyCodec_StreamWriter = (Module["_PyCodec_StreamWriter"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyCodec_StreamWriter = Module["_PyCodec_StreamWriter"] =
        wasmExports["PyCodec_StreamWriter"])(a0, a1, a2));
    var __PyCodec_LookupTextEncoding = (Module["__PyCodec_LookupTextEncoding"] =
      (a0, a1) =>
        (__PyCodec_LookupTextEncoding = Module["__PyCodec_LookupTextEncoding"] =
          wasmExports["_PyCodec_LookupTextEncoding"])(a0, a1));
    var _PyCodec_RegisterError = (Module["_PyCodec_RegisterError"] = (a0, a1) =>
      (_PyCodec_RegisterError = Module["_PyCodec_RegisterError"] =
        wasmExports["PyCodec_RegisterError"])(a0, a1));
    var _PyCodec_IgnoreErrors = (Module["_PyCodec_IgnoreErrors"] = (a0) =>
      (_PyCodec_IgnoreErrors = Module["_PyCodec_IgnoreErrors"] =
        wasmExports["PyCodec_IgnoreErrors"])(a0));
    var _PyCodec_ReplaceErrors = (Module["_PyCodec_ReplaceErrors"] = (a0) =>
      (_PyCodec_ReplaceErrors = Module["_PyCodec_ReplaceErrors"] =
        wasmExports["PyCodec_ReplaceErrors"])(a0));
    var _PyCodec_XMLCharRefReplaceErrors = (Module[
      "_PyCodec_XMLCharRefReplaceErrors"
    ] = (a0) =>
      (_PyCodec_XMLCharRefReplaceErrors = Module[
        "_PyCodec_XMLCharRefReplaceErrors"
      ] =
        wasmExports["PyCodec_XMLCharRefReplaceErrors"])(a0));
    var _PyCodec_BackslashReplaceErrors = (Module[
      "_PyCodec_BackslashReplaceErrors"
    ] = (a0) =>
      (_PyCodec_BackslashReplaceErrors = Module[
        "_PyCodec_BackslashReplaceErrors"
      ] =
        wasmExports["PyCodec_BackslashReplaceErrors"])(a0));
    var _PyCodec_NameReplaceErrors = (Module["_PyCodec_NameReplaceErrors"] = (
      a0,
    ) =>
      (_PyCodec_NameReplaceErrors = Module["_PyCodec_NameReplaceErrors"] =
        wasmExports["PyCodec_NameReplaceErrors"])(a0));
    var _PyCompile_OpcodeStackEffectWithJump = (Module[
      "_PyCompile_OpcodeStackEffectWithJump"
    ] = (a0, a1, a2) =>
      (_PyCompile_OpcodeStackEffectWithJump = Module[
        "_PyCompile_OpcodeStackEffectWithJump"
      ] =
        wasmExports["PyCompile_OpcodeStackEffectWithJump"])(a0, a1, a2));
    var _PyCode_Optimize = (Module["_PyCode_Optimize"] = (a0, a1, a2, a3) =>
      (_PyCode_Optimize = Module["_PyCode_Optimize"] =
        wasmExports["PyCode_Optimize"])(a0, a1, a2, a3));
    var _PySymtable_Lookup = (Module["_PySymtable_Lookup"] = (a0, a1) =>
      (_PySymtable_Lookup = Module["_PySymtable_Lookup"] =
        wasmExports["PySymtable_Lookup"])(a0, a1));
    var _PyErr_ProgramTextObject = (Module["_PyErr_ProgramTextObject"] = (
      a0,
      a1,
    ) =>
      (_PyErr_ProgramTextObject = Module["_PyErr_ProgramTextObject"] =
        wasmExports["PyErr_ProgramTextObject"])(a0, a1));
    var __PyContext_NewHamtForTests = (Module["__PyContext_NewHamtForTests"] =
      () =>
        (__PyContext_NewHamtForTests = Module["__PyContext_NewHamtForTests"] =
          wasmExports["_PyContext_NewHamtForTests"])());
    var _PyContext_New = (Module["_PyContext_New"] = () =>
      (_PyContext_New = Module["_PyContext_New"] =
        wasmExports["PyContext_New"])());
    var _PyContext_Copy = (Module["_PyContext_Copy"] = (a0) =>
      (_PyContext_Copy = Module["_PyContext_Copy"] =
        wasmExports["PyContext_Copy"])(a0));
    var _PyContext_CopyCurrent = (Module["_PyContext_CopyCurrent"] = () =>
      (_PyContext_CopyCurrent = Module["_PyContext_CopyCurrent"] =
        wasmExports["PyContext_CopyCurrent"])());
    var _PyContext_Enter = (Module["_PyContext_Enter"] = (a0) =>
      (_PyContext_Enter = Module["_PyContext_Enter"] =
        wasmExports["PyContext_Enter"])(a0));
    var _PyContext_Exit = (Module["_PyContext_Exit"] = (a0) =>
      (_PyContext_Exit = Module["_PyContext_Exit"] =
        wasmExports["PyContext_Exit"])(a0));
    var _PyContextVar_New = (Module["_PyContextVar_New"] = (a0, a1) =>
      (_PyContextVar_New = Module["_PyContextVar_New"] =
        wasmExports["PyContextVar_New"])(a0, a1));
    var _PyContextVar_Get = (Module["_PyContextVar_Get"] = (a0, a1, a2) =>
      (_PyContextVar_Get = Module["_PyContextVar_Get"] =
        wasmExports["PyContextVar_Get"])(a0, a1, a2));
    var _PyContextVar_Set = (Module["_PyContextVar_Set"] = (a0, a1) =>
      (_PyContextVar_Set = Module["_PyContextVar_Set"] =
        wasmExports["PyContextVar_Set"])(a0, a1));
    var _PyContextVar_Reset = (Module["_PyContextVar_Reset"] = (a0, a1) =>
      (_PyContextVar_Reset = Module["_PyContextVar_Reset"] =
        wasmExports["PyContextVar_Reset"])(a0, a1));
    var __PyErr_GetExcInfo = (Module["__PyErr_GetExcInfo"] = (a0, a1, a2, a3) =>
      (__PyErr_GetExcInfo = Module["__PyErr_GetExcInfo"] =
        wasmExports["_PyErr_GetExcInfo"])(a0, a1, a2, a3));
    var __PyErr_GetHandledException = (Module["__PyErr_GetHandledException"] = (
      a0,
    ) =>
      (__PyErr_GetHandledException = Module["__PyErr_GetHandledException"] =
        wasmExports["_PyErr_GetHandledException"])(a0));
    var _PyErr_GetHandledException = (Module["_PyErr_GetHandledException"] =
      () =>
        (_PyErr_GetHandledException = Module["_PyErr_GetHandledException"] =
          wasmExports["PyErr_GetHandledException"])());
    var __PyErr_SetHandledException = (Module["__PyErr_SetHandledException"] = (
      a0,
      a1,
    ) =>
      (__PyErr_SetHandledException = Module["__PyErr_SetHandledException"] =
        wasmExports["_PyErr_SetHandledException"])(a0, a1));
    var _PyErr_SetHandledException = (Module["_PyErr_SetHandledException"] = (
      a0,
    ) =>
      (_PyErr_SetHandledException = Module["_PyErr_SetHandledException"] =
        wasmExports["PyErr_SetHandledException"])(a0));
    var _PyErr_GetExcInfo = (Module["_PyErr_GetExcInfo"] = (a0, a1, a2) =>
      (_PyErr_GetExcInfo = Module["_PyErr_GetExcInfo"] =
        wasmExports["PyErr_GetExcInfo"])(a0, a1, a2));
    var __PyErr_StackItemToExcInfoTuple = (Module[
      "__PyErr_StackItemToExcInfoTuple"
    ] = (a0) =>
      (__PyErr_StackItemToExcInfoTuple = Module[
        "__PyErr_StackItemToExcInfoTuple"
      ] =
        wasmExports["_PyErr_StackItemToExcInfoTuple"])(a0));
    var _PyErr_SetFromErrnoWithFilenameObject = (Module[
      "_PyErr_SetFromErrnoWithFilenameObject"
    ] = (a0, a1) =>
      (_PyErr_SetFromErrnoWithFilenameObject = Module[
        "_PyErr_SetFromErrnoWithFilenameObject"
      ] =
        wasmExports["PyErr_SetFromErrnoWithFilenameObject"])(a0, a1));
    var _PyErr_SetFromErrnoWithFilenameObjects = (Module[
      "_PyErr_SetFromErrnoWithFilenameObjects"
    ] = (a0, a1, a2) =>
      (_PyErr_SetFromErrnoWithFilenameObjects = Module[
        "_PyErr_SetFromErrnoWithFilenameObjects"
      ] =
        wasmExports["PyErr_SetFromErrnoWithFilenameObjects"])(a0, a1, a2));
    var _strerror = (Module["_strerror"] = (a0) =>
      (_strerror = Module["_strerror"] = wasmExports["strerror"])(a0));
    var _PyErr_SetImportErrorSubclass = (Module[
      "_PyErr_SetImportErrorSubclass"
    ] = (a0, a1, a2, a3) =>
      (_PyErr_SetImportErrorSubclass = Module["_PyErr_SetImportErrorSubclass"] =
        wasmExports["PyErr_SetImportErrorSubclass"])(a0, a1, a2, a3));
    var _PyErr_BadInternalCall = (Module["_PyErr_BadInternalCall"] = () =>
      (_PyErr_BadInternalCall = Module["_PyErr_BadInternalCall"] =
        wasmExports["PyErr_BadInternalCall"])());
    var _PyErr_FormatV = (Module["_PyErr_FormatV"] = (a0, a1, a2) =>
      (_PyErr_FormatV = Module["_PyErr_FormatV"] =
        wasmExports["PyErr_FormatV"])(a0, a1, a2));
    var _PyErr_NewExceptionWithDoc = (Module["_PyErr_NewExceptionWithDoc"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyErr_NewExceptionWithDoc = Module["_PyErr_NewExceptionWithDoc"] =
        wasmExports["PyErr_NewExceptionWithDoc"])(a0, a1, a2, a3));
    var _PyTraceBack_Print = (Module["_PyTraceBack_Print"] = (a0, a1) =>
      (_PyTraceBack_Print = Module["_PyTraceBack_Print"] =
        wasmExports["PyTraceBack_Print"])(a0, a1));
    var __PyTraceBack_FromFrame = (Module["__PyTraceBack_FromFrame"] = (
      a0,
      a1,
    ) =>
      (__PyTraceBack_FromFrame = Module["__PyTraceBack_FromFrame"] =
        wasmExports["_PyTraceBack_FromFrame"])(a0, a1));
    var _PyErr_SyntaxLocation = (Module["_PyErr_SyntaxLocation"] = (a0, a1) =>
      (_PyErr_SyntaxLocation = Module["_PyErr_SyntaxLocation"] =
        wasmExports["PyErr_SyntaxLocation"])(a0, a1));
    var _PyErr_SyntaxLocationEx = (Module["_PyErr_SyntaxLocationEx"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyErr_SyntaxLocationEx = Module["_PyErr_SyntaxLocationEx"] =
        wasmExports["PyErr_SyntaxLocationEx"])(a0, a1, a2));
    var _PyErr_SyntaxLocationObject = (Module["_PyErr_SyntaxLocationObject"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyErr_SyntaxLocationObject = Module["_PyErr_SyntaxLocationObject"] =
        wasmExports["PyErr_SyntaxLocationObject"])(a0, a1, a2));
    var _PyErr_RangedSyntaxLocationObject = (Module[
      "_PyErr_RangedSyntaxLocationObject"
    ] = (a0, a1, a2, a3, a4) =>
      (_PyErr_RangedSyntaxLocationObject = Module[
        "_PyErr_RangedSyntaxLocationObject"
      ] =
        wasmExports["PyErr_RangedSyntaxLocationObject"])(a0, a1, a2, a3, a4));
    var _PyErr_ProgramText = (Module["_PyErr_ProgramText"] = (a0, a1) =>
      (_PyErr_ProgramText = Module["_PyErr_ProgramText"] =
        wasmExports["PyErr_ProgramText"])(a0, a1));
    var __Py_fopen_obj = (Module["__Py_fopen_obj"] = (a0, a1) =>
      (__Py_fopen_obj = Module["__Py_fopen_obj"] =
        wasmExports["_Py_fopen_obj"])(a0, a1));
    var _Py_FrozenMain = (Module["_Py_FrozenMain"] = (a0, a1) =>
      (_Py_FrozenMain = Module["_Py_FrozenMain"] =
        wasmExports["Py_FrozenMain"])(a0, a1));
    var __PyRuntime_Initialize = (Module["__PyRuntime_Initialize"] = (a0) =>
      (__PyRuntime_Initialize = Module["__PyRuntime_Initialize"] =
        wasmExports["_PyRuntime_Initialize"])(a0));
    var _Py_GETENV = (Module["_Py_GETENV"] = (a0) =>
      (_Py_GETENV = Module["_Py_GETENV"] = wasmExports["Py_GETENV"])(a0));
    var _Py_GetVersion = (Module["_Py_GetVersion"] = () =>
      (_Py_GetVersion = Module["_Py_GetVersion"] =
        wasmExports["Py_GetVersion"])());
    var _Py_GetCopyright = (Module["_Py_GetCopyright"] = () =>
      (_Py_GetCopyright = Module["_Py_GetCopyright"] =
        wasmExports["Py_GetCopyright"])());
    var _PyImport_ImportFrozenModule = (Module["_PyImport_ImportFrozenModule"] =
      (a0) =>
        (_PyImport_ImportFrozenModule = Module["_PyImport_ImportFrozenModule"] =
          wasmExports["PyImport_ImportFrozenModule"])(a0));
    var _PyRun_AnyFileExFlags = (Module["_PyRun_AnyFileExFlags"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyRun_AnyFileExFlags = Module["_PyRun_AnyFileExFlags"] =
        wasmExports["PyRun_AnyFileExFlags"])(a0, a1, a2, a3));
    var _Py_FinalizeEx = (Module["_Py_FinalizeEx"] = () =>
      (_Py_FinalizeEx = Module["_Py_FinalizeEx"] =
        wasmExports["Py_FinalizeEx"])());
    var _PyArg_Parse = (Module["_PyArg_Parse"] = (a0, a1, a2) =>
      (_PyArg_Parse = Module["_PyArg_Parse"] = wasmExports["PyArg_Parse"])(
        a0,
        a1,
        a2,
      ));
    var __PyArg_Parse_SizeT = (Module["__PyArg_Parse_SizeT"] = (a0, a1, a2) =>
      (__PyArg_Parse_SizeT = Module["__PyArg_Parse_SizeT"] =
        wasmExports["_PyArg_Parse_SizeT"])(a0, a1, a2));
    var __PyArg_ParseStack = (Module["__PyArg_ParseStack"] = (a0, a1, a2, a3) =>
      (__PyArg_ParseStack = Module["__PyArg_ParseStack"] =
        wasmExports["_PyArg_ParseStack"])(a0, a1, a2, a3));
    var _PyArg_VaParse = (Module["_PyArg_VaParse"] = (a0, a1, a2) =>
      (_PyArg_VaParse = Module["_PyArg_VaParse"] =
        wasmExports["PyArg_VaParse"])(a0, a1, a2));
    var __PyArg_VaParse_SizeT = (Module["__PyArg_VaParse_SizeT"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyArg_VaParse_SizeT = Module["__PyArg_VaParse_SizeT"] =
        wasmExports["_PyArg_VaParse_SizeT"])(a0, a1, a2));
    var _PyArg_VaParseTupleAndKeywords = (Module[
      "_PyArg_VaParseTupleAndKeywords"
    ] = (a0, a1, a2, a3, a4) =>
      (_PyArg_VaParseTupleAndKeywords = Module[
        "_PyArg_VaParseTupleAndKeywords"
      ] =
        wasmExports["PyArg_VaParseTupleAndKeywords"])(a0, a1, a2, a3, a4));
    var __PyArg_VaParseTupleAndKeywords_SizeT = (Module[
      "__PyArg_VaParseTupleAndKeywords_SizeT"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyArg_VaParseTupleAndKeywords_SizeT = Module[
        "__PyArg_VaParseTupleAndKeywords_SizeT"
      ] =
        wasmExports["_PyArg_VaParseTupleAndKeywords_SizeT"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var __PyArg_ParseTupleAndKeywordsFast = (Module[
      "__PyArg_ParseTupleAndKeywordsFast"
    ] = (a0, a1, a2, a3) =>
      (__PyArg_ParseTupleAndKeywordsFast = Module[
        "__PyArg_ParseTupleAndKeywordsFast"
      ] =
        wasmExports["_PyArg_ParseTupleAndKeywordsFast"])(a0, a1, a2, a3));
    var __PyArg_ParseTupleAndKeywordsFast_SizeT = (Module[
      "__PyArg_ParseTupleAndKeywordsFast_SizeT"
    ] = (a0, a1, a2, a3) =>
      (__PyArg_ParseTupleAndKeywordsFast_SizeT = Module[
        "__PyArg_ParseTupleAndKeywordsFast_SizeT"
      ] =
        wasmExports["_PyArg_ParseTupleAndKeywordsFast_SizeT"])(a0, a1, a2, a3));
    var __PyArg_ParseStackAndKeywords = (Module[
      "__PyArg_ParseStackAndKeywords"
    ] = (a0, a1, a2, a3, a4) =>
      (__PyArg_ParseStackAndKeywords = Module["__PyArg_ParseStackAndKeywords"] =
        wasmExports["_PyArg_ParseStackAndKeywords"])(a0, a1, a2, a3, a4));
    var __PyArg_VaParseTupleAndKeywordsFast = (Module[
      "__PyArg_VaParseTupleAndKeywordsFast"
    ] = (a0, a1, a2, a3) =>
      (__PyArg_VaParseTupleAndKeywordsFast = Module[
        "__PyArg_VaParseTupleAndKeywordsFast"
      ] =
        wasmExports["_PyArg_VaParseTupleAndKeywordsFast"])(a0, a1, a2, a3));
    var __PyArg_VaParseTupleAndKeywordsFast_SizeT = (Module[
      "__PyArg_VaParseTupleAndKeywordsFast_SizeT"
    ] = (a0, a1, a2, a3) =>
      (__PyArg_VaParseTupleAndKeywordsFast_SizeT = Module[
        "__PyArg_VaParseTupleAndKeywordsFast_SizeT"
      ] =
        wasmExports["_PyArg_VaParseTupleAndKeywordsFast_SizeT"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var __PyArg_NoPositional = (Module["__PyArg_NoPositional"] = (a0, a1) =>
      (__PyArg_NoPositional = Module["__PyArg_NoPositional"] =
        wasmExports["_PyArg_NoPositional"])(a0, a1));
    var _Py_GetCompiler = (Module["_Py_GetCompiler"] = () =>
      (_Py_GetCompiler = Module["_Py_GetCompiler"] =
        wasmExports["Py_GetCompiler"])());
    var _Py_GetPlatform = (Module["_Py_GetPlatform"] = () =>
      (_Py_GetPlatform = Module["_Py_GetPlatform"] =
        wasmExports["Py_GetPlatform"])());
    var __Py_hashtable_hash_ptr = (Module["__Py_hashtable_hash_ptr"] = (a0) =>
      (__Py_hashtable_hash_ptr = Module["__Py_hashtable_hash_ptr"] =
        wasmExports["_Py_hashtable_hash_ptr"])(a0));
    var __Py_HashPointerRaw = (Module["__Py_HashPointerRaw"] = (a0) =>
      (__Py_HashPointerRaw = Module["__Py_HashPointerRaw"] =
        wasmExports["_Py_HashPointerRaw"])(a0));
    var __Py_hashtable_compare_direct = (Module[
      "__Py_hashtable_compare_direct"
    ] = (a0, a1) =>
      (__Py_hashtable_compare_direct = Module["__Py_hashtable_compare_direct"] =
        wasmExports["_Py_hashtable_compare_direct"])(a0, a1));
    var __Py_hashtable_size = (Module["__Py_hashtable_size"] = (a0) =>
      (__Py_hashtable_size = Module["__Py_hashtable_size"] =
        wasmExports["_Py_hashtable_size"])(a0));
    var __Py_hashtable_steal = (Module["__Py_hashtable_steal"] = (a0, a1) =>
      (__Py_hashtable_steal = Module["__Py_hashtable_steal"] =
        wasmExports["_Py_hashtable_steal"])(a0, a1));
    var __Py_hashtable_set = (Module["__Py_hashtable_set"] = (a0, a1, a2) =>
      (__Py_hashtable_set = Module["__Py_hashtable_set"] =
        wasmExports["_Py_hashtable_set"])(a0, a1, a2));
    var __Py_hashtable_get = (Module["__Py_hashtable_get"] = (a0, a1) =>
      (__Py_hashtable_get = Module["__Py_hashtable_get"] =
        wasmExports["_Py_hashtable_get"])(a0, a1));
    var __Py_hashtable_foreach = (Module["__Py_hashtable_foreach"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_hashtable_foreach = Module["__Py_hashtable_foreach"] =
        wasmExports["_Py_hashtable_foreach"])(a0, a1, a2));
    var __Py_hashtable_new_full = (Module["__Py_hashtable_new_full"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (__Py_hashtable_new_full = Module["__Py_hashtable_new_full"] =
        wasmExports["_Py_hashtable_new_full"])(a0, a1, a2, a3, a4));
    var __Py_hashtable_new = (Module["__Py_hashtable_new"] = (a0, a1) =>
      (__Py_hashtable_new = Module["__Py_hashtable_new"] =
        wasmExports["_Py_hashtable_new"])(a0, a1));
    var __Py_hashtable_clear = (Module["__Py_hashtable_clear"] = (a0) =>
      (__Py_hashtable_clear = Module["__Py_hashtable_clear"] =
        wasmExports["_Py_hashtable_clear"])(a0));
    var __Py_hashtable_destroy = (Module["__Py_hashtable_destroy"] = (a0) =>
      (__Py_hashtable_destroy = Module["__Py_hashtable_destroy"] =
        wasmExports["_Py_hashtable_destroy"])(a0));
    var __PyImport_AcquireLock = (Module["__PyImport_AcquireLock"] = () =>
      (__PyImport_AcquireLock = Module["__PyImport_AcquireLock"] =
        wasmExports["_PyImport_AcquireLock"])());
    var __PyImport_ReleaseLock = (Module["__PyImport_ReleaseLock"] = () =>
      (__PyImport_ReleaseLock = Module["__PyImport_ReleaseLock"] =
        wasmExports["_PyImport_ReleaseLock"])());
    var __PyImport_GetModuleId = (Module["__PyImport_GetModuleId"] = (a0) =>
      (__PyImport_GetModuleId = Module["__PyImport_GetModuleId"] =
        wasmExports["_PyImport_GetModuleId"])(a0));
    var __PyImport_SetModule = (Module["__PyImport_SetModule"] = (a0, a1) =>
      (__PyImport_SetModule = Module["__PyImport_SetModule"] =
        wasmExports["_PyImport_SetModule"])(a0, a1));
    var __PyImport_SetModuleString = (Module["__PyImport_SetModuleString"] = (
      a0,
      a1,
    ) =>
      (__PyImport_SetModuleString = Module["__PyImport_SetModuleString"] =
        wasmExports["_PyImport_SetModuleString"])(a0, a1));
    var _PyImport_GetMagicNumber = (Module["_PyImport_GetMagicNumber"] = () =>
      (_PyImport_GetMagicNumber = Module["_PyImport_GetMagicNumber"] =
        wasmExports["PyImport_GetMagicNumber"])());
    var _PyImport_GetMagicTag = (Module["_PyImport_GetMagicTag"] = () =>
      (_PyImport_GetMagicTag = Module["_PyImport_GetMagicTag"] =
        wasmExports["PyImport_GetMagicTag"])());
    var __PyImport_FixupExtensionObject = (Module[
      "__PyImport_FixupExtensionObject"
    ] = (a0, a1, a2, a3) =>
      (__PyImport_FixupExtensionObject = Module[
        "__PyImport_FixupExtensionObject"
      ] =
        wasmExports["_PyImport_FixupExtensionObject"])(a0, a1, a2, a3));
    var __PyState_AddModule = (Module["__PyState_AddModule"] = (a0, a1, a2) =>
      (__PyState_AddModule = Module["__PyState_AddModule"] =
        wasmExports["_PyState_AddModule"])(a0, a1, a2));
    var __PyImport_FixupBuiltin = (Module["__PyImport_FixupBuiltin"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyImport_FixupBuiltin = Module["__PyImport_FixupBuiltin"] =
        wasmExports["_PyImport_FixupBuiltin"])(a0, a1, a2));
    var _PyImport_AddModuleObject = (Module["_PyImport_AddModuleObject"] = (
      a0,
    ) =>
      (_PyImport_AddModuleObject = Module["_PyImport_AddModuleObject"] =
        wasmExports["PyImport_AddModuleObject"])(a0));
    var _PyImport_AddModule = (Module["_PyImport_AddModule"] = (a0) =>
      (_PyImport_AddModule = Module["_PyImport_AddModule"] =
        wasmExports["PyImport_AddModule"])(a0));
    var _PyImport_ExecCodeModule = (Module["_PyImport_ExecCodeModule"] = (
      a0,
      a1,
    ) =>
      (_PyImport_ExecCodeModule = Module["_PyImport_ExecCodeModule"] =
        wasmExports["PyImport_ExecCodeModule"])(a0, a1));
    var _PyImport_ExecCodeModuleObject = (Module[
      "_PyImport_ExecCodeModuleObject"
    ] = (a0, a1, a2, a3) =>
      (_PyImport_ExecCodeModuleObject = Module[
        "_PyImport_ExecCodeModuleObject"
      ] =
        wasmExports["PyImport_ExecCodeModuleObject"])(a0, a1, a2, a3));
    var _PyImport_ExecCodeModuleWithPathnames = (Module[
      "_PyImport_ExecCodeModuleWithPathnames"
    ] = (a0, a1, a2, a3) =>
      (_PyImport_ExecCodeModuleWithPathnames = Module[
        "_PyImport_ExecCodeModuleWithPathnames"
      ] =
        wasmExports["PyImport_ExecCodeModuleWithPathnames"])(a0, a1, a2, a3));
    var _PyImport_ExecCodeModuleEx = (Module["_PyImport_ExecCodeModuleEx"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyImport_ExecCodeModuleEx = Module["_PyImport_ExecCodeModuleEx"] =
        wasmExports["PyImport_ExecCodeModuleEx"])(a0, a1, a2));
    var _PyImport_GetImporter = (Module["_PyImport_GetImporter"] = (a0) =>
      (_PyImport_GetImporter = Module["_PyImport_GetImporter"] =
        wasmExports["PyImport_GetImporter"])(a0));
    var _PyImport_ImportFrozenModuleObject = (Module[
      "_PyImport_ImportFrozenModuleObject"
    ] = (a0) =>
      (_PyImport_ImportFrozenModuleObject = Module[
        "_PyImport_ImportFrozenModuleObject"
      ] =
        wasmExports["PyImport_ImportFrozenModuleObject"])(a0));
    var _PyMarshal_ReadObjectFromString = (Module[
      "_PyMarshal_ReadObjectFromString"
    ] = (a0, a1) =>
      (_PyMarshal_ReadObjectFromString = Module[
        "_PyMarshal_ReadObjectFromString"
      ] =
        wasmExports["PyMarshal_ReadObjectFromString"])(a0, a1));
    var _PyImport_ImportModuleNoBlock = (Module[
      "_PyImport_ImportModuleNoBlock"
    ] = (a0) =>
      (_PyImport_ImportModuleNoBlock = Module["_PyImport_ImportModuleNoBlock"] =
        wasmExports["PyImport_ImportModuleNoBlock"])(a0));
    var __PyTime_GetPerfCounter = (Module["__PyTime_GetPerfCounter"] = () =>
      (__PyTime_GetPerfCounter = Module["__PyTime_GetPerfCounter"] =
        wasmExports["_PyTime_GetPerfCounter"])());
    var __PyTime_AsMicroseconds = (Module["__PyTime_AsMicroseconds"] = (
      a0,
      a1,
    ) =>
      (__PyTime_AsMicroseconds = Module["__PyTime_AsMicroseconds"] =
        wasmExports["_PyTime_AsMicroseconds"])(a0, a1));
    var _PyImport_ImportModuleLevel = (Module["_PyImport_ImportModuleLevel"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyImport_ImportModuleLevel = Module["_PyImport_ImportModuleLevel"] =
        wasmExports["PyImport_ImportModuleLevel"])(a0, a1, a2, a3, a4));
    var _PyImport_ReloadModule = (Module["_PyImport_ReloadModule"] = (a0) =>
      (_PyImport_ReloadModule = Module["_PyImport_ReloadModule"] =
        wasmExports["PyImport_ReloadModule"])(a0));
    var _PyInit__imp = (Module["_PyInit__imp"] = () =>
      (_PyInit__imp = Module["_PyInit__imp"] = wasmExports["PyInit__imp"])());
    var _PyImport_ExtendInittab = (Module["_PyImport_ExtendInittab"] = (a0) =>
      (_PyImport_ExtendInittab = Module["_PyImport_ExtendInittab"] =
        wasmExports["PyImport_ExtendInittab"])(a0));
    var __PyImport_GetModuleAttr = (Module["__PyImport_GetModuleAttr"] = (
      a0,
      a1,
    ) =>
      (__PyImport_GetModuleAttr = Module["__PyImport_GetModuleAttr"] =
        wasmExports["_PyImport_GetModuleAttr"])(a0, a1));
    var __PyImport_GetModuleAttrString = (Module[
      "__PyImport_GetModuleAttrString"
    ] = (a0, a1) =>
      (__PyImport_GetModuleAttrString = Module[
        "__PyImport_GetModuleAttrString"
      ] =
        wasmExports["_PyImport_GetModuleAttrString"])(a0, a1));
    var _getenv = (Module["_getenv"] = (a0) =>
      (_getenv = Module["_getenv"] = wasmExports["getenv"])(a0));
    var _PyStatus_Ok = (Module["_PyStatus_Ok"] = (a0) =>
      (_PyStatus_Ok = Module["_PyStatus_Ok"] = wasmExports["PyStatus_Ok"])(a0));
    var _PyStatus_Error = (Module["_PyStatus_Error"] = (a0, a1) =>
      (_PyStatus_Error = Module["_PyStatus_Error"] =
        wasmExports["PyStatus_Error"])(a0, a1));
    var _PyStatus_NoMemory = (Module["_PyStatus_NoMemory"] = (a0) =>
      (_PyStatus_NoMemory = Module["_PyStatus_NoMemory"] =
        wasmExports["PyStatus_NoMemory"])(a0));
    var _PyStatus_Exit = (Module["_PyStatus_Exit"] = (a0, a1) =>
      (_PyStatus_Exit = Module["_PyStatus_Exit"] =
        wasmExports["PyStatus_Exit"])(a0, a1));
    var _PyStatus_IsError = (Module["_PyStatus_IsError"] = (a0) =>
      (_PyStatus_IsError = Module["_PyStatus_IsError"] =
        wasmExports["PyStatus_IsError"])(a0));
    var _PyStatus_IsExit = (Module["_PyStatus_IsExit"] = (a0) =>
      (_PyStatus_IsExit = Module["_PyStatus_IsExit"] =
        wasmExports["PyStatus_IsExit"])(a0));
    var __PyWideStringList_Clear = (Module["__PyWideStringList_Clear"] = (a0) =>
      (__PyWideStringList_Clear = Module["__PyWideStringList_Clear"] =
        wasmExports["_PyWideStringList_Clear"])(a0));
    var __PyWideStringList_Copy = (Module["__PyWideStringList_Copy"] = (
      a0,
      a1,
    ) =>
      (__PyWideStringList_Copy = Module["__PyWideStringList_Copy"] =
        wasmExports["_PyWideStringList_Copy"])(a0, a1));
    var _PyWideStringList_Insert = (Module["_PyWideStringList_Insert"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyWideStringList_Insert = Module["_PyWideStringList_Insert"] =
        wasmExports["PyWideStringList_Insert"])(a0, a1, a2, a3));
    var _PyWideStringList_Append = (Module["_PyWideStringList_Append"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyWideStringList_Append = Module["_PyWideStringList_Append"] =
        wasmExports["PyWideStringList_Append"])(a0, a1, a2));
    var __PyWideStringList_Extend = (Module["__PyWideStringList_Extend"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyWideStringList_Extend = Module["__PyWideStringList_Extend"] =
        wasmExports["_PyWideStringList_Extend"])(a0, a1, a2));
    var __PyWideStringList_AsList = (Module["__PyWideStringList_AsList"] = (
      a0,
    ) =>
      (__PyWideStringList_AsList = Module["__PyWideStringList_AsList"] =
        wasmExports["_PyWideStringList_AsList"])(a0));
    var _Py_SetStandardStreamEncoding = (Module[
      "_Py_SetStandardStreamEncoding"
    ] = (a0, a1) =>
      (_Py_SetStandardStreamEncoding = Module["_Py_SetStandardStreamEncoding"] =
        wasmExports["Py_SetStandardStreamEncoding"])(a0, a1));
    var __Py_ClearStandardStreamEncoding = (Module[
      "__Py_ClearStandardStreamEncoding"
    ] = () =>
      (__Py_ClearStandardStreamEncoding = Module[
        "__Py_ClearStandardStreamEncoding"
      ] =
        wasmExports["_Py_ClearStandardStreamEncoding"])());
    var __Py_ClearArgcArgv = (Module["__Py_ClearArgcArgv"] = () =>
      (__Py_ClearArgcArgv = Module["__Py_ClearArgcArgv"] =
        wasmExports["_Py_ClearArgcArgv"])());
    var _Py_GetArgcArgv = (Module["_Py_GetArgcArgv"] = (a0, a1) =>
      (_Py_GetArgcArgv = Module["_Py_GetArgcArgv"] =
        wasmExports["Py_GetArgcArgv"])(a0, a1));
    var __PyConfig_InitCompatConfig = (Module["__PyConfig_InitCompatConfig"] = (
      a0,
    ) =>
      (__PyConfig_InitCompatConfig = Module["__PyConfig_InitCompatConfig"] =
        wasmExports["_PyConfig_InitCompatConfig"])(a0));
    var _PyConfig_InitIsolatedConfig = (Module["_PyConfig_InitIsolatedConfig"] =
      (a0) =>
        (_PyConfig_InitIsolatedConfig = Module["_PyConfig_InitIsolatedConfig"] =
          wasmExports["PyConfig_InitIsolatedConfig"])(a0));
    var _PyConfig_SetString = (Module["_PyConfig_SetString"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyConfig_SetString = Module["_PyConfig_SetString"] =
        wasmExports["PyConfig_SetString"])(a0, a1, a2, a3));
    var __Py_PreInitializeFromConfig = (Module["__Py_PreInitializeFromConfig"] =
      (a0, a1, a2) =>
        (__Py_PreInitializeFromConfig = Module["__Py_PreInitializeFromConfig"] =
          wasmExports["_Py_PreInitializeFromConfig"])(a0, a1, a2));
    var _Py_DecodeLocale = (Module["_Py_DecodeLocale"] = (a0, a1) =>
      (_Py_DecodeLocale = Module["_Py_DecodeLocale"] =
        wasmExports["Py_DecodeLocale"])(a0, a1));
    var __PyConfig_AsDict = (Module["__PyConfig_AsDict"] = (a0) =>
      (__PyConfig_AsDict = Module["__PyConfig_AsDict"] =
        wasmExports["_PyConfig_AsDict"])(a0));
    var __PyConfig_FromDict = (Module["__PyConfig_FromDict"] = (a0, a1) =>
      (__PyConfig_FromDict = Module["__PyConfig_FromDict"] =
        wasmExports["_PyConfig_FromDict"])(a0, a1));
    var __Py_get_xoption = (Module["__Py_get_xoption"] = (a0, a1) =>
      (__Py_get_xoption = Module["__Py_get_xoption"] =
        wasmExports["_Py_get_xoption"])(a0, a1));
    var _wcschr = (Module["_wcschr"] = (a0, a1) =>
      (_wcschr = Module["_wcschr"] = wasmExports["wcschr"])(a0, a1));
    var _setvbuf = (Module["_setvbuf"] = (a0, a1, a2, a3) =>
      (_setvbuf = Module["_setvbuf"] = wasmExports["setvbuf"])(a0, a1, a2, a3));
    var __PyArgv_AsWstrList = (Module["__PyArgv_AsWstrList"] = (a0, a1, a2) =>
      (__PyArgv_AsWstrList = Module["__PyArgv_AsWstrList"] =
        wasmExports["_PyArgv_AsWstrList"])(a0, a1, a2));
    var _PyConfig_SetArgv = (Module["_PyConfig_SetArgv"] = (a0, a1, a2, a3) =>
      (_PyConfig_SetArgv = Module["_PyConfig_SetArgv"] =
        wasmExports["PyConfig_SetArgv"])(a0, a1, a2, a3));
    var _PyConfig_SetWideStringList = (Module["_PyConfig_SetWideStringList"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_PyConfig_SetWideStringList = Module["_PyConfig_SetWideStringList"] =
        wasmExports["PyConfig_SetWideStringList"])(a0, a1, a2, a3, a4));
    var _iprintf = (Module["_iprintf"] = (a0, a1) =>
      (_iprintf = Module["_iprintf"] = wasmExports["iprintf"])(a0, a1));
    var _wcstok = (Module["_wcstok"] = (a0, a1, a2) =>
      (_wcstok = Module["_wcstok"] = wasmExports["wcstok"])(a0, a1, a2));
    var __Py_get_env_flag = (Module["__Py_get_env_flag"] = (a0, a1, a2) =>
      (__Py_get_env_flag = Module["__Py_get_env_flag"] =
        wasmExports["_Py_get_env_flag"])(a0, a1, a2));
    var __Py_GetEnv = (Module["__Py_GetEnv"] = (a0, a1) =>
      (__Py_GetEnv = Module["__Py_GetEnv"] = wasmExports["_Py_GetEnv"])(
        a0,
        a1,
      ));
    var _strtoul = (Module["_strtoul"] = (a0, a1, a2) =>
      (_strtoul = Module["_strtoul"] = wasmExports["strtoul"])(a0, a1, a2));
    var __Py_str_to_int = (Module["__Py_str_to_int"] = (a0, a1) =>
      (__Py_str_to_int = Module["__Py_str_to_int"] =
        wasmExports["_Py_str_to_int"])(a0, a1));
    var _wcstol = (Module["_wcstol"] = (a0, a1, a2) =>
      (_wcstol = Module["_wcstol"] = wasmExports["wcstol"])(a0, a1, a2));
    var __Py_GetForceASCII = (Module["__Py_GetForceASCII"] = () =>
      (__Py_GetForceASCII = Module["__Py_GetForceASCII"] =
        wasmExports["_Py_GetForceASCII"])());
    var _setlocale = (Module["_setlocale"] = (a0, a1) =>
      (_setlocale = Module["_setlocale"] = wasmExports["setlocale"])(a0, a1));
    var __Py_IsLocaleCoercionTarget = (Module["__Py_IsLocaleCoercionTarget"] = (
      a0,
    ) =>
      (__Py_IsLocaleCoercionTarget = Module["__Py_IsLocaleCoercionTarget"] =
        wasmExports["_Py_IsLocaleCoercionTarget"])(a0));
    var _PyConfig_Read = (Module["_PyConfig_Read"] = (a0, a1) =>
      (_PyConfig_Read = Module["_PyConfig_Read"] =
        wasmExports["PyConfig_Read"])(a0, a1));
    var __Py_GetConfigsAsDict = (Module["__Py_GetConfigsAsDict"] = () =>
      (__Py_GetConfigsAsDict = Module["__Py_GetConfigsAsDict"] =
        wasmExports["_Py_GetConfigsAsDict"])());
    var __Py_GetLocaleEncoding = (Module["__Py_GetLocaleEncoding"] = () =>
      (__Py_GetLocaleEncoding = Module["__Py_GetLocaleEncoding"] =
        wasmExports["_Py_GetLocaleEncoding"])());
    var _PyMarshal_WriteLongToFile = (Module["_PyMarshal_WriteLongToFile"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyMarshal_WriteLongToFile = Module["_PyMarshal_WriteLongToFile"] =
        wasmExports["PyMarshal_WriteLongToFile"])(a0, a1, a2));
    var _PyMarshal_WriteObjectToFile = (Module["_PyMarshal_WriteObjectToFile"] =
      (a0, a1, a2) =>
        (_PyMarshal_WriteObjectToFile = Module["_PyMarshal_WriteObjectToFile"] =
          wasmExports["PyMarshal_WriteObjectToFile"])(a0, a1, a2));
    var _PyMarshal_ReadShortFromFile = (Module["_PyMarshal_ReadShortFromFile"] =
      (a0) =>
        (_PyMarshal_ReadShortFromFile = Module["_PyMarshal_ReadShortFromFile"] =
          wasmExports["PyMarshal_ReadShortFromFile"])(a0));
    var _PyMarshal_ReadLongFromFile = (Module["_PyMarshal_ReadLongFromFile"] = (
      a0,
    ) =>
      (_PyMarshal_ReadLongFromFile = Module["_PyMarshal_ReadLongFromFile"] =
        wasmExports["PyMarshal_ReadLongFromFile"])(a0));
    var _PyMarshal_ReadLastObjectFromFile = (Module[
      "_PyMarshal_ReadLastObjectFromFile"
    ] = (a0) =>
      (_PyMarshal_ReadLastObjectFromFile = Module[
        "_PyMarshal_ReadLastObjectFromFile"
      ] =
        wasmExports["PyMarshal_ReadLastObjectFromFile"])(a0));
    var __Py_fstat_noraise = (Module["__Py_fstat_noraise"] = (a0, a1) =>
      (__Py_fstat_noraise = Module["__Py_fstat_noraise"] =
        wasmExports["_Py_fstat_noraise"])(a0, a1));
    var _fread = (Module["_fread"] = (a0, a1, a2, a3) =>
      (_fread = Module["_fread"] = wasmExports["fread"])(a0, a1, a2, a3));
    var _PyMarshal_ReadObjectFromFile = (Module[
      "_PyMarshal_ReadObjectFromFile"
    ] = (a0) =>
      (_PyMarshal_ReadObjectFromFile = Module["_PyMarshal_ReadObjectFromFile"] =
        wasmExports["PyMarshal_ReadObjectFromFile"])(a0));
    var _PyMarshal_WriteObjectToString = (Module[
      "_PyMarshal_WriteObjectToString"
    ] = (a0, a1) =>
      (_PyMarshal_WriteObjectToString = Module[
        "_PyMarshal_WriteObjectToString"
      ] =
        wasmExports["PyMarshal_WriteObjectToString"])(a0, a1));
    var _PyMarshal_Init = (Module["_PyMarshal_Init"] = () =>
      (_PyMarshal_Init = Module["_PyMarshal_Init"] =
        wasmExports["PyMarshal_Init"])());
    var __Py_convert_optional_to_ssize_t = (Module[
      "__Py_convert_optional_to_ssize_t"
    ] = (a0, a1) =>
      (__Py_convert_optional_to_ssize_t = Module[
        "__Py_convert_optional_to_ssize_t"
      ] =
        wasmExports["_Py_convert_optional_to_ssize_t"])(a0, a1));
    var _Py_VaBuildValue = (Module["_Py_VaBuildValue"] = (a0, a1) =>
      (_Py_VaBuildValue = Module["_Py_VaBuildValue"] =
        wasmExports["Py_VaBuildValue"])(a0, a1));
    var __Py_VaBuildValue_SizeT = (Module["__Py_VaBuildValue_SizeT"] = (
      a0,
      a1,
    ) =>
      (__Py_VaBuildValue_SizeT = Module["__Py_VaBuildValue_SizeT"] =
        wasmExports["_Py_VaBuildValue_SizeT"])(a0, a1));
    var _PyModule_AddStringConstant = (Module["_PyModule_AddStringConstant"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyModule_AddStringConstant = Module["_PyModule_AddStringConstant"] =
        wasmExports["PyModule_AddStringConstant"])(a0, a1, a2));
    var _vsnprintf = (Module["_vsnprintf"] = (a0, a1, a2, a3) =>
      (_vsnprintf = Module["_vsnprintf"] = wasmExports["vsnprintf"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _PyOS_vsnprintf = (Module["_PyOS_vsnprintf"] = (a0, a1, a2, a3) =>
      (_PyOS_vsnprintf = Module["_PyOS_vsnprintf"] =
        wasmExports["PyOS_vsnprintf"])(a0, a1, a2, a3));
    var __PyPathConfig_ClearGlobal = (Module["__PyPathConfig_ClearGlobal"] =
      () =>
        (__PyPathConfig_ClearGlobal = Module["__PyPathConfig_ClearGlobal"] =
          wasmExports["_PyPathConfig_ClearGlobal"])());
    var _wcscpy = (Module["_wcscpy"] = (a0, a1) =>
      (_wcscpy = Module["_wcscpy"] = wasmExports["wcscpy"])(a0, a1));
    var _Py_SetPath = (Module["_Py_SetPath"] = (a0) =>
      (_Py_SetPath = Module["_Py_SetPath"] = wasmExports["Py_SetPath"])(a0));
    var _Py_SetPythonHome = (Module["_Py_SetPythonHome"] = (a0) =>
      (_Py_SetPythonHome = Module["_Py_SetPythonHome"] =
        wasmExports["Py_SetPythonHome"])(a0));
    var _Py_SetProgramName = (Module["_Py_SetProgramName"] = (a0) =>
      (_Py_SetProgramName = Module["_Py_SetProgramName"] =
        wasmExports["Py_SetProgramName"])(a0));
    var __Py_SetProgramFullPath = (Module["__Py_SetProgramFullPath"] = (a0) =>
      (__Py_SetProgramFullPath = Module["__Py_SetProgramFullPath"] =
        wasmExports["_Py_SetProgramFullPath"])(a0));
    var _Py_GetPath = (Module["_Py_GetPath"] = () =>
      (_Py_GetPath = Module["_Py_GetPath"] = wasmExports["Py_GetPath"])());
    var _Py_GetPrefix = (Module["_Py_GetPrefix"] = () =>
      (_Py_GetPrefix = Module["_Py_GetPrefix"] =
        wasmExports["Py_GetPrefix"])());
    var _Py_GetExecPrefix = (Module["_Py_GetExecPrefix"] = () =>
      (_Py_GetExecPrefix = Module["_Py_GetExecPrefix"] =
        wasmExports["Py_GetExecPrefix"])());
    var _Py_GetProgramFullPath = (Module["_Py_GetProgramFullPath"] = () =>
      (_Py_GetProgramFullPath = Module["_Py_GetProgramFullPath"] =
        wasmExports["Py_GetProgramFullPath"])());
    var _Py_GetPythonHome = (Module["_Py_GetPythonHome"] = () =>
      (_Py_GetPythonHome = Module["_Py_GetPythonHome"] =
        wasmExports["Py_GetPythonHome"])());
    var _Py_GetProgramName = (Module["_Py_GetProgramName"] = () =>
      (_Py_GetProgramName = Module["_Py_GetProgramName"] =
        wasmExports["Py_GetProgramName"])());
    var __Py_wgetcwd = (Module["__Py_wgetcwd"] = (a0, a1) =>
      (__Py_wgetcwd = Module["__Py_wgetcwd"] = wasmExports["_Py_wgetcwd"])(
        a0,
        a1,
      ));
    var __Py_wreadlink = (Module["__Py_wreadlink"] = (a0, a1, a2) =>
      (__Py_wreadlink = Module["__Py_wreadlink"] =
        wasmExports["_Py_wreadlink"])(a0, a1, a2));
    var _wcsrchr = (Module["_wcsrchr"] = (a0, a1) =>
      (_wcsrchr = Module["_wcsrchr"] = wasmExports["wcsrchr"])(a0, a1));
    var _wcsncpy = (Module["_wcsncpy"] = (a0, a1, a2) =>
      (_wcsncpy = Module["_wcsncpy"] = wasmExports["wcsncpy"])(a0, a1, a2));
    var __Py_wrealpath = (Module["__Py_wrealpath"] = (a0, a1, a2) =>
      (__Py_wrealpath = Module["__Py_wrealpath"] =
        wasmExports["_Py_wrealpath"])(a0, a1, a2));
    var _wcsncmp = (Module["_wcsncmp"] = (a0, a1, a2) =>
      (_wcsncmp = Module["_wcsncmp"] = wasmExports["wcsncmp"])(a0, a1, a2));
    var __PyPreConfig_InitCompatConfig = (Module[
      "__PyPreConfig_InitCompatConfig"
    ] = (a0) =>
      (__PyPreConfig_InitCompatConfig = Module[
        "__PyPreConfig_InitCompatConfig"
      ] =
        wasmExports["_PyPreConfig_InitCompatConfig"])(a0));
    var _PyPreConfig_InitIsolatedConfig = (Module[
      "_PyPreConfig_InitIsolatedConfig"
    ] = (a0) =>
      (_PyPreConfig_InitIsolatedConfig = Module[
        "_PyPreConfig_InitIsolatedConfig"
      ] =
        wasmExports["PyPreConfig_InitIsolatedConfig"])(a0));
    var __Py_SetLocaleFromEnv = (Module["__Py_SetLocaleFromEnv"] = (a0) =>
      (__Py_SetLocaleFromEnv = Module["__Py_SetLocaleFromEnv"] =
        wasmExports["_Py_SetLocaleFromEnv"])(a0));
    var __Py_LegacyLocaleDetected = (Module["__Py_LegacyLocaleDetected"] = (
      a0,
    ) =>
      (__Py_LegacyLocaleDetected = Module["__Py_LegacyLocaleDetected"] =
        wasmExports["_Py_LegacyLocaleDetected"])(a0));
    var __Py_CoerceLegacyLocale = (Module["__Py_CoerceLegacyLocale"] = (a0) =>
      (__Py_CoerceLegacyLocale = Module["__Py_CoerceLegacyLocale"] =
        wasmExports["_Py_CoerceLegacyLocale"])(a0));
    var _PyHash_GetFuncDef = (Module["_PyHash_GetFuncDef"] = () =>
      (_PyHash_GetFuncDef = Module["_PyHash_GetFuncDef"] =
        wasmExports["PyHash_GetFuncDef"])());
    var __PyRuntimeState_Init = (Module["__PyRuntimeState_Init"] = (a0, a1) =>
      (__PyRuntimeState_Init = Module["__PyRuntimeState_Init"] =
        wasmExports["_PyRuntimeState_Init"])(a0, a1));
    var __PyRuntime_Finalize = (Module["__PyRuntime_Finalize"] = () =>
      (__PyRuntime_Finalize = Module["__PyRuntime_Finalize"] =
        wasmExports["_PyRuntime_Finalize"])());
    var __PyRuntimeState_Fini = (Module["__PyRuntimeState_Fini"] = (a0) =>
      (__PyRuntimeState_Fini = Module["__PyRuntimeState_Fini"] =
        wasmExports["_PyRuntimeState_Fini"])(a0));
    var __Py_IsCoreInitialized = (Module["__Py_IsCoreInitialized"] = () =>
      (__Py_IsCoreInitialized = Module["__Py_IsCoreInitialized"] =
        wasmExports["_Py_IsCoreInitialized"])());
    var _nl_langinfo = (Module["_nl_langinfo"] = (a0) =>
      (_nl_langinfo = Module["_nl_langinfo"] = wasmExports["nl_langinfo"])(a0));
    var __Py_ResetForceASCII = (Module["__Py_ResetForceASCII"] = () =>
      (__Py_ResetForceASCII = Module["__Py_ResetForceASCII"] =
        wasmExports["_Py_ResetForceASCII"])());
    var _setenv = (Module["_setenv"] = (a0, a1, a2) =>
      (_setenv = Module["_setenv"] = wasmExports["setenv"])(a0, a1, a2));
    var __PyInterpreterState_SetConfig = (Module[
      "__PyInterpreterState_SetConfig"
    ] = (a0) =>
      (__PyInterpreterState_SetConfig = Module[
        "__PyInterpreterState_SetConfig"
      ] =
        wasmExports["_PyInterpreterState_SetConfig"])(a0));
    var __Py_PreInitializeFromPyArgv = (Module["__Py_PreInitializeFromPyArgv"] =
      (a0, a1, a2) =>
        (__Py_PreInitializeFromPyArgv = Module["__Py_PreInitializeFromPyArgv"] =
          wasmExports["_Py_PreInitializeFromPyArgv"])(a0, a1, a2));
    var _Py_PreInitializeFromArgs = (Module["_Py_PreInitializeFromArgs"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_Py_PreInitializeFromArgs = Module["_Py_PreInitializeFromArgs"] =
        wasmExports["Py_PreInitializeFromArgs"])(a0, a1, a2, a3));
    var _Py_PreInitialize = (Module["_Py_PreInitialize"] = (a0, a1) =>
      (_Py_PreInitialize = Module["_Py_PreInitialize"] =
        wasmExports["Py_PreInitialize"])(a0, a1));
    var __PyInterpreterState_Enable = (Module["__PyInterpreterState_Enable"] = (
      a0,
      a1,
    ) =>
      (__PyInterpreterState_Enable = Module["__PyInterpreterState_Enable"] =
        wasmExports["_PyInterpreterState_Enable"])(a0, a1));
    var _PyInterpreterState_New = (Module["_PyInterpreterState_New"] = () =>
      (_PyInterpreterState_New = Module["_PyInterpreterState_New"] =
        wasmExports["PyInterpreterState_New"])());
    var _PyThreadState_New = (Module["_PyThreadState_New"] = (a0) =>
      (_PyThreadState_New = Module["_PyThreadState_New"] =
        wasmExports["PyThreadState_New"])(a0));
    var _PyThreadState_Swap = (Module["_PyThreadState_Swap"] = (a0) =>
      (_PyThreadState_Swap = Module["_PyThreadState_Swap"] =
        wasmExports["PyThreadState_Swap"])(a0));
    var _Py_InitializeEx = (Module["_Py_InitializeEx"] = (a0) =>
      (_Py_InitializeEx = Module["_Py_InitializeEx"] =
        wasmExports["Py_InitializeEx"])(a0));
    var _Py_FatalError = (Module["_Py_FatalError"] = (a0) =>
      (_Py_FatalError = Module["_Py_FatalError"] =
        wasmExports["Py_FatalError"])(a0));
    var _Py_Initialize = (Module["_Py_Initialize"] = () =>
      (_Py_Initialize = Module["_Py_Initialize"] =
        wasmExports["Py_Initialize"])());
    var __Py_InitializeMain = (Module["__Py_InitializeMain"] = (a0) =>
      (__Py_InitializeMain = Module["__Py_InitializeMain"] =
        wasmExports["_Py_InitializeMain"])(a0));
    var _PyGC_Collect = (Module["_PyGC_Collect"] = () =>
      (_PyGC_Collect = Module["_PyGC_Collect"] =
        wasmExports["PyGC_Collect"])());
    var _PyInterpreterState_Delete = (Module["_PyInterpreterState_Delete"] = (
      a0,
    ) =>
      (_PyInterpreterState_Delete = Module["_PyInterpreterState_Delete"] =
        wasmExports["PyInterpreterState_Delete"])(a0));
    var _Py_Finalize = (Module["_Py_Finalize"] = () =>
      (_Py_Finalize = Module["_Py_Finalize"] = wasmExports["Py_Finalize"])());
    var __Py_NewInterpreter = (Module["__Py_NewInterpreter"] = (a0) =>
      (__Py_NewInterpreter = Module["__Py_NewInterpreter"] =
        wasmExports["_Py_NewInterpreter"])(a0));
    var _PyErr_PrintEx = (Module["_PyErr_PrintEx"] = (a0) =>
      (_PyErr_PrintEx = Module["_PyErr_PrintEx"] =
        wasmExports["PyErr_PrintEx"])(a0));
    var _PyThreadState_Clear = (Module["_PyThreadState_Clear"] = (a0) =>
      (_PyThreadState_Clear = Module["_PyThreadState_Clear"] =
        wasmExports["PyThreadState_Clear"])(a0));
    var _PyThreadState_Delete = (Module["_PyThreadState_Delete"] = (a0) =>
      (_PyThreadState_Delete = Module["_PyThreadState_Delete"] =
        wasmExports["PyThreadState_Delete"])(a0));
    var _Py_NewInterpreter = (Module["_Py_NewInterpreter"] = () =>
      (_Py_NewInterpreter = Module["_Py_NewInterpreter"] =
        wasmExports["Py_NewInterpreter"])());
    var _Py_EndInterpreter = (Module["_Py_EndInterpreter"] = (a0) =>
      (_Py_EndInterpreter = Module["_Py_EndInterpreter"] =
        wasmExports["Py_EndInterpreter"])(a0));
    var __Py_DumpExtensionModules = (Module["__Py_DumpExtensionModules"] = (
      a0,
      a1,
    ) =>
      (__Py_DumpExtensionModules = Module["__Py_DumpExtensionModules"] =
        wasmExports["_Py_DumpExtensionModules"])(a0, a1));
    var __Py_write_noraise = (Module["__Py_write_noraise"] = (a0, a1, a2) =>
      (__Py_write_noraise = Module["__Py_write_noraise"] =
        wasmExports["_Py_write_noraise"])(a0, a1, a2));
    var __Py_DumpASCII = (Module["__Py_DumpASCII"] = (a0, a1) =>
      (__Py_DumpASCII = Module["__Py_DumpASCII"] =
        wasmExports["_Py_DumpASCII"])(a0, a1));
    var __Py_DumpDecimal = (Module["__Py_DumpDecimal"] = (a0, a1) =>
      (__Py_DumpDecimal = Module["__Py_DumpDecimal"] =
        wasmExports["_Py_DumpDecimal"])(a0, a1));
    var __Py_DumpHexadecimal = (Module["__Py_DumpHexadecimal"] = (a0, a1, a2) =>
      (__Py_DumpHexadecimal = Module["__Py_DumpHexadecimal"] =
        wasmExports["_Py_DumpHexadecimal"])(a0, a1, a2));
    var __Py_DumpTracebackThreads = (Module["__Py_DumpTracebackThreads"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_DumpTracebackThreads = Module["__Py_DumpTracebackThreads"] =
        wasmExports["_Py_DumpTracebackThreads"])(a0, a1, a2));
    var _vfprintf = (Module["_vfprintf"] = (a0, a1, a2) =>
      (_vfprintf = Module["_vfprintf"] = wasmExports["vfprintf"])(a0, a1, a2));
    var _Py_AtExit = (Module["_Py_AtExit"] = (a0) =>
      (_Py_AtExit = Module["_Py_AtExit"] = wasmExports["Py_AtExit"])(a0));
    var _Py_Exit = (Module["_Py_Exit"] = (a0) =>
      (_Py_Exit = Module["_Py_Exit"] = wasmExports["Py_Exit"])(a0));
    var _Py_FdIsInteractive = (Module["_Py_FdIsInteractive"] = (a0, a1) =>
      (_Py_FdIsInteractive = Module["_Py_FdIsInteractive"] =
        wasmExports["Py_FdIsInteractive"])(a0, a1));
    var __Py_FdIsInteractive = (Module["__Py_FdIsInteractive"] = (a0, a1) =>
      (__Py_FdIsInteractive = Module["__Py_FdIsInteractive"] =
        wasmExports["_Py_FdIsInteractive"])(a0, a1));
    var _PyOS_getsig = (Module["_PyOS_getsig"] = (a0) =>
      (_PyOS_getsig = Module["_PyOS_getsig"] = wasmExports["PyOS_getsig"])(a0));
    var _signal = (Module["_signal"] = (a0, a1) =>
      (_signal = Module["_signal"] = wasmExports["signal"])(a0, a1));
    var _PyOS_setsig = (Module["_PyOS_setsig"] = (a0, a1) =>
      (_PyOS_setsig = Module["_PyOS_setsig"] = wasmExports["PyOS_setsig"])(
        a0,
        a1,
      ));
    var _siginterrupt = (Module["_siginterrupt"] = (a0, a1) =>
      (_siginterrupt = Module["_siginterrupt"] = wasmExports["siginterrupt"])(
        a0,
        a1,
      ));
    var _fcntl = (Module["_fcntl"] = (a0, a1, a2) =>
      (_fcntl = Module["_fcntl"] = wasmExports["fcntl"])(a0, a1, a2));
    var _PyOS_mystrnicmp = (Module["_PyOS_mystrnicmp"] = (a0, a1, a2) =>
      (_PyOS_mystrnicmp = Module["_PyOS_mystrnicmp"] =
        wasmExports["PyOS_mystrnicmp"])(a0, a1, a2));
    var _PyInterpreterState_Clear = (Module["_PyInterpreterState_Clear"] = (
      a0,
    ) =>
      (_PyInterpreterState_Clear = Module["_PyInterpreterState_Clear"] =
        wasmExports["PyInterpreterState_Clear"])(a0));
    var _PyInterpreterState_ThreadHead = (Module[
      "_PyInterpreterState_ThreadHead"
    ] = (a0) =>
      (_PyInterpreterState_ThreadHead = Module[
        "_PyInterpreterState_ThreadHead"
      ] =
        wasmExports["PyInterpreterState_ThreadHead"])(a0));
    var __PyInterpreterState_RequiresIDRef = (Module[
      "__PyInterpreterState_RequiresIDRef"
    ] = (a0) =>
      (__PyInterpreterState_RequiresIDRef = Module[
        "__PyInterpreterState_RequiresIDRef"
      ] =
        wasmExports["_PyInterpreterState_RequiresIDRef"])(a0));
    var __PyInterpreterState_RequireIDRef = (Module[
      "__PyInterpreterState_RequireIDRef"
    ] = (a0, a1) =>
      (__PyInterpreterState_RequireIDRef = Module[
        "__PyInterpreterState_RequireIDRef"
      ] =
        wasmExports["_PyInterpreterState_RequireIDRef"])(a0, a1));
    var __PyInterpreterState_GetMainModule = (Module[
      "__PyInterpreterState_GetMainModule"
    ] = (a0) =>
      (__PyInterpreterState_GetMainModule = Module[
        "__PyInterpreterState_GetMainModule"
      ] =
        wasmExports["_PyInterpreterState_GetMainModule"])(a0));
    var _PyInterpreterState_GetDict = (Module["_PyInterpreterState_GetDict"] = (
      a0,
    ) =>
      (_PyInterpreterState_GetDict = Module["_PyInterpreterState_GetDict"] =
        wasmExports["PyInterpreterState_GetDict"])(a0));
    var _PyThread_tss_get = (Module["_PyThread_tss_get"] = (a0) =>
      (_PyThread_tss_get = Module["_PyThread_tss_get"] =
        wasmExports["PyThread_tss_get"])(a0));
    var _PyThread_tss_set = (Module["_PyThread_tss_set"] = (a0, a1) =>
      (_PyThread_tss_set = Module["_PyThread_tss_set"] =
        wasmExports["PyThread_tss_set"])(a0, a1));
    var __PyThreadState_SetCurrent = (Module["__PyThreadState_SetCurrent"] = (
      a0,
    ) =>
      (__PyThreadState_SetCurrent = Module["__PyThreadState_SetCurrent"] =
        wasmExports["_PyThreadState_SetCurrent"])(a0));
    var __PyThreadState_Prealloc = (Module["__PyThreadState_Prealloc"] = (a0) =>
      (__PyThreadState_Prealloc = Module["__PyThreadState_Prealloc"] =
        wasmExports["_PyThreadState_Prealloc"])(a0));
    var __PyThreadState_Init = (Module["__PyThreadState_Init"] = (a0) =>
      (__PyThreadState_Init = Module["__PyThreadState_Init"] =
        wasmExports["_PyThreadState_Init"])(a0));
    var _PyState_FindModule = (Module["_PyState_FindModule"] = (a0) =>
      (_PyState_FindModule = Module["_PyState_FindModule"] =
        wasmExports["PyState_FindModule"])(a0));
    var _PyState_AddModule = (Module["_PyState_AddModule"] = (a0, a1) =>
      (_PyState_AddModule = Module["_PyState_AddModule"] =
        wasmExports["PyState_AddModule"])(a0, a1));
    var _PyState_RemoveModule = (Module["_PyState_RemoveModule"] = (a0) =>
      (_PyState_RemoveModule = Module["_PyState_RemoveModule"] =
        wasmExports["PyState_RemoveModule"])(a0));
    var __PyThreadState_DeleteCurrent = (Module[
      "__PyThreadState_DeleteCurrent"
    ] = (a0) =>
      (__PyThreadState_DeleteCurrent = Module["__PyThreadState_DeleteCurrent"] =
        wasmExports["_PyThreadState_DeleteCurrent"])(a0));
    var _PyThreadState_DeleteCurrent = (Module["_PyThreadState_DeleteCurrent"] =
      () =>
        (_PyThreadState_DeleteCurrent = Module["_PyThreadState_DeleteCurrent"] =
          wasmExports["PyThreadState_DeleteCurrent"])());
    var __PyThreadState_UncheckedGet = (Module["__PyThreadState_UncheckedGet"] =
      () =>
        (__PyThreadState_UncheckedGet = Module["__PyThreadState_UncheckedGet"] =
          wasmExports["_PyThreadState_UncheckedGet"])());
    var __PyThreadState_GetDict = (Module["__PyThreadState_GetDict"] = (a0) =>
      (__PyThreadState_GetDict = Module["__PyThreadState_GetDict"] =
        wasmExports["_PyThreadState_GetDict"])(a0));
    var _PyThreadState_GetInterpreter = (Module[
      "_PyThreadState_GetInterpreter"
    ] = (a0) =>
      (_PyThreadState_GetInterpreter = Module["_PyThreadState_GetInterpreter"] =
        wasmExports["PyThreadState_GetInterpreter"])(a0));
    var _PyThreadState_GetID = (Module["_PyThreadState_GetID"] = (a0) =>
      (_PyThreadState_GetID = Module["_PyThreadState_GetID"] =
        wasmExports["PyThreadState_GetID"])(a0));
    var _PyThreadState_SetAsyncExc = (Module["_PyThreadState_SetAsyncExc"] = (
      a0,
      a1,
    ) =>
      (_PyThreadState_SetAsyncExc = Module["_PyThreadState_SetAsyncExc"] =
        wasmExports["PyThreadState_SetAsyncExc"])(a0, a1));
    var _PyInterpreterState_Head = (Module["_PyInterpreterState_Head"] = () =>
      (_PyInterpreterState_Head = Module["_PyInterpreterState_Head"] =
        wasmExports["PyInterpreterState_Head"])());
    var _PyInterpreterState_Main = (Module["_PyInterpreterState_Main"] = () =>
      (_PyInterpreterState_Main = Module["_PyInterpreterState_Main"] =
        wasmExports["PyInterpreterState_Main"])());
    var _PyInterpreterState_Next = (Module["_PyInterpreterState_Next"] = (a0) =>
      (_PyInterpreterState_Next = Module["_PyInterpreterState_Next"] =
        wasmExports["PyInterpreterState_Next"])(a0));
    var _PyThreadState_Next = (Module["_PyThreadState_Next"] = (a0) =>
      (_PyThreadState_Next = Module["_PyThreadState_Next"] =
        wasmExports["PyThreadState_Next"])(a0));
    var __PyThread_CurrentFrames = (Module["__PyThread_CurrentFrames"] = () =>
      (__PyThread_CurrentFrames = Module["__PyThread_CurrentFrames"] =
        wasmExports["_PyThread_CurrentFrames"])());
    var __PyThread_CurrentExceptions = (Module["__PyThread_CurrentExceptions"] =
      () =>
        (__PyThread_CurrentExceptions = Module["__PyThread_CurrentExceptions"] =
          wasmExports["_PyThread_CurrentExceptions"])());
    var _PyThread_tss_create = (Module["_PyThread_tss_create"] = (a0) =>
      (_PyThread_tss_create = Module["_PyThread_tss_create"] =
        wasmExports["PyThread_tss_create"])(a0));
    var __PyGILState_GetInterpreterStateUnsafe = (Module[
      "__PyGILState_GetInterpreterStateUnsafe"
    ] = () =>
      (__PyGILState_GetInterpreterStateUnsafe = Module[
        "__PyGILState_GetInterpreterStateUnsafe"
      ] =
        wasmExports["_PyGILState_GetInterpreterStateUnsafe"])());
    var _PyThread_tss_delete = (Module["_PyThread_tss_delete"] = (a0) =>
      (_PyThread_tss_delete = Module["_PyThread_tss_delete"] =
        wasmExports["PyThread_tss_delete"])(a0));
    var _PyThread_tss_is_created = (Module["_PyThread_tss_is_created"] = (a0) =>
      (_PyThread_tss_is_created = Module["_PyThread_tss_is_created"] =
        wasmExports["PyThread_tss_is_created"])(a0));
    var __PyObject_CheckCrossInterpreterData = (Module[
      "__PyObject_CheckCrossInterpreterData"
    ] = (a0) =>
      (__PyObject_CheckCrossInterpreterData = Module[
        "__PyObject_CheckCrossInterpreterData"
      ] =
        wasmExports["_PyObject_CheckCrossInterpreterData"])(a0));
    var __PyCrossInterpreterData_Lookup = (Module[
      "__PyCrossInterpreterData_Lookup"
    ] = (a0) =>
      (__PyCrossInterpreterData_Lookup = Module[
        "__PyCrossInterpreterData_Lookup"
      ] =
        wasmExports["_PyCrossInterpreterData_Lookup"])(a0));
    var __PyObject_GetCrossInterpreterData = (Module[
      "__PyObject_GetCrossInterpreterData"
    ] = (a0, a1) =>
      (__PyObject_GetCrossInterpreterData = Module[
        "__PyObject_GetCrossInterpreterData"
      ] =
        wasmExports["_PyObject_GetCrossInterpreterData"])(a0, a1));
    var __PyCrossInterpreterData_Release = (Module[
      "__PyCrossInterpreterData_Release"
    ] = (a0) =>
      (__PyCrossInterpreterData_Release = Module[
        "__PyCrossInterpreterData_Release"
      ] =
        wasmExports["_PyCrossInterpreterData_Release"])(a0));
    var __PyCrossInterpreterData_NewObject = (Module[
      "__PyCrossInterpreterData_NewObject"
    ] = (a0) =>
      (__PyCrossInterpreterData_NewObject = Module[
        "__PyCrossInterpreterData_NewObject"
      ] =
        wasmExports["_PyCrossInterpreterData_NewObject"])(a0));
    var __PyCrossInterpreterData_RegisterClass = (Module[
      "__PyCrossInterpreterData_RegisterClass"
    ] = (a0, a1) =>
      (__PyCrossInterpreterData_RegisterClass = Module[
        "__PyCrossInterpreterData_RegisterClass"
      ] =
        wasmExports["_PyCrossInterpreterData_RegisterClass"])(a0, a1));
    var __PyInterpreterState_GetEvalFrameFunc = (Module[
      "__PyInterpreterState_GetEvalFrameFunc"
    ] = (a0) =>
      (__PyInterpreterState_GetEvalFrameFunc = Module[
        "__PyInterpreterState_GetEvalFrameFunc"
      ] =
        wasmExports["_PyInterpreterState_GetEvalFrameFunc"])(a0));
    var __PyInterpreterState_SetEvalFrameFunc = (Module[
      "__PyInterpreterState_SetEvalFrameFunc"
    ] = (a0, a1) =>
      (__PyInterpreterState_SetEvalFrameFunc = Module[
        "__PyInterpreterState_SetEvalFrameFunc"
      ] =
        wasmExports["_PyInterpreterState_SetEvalFrameFunc"])(a0, a1));
    var __PyInterpreterState_GetConfigCopy = (Module[
      "__PyInterpreterState_GetConfigCopy"
    ] = (a0) =>
      (__PyInterpreterState_GetConfigCopy = Module[
        "__PyInterpreterState_GetConfigCopy"
      ] =
        wasmExports["_PyInterpreterState_GetConfigCopy"])(a0));
    var __PyRun_AnyFileObject = (Module["__PyRun_AnyFileObject"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyRun_AnyFileObject = Module["__PyRun_AnyFileObject"] =
        wasmExports["_PyRun_AnyFileObject"])(a0, a1, a2, a3));
    var __PyRun_InteractiveLoopObject = (Module[
      "__PyRun_InteractiveLoopObject"
    ] = (a0, a1, a2) =>
      (__PyRun_InteractiveLoopObject = Module["__PyRun_InteractiveLoopObject"] =
        wasmExports["_PyRun_InteractiveLoopObject"])(a0, a1, a2));
    var __PyRun_SimpleFileObject = (Module["__PyRun_SimpleFileObject"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyRun_SimpleFileObject = Module["__PyRun_SimpleFileObject"] =
        wasmExports["_PyRun_SimpleFileObject"])(a0, a1, a2, a3));
    var _rewind = (Module["_rewind"] = (a0) =>
      (_rewind = Module["_rewind"] = wasmExports["rewind"])(a0));
    var _PyRun_InteractiveLoopFlags = (Module["_PyRun_InteractiveLoopFlags"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyRun_InteractiveLoopFlags = Module["_PyRun_InteractiveLoopFlags"] =
        wasmExports["PyRun_InteractiveLoopFlags"])(a0, a1, a2));
    var _PyRun_InteractiveOneObject = (Module["_PyRun_InteractiveOneObject"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyRun_InteractiveOneObject = Module["_PyRun_InteractiveOneObject"] =
        wasmExports["PyRun_InteractiveOneObject"])(a0, a1, a2));
    var _PyRun_InteractiveOneFlags = (Module["_PyRun_InteractiveOneFlags"] = (
      a0,
      a1,
      a2,
    ) =>
      (_PyRun_InteractiveOneFlags = Module["_PyRun_InteractiveOneFlags"] =
        wasmExports["PyRun_InteractiveOneFlags"])(a0, a1, a2));
    var _PyRun_SimpleFileExFlags = (Module["_PyRun_SimpleFileExFlags"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_PyRun_SimpleFileExFlags = Module["_PyRun_SimpleFileExFlags"] =
        wasmExports["PyRun_SimpleFileExFlags"])(a0, a1, a2, a3));
    var _PyRun_SimpleStringFlags = (Module["_PyRun_SimpleStringFlags"] = (
      a0,
      a1,
    ) =>
      (_PyRun_SimpleStringFlags = Module["_PyRun_SimpleStringFlags"] =
        wasmExports["PyRun_SimpleStringFlags"])(a0, a1));
    var __Py_HandleSystemExit = (Module["__Py_HandleSystemExit"] = (a0) =>
      (__Py_HandleSystemExit = Module["__Py_HandleSystemExit"] =
        wasmExports["_Py_HandleSystemExit"])(a0));
    var __PyErr_Display = (Module["__PyErr_Display"] = (a0, a1, a2, a3) =>
      (__PyErr_Display = Module["__PyErr_Display"] =
        wasmExports["_PyErr_Display"])(a0, a1, a2, a3));
    var __Py_WriteIndentedMargin = (Module["__Py_WriteIndentedMargin"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_WriteIndentedMargin = Module["__Py_WriteIndentedMargin"] =
        wasmExports["_Py_WriteIndentedMargin"])(a0, a1, a2));
    var __Py_WriteIndent = (Module["__Py_WriteIndent"] = (a0, a1) =>
      (__Py_WriteIndent = Module["__Py_WriteIndent"] =
        wasmExports["_Py_WriteIndent"])(a0, a1));
    var _PyRun_FileExFlags = (Module["_PyRun_FileExFlags"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
    ) =>
      (_PyRun_FileExFlags = Module["_PyRun_FileExFlags"] =
        wasmExports["PyRun_FileExFlags"])(a0, a1, a2, a3, a4, a5, a6));
    var _Py_CompileStringExFlags = (Module["_Py_CompileStringExFlags"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_Py_CompileStringExFlags = Module["_Py_CompileStringExFlags"] =
        wasmExports["Py_CompileStringExFlags"])(a0, a1, a2, a3, a4));
    var _PyRun_AnyFile = (Module["_PyRun_AnyFile"] = (a0, a1) =>
      (_PyRun_AnyFile = Module["_PyRun_AnyFile"] =
        wasmExports["PyRun_AnyFile"])(a0, a1));
    var _PyRun_AnyFileEx = (Module["_PyRun_AnyFileEx"] = (a0, a1, a2) =>
      (_PyRun_AnyFileEx = Module["_PyRun_AnyFileEx"] =
        wasmExports["PyRun_AnyFileEx"])(a0, a1, a2));
    var _PyRun_AnyFileFlags = (Module["_PyRun_AnyFileFlags"] = (a0, a1, a2) =>
      (_PyRun_AnyFileFlags = Module["_PyRun_AnyFileFlags"] =
        wasmExports["PyRun_AnyFileFlags"])(a0, a1, a2));
    var _PyRun_File = (Module["_PyRun_File"] = (a0, a1, a2, a3, a4) =>
      (_PyRun_File = Module["_PyRun_File"] = wasmExports["PyRun_File"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _PyRun_FileEx = (Module["_PyRun_FileEx"] = (a0, a1, a2, a3, a4, a5) =>
      (_PyRun_FileEx = Module["_PyRun_FileEx"] = wasmExports["PyRun_FileEx"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _PyRun_FileFlags = (Module["_PyRun_FileFlags"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_PyRun_FileFlags = Module["_PyRun_FileFlags"] =
        wasmExports["PyRun_FileFlags"])(a0, a1, a2, a3, a4, a5));
    var _PyRun_SimpleFile = (Module["_PyRun_SimpleFile"] = (a0, a1) =>
      (_PyRun_SimpleFile = Module["_PyRun_SimpleFile"] =
        wasmExports["PyRun_SimpleFile"])(a0, a1));
    var _PyRun_SimpleFileEx = (Module["_PyRun_SimpleFileEx"] = (a0, a1, a2) =>
      (_PyRun_SimpleFileEx = Module["_PyRun_SimpleFileEx"] =
        wasmExports["PyRun_SimpleFileEx"])(a0, a1, a2));
    var _PyRun_String = (Module["_PyRun_String"] = (a0, a1, a2, a3) =>
      (_PyRun_String = Module["_PyRun_String"] = wasmExports["PyRun_String"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _PyRun_SimpleString = (Module["_PyRun_SimpleString"] = (a0) =>
      (_PyRun_SimpleString = Module["_PyRun_SimpleString"] =
        wasmExports["PyRun_SimpleString"])(a0));
    var _Py_CompileString = (Module["_Py_CompileString"] = (a0, a1, a2) =>
      (_Py_CompileString = Module["_Py_CompileString"] =
        wasmExports["Py_CompileString"])(a0, a1, a2));
    var _Py_CompileStringFlags = (Module["_Py_CompileStringFlags"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_Py_CompileStringFlags = Module["_Py_CompileStringFlags"] =
        wasmExports["Py_CompileStringFlags"])(a0, a1, a2, a3));
    var _PyRun_InteractiveOne = (Module["_PyRun_InteractiveOne"] = (a0, a1) =>
      (_PyRun_InteractiveOne = Module["_PyRun_InteractiveOne"] =
        wasmExports["PyRun_InteractiveOne"])(a0, a1));
    var _PyRun_InteractiveLoop = (Module["_PyRun_InteractiveLoop"] = (a0, a1) =>
      (_PyRun_InteractiveLoop = Module["_PyRun_InteractiveLoop"] =
        wasmExports["PyRun_InteractiveLoop"])(a0, a1));
    var __PyTraceBack_Print_Indented = (Module["__PyTraceBack_Print_Indented"] =
      (a0, a1, a2, a3, a4, a5) =>
        (__PyTraceBack_Print_Indented = Module["__PyTraceBack_Print_Indented"] =
          wasmExports["_PyTraceBack_Print_Indented"])(a0, a1, a2, a3, a4, a5));
    var __PyTime_Add = (Module["__PyTime_Add"] = (a0, a1) =>
      (__PyTime_Add = Module["__PyTime_Add"] = wasmExports["_PyTime_Add"])(
        a0,
        a1,
      ));
    var __PyTime_MulDiv = (Module["__PyTime_MulDiv"] = (a0, a1, a2) =>
      (__PyTime_MulDiv = Module["__PyTime_MulDiv"] =
        wasmExports["_PyTime_MulDiv"])(a0, a1, a2));
    var __PyLong_AsTime_t = (Module["__PyLong_AsTime_t"] = (a0) =>
      (__PyLong_AsTime_t = Module["__PyLong_AsTime_t"] =
        wasmExports["_PyLong_AsTime_t"])(a0));
    var __PyLong_FromTime_t = (Module["__PyLong_FromTime_t"] = (a0) =>
      (__PyLong_FromTime_t = Module["__PyLong_FromTime_t"] =
        wasmExports["_PyLong_FromTime_t"])(a0));
    var __PyTime_ObjectToTime_t = (Module["__PyTime_ObjectToTime_t"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyTime_ObjectToTime_t = Module["__PyTime_ObjectToTime_t"] =
        wasmExports["_PyTime_ObjectToTime_t"])(a0, a1, a2));
    var __PyTime_ObjectToTimespec = (Module["__PyTime_ObjectToTimespec"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyTime_ObjectToTimespec = Module["__PyTime_ObjectToTimespec"] =
        wasmExports["_PyTime_ObjectToTimespec"])(a0, a1, a2, a3));
    var __PyTime_ObjectToTimeval = (Module["__PyTime_ObjectToTimeval"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyTime_ObjectToTimeval = Module["__PyTime_ObjectToTimeval"] =
        wasmExports["_PyTime_ObjectToTimeval"])(a0, a1, a2, a3));
    var __PyTime_FromSeconds = (Module["__PyTime_FromSeconds"] = (a0) =>
      (__PyTime_FromSeconds = Module["__PyTime_FromSeconds"] =
        wasmExports["_PyTime_FromSeconds"])(a0));
    var __PyTime_FromNanoseconds = (Module["__PyTime_FromNanoseconds"] = (a0) =>
      (__PyTime_FromNanoseconds = Module["__PyTime_FromNanoseconds"] =
        wasmExports["_PyTime_FromNanoseconds"])(a0));
    var __PyTime_FromNanosecondsObject = (Module[
      "__PyTime_FromNanosecondsObject"
    ] = (a0, a1) =>
      (__PyTime_FromNanosecondsObject = Module[
        "__PyTime_FromNanosecondsObject"
      ] =
        wasmExports["_PyTime_FromNanosecondsObject"])(a0, a1));
    var __PyTime_FromTimespec = (Module["__PyTime_FromTimespec"] = (a0, a1) =>
      (__PyTime_FromTimespec = Module["__PyTime_FromTimespec"] =
        wasmExports["_PyTime_FromTimespec"])(a0, a1));
    var __PyTime_FromTimeval = (Module["__PyTime_FromTimeval"] = (a0, a1) =>
      (__PyTime_FromTimeval = Module["__PyTime_FromTimeval"] =
        wasmExports["_PyTime_FromTimeval"])(a0, a1));
    var __PyTime_FromSecondsObject = (Module["__PyTime_FromSecondsObject"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyTime_FromSecondsObject = Module["__PyTime_FromSecondsObject"] =
        wasmExports["_PyTime_FromSecondsObject"])(a0, a1, a2));
    var __PyTime_FromMillisecondsObject = (Module[
      "__PyTime_FromMillisecondsObject"
    ] = (a0, a1, a2) =>
      (__PyTime_FromMillisecondsObject = Module[
        "__PyTime_FromMillisecondsObject"
      ] =
        wasmExports["_PyTime_FromMillisecondsObject"])(a0, a1, a2));
    var __PyTime_AsSecondsDouble = (Module["__PyTime_AsSecondsDouble"] = (a0) =>
      (__PyTime_AsSecondsDouble = Module["__PyTime_AsSecondsDouble"] =
        wasmExports["_PyTime_AsSecondsDouble"])(a0));
    var __PyTime_AsNanosecondsObject = (Module["__PyTime_AsNanosecondsObject"] =
      (a0) =>
        (__PyTime_AsNanosecondsObject = Module["__PyTime_AsNanosecondsObject"] =
          wasmExports["_PyTime_AsNanosecondsObject"])(a0));
    var __PyTime_AsNanoseconds = (Module["__PyTime_AsNanoseconds"] = (a0) =>
      (__PyTime_AsNanoseconds = Module["__PyTime_AsNanoseconds"] =
        wasmExports["_PyTime_AsNanoseconds"])(a0));
    var __PyTime_AsMilliseconds = (Module["__PyTime_AsMilliseconds"] = (
      a0,
      a1,
    ) =>
      (__PyTime_AsMilliseconds = Module["__PyTime_AsMilliseconds"] =
        wasmExports["_PyTime_AsMilliseconds"])(a0, a1));
    var __PyTime_AsTimeval = (Module["__PyTime_AsTimeval"] = (a0, a1, a2) =>
      (__PyTime_AsTimeval = Module["__PyTime_AsTimeval"] =
        wasmExports["_PyTime_AsTimeval"])(a0, a1, a2));
    var __PyTime_AsTimeval_clamp = (Module["__PyTime_AsTimeval_clamp"] = (
      a0,
      a1,
      a2,
    ) =>
      (__PyTime_AsTimeval_clamp = Module["__PyTime_AsTimeval_clamp"] =
        wasmExports["_PyTime_AsTimeval_clamp"])(a0, a1, a2));
    var __PyTime_AsTimevalTime_t = (Module["__PyTime_AsTimevalTime_t"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__PyTime_AsTimevalTime_t = Module["__PyTime_AsTimevalTime_t"] =
        wasmExports["_PyTime_AsTimevalTime_t"])(a0, a1, a2, a3));
    var __PyTime_AsTimespec_clamp = (Module["__PyTime_AsTimespec_clamp"] = (
      a0,
      a1,
    ) =>
      (__PyTime_AsTimespec_clamp = Module["__PyTime_AsTimespec_clamp"] =
        wasmExports["_PyTime_AsTimespec_clamp"])(a0, a1));
    var __PyTime_AsTimespec = (Module["__PyTime_AsTimespec"] = (a0, a1) =>
      (__PyTime_AsTimespec = Module["__PyTime_AsTimespec"] =
        wasmExports["_PyTime_AsTimespec"])(a0, a1));
    var __PyTime_GetSystemClock = (Module["__PyTime_GetSystemClock"] = () =>
      (__PyTime_GetSystemClock = Module["__PyTime_GetSystemClock"] =
        wasmExports["_PyTime_GetSystemClock"])());
    var _clock_gettime = (Module["_clock_gettime"] = (a0, a1) =>
      (_clock_gettime = Module["_clock_gettime"] =
        wasmExports["clock_gettime"])(a0, a1));
    var __PyTime_GetSystemClockWithInfo = (Module[
      "__PyTime_GetSystemClockWithInfo"
    ] = (a0, a1) =>
      (__PyTime_GetSystemClockWithInfo = Module[
        "__PyTime_GetSystemClockWithInfo"
      ] =
        wasmExports["_PyTime_GetSystemClockWithInfo"])(a0, a1));
    var _clock_getres = (Module["_clock_getres"] = (a0, a1) =>
      (_clock_getres = Module["_clock_getres"] = wasmExports["clock_getres"])(
        a0,
        a1,
      ));
    var __PyTime_GetMonotonicClock = (Module["__PyTime_GetMonotonicClock"] =
      () =>
        (__PyTime_GetMonotonicClock = Module["__PyTime_GetMonotonicClock"] =
          wasmExports["_PyTime_GetMonotonicClock"])());
    var __PyTime_GetMonotonicClockWithInfo = (Module[
      "__PyTime_GetMonotonicClockWithInfo"
    ] = (a0, a1) =>
      (__PyTime_GetMonotonicClockWithInfo = Module[
        "__PyTime_GetMonotonicClockWithInfo"
      ] =
        wasmExports["_PyTime_GetMonotonicClockWithInfo"])(a0, a1));
    var __PyTime_GetPerfCounterWithInfo = (Module[
      "__PyTime_GetPerfCounterWithInfo"
    ] = (a0, a1) =>
      (__PyTime_GetPerfCounterWithInfo = Module[
        "__PyTime_GetPerfCounterWithInfo"
      ] =
        wasmExports["_PyTime_GetPerfCounterWithInfo"])(a0, a1));
    var __PyTime_localtime = (Module["__PyTime_localtime"] = (a0, a1) =>
      (__PyTime_localtime = Module["__PyTime_localtime"] =
        wasmExports["_PyTime_localtime"])(a0, a1));
    var _localtime_r = (Module["_localtime_r"] = (a0, a1) =>
      (_localtime_r = Module["_localtime_r"] = wasmExports["localtime_r"])(
        a0,
        a1,
      ));
    var __PyTime_gmtime = (Module["__PyTime_gmtime"] = (a0, a1) =>
      (__PyTime_gmtime = Module["__PyTime_gmtime"] =
        wasmExports["_PyTime_gmtime"])(a0, a1));
    var _gmtime_r = (Module["_gmtime_r"] = (a0, a1) =>
      (_gmtime_r = Module["_gmtime_r"] = wasmExports["gmtime_r"])(a0, a1));
    var __PyDeadline_Init = (Module["__PyDeadline_Init"] = (a0) =>
      (__PyDeadline_Init = Module["__PyDeadline_Init"] =
        wasmExports["_PyDeadline_Init"])(a0));
    var __PyDeadline_Get = (Module["__PyDeadline_Get"] = (a0) =>
      (__PyDeadline_Get = Module["__PyDeadline_Get"] =
        wasmExports["_PyDeadline_Get"])(a0));
    var __PyOS_URandom = (Module["__PyOS_URandom"] = (a0, a1) =>
      (__PyOS_URandom = Module["__PyOS_URandom"] =
        wasmExports["_PyOS_URandom"])(a0, a1));
    var __Py_open = (Module["__Py_open"] = (a0, a1) =>
      (__Py_open = Module["__Py_open"] = wasmExports["_Py_open"])(a0, a1));
    var _close = (Module["_close"] = (a0) =>
      (_close = Module["_close"] = wasmExports["close"])(a0));
    var __Py_fstat = (Module["__Py_fstat"] = (a0, a1) =>
      (__Py_fstat = Module["__Py_fstat"] = wasmExports["_Py_fstat"])(a0, a1));
    var __Py_read = (Module["__Py_read"] = (a0, a1, a2) =>
      (__Py_read = Module["__Py_read"] = wasmExports["_Py_read"])(a0, a1, a2));
    var __Py_open_noraise = (Module["__Py_open_noraise"] = (a0, a1) =>
      (__Py_open_noraise = Module["__Py_open_noraise"] =
        wasmExports["_Py_open_noraise"])(a0, a1));
    var _read = (Module["_read"] = (a0, a1, a2) =>
      (_read = Module["_read"] = wasmExports["read"])(a0, a1, a2));
    var __PyOS_URandomNonblock = (Module["__PyOS_URandomNonblock"] = (a0, a1) =>
      (__PyOS_URandomNonblock = Module["__PyOS_URandomNonblock"] =
        wasmExports["_PyOS_URandomNonblock"])(a0, a1));
    var _PySys_AddAuditHook = (Module["_PySys_AddAuditHook"] = (a0, a1) =>
      (_PySys_AddAuditHook = Module["_PySys_AddAuditHook"] =
        wasmExports["PySys_AddAuditHook"])(a0, a1));
    var __PySys_GetSizeOf = (Module["__PySys_GetSizeOf"] = (a0) =>
      (__PySys_GetSizeOf = Module["__PySys_GetSizeOf"] =
        wasmExports["_PySys_GetSizeOf"])(a0));
    var _PySys_ResetWarnOptions = (Module["_PySys_ResetWarnOptions"] = () =>
      (_PySys_ResetWarnOptions = Module["_PySys_ResetWarnOptions"] =
        wasmExports["PySys_ResetWarnOptions"])());
    var _PySys_AddWarnOptionUnicode = (Module["_PySys_AddWarnOptionUnicode"] = (
      a0,
    ) =>
      (_PySys_AddWarnOptionUnicode = Module["_PySys_AddWarnOptionUnicode"] =
        wasmExports["PySys_AddWarnOptionUnicode"])(a0));
    var _PySys_AddWarnOption = (Module["_PySys_AddWarnOption"] = (a0) =>
      (_PySys_AddWarnOption = Module["_PySys_AddWarnOption"] =
        wasmExports["PySys_AddWarnOption"])(a0));
    var _PySys_HasWarnOptions = (Module["_PySys_HasWarnOptions"] = () =>
      (_PySys_HasWarnOptions = Module["_PySys_HasWarnOptions"] =
        wasmExports["PySys_HasWarnOptions"])());
    var _PySys_AddXOption = (Module["_PySys_AddXOption"] = (a0) =>
      (_PySys_AddXOption = Module["_PySys_AddXOption"] =
        wasmExports["PySys_AddXOption"])(a0));
    var _PySys_GetXOptions = (Module["_PySys_GetXOptions"] = () =>
      (_PySys_GetXOptions = Module["_PySys_GetXOptions"] =
        wasmExports["PySys_GetXOptions"])());
    var _PyThread_GetInfo = (Module["_PyThread_GetInfo"] = () =>
      (_PyThread_GetInfo = Module["_PyThread_GetInfo"] =
        wasmExports["PyThread_GetInfo"])());
    var _PySys_SetPath = (Module["_PySys_SetPath"] = (a0) =>
      (_PySys_SetPath = Module["_PySys_SetPath"] =
        wasmExports["PySys_SetPath"])(a0));
    var _PySys_SetArgvEx = (Module["_PySys_SetArgvEx"] = (a0, a1, a2) =>
      (_PySys_SetArgvEx = Module["_PySys_SetArgvEx"] =
        wasmExports["PySys_SetArgvEx"])(a0, a1, a2));
    var _PySys_SetArgv = (Module["_PySys_SetArgv"] = (a0, a1) =>
      (_PySys_SetArgv = Module["_PySys_SetArgv"] =
        wasmExports["PySys_SetArgv"])(a0, a1));
    var _PySys_WriteStdout = (Module["_PySys_WriteStdout"] = (a0, a1) =>
      (_PySys_WriteStdout = Module["_PySys_WriteStdout"] =
        wasmExports["PySys_WriteStdout"])(a0, a1));
    var _PySys_FormatStdout = (Module["_PySys_FormatStdout"] = (a0, a1) =>
      (_PySys_FormatStdout = Module["_PySys_FormatStdout"] =
        wasmExports["PySys_FormatStdout"])(a0, a1));
    var _pthread_condattr_init = (Module["_pthread_condattr_init"] = (a0) =>
      (_pthread_condattr_init = Module["_pthread_condattr_init"] =
        wasmExports["pthread_condattr_init"])(a0));
    var _pthread_condattr_setclock = (Module["_pthread_condattr_setclock"] = (
      a0,
      a1,
    ) =>
      (_pthread_condattr_setclock = Module["_pthread_condattr_setclock"] =
        wasmExports["pthread_condattr_setclock"])(a0, a1));
    var _pthread_cond_init = (Module["_pthread_cond_init"] = (a0, a1) =>
      (_pthread_cond_init = Module["_pthread_cond_init"] =
        wasmExports["pthread_cond_init"])(a0, a1));
    var _gettimeofday = (Module["_gettimeofday"] = (a0, a1) =>
      (_gettimeofday = Module["_gettimeofday"] = wasmExports["gettimeofday"])(
        a0,
        a1,
      ));
    var _PyThread_start_new_thread = (Module["_PyThread_start_new_thread"] = (
      a0,
      a1,
    ) =>
      (_PyThread_start_new_thread = Module["_PyThread_start_new_thread"] =
        wasmExports["PyThread_start_new_thread"])(a0, a1));
    var _pthread_attr_init = (Module["_pthread_attr_init"] = (a0) =>
      (_pthread_attr_init = Module["_pthread_attr_init"] =
        wasmExports["pthread_attr_init"])(a0));
    var _pthread_attr_setstacksize = (Module["_pthread_attr_setstacksize"] = (
      a0,
      a1,
    ) =>
      (_pthread_attr_setstacksize = Module["_pthread_attr_setstacksize"] =
        wasmExports["pthread_attr_setstacksize"])(a0, a1));
    var _pthread_attr_destroy = (Module["_pthread_attr_destroy"] = (a0) =>
      (_pthread_attr_destroy = Module["_pthread_attr_destroy"] =
        wasmExports["pthread_attr_destroy"])(a0));
    var _pthread_create = (Module["_pthread_create"] = (a0, a1, a2, a3) =>
      (_pthread_create = Module["_pthread_create"] =
        wasmExports["pthread_create"])(a0, a1, a2, a3));
    var _pthread_detach = (Module["_pthread_detach"] = (a0) =>
      (_pthread_detach = Module["_pthread_detach"] =
        wasmExports["pthread_detach"])(a0));
    var _pthread_self = (Module["_pthread_self"] = () =>
      (_pthread_self = Module["_pthread_self"] =
        wasmExports["pthread_self"])());
    var _pthread_exit = (Module["_pthread_exit"] = (a0) =>
      (_pthread_exit = Module["_pthread_exit"] = wasmExports["pthread_exit"])(
        a0,
      ));
    var _PyThread_acquire_lock_timed = (Module["_PyThread_acquire_lock_timed"] =
      (a0, a1, a2) =>
        (_PyThread_acquire_lock_timed = Module["_PyThread_acquire_lock_timed"] =
          wasmExports["PyThread_acquire_lock_timed"])(a0, a1, a2));
    var _pthread_mutex_trylock = (Module["_pthread_mutex_trylock"] = (a0) =>
      (_pthread_mutex_trylock = Module["_pthread_mutex_trylock"] =
        wasmExports["pthread_mutex_trylock"])(a0));
    var _PyThread_create_key = (Module["_PyThread_create_key"] = () =>
      (_PyThread_create_key = Module["_PyThread_create_key"] =
        wasmExports["PyThread_create_key"])());
    var _pthread_key_create = (Module["_pthread_key_create"] = (a0, a1) =>
      (_pthread_key_create = Module["_pthread_key_create"] =
        wasmExports["pthread_key_create"])(a0, a1));
    var _pthread_key_delete = (Module["_pthread_key_delete"] = (a0) =>
      (_pthread_key_delete = Module["_pthread_key_delete"] =
        wasmExports["pthread_key_delete"])(a0));
    var _PyThread_delete_key = (Module["_PyThread_delete_key"] = (a0) =>
      (_PyThread_delete_key = Module["_PyThread_delete_key"] =
        wasmExports["PyThread_delete_key"])(a0));
    var _PyThread_delete_key_value = (Module["_PyThread_delete_key_value"] = (
      a0,
    ) =>
      (_PyThread_delete_key_value = Module["_PyThread_delete_key_value"] =
        wasmExports["PyThread_delete_key_value"])(a0));
    var _pthread_setspecific = (Module["_pthread_setspecific"] = (a0, a1) =>
      (_pthread_setspecific = Module["_pthread_setspecific"] =
        wasmExports["pthread_setspecific"])(a0, a1));
    var _PyThread_set_key_value = (Module["_PyThread_set_key_value"] = (
      a0,
      a1,
    ) =>
      (_PyThread_set_key_value = Module["_PyThread_set_key_value"] =
        wasmExports["PyThread_set_key_value"])(a0, a1));
    var _PyThread_get_key_value = (Module["_PyThread_get_key_value"] = (a0) =>
      (_PyThread_get_key_value = Module["_PyThread_get_key_value"] =
        wasmExports["PyThread_get_key_value"])(a0));
    var _pthread_getspecific = (Module["_pthread_getspecific"] = (a0) =>
      (_pthread_getspecific = Module["_pthread_getspecific"] =
        wasmExports["pthread_getspecific"])(a0));
    var _PyThread_ReInitTLS = (Module["_PyThread_ReInitTLS"] = () =>
      (_PyThread_ReInitTLS = Module["_PyThread_ReInitTLS"] =
        wasmExports["PyThread_ReInitTLS"])());
    var _PyThread_get_stacksize = (Module["_PyThread_get_stacksize"] = () =>
      (_PyThread_get_stacksize = Module["_PyThread_get_stacksize"] =
        wasmExports["PyThread_get_stacksize"])());
    var _PyThread_set_stacksize = (Module["_PyThread_set_stacksize"] = (a0) =>
      (_PyThread_set_stacksize = Module["_PyThread_set_stacksize"] =
        wasmExports["PyThread_set_stacksize"])(a0));
    var _PyThread_tss_alloc = (Module["_PyThread_tss_alloc"] = () =>
      (_PyThread_tss_alloc = Module["_PyThread_tss_alloc"] =
        wasmExports["PyThread_tss_alloc"])());
    var _PyThread_tss_free = (Module["_PyThread_tss_free"] = (a0) =>
      (_PyThread_tss_free = Module["_PyThread_tss_free"] =
        wasmExports["PyThread_tss_free"])(a0));
    var _confstr = (Module["_confstr"] = (a0, a1, a2) =>
      (_confstr = Module["_confstr"] = wasmExports["confstr"])(a0, a1, a2));
    var __PyTraceback_Add = (Module["__PyTraceback_Add"] = (a0, a1, a2) =>
      (__PyTraceback_Add = Module["__PyTraceback_Add"] =
        wasmExports["_PyTraceback_Add"])(a0, a1, a2));
    var _PyOS_mystricmp = (Module["_PyOS_mystricmp"] = (a0, a1) =>
      (_PyOS_mystricmp = Module["_PyOS_mystricmp"] =
        wasmExports["PyOS_mystricmp"])(a0, a1));
    var __Py_strhex = (Module["__Py_strhex"] = (a0, a1) =>
      (__Py_strhex = Module["__Py_strhex"] = wasmExports["_Py_strhex"])(
        a0,
        a1,
      ));
    var __Py_strhex_bytes = (Module["__Py_strhex_bytes"] = (a0, a1) =>
      (__Py_strhex_bytes = Module["__Py_strhex_bytes"] =
        wasmExports["_Py_strhex_bytes"])(a0, a1));
    var __Py_strhex_bytes_with_sep = (Module["__Py_strhex_bytes_with_sep"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (__Py_strhex_bytes_with_sep = Module["__Py_strhex_bytes_with_sep"] =
        wasmExports["_Py_strhex_bytes_with_sep"])(a0, a1, a2, a3));
    var _localeconv = (Module["_localeconv"] = () =>
      (_localeconv = Module["_localeconv"] = wasmExports["localeconv"])());
    var __Py_GetLocaleconvNumeric = (Module["__Py_GetLocaleconvNumeric"] = (
      a0,
      a1,
      a2,
    ) =>
      (__Py_GetLocaleconvNumeric = Module["__Py_GetLocaleconvNumeric"] =
        wasmExports["_Py_GetLocaleconvNumeric"])(a0, a1, a2));
    var __Py_device_encoding = (Module["__Py_device_encoding"] = (a0) =>
      (__Py_device_encoding = Module["__Py_device_encoding"] =
        wasmExports["_Py_device_encoding"])(a0));
    var __Py_GetLocaleEncodingObject = (Module["__Py_GetLocaleEncodingObject"] =
      () =>
        (__Py_GetLocaleEncodingObject = Module["__Py_GetLocaleEncodingObject"] =
          wasmExports["_Py_GetLocaleEncodingObject"])());
    var _mbstowcs = (Module["_mbstowcs"] = (a0, a1, a2) =>
      (_mbstowcs = Module["_mbstowcs"] = wasmExports["mbstowcs"])(a0, a1, a2));
    var _mbrtowc = (Module["_mbrtowc"] = (a0, a1, a2, a3) =>
      (_mbrtowc = Module["_mbrtowc"] = wasmExports["mbrtowc"])(a0, a1, a2, a3));
    var _Py_EncodeLocale = (Module["_Py_EncodeLocale"] = (a0, a1) =>
      (_Py_EncodeLocale = Module["_Py_EncodeLocale"] =
        wasmExports["Py_EncodeLocale"])(a0, a1));
    var __Py_EncodeLocaleRaw = (Module["__Py_EncodeLocaleRaw"] = (a0, a1) =>
      (__Py_EncodeLocaleRaw = Module["__Py_EncodeLocaleRaw"] =
        wasmExports["_Py_EncodeLocaleRaw"])(a0, a1));
    var _fstat = (Module["_fstat"] = (a0, a1) =>
      (_fstat = Module["_fstat"] = wasmExports["fstat"])(a0, a1));
    var _stat = (Module["_stat"] = (a0, a1) =>
      (_stat = Module["_stat"] = wasmExports["stat"])(a0, a1));
    var __Py_stat = (Module["__Py_stat"] = (a0, a1) =>
      (__Py_stat = Module["__Py_stat"] = wasmExports["_Py_stat"])(a0, a1));
    var __Py_get_inheritable = (Module["__Py_get_inheritable"] = (a0) =>
      (__Py_get_inheritable = Module["__Py_get_inheritable"] =
        wasmExports["_Py_get_inheritable"])(a0));
    var __Py_set_inheritable = (Module["__Py_set_inheritable"] = (a0, a1, a2) =>
      (__Py_set_inheritable = Module["__Py_set_inheritable"] =
        wasmExports["_Py_set_inheritable"])(a0, a1, a2));
    var __Py_set_inheritable_async_safe = (Module[
      "__Py_set_inheritable_async_safe"
    ] = (a0, a1, a2) =>
      (__Py_set_inheritable_async_safe = Module[
        "__Py_set_inheritable_async_safe"
      ] =
        wasmExports["_Py_set_inheritable_async_safe"])(a0, a1, a2));
    var _open = (Module["_open"] = (a0, a1, a2) =>
      (_open = Module["_open"] = wasmExports["open"])(a0, a1, a2));
    var __Py_wfopen = (Module["__Py_wfopen"] = (a0, a1) =>
      (__Py_wfopen = Module["__Py_wfopen"] = wasmExports["_Py_wfopen"])(
        a0,
        a1,
      ));
    var _wcstombs = (Module["_wcstombs"] = (a0, a1, a2) =>
      (_wcstombs = Module["_wcstombs"] = wasmExports["wcstombs"])(a0, a1, a2));
    var _fopen = (Module["_fopen"] = (a0, a1) =>
      (_fopen = Module["_fopen"] = wasmExports["fopen"])(a0, a1));
    var _write = (Module["_write"] = (a0, a1, a2) =>
      (_write = Module["_write"] = wasmExports["write"])(a0, a1, a2));
    var _readlink = (Module["_readlink"] = (a0, a1, a2) =>
      (_readlink = Module["_readlink"] = wasmExports["readlink"])(a0, a1, a2));
    var _realpath = (Module["_realpath"] = (a0, a1) =>
      (_realpath = Module["_realpath"] = wasmExports["realpath"])(a0, a1));
    var _getcwd = (Module["_getcwd"] = (a0, a1) =>
      (_getcwd = Module["_getcwd"] = wasmExports["getcwd"])(a0, a1));
    var __Py_normpath = (Module["__Py_normpath"] = (a0, a1) =>
      (__Py_normpath = Module["__Py_normpath"] = wasmExports["_Py_normpath"])(
        a0,
        a1,
      ));
    var __Py_get_blocking = (Module["__Py_get_blocking"] = (a0) =>
      (__Py_get_blocking = Module["__Py_get_blocking"] =
        wasmExports["_Py_get_blocking"])(a0));
    var __Py_set_blocking = (Module["__Py_set_blocking"] = (a0, a1) =>
      (__Py_set_blocking = Module["__Py_set_blocking"] =
        wasmExports["_Py_set_blocking"])(a0, a1));
    var __Py_closerange = (Module["__Py_closerange"] = (a0, a1) =>
      (__Py_closerange = Module["__Py_closerange"] =
        wasmExports["_Py_closerange"])(a0, a1));
    var __Py_UTF8_Edit_Cost = (Module["__Py_UTF8_Edit_Cost"] = (a0, a1, a2) =>
      (__Py_UTF8_Edit_Cost = Module["__Py_UTF8_Edit_Cost"] =
        wasmExports["_Py_UTF8_Edit_Cost"])(a0, a1, a2));
    var _dlopen = (Module["_dlopen"] = (a0, a1) =>
      (_dlopen = Module["_dlopen"] = wasmExports["dlopen"])(a0, a1));
    var _dlerror = (Module["_dlerror"] = () =>
      (_dlerror = Module["_dlerror"] = wasmExports["dlerror"])());
    var _dlsym = (Module["_dlsym"] = (a0, a1) =>
      (_dlsym = Module["_dlsym"] = wasmExports["dlsym"])(a0, a1));
    var _PyErr_SetInterruptEx = (Module["_PyErr_SetInterruptEx"] = (a0) =>
      (_PyErr_SetInterruptEx = Module["_PyErr_SetInterruptEx"] =
        wasmExports["PyErr_SetInterruptEx"])(a0));
    var _PyInit__ctypes = (Module["_PyInit__ctypes"] = () =>
      (_PyInit__ctypes = Module["_PyInit__ctypes"] =
        wasmExports["PyInit__ctypes"])());
    var _PyInit__posixsubprocess = (Module["_PyInit__posixsubprocess"] = () =>
      (_PyInit__posixsubprocess = Module["_PyInit__posixsubprocess"] =
        wasmExports["PyInit__posixsubprocess"])());
    var _PyInit__bz2 = (Module["_PyInit__bz2"] = () =>
      (_PyInit__bz2 = Module["_PyInit__bz2"] = wasmExports["PyInit__bz2"])());
    var _PyInit_zlib = (Module["_PyInit_zlib"] = () =>
      (_PyInit_zlib = Module["_PyInit_zlib"] = wasmExports["PyInit_zlib"])());
    var _PyInit__xxsubinterpreters = (Module["_PyInit__xxsubinterpreters"] =
      () =>
        (_PyInit__xxsubinterpreters = Module["_PyInit__xxsubinterpreters"] =
          wasmExports["PyInit__xxsubinterpreters"])());
    var _PyInit_array = (Module["_PyInit_array"] = () =>
      (_PyInit_array = Module["_PyInit_array"] =
        wasmExports["PyInit_array"])());
    var _PyInit__asyncio = (Module["_PyInit__asyncio"] = () =>
      (_PyInit__asyncio = Module["_PyInit__asyncio"] =
        wasmExports["PyInit__asyncio"])());
    var _PyInit__bisect = (Module["_PyInit__bisect"] = () =>
      (_PyInit__bisect = Module["_PyInit__bisect"] =
        wasmExports["PyInit__bisect"])());
    var _PyInit__contextvars = (Module["_PyInit__contextvars"] = () =>
      (_PyInit__contextvars = Module["_PyInit__contextvars"] =
        wasmExports["PyInit__contextvars"])());
    var _PyInit__csv = (Module["_PyInit__csv"] = () =>
      (_PyInit__csv = Module["_PyInit__csv"] = wasmExports["PyInit__csv"])());
    var _PyInit__heapq = (Module["_PyInit__heapq"] = () =>
      (_PyInit__heapq = Module["_PyInit__heapq"] =
        wasmExports["PyInit__heapq"])());
    var _PyInit__json = (Module["_PyInit__json"] = () =>
      (_PyInit__json = Module["_PyInit__json"] =
        wasmExports["PyInit__json"])());
    var _PyInit__lsprof = (Module["_PyInit__lsprof"] = () =>
      (_PyInit__lsprof = Module["_PyInit__lsprof"] =
        wasmExports["PyInit__lsprof"])());
    var _PyInit__opcode = (Module["_PyInit__opcode"] = () =>
      (_PyInit__opcode = Module["_PyInit__opcode"] =
        wasmExports["PyInit__opcode"])());
    var _PyInit__pickle = (Module["_PyInit__pickle"] = () =>
      (_PyInit__pickle = Module["_PyInit__pickle"] =
        wasmExports["PyInit__pickle"])());
    var _PyInit__queue = (Module["_PyInit__queue"] = () =>
      (_PyInit__queue = Module["_PyInit__queue"] =
        wasmExports["PyInit__queue"])());
    var _PyInit__random = (Module["_PyInit__random"] = () =>
      (_PyInit__random = Module["_PyInit__random"] =
        wasmExports["PyInit__random"])());
    var _PyInit__struct = (Module["_PyInit__struct"] = () =>
      (_PyInit__struct = Module["_PyInit__struct"] =
        wasmExports["PyInit__struct"])());
    var _PyInit__typing = (Module["_PyInit__typing"] = () =>
      (_PyInit__typing = Module["_PyInit__typing"] =
        wasmExports["PyInit__typing"])());
    var _PyInit__zoneinfo = (Module["_PyInit__zoneinfo"] = () =>
      (_PyInit__zoneinfo = Module["_PyInit__zoneinfo"] =
        wasmExports["PyInit__zoneinfo"])());
    var _PyInit_audioop = (Module["_PyInit_audioop"] = () =>
      (_PyInit_audioop = Module["_PyInit_audioop"] =
        wasmExports["PyInit_audioop"])());
    var _PyInit_math = (Module["_PyInit_math"] = () =>
      (_PyInit_math = Module["_PyInit_math"] = wasmExports["PyInit_math"])());
    var _PyInit_cmath = (Module["_PyInit_cmath"] = () =>
      (_PyInit_cmath = Module["_PyInit_cmath"] =
        wasmExports["PyInit_cmath"])());
    var _PyInit__statistics = (Module["_PyInit__statistics"] = () =>
      (_PyInit__statistics = Module["_PyInit__statistics"] =
        wasmExports["PyInit__statistics"])());
    var _PyInit__datetime = (Module["_PyInit__datetime"] = () =>
      (_PyInit__datetime = Module["_PyInit__datetime"] =
        wasmExports["PyInit__datetime"])());
    var _PyInit__decimal = (Module["_PyInit__decimal"] = () =>
      (_PyInit__decimal = Module["_PyInit__decimal"] =
        wasmExports["PyInit__decimal"])());
    var _PyInit_binascii = (Module["_PyInit_binascii"] = () =>
      (_PyInit_binascii = Module["_PyInit_binascii"] =
        wasmExports["PyInit_binascii"])());
    var _PyInit__md5 = (Module["_PyInit__md5"] = () =>
      (_PyInit__md5 = Module["_PyInit__md5"] = wasmExports["PyInit__md5"])());
    var _PyInit__sha1 = (Module["_PyInit__sha1"] = () =>
      (_PyInit__sha1 = Module["_PyInit__sha1"] =
        wasmExports["PyInit__sha1"])());
    var _PyInit__sha256 = (Module["_PyInit__sha256"] = () =>
      (_PyInit__sha256 = Module["_PyInit__sha256"] =
        wasmExports["PyInit__sha256"])());
    var _PyInit__sha512 = (Module["_PyInit__sha512"] = () =>
      (_PyInit__sha512 = Module["_PyInit__sha512"] =
        wasmExports["PyInit__sha512"])());
    var _PyInit__sha3 = (Module["_PyInit__sha3"] = () =>
      (_PyInit__sha3 = Module["_PyInit__sha3"] =
        wasmExports["PyInit__sha3"])());
    var _PyInit__blake2 = (Module["_PyInit__blake2"] = () =>
      (_PyInit__blake2 = Module["_PyInit__blake2"] =
        wasmExports["PyInit__blake2"])());
    var _PyInit_pyexpat = (Module["_PyInit_pyexpat"] = () =>
      (_PyInit_pyexpat = Module["_PyInit_pyexpat"] =
        wasmExports["PyInit_pyexpat"])());
    var _PyInit__elementtree = (Module["_PyInit__elementtree"] = () =>
      (_PyInit__elementtree = Module["_PyInit__elementtree"] =
        wasmExports["PyInit__elementtree"])());
    var _PyInit__codecs_cn = (Module["_PyInit__codecs_cn"] = () =>
      (_PyInit__codecs_cn = Module["_PyInit__codecs_cn"] =
        wasmExports["PyInit__codecs_cn"])());
    var _PyInit__codecs_hk = (Module["_PyInit__codecs_hk"] = () =>
      (_PyInit__codecs_hk = Module["_PyInit__codecs_hk"] =
        wasmExports["PyInit__codecs_hk"])());
    var _PyInit__codecs_iso2022 = (Module["_PyInit__codecs_iso2022"] = () =>
      (_PyInit__codecs_iso2022 = Module["_PyInit__codecs_iso2022"] =
        wasmExports["PyInit__codecs_iso2022"])());
    var _PyInit__codecs_jp = (Module["_PyInit__codecs_jp"] = () =>
      (_PyInit__codecs_jp = Module["_PyInit__codecs_jp"] =
        wasmExports["PyInit__codecs_jp"])());
    var _PyInit__codecs_kr = (Module["_PyInit__codecs_kr"] = () =>
      (_PyInit__codecs_kr = Module["_PyInit__codecs_kr"] =
        wasmExports["PyInit__codecs_kr"])());
    var _PyInit__codecs_tw = (Module["_PyInit__codecs_tw"] = () =>
      (_PyInit__codecs_tw = Module["_PyInit__codecs_tw"] =
        wasmExports["PyInit__codecs_tw"])());
    var _PyInit__multibytecodec = (Module["_PyInit__multibytecodec"] = () =>
      (_PyInit__multibytecodec = Module["_PyInit__multibytecodec"] =
        wasmExports["PyInit__multibytecodec"])());
    var _PyInit_unicodedata = (Module["_PyInit_unicodedata"] = () =>
      (_PyInit_unicodedata = Module["_PyInit_unicodedata"] =
        wasmExports["PyInit_unicodedata"])());
    var _PyInit__crypt = (Module["_PyInit__crypt"] = () =>
      (_PyInit__crypt = Module["_PyInit__crypt"] =
        wasmExports["PyInit__crypt"])());
    var _PyInit_mmap = (Module["_PyInit_mmap"] = () =>
      (_PyInit_mmap = Module["_PyInit_mmap"] = wasmExports["PyInit_mmap"])());
    var _PyInit_select = (Module["_PyInit_select"] = () =>
      (_PyInit_select = Module["_PyInit_select"] =
        wasmExports["PyInit_select"])());
    var _PyInit__socket = (Module["_PyInit__socket"] = () =>
      (_PyInit__socket = Module["_PyInit__socket"] =
        wasmExports["PyInit__socket"])());
    var _PyInit_atexit = (Module["_PyInit_atexit"] = () =>
      (_PyInit_atexit = Module["_PyInit_atexit"] =
        wasmExports["PyInit_atexit"])());
    var _PyInit_faulthandler = (Module["_PyInit_faulthandler"] = () =>
      (_PyInit_faulthandler = Module["_PyInit_faulthandler"] =
        wasmExports["PyInit_faulthandler"])());
    var _PyInit_posix = (Module["_PyInit_posix"] = () =>
      (_PyInit_posix = Module["_PyInit_posix"] =
        wasmExports["PyInit_posix"])());
    var _PyInit__signal = (Module["_PyInit__signal"] = () =>
      (_PyInit__signal = Module["_PyInit__signal"] =
        wasmExports["PyInit__signal"])());
    var _PyInit__tracemalloc = (Module["_PyInit__tracemalloc"] = () =>
      (_PyInit__tracemalloc = Module["_PyInit__tracemalloc"] =
        wasmExports["PyInit__tracemalloc"])());
    var _PyInit__codecs = (Module["_PyInit__codecs"] = () =>
      (_PyInit__codecs = Module["_PyInit__codecs"] =
        wasmExports["PyInit__codecs"])());
    var _PyInit__collections = (Module["_PyInit__collections"] = () =>
      (_PyInit__collections = Module["_PyInit__collections"] =
        wasmExports["PyInit__collections"])());
    var _PyInit_errno = (Module["_PyInit_errno"] = () =>
      (_PyInit_errno = Module["_PyInit_errno"] =
        wasmExports["PyInit_errno"])());
    var _PyInit__io = (Module["_PyInit__io"] = () =>
      (_PyInit__io = Module["_PyInit__io"] = wasmExports["PyInit__io"])());
    var _PyInit_itertools = (Module["_PyInit_itertools"] = () =>
      (_PyInit_itertools = Module["_PyInit_itertools"] =
        wasmExports["PyInit_itertools"])());
    var _PyInit__sre = (Module["_PyInit__sre"] = () =>
      (_PyInit__sre = Module["_PyInit__sre"] = wasmExports["PyInit__sre"])());
    var _PyInit__thread = (Module["_PyInit__thread"] = () =>
      (_PyInit__thread = Module["_PyInit__thread"] =
        wasmExports["PyInit__thread"])());
    var _PyInit_time = (Module["_PyInit_time"] = () =>
      (_PyInit_time = Module["_PyInit_time"] = wasmExports["PyInit_time"])());
    var _PyInit__weakref = (Module["_PyInit__weakref"] = () =>
      (_PyInit__weakref = Module["_PyInit__weakref"] =
        wasmExports["PyInit__weakref"])());
    var _PyInit__abc = (Module["_PyInit__abc"] = () =>
      (_PyInit__abc = Module["_PyInit__abc"] = wasmExports["PyInit__abc"])());
    var _PyInit__functools = (Module["_PyInit__functools"] = () =>
      (_PyInit__functools = Module["_PyInit__functools"] =
        wasmExports["PyInit__functools"])());
    var _PyInit__locale = (Module["_PyInit__locale"] = () =>
      (_PyInit__locale = Module["_PyInit__locale"] =
        wasmExports["PyInit__locale"])());
    var _PyInit__operator = (Module["_PyInit__operator"] = () =>
      (_PyInit__operator = Module["_PyInit__operator"] =
        wasmExports["PyInit__operator"])());
    var _PyInit__stat = (Module["_PyInit__stat"] = () =>
      (_PyInit__stat = Module["_PyInit__stat"] =
        wasmExports["PyInit__stat"])());
    var _PyInit__symtable = (Module["_PyInit__symtable"] = () =>
      (_PyInit__symtable = Module["_PyInit__symtable"] =
        wasmExports["PyInit__symtable"])());
    var _PyInit_xxsubtype = (Module["_PyInit_xxsubtype"] = () =>
      (_PyInit_xxsubtype = Module["_PyInit_xxsubtype"] =
        wasmExports["PyInit_xxsubtype"])());
    var _PyInit_gc = (Module["_PyInit_gc"] = () =>
      (_PyInit_gc = Module["_PyInit_gc"] = wasmExports["PyInit_gc"])());
    var _Py_RunMain = (Module["_Py_RunMain"] = () =>
      (_Py_RunMain = Module["_Py_RunMain"] = wasmExports["Py_RunMain"])());
    var _perror = (Module["_perror"] = (a0) =>
      (_perror = Module["_perror"] = wasmExports["perror"])(a0));
    var _getpid = (Module["_getpid"] = () =>
      (_getpid = Module["_getpid"] = wasmExports["getpid"])());
    var _kill = (Module["_kill"] = (a0, a1) =>
      (_kill = Module["_kill"] = wasmExports["kill"])(a0, a1));
    var _Py_Main = (Module["_Py_Main"] = (a0, a1) =>
      (_Py_Main = Module["_Py_Main"] = wasmExports["Py_Main"])(a0, a1));
    var _Py_BytesMain = (Module["_Py_BytesMain"] = (a0, a1) =>
      (_Py_BytesMain = Module["_Py_BytesMain"] = wasmExports["Py_BytesMain"])(
        a0,
        a1,
      ));
    var _PyGC_Enable = (Module["_PyGC_Enable"] = () =>
      (_PyGC_Enable = Module["_PyGC_Enable"] = wasmExports["PyGC_Enable"])());
    var _PyGC_Disable = (Module["_PyGC_Disable"] = () =>
      (_PyGC_Disable = Module["_PyGC_Disable"] =
        wasmExports["PyGC_Disable"])());
    var _PyGC_IsEnabled = (Module["_PyGC_IsEnabled"] = () =>
      (_PyGC_IsEnabled = Module["_PyGC_IsEnabled"] =
        wasmExports["PyGC_IsEnabled"])());
    var _PyObject_GC_IsTracked = (Module["_PyObject_GC_IsTracked"] = (a0) =>
      (_PyObject_GC_IsTracked = Module["_PyObject_GC_IsTracked"] =
        wasmExports["PyObject_GC_IsTracked"])(a0));
    var _PyObject_GC_IsFinalized = (Module["_PyObject_GC_IsFinalized"] = (a0) =>
      (_PyObject_GC_IsFinalized = Module["_PyObject_GC_IsFinalized"] =
        wasmExports["PyObject_GC_IsFinalized"])(a0));
    var _strcat = (Module["_strcat"] = (a0, a1) =>
      (_strcat = Module["_strcat"] = wasmExports["strcat"])(a0, a1));
    var _ffi_closure_free = (Module["_ffi_closure_free"] = (a0) =>
      (_ffi_closure_free = Module["_ffi_closure_free"] =
        wasmExports["ffi_closure_free"])(a0));
    var _ffi_closure_alloc = (Module["_ffi_closure_alloc"] = (a0, a1) =>
      (_ffi_closure_alloc = Module["_ffi_closure_alloc"] =
        wasmExports["ffi_closure_alloc"])(a0, a1));
    var _ffi_prep_cif = (Module["_ffi_prep_cif"] = (a0, a1, a2, a3, a4) =>
      (_ffi_prep_cif = Module["_ffi_prep_cif"] = wasmExports["ffi_prep_cif"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _ffi_prep_closure_loc = (Module["_ffi_prep_closure_loc"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_ffi_prep_closure_loc = Module["_ffi_prep_closure_loc"] =
        wasmExports["ffi_prep_closure_loc"])(a0, a1, a2, a3, a4));
    var _ffi_prep_cif_var = (Module["_ffi_prep_cif_var"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_ffi_prep_cif_var = Module["_ffi_prep_cif_var"] =
        wasmExports["ffi_prep_cif_var"])(a0, a1, a2, a3, a4, a5));
    var _ffi_call = (Module["_ffi_call"] = (a0, a1, a2, a3) =>
      (_ffi_call = Module["_ffi_call"] = wasmExports["ffi_call"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _dlclose = (Module["_dlclose"] = (a0) =>
      (_dlclose = Module["_dlclose"] = wasmExports["dlclose"])(a0));
    var ___extenddftf2 = (Module["___extenddftf2"] = (a0, a1) =>
      (___extenddftf2 = Module["___extenddftf2"] =
        wasmExports["__extenddftf2"])(a0, a1));
    var ___trunctfdf2 = (Module["___trunctfdf2"] = (a0, a1) =>
      (___trunctfdf2 = Module["___trunctfdf2"] = wasmExports["__trunctfdf2"])(
        a0,
        a1,
      ));
    var __Py_Gid_Converter = (Module["__Py_Gid_Converter"] = (a0, a1) =>
      (__Py_Gid_Converter = Module["__Py_Gid_Converter"] =
        wasmExports["_Py_Gid_Converter"])(a0, a1));
    var __Py_Uid_Converter = (Module["__Py_Uid_Converter"] = (a0, a1) =>
      (__Py_Uid_Converter = Module["__Py_Uid_Converter"] =
        wasmExports["_Py_Uid_Converter"])(a0, a1));
    var _PyOS_BeforeFork = (Module["_PyOS_BeforeFork"] = () =>
      (_PyOS_BeforeFork = Module["_PyOS_BeforeFork"] =
        wasmExports["PyOS_BeforeFork"])());
    var _PyOS_AfterFork_Parent = (Module["_PyOS_AfterFork_Parent"] = () =>
      (_PyOS_AfterFork_Parent = Module["_PyOS_AfterFork_Parent"] =
        wasmExports["PyOS_AfterFork_Parent"])());
    var _fork = (Module["_fork"] = () =>
      (_fork = Module["_fork"] = wasmExports["fork"])());
    var _PyOS_AfterFork_Child = (Module["_PyOS_AfterFork_Child"] = () =>
      (_PyOS_AfterFork_Child = Module["_PyOS_AfterFork_Child"] =
        wasmExports["PyOS_AfterFork_Child"])());
    var __exit = (Module["__exit"] = (a0) =>
      (__exit = Module["__exit"] = wasmExports["_exit"])(a0));
    var _dup = (Module["_dup"] = (a0) =>
      (_dup = Module["_dup"] = wasmExports["dup"])(a0));
    var _dup2 = (Module["_dup2"] = (a0, a1) =>
      (_dup2 = Module["_dup2"] = wasmExports["dup2"])(a0, a1));
    var _chdir = (Module["_chdir"] = (a0) =>
      (_chdir = Module["_chdir"] = wasmExports["chdir"])(a0));
    var _umask = (Module["_umask"] = (a0) =>
      (_umask = Module["_umask"] = wasmExports["umask"])(a0));
    var __Py_RestoreSignals = (Module["__Py_RestoreSignals"] = () =>
      (__Py_RestoreSignals = Module["__Py_RestoreSignals"] =
        wasmExports["_Py_RestoreSignals"])());
    var _setsid = (Module["_setsid"] = () =>
      (_setsid = Module["_setsid"] = wasmExports["setsid"])());
    var _setpgid = (Module["_setpgid"] = (a0, a1) =>
      (_setpgid = Module["_setpgid"] = wasmExports["setpgid"])(a0, a1));
    var _setregid = (Module["_setregid"] = (a0, a1) =>
      (_setregid = Module["_setregid"] = wasmExports["setregid"])(a0, a1));
    var _setreuid = (Module["_setreuid"] = (a0, a1) =>
      (_setreuid = Module["_setreuid"] = wasmExports["setreuid"])(a0, a1));
    var _execve = (Module["_execve"] = (a0, a1, a2) =>
      (_execve = Module["_execve"] = wasmExports["execve"])(a0, a1, a2));
    var _execv = (Module["_execv"] = (a0, a1) =>
      (_execv = Module["_execv"] = wasmExports["execv"])(a0, a1));
    var _opendir = (Module["_opendir"] = (a0) =>
      (_opendir = Module["_opendir"] = wasmExports["opendir"])(a0));
    var _sysconf = (Module["_sysconf"] = (a0) =>
      (_sysconf = Module["_sysconf"] = wasmExports["sysconf"])(a0));
    var _dirfd = (Module["_dirfd"] = (a0) =>
      (_dirfd = Module["_dirfd"] = wasmExports["dirfd"])(a0));
    var _readdir = (Module["_readdir"] = (a0) =>
      (_readdir = Module["_readdir"] = wasmExports["readdir"])(a0));
    var _closedir = (Module["_closedir"] = (a0) =>
      (_closedir = Module["_closedir"] = wasmExports["closedir"])(a0));
    var _BZ2_bzCompressEnd = (Module["_BZ2_bzCompressEnd"] = (a0) =>
      (_BZ2_bzCompressEnd = Module["_BZ2_bzCompressEnd"] =
        wasmExports["BZ2_bzCompressEnd"])(a0));
    var _BZ2_bzCompressInit = (Module["_BZ2_bzCompressInit"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_BZ2_bzCompressInit = Module["_BZ2_bzCompressInit"] =
        wasmExports["BZ2_bzCompressInit"])(a0, a1, a2, a3));
    var _BZ2_bzCompress = (Module["_BZ2_bzCompress"] = (a0, a1) =>
      (_BZ2_bzCompress = Module["_BZ2_bzCompress"] =
        wasmExports["BZ2_bzCompress"])(a0, a1));
    var _BZ2_bzDecompressEnd = (Module["_BZ2_bzDecompressEnd"] = (a0) =>
      (_BZ2_bzDecompressEnd = Module["_BZ2_bzDecompressEnd"] =
        wasmExports["BZ2_bzDecompressEnd"])(a0));
    var _BZ2_bzDecompressInit = (Module["_BZ2_bzDecompressInit"] = (
      a0,
      a1,
      a2,
    ) =>
      (_BZ2_bzDecompressInit = Module["_BZ2_bzDecompressInit"] =
        wasmExports["BZ2_bzDecompressInit"])(a0, a1, a2));
    var _BZ2_bzDecompress = (Module["_BZ2_bzDecompress"] = (a0) =>
      (_BZ2_bzDecompress = Module["_BZ2_bzDecompress"] =
        wasmExports["BZ2_bzDecompress"])(a0));
    var _adler32 = (Module["_adler32"] = (a0, a1, a2) =>
      (_adler32 = Module["_adler32"] = wasmExports["adler32"])(a0, a1, a2));
    var _deflateInit2_ = (Module["_deflateInit2_"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
    ) =>
      (_deflateInit2_ = Module["_deflateInit2_"] =
        wasmExports["deflateInit2_"])(a0, a1, a2, a3, a4, a5, a6, a7));
    var _deflateEnd = (Module["_deflateEnd"] = (a0) =>
      (_deflateEnd = Module["_deflateEnd"] = wasmExports["deflateEnd"])(a0));
    var _deflate = (Module["_deflate"] = (a0, a1) =>
      (_deflate = Module["_deflate"] = wasmExports["deflate"])(a0, a1));
    var _deflateSetDictionary = (Module["_deflateSetDictionary"] = (
      a0,
      a1,
      a2,
    ) =>
      (_deflateSetDictionary = Module["_deflateSetDictionary"] =
        wasmExports["deflateSetDictionary"])(a0, a1, a2));
    var _crc32 = (Module["_crc32"] = (a0, a1, a2) =>
      (_crc32 = Module["_crc32"] = wasmExports["crc32"])(a0, a1, a2));
    var _inflateInit2_ = (Module["_inflateInit2_"] = (a0, a1, a2, a3) =>
      (_inflateInit2_ = Module["_inflateInit2_"] =
        wasmExports["inflateInit2_"])(a0, a1, a2, a3));
    var _inflateEnd = (Module["_inflateEnd"] = (a0) =>
      (_inflateEnd = Module["_inflateEnd"] = wasmExports["inflateEnd"])(a0));
    var _inflate = (Module["_inflate"] = (a0, a1) =>
      (_inflate = Module["_inflate"] = wasmExports["inflate"])(a0, a1));
    var _inflateSetDictionary = (Module["_inflateSetDictionary"] = (
      a0,
      a1,
      a2,
    ) =>
      (_inflateSetDictionary = Module["_inflateSetDictionary"] =
        wasmExports["inflateSetDictionary"])(a0, a1, a2));
    var _zlibVersion = (Module["_zlibVersion"] = () =>
      (_zlibVersion = Module["_zlibVersion"] = wasmExports["zlibVersion"])());
    var _deflateCopy = (Module["_deflateCopy"] = (a0, a1) =>
      (_deflateCopy = Module["_deflateCopy"] = wasmExports["deflateCopy"])(
        a0,
        a1,
      ));
    var _inflateCopy = (Module["_inflateCopy"] = (a0, a1) =>
      (_inflateCopy = Module["_inflateCopy"] = wasmExports["inflateCopy"])(
        a0,
        a1,
      ));
    var _isalpha = (Module["_isalpha"] = (a0) =>
      (_isalpha = Module["_isalpha"] = wasmExports["isalpha"])(a0));
    var _acos = (Module["_acos"] = (a0) =>
      (_acos = Module["_acos"] = wasmExports["acos"])(a0));
    var _acosh = (Module["_acosh"] = (a0) =>
      (_acosh = Module["_acosh"] = wasmExports["acosh"])(a0));
    var _asin = (Module["_asin"] = (a0) =>
      (_asin = Module["_asin"] = wasmExports["asin"])(a0));
    var _asinh = (Module["_asinh"] = (a0) =>
      (_asinh = Module["_asinh"] = wasmExports["asinh"])(a0));
    var _atan = (Module["_atan"] = (a0) =>
      (_atan = Module["_atan"] = wasmExports["atan"])(a0));
    var _atanh = (Module["_atanh"] = (a0) =>
      (_atanh = Module["_atanh"] = wasmExports["atanh"])(a0));
    var _cbrt = (Module["_cbrt"] = (a0) =>
      (_cbrt = Module["_cbrt"] = wasmExports["cbrt"])(a0));
    var _copysign = (Module["_copysign"] = (a0, a1) =>
      (_copysign = Module["_copysign"] = wasmExports["copysign"])(a0, a1));
    var _cosh = (Module["_cosh"] = (a0) =>
      (_cosh = Module["_cosh"] = wasmExports["cosh"])(a0));
    var _erf = (Module["_erf"] = (a0) =>
      (_erf = Module["_erf"] = wasmExports["erf"])(a0));
    var _erfc = (Module["_erfc"] = (a0) =>
      (_erfc = Module["_erfc"] = wasmExports["erfc"])(a0));
    var _exp2 = (Module["_exp2"] = (a0) =>
      (_exp2 = Module["_exp2"] = wasmExports["exp2"])(a0));
    var _expm1 = (Module["_expm1"] = (a0) =>
      (_expm1 = Module["_expm1"] = wasmExports["expm1"])(a0));
    var _fabs = (Module["_fabs"] = (a0) =>
      (_fabs = Module["_fabs"] = wasmExports["fabs"])(a0));
    var _sinh = (Module["_sinh"] = (a0) =>
      (_sinh = Module["_sinh"] = wasmExports["sinh"])(a0));
    var _sqrt = (Module["_sqrt"] = (a0) =>
      (_sqrt = Module["_sqrt"] = wasmExports["sqrt"])(a0));
    var _tan = (Module["_tan"] = (a0) =>
      (_tan = Module["_tan"] = wasmExports["tan"])(a0));
    var _tanh = (Module["_tanh"] = (a0) =>
      (_tanh = Module["_tanh"] = wasmExports["tanh"])(a0));
    var _nextafter = (Module["_nextafter"] = (a0, a1) =>
      (_nextafter = Module["_nextafter"] = wasmExports["nextafter"])(a0, a1));
    var _log1p = (Module["_log1p"] = (a0) =>
      (_log1p = Module["_log1p"] = wasmExports["log1p"])(a0));
    var _log10 = (Module["_log10"] = (a0) =>
      (_log10 = Module["_log10"] = wasmExports["log10"])(a0));
    var _log2 = (Module["_log2"] = (a0) =>
      (_log2 = Module["_log2"] = wasmExports["log2"])(a0));
    var _explicit_bzero = (Module["_explicit_bzero"] = (a0, a1) =>
      (_explicit_bzero = Module["_explicit_bzero"] =
        wasmExports["explicit_bzero"])(a0, a1));
    var _strncat = (Module["_strncat"] = (a0, a1, a2) =>
      (_strncat = Module["_strncat"] = wasmExports["strncat"])(a0, a1, a2));
    var _crypt_r = (Module["_crypt_r"] = (a0, a1, a2) =>
      (_crypt_r = Module["_crypt_r"] = wasmExports["crypt_r"])(a0, a1, a2));
    var _mmap = (Module["_mmap"] = (a0, a1, a2, a3, a4, a5) =>
      (_mmap = Module["_mmap"] = wasmExports["mmap"])(a0, a1, a2, a3, a4, a5));
    var _munmap = (Module["_munmap"] = (a0, a1) =>
      (_munmap = Module["_munmap"] = wasmExports["munmap"])(a0, a1));
    var _msync = (Module["_msync"] = (a0, a1, a2) =>
      (_msync = Module["_msync"] = wasmExports["msync"])(a0, a1, a2));
    var _madvise = (Module["_madvise"] = (a0, a1, a2) =>
      (_madvise = Module["_madvise"] = wasmExports["madvise"])(a0, a1, a2));
    var _ftruncate = (Module["_ftruncate"] = (a0, a1) =>
      (_ftruncate = Module["_ftruncate"] = wasmExports["ftruncate"])(a0, a1));
    var _mremap = (Module["_mremap"] = (a0, a1, a2, a3, a4) =>
      (_mremap = Module["_mremap"] = wasmExports["mremap"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _poll = (Module["_poll"] = (a0, a1, a2) =>
      (_poll = Module["_poll"] = wasmExports["poll"])(a0, a1, a2));
    var _select = (Module["_select"] = (a0, a1, a2, a3, a4) =>
      (_select = Module["_select"] = wasmExports["select"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _getsockname = (Module["_getsockname"] = (a0, a1, a2) =>
      (_getsockname = Module["_getsockname"] = wasmExports["getsockname"])(
        a0,
        a1,
        a2,
      ));
    var _socket = (Module["_socket"] = (a0, a1, a2) =>
      (_socket = Module["_socket"] = wasmExports["socket"])(a0, a1, a2));
    var _getsockopt = (Module["_getsockopt"] = (a0, a1, a2, a3, a4) =>
      (_getsockopt = Module["_getsockopt"] = wasmExports["getsockopt"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _bind = (Module["_bind"] = (a0, a1, a2) =>
      (_bind = Module["_bind"] = wasmExports["bind"])(a0, a1, a2));
    var _getpeername = (Module["_getpeername"] = (a0, a1, a2) =>
      (_getpeername = Module["_getpeername"] = wasmExports["getpeername"])(
        a0,
        a1,
        a2,
      ));
    var _listen = (Module["_listen"] = (a0, a1) =>
      (_listen = Module["_listen"] = wasmExports["listen"])(a0, a1));
    var _setsockopt = (Module["_setsockopt"] = (a0, a1, a2, a3, a4) =>
      (_setsockopt = Module["_setsockopt"] = wasmExports["setsockopt"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _accept4 = (Module["_accept4"] = (a0, a1, a2, a3) =>
      (_accept4 = Module["_accept4"] = wasmExports["accept4"])(a0, a1, a2, a3));
    var _accept = (Module["_accept"] = (a0, a1, a2) =>
      (_accept = Module["_accept"] = wasmExports["accept"])(a0, a1, a2));
    var _inet_ntop = (Module["_inet_ntop"] = (a0, a1, a2, a3) =>
      (_inet_ntop = Module["_inet_ntop"] = wasmExports["inet_ntop"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _ntohs = (a0) => (_ntohs = wasmExports["ntohs"])(a0);
    var _htons = (a0) => (_htons = wasmExports["htons"])(a0);
    var _gai_strerror = (Module["_gai_strerror"] = (a0) =>
      (_gai_strerror = Module["_gai_strerror"] = wasmExports["gai_strerror"])(
        a0,
      ));
    var _freeaddrinfo = (Module["_freeaddrinfo"] = (a0) =>
      (_freeaddrinfo = Module["_freeaddrinfo"] = wasmExports["freeaddrinfo"])(
        a0,
      ));
    var _inet_pton = (Module["_inet_pton"] = (a0, a1, a2) =>
      (_inet_pton = Module["_inet_pton"] = wasmExports["inet_pton"])(
        a0,
        a1,
        a2,
      ));
    var _connect = (Module["_connect"] = (a0, a1, a2) =>
      (_connect = Module["_connect"] = wasmExports["connect"])(a0, a1, a2));
    var _recv = (Module["_recv"] = (a0, a1, a2, a3) =>
      (_recv = Module["_recv"] = wasmExports["recv"])(a0, a1, a2, a3));
    var _recvfrom = (Module["_recvfrom"] = (a0, a1, a2, a3, a4, a5) =>
      (_recvfrom = Module["_recvfrom"] = wasmExports["recvfrom"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _send = (Module["_send"] = (a0, a1, a2, a3) =>
      (_send = Module["_send"] = wasmExports["send"])(a0, a1, a2, a3));
    var _sendto = (Module["_sendto"] = (a0, a1, a2, a3, a4, a5) =>
      (_sendto = Module["_sendto"] = wasmExports["sendto"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _recvmsg = (Module["_recvmsg"] = (a0, a1, a2) =>
      (_recvmsg = Module["_recvmsg"] = wasmExports["recvmsg"])(a0, a1, a2));
    var _sendmsg = (Module["_sendmsg"] = (a0, a1, a2) =>
      (_sendmsg = Module["_sendmsg"] = wasmExports["sendmsg"])(a0, a1, a2));
    var _gethostname = (Module["_gethostname"] = (a0, a1) =>
      (_gethostname = Module["_gethostname"] = wasmExports["gethostname"])(
        a0,
        a1,
      ));
    var _getservbyname = (Module["_getservbyname"] = (a0, a1) =>
      (_getservbyname = Module["_getservbyname"] =
        wasmExports["getservbyname"])(a0, a1));
    var _getservbyport = (Module["_getservbyport"] = (a0, a1) =>
      (_getservbyport = Module["_getservbyport"] =
        wasmExports["getservbyport"])(a0, a1));
    var _ntohl = (Module["_ntohl"] = (a0) =>
      (_ntohl = Module["_ntohl"] = wasmExports["ntohl"])(a0));
    var _htonl = (a0) => (_htonl = wasmExports["htonl"])(a0);
    var _inet_aton = (Module["_inet_aton"] = (a0, a1) =>
      (_inet_aton = Module["_inet_aton"] = wasmExports["inet_aton"])(a0, a1));
    var _inet_ntoa = (Module["_inet_ntoa"] = (a0) =>
      (_inet_ntoa = Module["_inet_ntoa"] = wasmExports["inet_ntoa"])(a0));
    var _if_nameindex = (Module["_if_nameindex"] = () =>
      (_if_nameindex = Module["_if_nameindex"] =
        wasmExports["if_nameindex"])());
    var _if_freenameindex = (Module["_if_freenameindex"] = (a0) =>
      (_if_freenameindex = Module["_if_freenameindex"] =
        wasmExports["if_freenameindex"])(a0));
    var _if_nametoindex = (Module["_if_nametoindex"] = (a0) =>
      (_if_nametoindex = Module["_if_nametoindex"] =
        wasmExports["if_nametoindex"])(a0));
    var _if_indextoname = (Module["_if_indextoname"] = (a0, a1) =>
      (_if_indextoname = Module["_if_indextoname"] =
        wasmExports["if_indextoname"])(a0, a1));
    var ___h_errno_location = (Module["___h_errno_location"] = () =>
      (___h_errno_location = Module["___h_errno_location"] =
        wasmExports["__h_errno_location"])());
    var _hstrerror = (Module["_hstrerror"] = (a0) =>
      (_hstrerror = Module["_hstrerror"] = wasmExports["hstrerror"])(a0));
    var _getrlimit = (Module["_getrlimit"] = (a0, a1) =>
      (_getrlimit = Module["_getrlimit"] = wasmExports["getrlimit"])(a0, a1));
    var _setrlimit = (Module["_setrlimit"] = (a0, a1) =>
      (_setrlimit = Module["_setrlimit"] = wasmExports["setrlimit"])(a0, a1));
    var _raise = (Module["_raise"] = (a0) =>
      (_raise = Module["_raise"] = wasmExports["raise"])(a0));
    var _sigfillset = (Module["_sigfillset"] = (a0) =>
      (_sigfillset = Module["_sigfillset"] = wasmExports["sigfillset"])(a0));
    var _pthread_sigmask = (Module["_pthread_sigmask"] = (a0, a1, a2) =>
      (_pthread_sigmask = Module["_pthread_sigmask"] =
        wasmExports["pthread_sigmask"])(a0, a1, a2));
    var _PyOS_AfterFork = (Module["_PyOS_AfterFork"] = () =>
      (_PyOS_AfterFork = Module["_PyOS_AfterFork"] =
        wasmExports["PyOS_AfterFork"])());
    var __PyLong_FromUid = (Module["__PyLong_FromUid"] = (a0) =>
      (__PyLong_FromUid = Module["__PyLong_FromUid"] =
        wasmExports["_PyLong_FromUid"])(a0));
    var __PyLong_FromGid = (Module["__PyLong_FromGid"] = (a0) =>
      (__PyLong_FromGid = Module["__PyLong_FromGid"] =
        wasmExports["_PyLong_FromGid"])(a0));
    var __Py_Sigset_Converter = (Module["__Py_Sigset_Converter"] = (a0, a1) =>
      (__Py_Sigset_Converter = Module["__Py_Sigset_Converter"] =
        wasmExports["_Py_Sigset_Converter"])(a0, a1));
    var _sigemptyset = (Module["_sigemptyset"] = (a0) =>
      (_sigemptyset = Module["_sigemptyset"] = wasmExports["sigemptyset"])(a0));
    var _sigaddset = (Module["_sigaddset"] = (a0, a1) =>
      (_sigaddset = Module["_sigaddset"] = wasmExports["sigaddset"])(a0, a1));
    var _access = (Module["_access"] = (a0, a1) =>
      (_access = Module["_access"] = wasmExports["access"])(a0, a1));
    var _ttyname_r = (Module["_ttyname_r"] = (a0, a1, a2) =>
      (_ttyname_r = Module["_ttyname_r"] = wasmExports["ttyname_r"])(
        a0,
        a1,
        a2,
      ));
    var _fchdir = (Module["_fchdir"] = (a0) =>
      (_fchdir = Module["_fchdir"] = wasmExports["fchdir"])(a0));
    var _fchmod = (Module["_fchmod"] = (a0, a1) =>
      (_fchmod = Module["_fchmod"] = wasmExports["fchmod"])(a0, a1));
    var _fchmodat = (Module["_fchmodat"] = (a0, a1, a2, a3) =>
      (_fchmodat = Module["_fchmodat"] = wasmExports["fchmodat"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _chmod = (Module["_chmod"] = (a0, a1) =>
      (_chmod = Module["_chmod"] = wasmExports["chmod"])(a0, a1));
    var _fchown = (Module["_fchown"] = (a0, a1, a2) =>
      (_fchown = Module["_fchown"] = wasmExports["fchown"])(a0, a1, a2));
    var _fchownat = (Module["_fchownat"] = (a0, a1, a2, a3, a4) =>
      (_fchownat = Module["_fchownat"] = wasmExports["fchownat"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _chown = (Module["_chown"] = (a0, a1, a2) =>
      (_chown = Module["_chown"] = wasmExports["chown"])(a0, a1, a2));
    var _chroot = (Module["_chroot"] = (a0) =>
      (_chroot = Module["_chroot"] = wasmExports["chroot"])(a0));
    var _ctermid = (Module["_ctermid"] = (a0) =>
      (_ctermid = Module["_ctermid"] = wasmExports["ctermid"])(a0));
    var _fdopendir = (Module["_fdopendir"] = (a0) =>
      (_fdopendir = Module["_fdopendir"] = wasmExports["fdopendir"])(a0));
    var _rewinddir = (Module["_rewinddir"] = (a0) =>
      (_rewinddir = Module["_rewinddir"] = wasmExports["rewinddir"])(a0));
    var _mkdirat = (Module["_mkdirat"] = (a0, a1, a2) =>
      (_mkdirat = Module["_mkdirat"] = wasmExports["mkdirat"])(a0, a1, a2));
    var _mkdir = (Module["_mkdir"] = (a0, a1) =>
      (_mkdir = Module["_mkdir"] = wasmExports["mkdir"])(a0, a1));
    var _getpriority = (Module["_getpriority"] = (a0, a1) =>
      (_getpriority = Module["_getpriority"] = wasmExports["getpriority"])(
        a0,
        a1,
      ));
    var _readlinkat = (Module["_readlinkat"] = (a0, a1, a2, a3) =>
      (_readlinkat = Module["_readlinkat"] = wasmExports["readlinkat"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _unlinkat = (Module["_unlinkat"] = (a0, a1, a2) =>
      (_unlinkat = Module["_unlinkat"] = wasmExports["unlinkat"])(a0, a1, a2));
    var _rmdir = (Module["_rmdir"] = (a0) =>
      (_rmdir = Module["_rmdir"] = wasmExports["rmdir"])(a0));
    var _symlink = (Module["_symlink"] = (a0, a1) =>
      (_symlink = Module["_symlink"] = wasmExports["symlink"])(a0, a1));
    var _uname = (Module["_uname"] = (a0) =>
      (_uname = Module["_uname"] = wasmExports["uname"])(a0));
    var _futimesat = (Module["_futimesat"] = (a0, a1, a2) =>
      (_futimesat = Module["_futimesat"] = wasmExports["futimesat"])(
        a0,
        a1,
        a2,
      ));
    var _futimens = (Module["_futimens"] = (a0, a1) =>
      (_futimens = Module["_futimens"] = wasmExports["futimens"])(a0, a1));
    var _times = (Module["_times"] = (a0) =>
      (_times = Module["_times"] = wasmExports["times"])(a0));
    var _fexecve = (Module["_fexecve"] = (a0, a1, a2) =>
      (_fexecve = Module["_fexecve"] = wasmExports["fexecve"])(a0, a1, a2));
    var _sched_yield = (Module["_sched_yield"] = () =>
      (_sched_yield = Module["_sched_yield"] = wasmExports["sched_yield"])());
    var _login_tty = (Module["_login_tty"] = (a0) =>
      (_login_tty = Module["_login_tty"] = wasmExports["login_tty"])(a0));
    var _getgid = (Module["_getgid"] = () =>
      (_getgid = Module["_getgid"] = wasmExports["getgid"])());
    var _getpgrp = (Module["_getpgrp"] = () =>
      (_getpgrp = Module["_getpgrp"] = wasmExports["getpgrp"])());
    var _getppid = (Module["_getppid"] = () =>
      (_getppid = Module["_getppid"] = wasmExports["getppid"])());
    var _getuid = (Module["_getuid"] = () =>
      (_getuid = Module["_getuid"] = wasmExports["getuid"])());
    var _getlogin = (Module["_getlogin"] = () =>
      (_getlogin = Module["_getlogin"] = wasmExports["getlogin"])());
    var _killpg = (Module["_killpg"] = (a0, a1) =>
      (_killpg = Module["_killpg"] = wasmExports["killpg"])(a0, a1));
    var _setuid = (Module["_setuid"] = (a0) =>
      (_setuid = Module["_setuid"] = wasmExports["setuid"])(a0));
    var _setgid = (Module["_setgid"] = (a0) =>
      (_setgid = Module["_setgid"] = wasmExports["setgid"])(a0));
    var _getpgid = (Module["_getpgid"] = (a0) =>
      (_getpgid = Module["_getpgid"] = wasmExports["getpgid"])(a0));
    var _setpgrp = (Module["_setpgrp"] = () =>
      (_setpgrp = Module["_setpgrp"] = wasmExports["setpgrp"])());
    var _wait = (Module["_wait"] = (a0) =>
      (_wait = Module["_wait"] = wasmExports["wait"])(a0));
    var _waitid = (Module["_waitid"] = (a0, a1, a2, a3) =>
      (_waitid = Module["_waitid"] = wasmExports["waitid"])(a0, a1, a2, a3));
    var _waitpid = (Module["_waitpid"] = (a0, a1, a2) =>
      (_waitpid = Module["_waitpid"] = wasmExports["waitpid"])(a0, a1, a2));
    var _getsid = (Module["_getsid"] = (a0) =>
      (_getsid = Module["_getsid"] = wasmExports["getsid"])(a0));
    var _tcgetpgrp = (Module["_tcgetpgrp"] = (a0) =>
      (_tcgetpgrp = Module["_tcgetpgrp"] = wasmExports["tcgetpgrp"])(a0));
    var _tcsetpgrp = (Module["_tcsetpgrp"] = (a0, a1) =>
      (_tcsetpgrp = Module["_tcsetpgrp"] = wasmExports["tcsetpgrp"])(a0, a1));
    var _openat = (Module["_openat"] = (a0, a1, a2, a3) =>
      (_openat = Module["_openat"] = wasmExports["openat"])(a0, a1, a2, a3));
    var _dup3 = (Module["_dup3"] = (a0, a1, a2) =>
      (_dup3 = Module["_dup3"] = wasmExports["dup3"])(a0, a1, a2));
    var _lockf = (Module["_lockf"] = (a0, a1, a2) =>
      (_lockf = Module["_lockf"] = wasmExports["lockf"])(a0, a1, a2));
    var _readv = (Module["_readv"] = (a0, a1, a2) =>
      (_readv = Module["_readv"] = wasmExports["readv"])(a0, a1, a2));
    var _pread = (Module["_pread"] = (a0, a1, a2, a3) =>
      (_pread = Module["_pread"] = wasmExports["pread"])(a0, a1, a2, a3));
    var _writev = (Module["_writev"] = (a0, a1, a2) =>
      (_writev = Module["_writev"] = wasmExports["writev"])(a0, a1, a2));
    var _pwrite = (Module["_pwrite"] = (a0, a1, a2, a3) =>
      (_pwrite = Module["_pwrite"] = wasmExports["pwrite"])(a0, a1, a2, a3));
    var _pipe = (Module["_pipe"] = (a0) =>
      (_pipe = Module["_pipe"] = wasmExports["pipe"])(a0));
    var _truncate = (Module["_truncate"] = (a0, a1) =>
      (_truncate = Module["_truncate"] = wasmExports["truncate"])(a0, a1));
    var _posix_fadvise = (Module["_posix_fadvise"] = (a0, a1, a2, a3) =>
      (_posix_fadvise = Module["_posix_fadvise"] =
        wasmExports["posix_fadvise"])(a0, a1, a2, a3));
    var _unsetenv = (Module["_unsetenv"] = (a0) =>
      (_unsetenv = Module["_unsetenv"] = wasmExports["unsetenv"])(a0));
    var _fsync = (Module["_fsync"] = (a0) =>
      (_fsync = Module["_fsync"] = wasmExports["fsync"])(a0));
    var _sync = (Module["_sync"] = () =>
      (_sync = Module["_sync"] = wasmExports["sync"])());
    var _fdatasync = (Module["_fdatasync"] = (a0) =>
      (_fdatasync = Module["_fdatasync"] = wasmExports["fdatasync"])(a0));
    var _fstatvfs = (Module["_fstatvfs"] = (a0, a1) =>
      (_fstatvfs = Module["_fstatvfs"] = wasmExports["fstatvfs"])(a0, a1));
    var _statvfs = (Module["_statvfs"] = (a0, a1) =>
      (_statvfs = Module["_statvfs"] = wasmExports["statvfs"])(a0, a1));
    var _fpathconf = (Module["_fpathconf"] = (a0, a1) =>
      (_fpathconf = Module["_fpathconf"] = wasmExports["fpathconf"])(a0, a1));
    var _pathconf = (Module["_pathconf"] = (a0, a1) =>
      (_pathconf = Module["_pathconf"] = wasmExports["pathconf"])(a0, a1));
    var _getloadavg = (Module["_getloadavg"] = (a0, a1) =>
      (_getloadavg = Module["_getloadavg"] = wasmExports["getloadavg"])(
        a0,
        a1,
      ));
    var _lstat = (Module["_lstat"] = (a0, a1) =>
      (_lstat = Module["_lstat"] = wasmExports["lstat"])(a0, a1));
    var _fstatat = (Module["_fstatat"] = (a0, a1, a2, a3) =>
      (_fstatat = Module["_fstatat"] = wasmExports["fstatat"])(a0, a1, a2, a3));
    var _renameat = (Module["_renameat"] = (a0, a1, a2, a3) =>
      (_renameat = Module["_renameat"] = wasmExports["renameat"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _rename = (Module["_rename"] = (a0, a1) =>
      (_rename = Module["_rename"] = wasmExports["rename"])(a0, a1));
    var _unlink = (Module["_unlink"] = (a0) =>
      (_unlink = Module["_unlink"] = wasmExports["unlink"])(a0));
    var _utimes = (Module["_utimes"] = (a0, a1) =>
      (_utimes = Module["_utimes"] = wasmExports["utimes"])(a0, a1));
    var _qsort = (Module["_qsort"] = (a0, a1, a2, a3) =>
      (_qsort = Module["_qsort"] = wasmExports["qsort"])(a0, a1, a2, a3));
    var __PyErr_CheckSignals = (Module["__PyErr_CheckSignals"] = () =>
      (__PyErr_CheckSignals = Module["__PyErr_CheckSignals"] =
        wasmExports["_PyErr_CheckSignals"])());
    var _PyErr_SetInterrupt = (Module["_PyErr_SetInterrupt"] = () =>
      (_PyErr_SetInterrupt = Module["_PyErr_SetInterrupt"] =
        wasmExports["PyErr_SetInterrupt"])());
    var _PyOS_InterruptOccurred = (Module["_PyOS_InterruptOccurred"] = () =>
      (_PyOS_InterruptOccurred = Module["_PyOS_InterruptOccurred"] =
        wasmExports["PyOS_InterruptOccurred"])());
    var __PyOS_IsMainThread = (Module["__PyOS_IsMainThread"] = () =>
      (__PyOS_IsMainThread = Module["__PyOS_IsMainThread"] =
        wasmExports["_PyOS_IsMainThread"])());
    var _getitimer = (Module["_getitimer"] = (a0, a1) =>
      (_getitimer = Module["_getitimer"] = wasmExports["getitimer"])(a0, a1));
    var _strsignal = (Module["_strsignal"] = (a0) =>
      (_strsignal = Module["_strsignal"] = wasmExports["strsignal"])(a0));
    var _strstr = (Module["_strstr"] = (a0, a1) =>
      (_strstr = Module["_strstr"] = wasmExports["strstr"])(a0, a1));
    var _pause = (Module["_pause"] = () =>
      (_pause = Module["_pause"] = wasmExports["pause"])());
    var _sigpending = (Module["_sigpending"] = (a0) =>
      (_sigpending = Module["_sigpending"] = wasmExports["sigpending"])(a0));
    var _sigwait = (Module["_sigwait"] = (a0, a1) =>
      (_sigwait = Module["_sigwait"] = wasmExports["sigwait"])(a0, a1));
    var _sigwaitinfo = (Module["_sigwaitinfo"] = (a0, a1) =>
      (_sigwaitinfo = Module["_sigwaitinfo"] = wasmExports["sigwaitinfo"])(
        a0,
        a1,
      ));
    var _sigtimedwait = (Module["_sigtimedwait"] = (a0, a1, a2) =>
      (_sigtimedwait = Module["_sigtimedwait"] = wasmExports["sigtimedwait"])(
        a0,
        a1,
        a2,
      ));
    var _sigismember = (Module["_sigismember"] = (a0, a1) =>
      (_sigismember = Module["_sigismember"] = wasmExports["sigismember"])(
        a0,
        a1,
      ));
    var ___libc_current_sigrtmin = (Module["___libc_current_sigrtmin"] = () =>
      (___libc_current_sigrtmin = Module["___libc_current_sigrtmin"] =
        wasmExports["__libc_current_sigrtmin"])());
    var ___libc_current_sigrtmax = (Module["___libc_current_sigrtmax"] = () =>
      (___libc_current_sigrtmax = Module["___libc_current_sigrtmax"] =
        wasmExports["__libc_current_sigrtmax"])());
    var _PyTraceMalloc_Track = (Module["_PyTraceMalloc_Track"] = (a0, a1, a2) =>
      (_PyTraceMalloc_Track = Module["_PyTraceMalloc_Track"] =
        wasmExports["PyTraceMalloc_Track"])(a0, a1, a2));
    var _PyTraceMalloc_Untrack = (Module["_PyTraceMalloc_Untrack"] = (a0, a1) =>
      (_PyTraceMalloc_Untrack = Module["_PyTraceMalloc_Untrack"] =
        wasmExports["PyTraceMalloc_Untrack"])(a0, a1));
    var __PyTraceMalloc_GetTraceback = (Module["__PyTraceMalloc_GetTraceback"] =
      (a0, a1) =>
        (__PyTraceMalloc_GetTraceback = Module["__PyTraceMalloc_GetTraceback"] =
          wasmExports["_PyTraceMalloc_GetTraceback"])(a0, a1));
    var _isalnum = (Module["_isalnum"] = (a0) =>
      (_isalnum = Module["_isalnum"] = wasmExports["isalnum"])(a0));
    var _toupper = (Module["_toupper"] = (a0) =>
      (_toupper = Module["_toupper"] = wasmExports["toupper"])(a0));
    var _clock_settime = (Module["_clock_settime"] = (a0, a1) =>
      (_clock_settime = Module["_clock_settime"] =
        wasmExports["clock_settime"])(a0, a1));
    var _pthread_getcpuclockid = (Module["_pthread_getcpuclockid"] = (a0, a1) =>
      (_pthread_getcpuclockid = Module["_pthread_getcpuclockid"] =
        wasmExports["pthread_getcpuclockid"])(a0, a1));
    var _clock_nanosleep = (Module["_clock_nanosleep"] = (a0, a1, a2, a3) =>
      (_clock_nanosleep = Module["_clock_nanosleep"] =
        wasmExports["clock_nanosleep"])(a0, a1, a2, a3));
    var _time = (Module["_time"] = (a0) =>
      (_time = Module["_time"] = wasmExports["time"])(a0));
    var _mktime = (Module["_mktime"] = (a0) =>
      (_mktime = Module["_mktime"] = wasmExports["mktime"])(a0));
    var _clock = (Module["_clock"] = () =>
      (_clock = Module["_clock"] = wasmExports["clock"])());
    var _wcscoll = (Module["_wcscoll"] = (a0, a1) =>
      (_wcscoll = Module["_wcscoll"] = wasmExports["wcscoll"])(a0, a1));
    var _wcsxfrm = (Module["_wcsxfrm"] = (a0, a1, a2) =>
      (_wcsxfrm = Module["_wcsxfrm"] = wasmExports["wcsxfrm"])(a0, a1, a2));
    var _gettext = (Module["_gettext"] = (a0) =>
      (_gettext = Module["_gettext"] = wasmExports["gettext"])(a0));
    var _dgettext = (Module["_dgettext"] = (a0, a1) =>
      (_dgettext = Module["_dgettext"] = wasmExports["dgettext"])(a0, a1));
    var _dcgettext = (Module["_dcgettext"] = (a0, a1, a2) =>
      (_dcgettext = Module["_dcgettext"] = wasmExports["dcgettext"])(
        a0,
        a1,
        a2,
      ));
    var _textdomain = (Module["_textdomain"] = (a0) =>
      (_textdomain = Module["_textdomain"] = wasmExports["textdomain"])(a0));
    var _bindtextdomain = (Module["_bindtextdomain"] = (a0, a1) =>
      (_bindtextdomain = Module["_bindtextdomain"] =
        wasmExports["bindtextdomain"])(a0, a1));
    var _bind_textdomain_codeset = (Module["_bind_textdomain_codeset"] = (
      a0,
      a1,
    ) =>
      (_bind_textdomain_codeset = Module["_bind_textdomain_codeset"] =
        wasmExports["bind_textdomain_codeset"])(a0, a1));
    var _isupper = (Module["_isupper"] = (a0) =>
      (_isupper = Module["_isupper"] = wasmExports["isupper"])(a0));
    var ___small_fprintf = (Module["___small_fprintf"] = (a0, a1, a2) =>
      (___small_fprintf = Module["___small_fprintf"] =
        wasmExports["__small_fprintf"])(a0, a1, a2));
    var __Py_Get_Getpath_CodeObject = (Module["__Py_Get_Getpath_CodeObject"] =
      () =>
        (__Py_Get_Getpath_CodeObject = Module["__Py_Get_Getpath_CodeObject"] =
          wasmExports["_Py_Get_Getpath_CodeObject"])());
    var _ffi_prep_closure = (Module["_ffi_prep_closure"] = (a0, a1, a2, a3) =>
      (_ffi_prep_closure = Module["_ffi_prep_closure"] =
        wasmExports["ffi_prep_closure"])(a0, a1, a2, a3));
    var _ffi_get_struct_offsets = (Module["_ffi_get_struct_offsets"] = (
      a0,
      a1,
      a2,
    ) =>
      (_ffi_get_struct_offsets = Module["_ffi_get_struct_offsets"] =
        wasmExports["ffi_get_struct_offsets"])(a0, a1, a2));
    var _ffi_java_raw_size = (Module["_ffi_java_raw_size"] = (a0) =>
      (_ffi_java_raw_size = Module["_ffi_java_raw_size"] =
        wasmExports["ffi_java_raw_size"])(a0));
    var _ffi_java_raw_to_ptrarray = (Module["_ffi_java_raw_to_ptrarray"] = (
      a0,
      a1,
      a2,
    ) =>
      (_ffi_java_raw_to_ptrarray = Module["_ffi_java_raw_to_ptrarray"] =
        wasmExports["ffi_java_raw_to_ptrarray"])(a0, a1, a2));
    var _ffi_java_ptrarray_to_raw = (Module["_ffi_java_ptrarray_to_raw"] = (
      a0,
      a1,
      a2,
    ) =>
      (_ffi_java_ptrarray_to_raw = Module["_ffi_java_ptrarray_to_raw"] =
        wasmExports["ffi_java_ptrarray_to_raw"])(a0, a1, a2));
    var _ffi_java_raw_call = (Module["_ffi_java_raw_call"] = (a0, a1, a2, a3) =>
      (_ffi_java_raw_call = Module["_ffi_java_raw_call"] =
        wasmExports["ffi_java_raw_call"])(a0, a1, a2, a3));
    var _ffi_prep_java_raw_closure_loc = (Module[
      "_ffi_prep_java_raw_closure_loc"
    ] = (a0, a1, a2, a3, a4) =>
      (_ffi_prep_java_raw_closure_loc = Module[
        "_ffi_prep_java_raw_closure_loc"
      ] =
        wasmExports["ffi_prep_java_raw_closure_loc"])(a0, a1, a2, a3, a4));
    var _ffi_prep_java_raw_closure = (Module["_ffi_prep_java_raw_closure"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_ffi_prep_java_raw_closure = Module["_ffi_prep_java_raw_closure"] =
        wasmExports["ffi_prep_java_raw_closure"])(a0, a1, a2, a3));
    var _ffi_tramp_is_supported = (Module["_ffi_tramp_is_supported"] = () =>
      (_ffi_tramp_is_supported = Module["_ffi_tramp_is_supported"] =
        wasmExports["ffi_tramp_is_supported"])());
    var _ffi_tramp_alloc = (Module["_ffi_tramp_alloc"] = (a0) =>
      (_ffi_tramp_alloc = Module["_ffi_tramp_alloc"] =
        wasmExports["ffi_tramp_alloc"])(a0));
    var _ffi_tramp_set_parms = (Module["_ffi_tramp_set_parms"] = (a0, a1, a2) =>
      (_ffi_tramp_set_parms = Module["_ffi_tramp_set_parms"] =
        wasmExports["ffi_tramp_set_parms"])(a0, a1, a2));
    var _ffi_tramp_get_addr = (Module["_ffi_tramp_get_addr"] = (a0) =>
      (_ffi_tramp_get_addr = Module["_ffi_tramp_get_addr"] =
        wasmExports["ffi_tramp_get_addr"])(a0));
    var _ffi_tramp_free = (Module["_ffi_tramp_free"] = (a0) =>
      (_ffi_tramp_free = Module["_ffi_tramp_free"] =
        wasmExports["ffi_tramp_free"])(a0));
    var __hiwire_immortal_get = (Module["__hiwire_immortal_get"] = (a0) =>
      (__hiwire_immortal_get = Module["__hiwire_immortal_get"] =
        wasmExports["_hiwire_immortal_get"])(a0));
    var __hiwire_get = (Module["__hiwire_get"] = (a0) =>
      (__hiwire_get = Module["__hiwire_get"] = wasmExports["_hiwire_get"])(a0));
    var _hiwire_incref = (Module["_hiwire_incref"] = (a0) =>
      (_hiwire_incref = Module["_hiwire_incref"] =
        wasmExports["hiwire_incref"])(a0));
    var __hiwire_immortal_add = (Module["__hiwire_immortal_add"] = (a0) =>
      (__hiwire_immortal_add = Module["__hiwire_immortal_add"] =
        wasmExports["_hiwire_immortal_add"])(a0));
    var __hiwire_table_init = (Module["__hiwire_table_init"] = () =>
      (__hiwire_table_init = Module["__hiwire_table_init"] =
        wasmExports["_hiwire_table_init"])());
    var __hiwire_set = (Module["__hiwire_set"] = (a0, a1) =>
      (__hiwire_set = Module["__hiwire_set"] = wasmExports["_hiwire_set"])(
        a0,
        a1,
      ));
    var _hiwire_num_refs = (Module["_hiwire_num_refs"] = () =>
      (_hiwire_num_refs = Module["_hiwire_num_refs"] =
        wasmExports["hiwire_num_refs"])());
    var __hiwire_slot_info = (Module["__hiwire_slot_info"] = (a0) =>
      (__hiwire_slot_info = Module["__hiwire_slot_info"] =
        wasmExports["_hiwire_slot_info"])(a0));
    var __hiwire_delete = (Module["__hiwire_delete"] = (a0) =>
      (__hiwire_delete = Module["__hiwire_delete"] =
        wasmExports["_hiwire_delete"])(a0));
    var __hiwire_immortal_table_init = (Module["__hiwire_immortal_table_init"] =
      () =>
        (__hiwire_immortal_table_init = Module["__hiwire_immortal_table_init"] =
          wasmExports["_hiwire_immortal_table_init"])());
    var _adler32_z = (Module["_adler32_z"] = (a0, a1, a2) =>
      (_adler32_z = Module["_adler32_z"] = wasmExports["adler32_z"])(
        a0,
        a1,
        a2,
      ));
    var _adler32_combine = (Module["_adler32_combine"] = (a0, a1, a2) =>
      (_adler32_combine = Module["_adler32_combine"] =
        wasmExports["adler32_combine"])(a0, a1, a2));
    var _adler32_combine64 = (Module["_adler32_combine64"] = (a0, a1, a2) =>
      (_adler32_combine64 = Module["_adler32_combine64"] =
        wasmExports["adler32_combine64"])(a0, a1, a2));
    var _compress2 = (Module["_compress2"] = (a0, a1, a2, a3, a4) =>
      (_compress2 = Module["_compress2"] = wasmExports["compress2"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _deflateInit_ = (Module["_deflateInit_"] = (a0, a1, a2, a3) =>
      (_deflateInit_ = Module["_deflateInit_"] = wasmExports["deflateInit_"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _compress = (Module["_compress"] = (a0, a1, a2, a3) =>
      (_compress = Module["_compress"] = wasmExports["compress"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _compressBound = (Module["_compressBound"] = (a0) =>
      (_compressBound = Module["_compressBound"] =
        wasmExports["compressBound"])(a0));
    var _get_crc_table = (Module["_get_crc_table"] = () =>
      (_get_crc_table = Module["_get_crc_table"] =
        wasmExports["get_crc_table"])());
    var _crc32_z = (Module["_crc32_z"] = (a0, a1, a2) =>
      (_crc32_z = Module["_crc32_z"] = wasmExports["crc32_z"])(a0, a1, a2));
    var _crc32_combine64 = (Module["_crc32_combine64"] = (a0, a1, a2) =>
      (_crc32_combine64 = Module["_crc32_combine64"] =
        wasmExports["crc32_combine64"])(a0, a1, a2));
    var _crc32_combine = (Module["_crc32_combine"] = (a0, a1, a2) =>
      (_crc32_combine = Module["_crc32_combine"] =
        wasmExports["crc32_combine"])(a0, a1, a2));
    var _crc32_combine_gen64 = (Module["_crc32_combine_gen64"] = (a0) =>
      (_crc32_combine_gen64 = Module["_crc32_combine_gen64"] =
        wasmExports["crc32_combine_gen64"])(a0));
    var _crc32_combine_gen = (Module["_crc32_combine_gen"] = (a0) =>
      (_crc32_combine_gen = Module["_crc32_combine_gen"] =
        wasmExports["crc32_combine_gen"])(a0));
    var _crc32_combine_op = (Module["_crc32_combine_op"] = (a0, a1, a2) =>
      (_crc32_combine_op = Module["_crc32_combine_op"] =
        wasmExports["crc32_combine_op"])(a0, a1, a2));
    var _zcalloc = (Module["_zcalloc"] = (a0, a1, a2) =>
      (_zcalloc = Module["_zcalloc"] = wasmExports["zcalloc"])(a0, a1, a2));
    var _zcfree = (Module["_zcfree"] = (a0, a1) =>
      (_zcfree = Module["_zcfree"] = wasmExports["zcfree"])(a0, a1));
    var _deflateReset = (Module["_deflateReset"] = (a0) =>
      (_deflateReset = Module["_deflateReset"] = wasmExports["deflateReset"])(
        a0,
      ));
    var _deflateResetKeep = (Module["_deflateResetKeep"] = (a0) =>
      (_deflateResetKeep = Module["_deflateResetKeep"] =
        wasmExports["deflateResetKeep"])(a0));
    var _deflateGetDictionary = (Module["_deflateGetDictionary"] = (
      a0,
      a1,
      a2,
    ) =>
      (_deflateGetDictionary = Module["_deflateGetDictionary"] =
        wasmExports["deflateGetDictionary"])(a0, a1, a2));
    var __tr_init = (Module["__tr_init"] = (a0) =>
      (__tr_init = Module["__tr_init"] = wasmExports["_tr_init"])(a0));
    var _deflateSetHeader = (Module["_deflateSetHeader"] = (a0, a1) =>
      (_deflateSetHeader = Module["_deflateSetHeader"] =
        wasmExports["deflateSetHeader"])(a0, a1));
    var _deflatePending = (Module["_deflatePending"] = (a0, a1, a2) =>
      (_deflatePending = Module["_deflatePending"] =
        wasmExports["deflatePending"])(a0, a1, a2));
    var _deflatePrime = (Module["_deflatePrime"] = (a0, a1, a2) =>
      (_deflatePrime = Module["_deflatePrime"] = wasmExports["deflatePrime"])(
        a0,
        a1,
        a2,
      ));
    var __tr_flush_bits = (Module["__tr_flush_bits"] = (a0) =>
      (__tr_flush_bits = Module["__tr_flush_bits"] =
        wasmExports["_tr_flush_bits"])(a0));
    var _deflateParams = (Module["_deflateParams"] = (a0, a1, a2) =>
      (_deflateParams = Module["_deflateParams"] =
        wasmExports["deflateParams"])(a0, a1, a2));
    var __tr_align = (Module["__tr_align"] = (a0) =>
      (__tr_align = Module["__tr_align"] = wasmExports["_tr_align"])(a0));
    var __tr_stored_block = (Module["__tr_stored_block"] = (a0, a1, a2, a3) =>
      (__tr_stored_block = Module["__tr_stored_block"] =
        wasmExports["_tr_stored_block"])(a0, a1, a2, a3));
    var _deflateTune = (Module["_deflateTune"] = (a0, a1, a2, a3, a4) =>
      (_deflateTune = Module["_deflateTune"] = wasmExports["deflateTune"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _deflateBound = (Module["_deflateBound"] = (a0, a1) =>
      (_deflateBound = Module["_deflateBound"] = wasmExports["deflateBound"])(
        a0,
        a1,
      ));
    var __tr_flush_block = (Module["__tr_flush_block"] = (a0, a1, a2, a3) =>
      (__tr_flush_block = Module["__tr_flush_block"] =
        wasmExports["_tr_flush_block"])(a0, a1, a2, a3));
    var _gzclose = (Module["_gzclose"] = (a0) =>
      (_gzclose = Module["_gzclose"] = wasmExports["gzclose"])(a0));
    var _gzclose_r = (Module["_gzclose_r"] = (a0) =>
      (_gzclose_r = Module["_gzclose_r"] = wasmExports["gzclose_r"])(a0));
    var _gzclose_w = (Module["_gzclose_w"] = (a0) =>
      (_gzclose_w = Module["_gzclose_w"] = wasmExports["gzclose_w"])(a0));
    var _gzopen = (Module["_gzopen"] = (a0, a1) =>
      (_gzopen = Module["_gzopen"] = wasmExports["gzopen"])(a0, a1));
    var _gzopen64 = (Module["_gzopen64"] = (a0, a1) =>
      (_gzopen64 = Module["_gzopen64"] = wasmExports["gzopen64"])(a0, a1));
    var _gzdopen = (Module["_gzdopen"] = (a0, a1) =>
      (_gzdopen = Module["_gzdopen"] = wasmExports["gzdopen"])(a0, a1));
    var _gzbuffer = (Module["_gzbuffer"] = (a0, a1) =>
      (_gzbuffer = Module["_gzbuffer"] = wasmExports["gzbuffer"])(a0, a1));
    var _gzrewind = (Module["_gzrewind"] = (a0) =>
      (_gzrewind = Module["_gzrewind"] = wasmExports["gzrewind"])(a0));
    var _gzseek64 = (Module["_gzseek64"] = (a0, a1, a2) =>
      (_gzseek64 = Module["_gzseek64"] = wasmExports["gzseek64"])(a0, a1, a2));
    var _gz_error = (Module["_gz_error"] = (a0, a1, a2) =>
      (_gz_error = Module["_gz_error"] = wasmExports["gz_error"])(a0, a1, a2));
    var _gzseek = (Module["_gzseek"] = (a0, a1, a2) =>
      (_gzseek = Module["_gzseek"] = wasmExports["gzseek"])(a0, a1, a2));
    var _gztell64 = (Module["_gztell64"] = (a0) =>
      (_gztell64 = Module["_gztell64"] = wasmExports["gztell64"])(a0));
    var _gztell = (Module["_gztell"] = (a0) =>
      (_gztell = Module["_gztell"] = wasmExports["gztell"])(a0));
    var _gzoffset64 = (Module["_gzoffset64"] = (a0) =>
      (_gzoffset64 = Module["_gzoffset64"] = wasmExports["gzoffset64"])(a0));
    var _gzoffset = (Module["_gzoffset"] = (a0) =>
      (_gzoffset = Module["_gzoffset"] = wasmExports["gzoffset"])(a0));
    var _gzeof = (Module["_gzeof"] = (a0) =>
      (_gzeof = Module["_gzeof"] = wasmExports["gzeof"])(a0));
    var _gzerror = (Module["_gzerror"] = (a0, a1) =>
      (_gzerror = Module["_gzerror"] = wasmExports["gzerror"])(a0, a1));
    var _gzclearerr = (Module["_gzclearerr"] = (a0) =>
      (_gzclearerr = Module["_gzclearerr"] = wasmExports["gzclearerr"])(a0));
    var _gzread = (Module["_gzread"] = (a0, a1, a2) =>
      (_gzread = Module["_gzread"] = wasmExports["gzread"])(a0, a1, a2));
    var _gzfread = (Module["_gzfread"] = (a0, a1, a2, a3) =>
      (_gzfread = Module["_gzfread"] = wasmExports["gzfread"])(a0, a1, a2, a3));
    var _gzgetc = (Module["_gzgetc"] = (a0) =>
      (_gzgetc = Module["_gzgetc"] = wasmExports["gzgetc"])(a0));
    var _gzgetc_ = (Module["_gzgetc_"] = (a0) =>
      (_gzgetc_ = Module["_gzgetc_"] = wasmExports["gzgetc_"])(a0));
    var _gzungetc = (Module["_gzungetc"] = (a0, a1) =>
      (_gzungetc = Module["_gzungetc"] = wasmExports["gzungetc"])(a0, a1));
    var _gzgets = (Module["_gzgets"] = (a0, a1, a2) =>
      (_gzgets = Module["_gzgets"] = wasmExports["gzgets"])(a0, a1, a2));
    var _gzdirect = (Module["_gzdirect"] = (a0) =>
      (_gzdirect = Module["_gzdirect"] = wasmExports["gzdirect"])(a0));
    var _inflateReset = (Module["_inflateReset"] = (a0) =>
      (_inflateReset = Module["_inflateReset"] = wasmExports["inflateReset"])(
        a0,
      ));
    var _gzwrite = (Module["_gzwrite"] = (a0, a1, a2) =>
      (_gzwrite = Module["_gzwrite"] = wasmExports["gzwrite"])(a0, a1, a2));
    var _gzfwrite = (Module["_gzfwrite"] = (a0, a1, a2, a3) =>
      (_gzfwrite = Module["_gzfwrite"] = wasmExports["gzfwrite"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _gzputc = (Module["_gzputc"] = (a0, a1) =>
      (_gzputc = Module["_gzputc"] = wasmExports["gzputc"])(a0, a1));
    var _gzputs = (Module["_gzputs"] = (a0, a1) =>
      (_gzputs = Module["_gzputs"] = wasmExports["gzputs"])(a0, a1));
    var _gzvprintf = (Module["_gzvprintf"] = (a0, a1, a2) =>
      (_gzvprintf = Module["_gzvprintf"] = wasmExports["gzvprintf"])(
        a0,
        a1,
        a2,
      ));
    var _gzprintf = (Module["_gzprintf"] = (a0, a1, a2) =>
      (_gzprintf = Module["_gzprintf"] = wasmExports["gzprintf"])(a0, a1, a2));
    var _gzflush = (Module["_gzflush"] = (a0, a1) =>
      (_gzflush = Module["_gzflush"] = wasmExports["gzflush"])(a0, a1));
    var _gzsetparams = (Module["_gzsetparams"] = (a0, a1, a2) =>
      (_gzsetparams = Module["_gzsetparams"] = wasmExports["gzsetparams"])(
        a0,
        a1,
        a2,
      ));
    var _inflateBackInit_ = (Module["_inflateBackInit_"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_inflateBackInit_ = Module["_inflateBackInit_"] =
        wasmExports["inflateBackInit_"])(a0, a1, a2, a3, a4));
    var _inflateBack = (Module["_inflateBack"] = (a0, a1, a2, a3, a4) =>
      (_inflateBack = Module["_inflateBack"] = wasmExports["inflateBack"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _inflate_table = (Module["_inflate_table"] = (a0, a1, a2, a3, a4, a5) =>
      (_inflate_table = Module["_inflate_table"] =
        wasmExports["inflate_table"])(a0, a1, a2, a3, a4, a5));
    var _inflate_fast = (Module["_inflate_fast"] = (a0, a1) =>
      (_inflate_fast = Module["_inflate_fast"] = wasmExports["inflate_fast"])(
        a0,
        a1,
      ));
    var _inflateBackEnd = (Module["_inflateBackEnd"] = (a0) =>
      (_inflateBackEnd = Module["_inflateBackEnd"] =
        wasmExports["inflateBackEnd"])(a0));
    var _inflateResetKeep = (Module["_inflateResetKeep"] = (a0) =>
      (_inflateResetKeep = Module["_inflateResetKeep"] =
        wasmExports["inflateResetKeep"])(a0));
    var _inflateReset2 = (Module["_inflateReset2"] = (a0, a1) =>
      (_inflateReset2 = Module["_inflateReset2"] =
        wasmExports["inflateReset2"])(a0, a1));
    var _inflateInit_ = (Module["_inflateInit_"] = (a0, a1, a2) =>
      (_inflateInit_ = Module["_inflateInit_"] = wasmExports["inflateInit_"])(
        a0,
        a1,
        a2,
      ));
    var _inflatePrime = (Module["_inflatePrime"] = (a0, a1, a2) =>
      (_inflatePrime = Module["_inflatePrime"] = wasmExports["inflatePrime"])(
        a0,
        a1,
        a2,
      ));
    var _inflateGetDictionary = (Module["_inflateGetDictionary"] = (
      a0,
      a1,
      a2,
    ) =>
      (_inflateGetDictionary = Module["_inflateGetDictionary"] =
        wasmExports["inflateGetDictionary"])(a0, a1, a2));
    var _inflateGetHeader = (Module["_inflateGetHeader"] = (a0, a1) =>
      (_inflateGetHeader = Module["_inflateGetHeader"] =
        wasmExports["inflateGetHeader"])(a0, a1));
    var _inflateSync = (Module["_inflateSync"] = (a0) =>
      (_inflateSync = Module["_inflateSync"] = wasmExports["inflateSync"])(a0));
    var _inflateSyncPoint = (Module["_inflateSyncPoint"] = (a0) =>
      (_inflateSyncPoint = Module["_inflateSyncPoint"] =
        wasmExports["inflateSyncPoint"])(a0));
    var _inflateUndermine = (Module["_inflateUndermine"] = (a0, a1) =>
      (_inflateUndermine = Module["_inflateUndermine"] =
        wasmExports["inflateUndermine"])(a0, a1));
    var _inflateValidate = (Module["_inflateValidate"] = (a0, a1) =>
      (_inflateValidate = Module["_inflateValidate"] =
        wasmExports["inflateValidate"])(a0, a1));
    var _inflateMark = (Module["_inflateMark"] = (a0) =>
      (_inflateMark = Module["_inflateMark"] = wasmExports["inflateMark"])(a0));
    var _inflateCodesUsed = (Module["_inflateCodesUsed"] = (a0) =>
      (_inflateCodesUsed = Module["_inflateCodesUsed"] =
        wasmExports["inflateCodesUsed"])(a0));
    var __tr_tally = (Module["__tr_tally"] = (a0, a1, a2) =>
      (__tr_tally = Module["__tr_tally"] = wasmExports["_tr_tally"])(
        a0,
        a1,
        a2,
      ));
    var _uncompress2 = (Module["_uncompress2"] = (a0, a1, a2, a3) =>
      (_uncompress2 = Module["_uncompress2"] = wasmExports["uncompress2"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _uncompress = (Module["_uncompress"] = (a0, a1, a2, a3) =>
      (_uncompress = Module["_uncompress"] = wasmExports["uncompress"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _zlibCompileFlags = (Module["_zlibCompileFlags"] = () =>
      (_zlibCompileFlags = Module["_zlibCompileFlags"] =
        wasmExports["zlibCompileFlags"])());
    var _zError = (Module["_zError"] = (a0) =>
      (_zError = Module["_zError"] = wasmExports["zError"])(a0));
    var _BZ2_blockSort = (Module["_BZ2_blockSort"] = (a0) =>
      (_BZ2_blockSort = Module["_BZ2_blockSort"] =
        wasmExports["BZ2_blockSort"])(a0));
    var _BZ2_bz__AssertH__fail = (Module["_BZ2_bz__AssertH__fail"] = (a0) =>
      (_BZ2_bz__AssertH__fail = Module["_BZ2_bz__AssertH__fail"] =
        wasmExports["BZ2_bz__AssertH__fail"])(a0));
    var _BZ2_bzlibVersion = (Module["_BZ2_bzlibVersion"] = () =>
      (_BZ2_bzlibVersion = Module["_BZ2_bzlibVersion"] =
        wasmExports["BZ2_bzlibVersion"])());
    var _BZ2_compressBlock = (Module["_BZ2_compressBlock"] = (a0, a1) =>
      (_BZ2_compressBlock = Module["_BZ2_compressBlock"] =
        wasmExports["BZ2_compressBlock"])(a0, a1));
    var _BZ2_indexIntoF = (Module["_BZ2_indexIntoF"] = (a0, a1) =>
      (_BZ2_indexIntoF = Module["_BZ2_indexIntoF"] =
        wasmExports["BZ2_indexIntoF"])(a0, a1));
    var _BZ2_decompress = (Module["_BZ2_decompress"] = (a0) =>
      (_BZ2_decompress = Module["_BZ2_decompress"] =
        wasmExports["BZ2_decompress"])(a0));
    var _BZ2_bzWriteOpen = (Module["_BZ2_bzWriteOpen"] = (a0, a1, a2, a3, a4) =>
      (_BZ2_bzWriteOpen = Module["_BZ2_bzWriteOpen"] =
        wasmExports["BZ2_bzWriteOpen"])(a0, a1, a2, a3, a4));
    var _BZ2_bzWrite = (Module["_BZ2_bzWrite"] = (a0, a1, a2, a3) =>
      (_BZ2_bzWrite = Module["_BZ2_bzWrite"] = wasmExports["BZ2_bzWrite"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _BZ2_bzWriteClose = (Module["_BZ2_bzWriteClose"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_BZ2_bzWriteClose = Module["_BZ2_bzWriteClose"] =
        wasmExports["BZ2_bzWriteClose"])(a0, a1, a2, a3, a4));
    var _BZ2_bzWriteClose64 = (Module["_BZ2_bzWriteClose64"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
    ) =>
      (_BZ2_bzWriteClose64 = Module["_BZ2_bzWriteClose64"] =
        wasmExports["BZ2_bzWriteClose64"])(a0, a1, a2, a3, a4, a5, a6));
    var _BZ2_bzReadOpen = (Module["_BZ2_bzReadOpen"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_BZ2_bzReadOpen = Module["_BZ2_bzReadOpen"] =
        wasmExports["BZ2_bzReadOpen"])(a0, a1, a2, a3, a4, a5));
    var _BZ2_bzReadClose = (Module["_BZ2_bzReadClose"] = (a0, a1) =>
      (_BZ2_bzReadClose = Module["_BZ2_bzReadClose"] =
        wasmExports["BZ2_bzReadClose"])(a0, a1));
    var _BZ2_bzRead = (Module["_BZ2_bzRead"] = (a0, a1, a2, a3) =>
      (_BZ2_bzRead = Module["_BZ2_bzRead"] = wasmExports["BZ2_bzRead"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _fgetc = (Module["_fgetc"] = (a0) =>
      (_fgetc = Module["_fgetc"] = wasmExports["fgetc"])(a0));
    var _BZ2_bzReadGetUnused = (Module["_BZ2_bzReadGetUnused"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_BZ2_bzReadGetUnused = Module["_BZ2_bzReadGetUnused"] =
        wasmExports["BZ2_bzReadGetUnused"])(a0, a1, a2, a3));
    var _BZ2_bzBuffToBuffCompress = (Module["_BZ2_bzBuffToBuffCompress"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
    ) =>
      (_BZ2_bzBuffToBuffCompress = Module["_BZ2_bzBuffToBuffCompress"] =
        wasmExports["BZ2_bzBuffToBuffCompress"])(a0, a1, a2, a3, a4, a5, a6));
    var _BZ2_bzBuffToBuffDecompress = (Module["_BZ2_bzBuffToBuffDecompress"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_BZ2_bzBuffToBuffDecompress = Module["_BZ2_bzBuffToBuffDecompress"] =
        wasmExports["BZ2_bzBuffToBuffDecompress"])(a0, a1, a2, a3, a4, a5));
    var _BZ2_bzopen = (Module["_BZ2_bzopen"] = (a0, a1) =>
      (_BZ2_bzopen = Module["_BZ2_bzopen"] = wasmExports["BZ2_bzopen"])(
        a0,
        a1,
      ));
    var _BZ2_bzdopen = (Module["_BZ2_bzdopen"] = (a0, a1) =>
      (_BZ2_bzdopen = Module["_BZ2_bzdopen"] = wasmExports["BZ2_bzdopen"])(
        a0,
        a1,
      ));
    var _BZ2_bzread = (Module["_BZ2_bzread"] = (a0, a1, a2) =>
      (_BZ2_bzread = Module["_BZ2_bzread"] = wasmExports["BZ2_bzread"])(
        a0,
        a1,
        a2,
      ));
    var _BZ2_bzwrite = (Module["_BZ2_bzwrite"] = (a0, a1, a2) =>
      (_BZ2_bzwrite = Module["_BZ2_bzwrite"] = wasmExports["BZ2_bzwrite"])(
        a0,
        a1,
        a2,
      ));
    var _BZ2_bzflush = (Module["_BZ2_bzflush"] = (a0) =>
      (_BZ2_bzflush = Module["_BZ2_bzflush"] = wasmExports["BZ2_bzflush"])(a0));
    var _BZ2_bzclose = (Module["_BZ2_bzclose"] = (a0) =>
      (_BZ2_bzclose = Module["_BZ2_bzclose"] = wasmExports["BZ2_bzclose"])(a0));
    var _BZ2_bzerror = (Module["_BZ2_bzerror"] = (a0, a1) =>
      (_BZ2_bzerror = Module["_BZ2_bzerror"] = wasmExports["BZ2_bzerror"])(
        a0,
        a1,
      ));
    var _BZ2_bsInitWrite = (Module["_BZ2_bsInitWrite"] = (a0) =>
      (_BZ2_bsInitWrite = Module["_BZ2_bsInitWrite"] =
        wasmExports["BZ2_bsInitWrite"])(a0));
    var _BZ2_hbMakeCodeLengths = (Module["_BZ2_hbMakeCodeLengths"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_BZ2_hbMakeCodeLengths = Module["_BZ2_hbMakeCodeLengths"] =
        wasmExports["BZ2_hbMakeCodeLengths"])(a0, a1, a2, a3));
    var _BZ2_hbAssignCodes = (Module["_BZ2_hbAssignCodes"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_BZ2_hbAssignCodes = Module["_BZ2_hbAssignCodes"] =
        wasmExports["BZ2_hbAssignCodes"])(a0, a1, a2, a3, a4));
    var _BZ2_hbCreateDecodeTables = (Module["_BZ2_hbCreateDecodeTables"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
    ) =>
      (_BZ2_hbCreateDecodeTables = Module["_BZ2_hbCreateDecodeTables"] =
        wasmExports["BZ2_hbCreateDecodeTables"])(a0, a1, a2, a3, a4, a5, a6));
    var _emscripten_GetProcAddress = (Module["_emscripten_GetProcAddress"] = (
      a0,
    ) =>
      (_emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] =
        wasmExports["emscripten_GetProcAddress"])(a0));
    var _emscripten_webgl1_get_proc_address = (Module[
      "_emscripten_webgl1_get_proc_address"
    ] = (a0) =>
      (_emscripten_webgl1_get_proc_address = Module[
        "_emscripten_webgl1_get_proc_address"
      ] =
        wasmExports["emscripten_webgl1_get_proc_address"])(a0));
    var __webgl1_match_ext_proc_address_without_suffix = (Module[
      "__webgl1_match_ext_proc_address_without_suffix"
    ] = (a0) =>
      (__webgl1_match_ext_proc_address_without_suffix = Module[
        "__webgl1_match_ext_proc_address_without_suffix"
      ] =
        wasmExports["_webgl1_match_ext_proc_address_without_suffix"])(a0));
    var _emscripten_webgl_get_proc_address = (Module[
      "_emscripten_webgl_get_proc_address"
    ] = (a0) =>
      (_emscripten_webgl_get_proc_address = Module[
        "_emscripten_webgl_get_proc_address"
      ] =
        wasmExports["emscripten_webgl_get_proc_address"])(a0));
    var _SDL_GL_GetProcAddress = (Module["_SDL_GL_GetProcAddress"] = (a0) =>
      (_SDL_GL_GetProcAddress = Module["_SDL_GL_GetProcAddress"] =
        wasmExports["SDL_GL_GetProcAddress"])(a0));
    var _eglGetProcAddress = (Module["_eglGetProcAddress"] = (a0) =>
      (_eglGetProcAddress = Module["_eglGetProcAddress"] =
        wasmExports["eglGetProcAddress"])(a0));
    var _glfwGetProcAddress = (Module["_glfwGetProcAddress"] = (a0) =>
      (_glfwGetProcAddress = Module["_glfwGetProcAddress"] =
        wasmExports["glfwGetProcAddress"])(a0));
    var _getdate = (Module["_getdate"] = (a0) =>
      (_getdate = Module["_getdate"] = wasmExports["getdate"])(a0));
    var _stime = (Module["_stime"] = (a0) =>
      (_stime = Module["_stime"] = wasmExports["stime"])(a0));
    var _clock_getcpuclockid = (Module["_clock_getcpuclockid"] = (a0, a1) =>
      (_clock_getcpuclockid = Module["_clock_getcpuclockid"] =
        wasmExports["clock_getcpuclockid"])(a0, a1));
    var _getpwnam = (Module["_getpwnam"] = (a0) =>
      (_getpwnam = Module["_getpwnam"] = wasmExports["getpwnam"])(a0));
    var _getpwuid = (Module["_getpwuid"] = (a0) =>
      (_getpwuid = Module["_getpwuid"] = wasmExports["getpwuid"])(a0));
    var _getpwnam_r = (Module["_getpwnam_r"] = (a0, a1, a2, a3, a4) =>
      (_getpwnam_r = Module["_getpwnam_r"] = wasmExports["getpwnam_r"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _getpwuid_r = (Module["_getpwuid_r"] = (a0, a1, a2, a3, a4) =>
      (_getpwuid_r = Module["_getpwuid_r"] = wasmExports["getpwuid_r"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _setpwent = (Module["_setpwent"] = () =>
      (_setpwent = Module["_setpwent"] = wasmExports["setpwent"])());
    var _endpwent = (Module["_endpwent"] = () =>
      (_endpwent = Module["_endpwent"] = wasmExports["endpwent"])());
    var _getpwent = (Module["_getpwent"] = () =>
      (_getpwent = Module["_getpwent"] = wasmExports["getpwent"])());
    var _getgrnam = (Module["_getgrnam"] = (a0) =>
      (_getgrnam = Module["_getgrnam"] = wasmExports["getgrnam"])(a0));
    var _getgrgid = (Module["_getgrgid"] = (a0) =>
      (_getgrgid = Module["_getgrgid"] = wasmExports["getgrgid"])(a0));
    var _getgrnam_r = (Module["_getgrnam_r"] = (a0, a1, a2, a3, a4) =>
      (_getgrnam_r = Module["_getgrnam_r"] = wasmExports["getgrnam_r"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _getgrgid_r = (Module["_getgrgid_r"] = (a0, a1, a2, a3, a4) =>
      (_getgrgid_r = Module["_getgrgid_r"] = wasmExports["getgrgid_r"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _getgrent = (Module["_getgrent"] = () =>
      (_getgrent = Module["_getgrent"] = wasmExports["getgrent"])());
    var _endgrent = (Module["_endgrent"] = () =>
      (_endgrent = Module["_endgrent"] = wasmExports["endgrent"])());
    var _setgrent = (Module["_setgrent"] = () =>
      (_setgrent = Module["_setgrent"] = wasmExports["setgrent"])());
    var _flock = (Module["_flock"] = (a0, a1) =>
      (_flock = Module["_flock"] = wasmExports["flock"])(a0, a1));
    var _vfork = (Module["_vfork"] = () =>
      (_vfork = Module["_vfork"] = wasmExports["vfork"])());
    var _posix_spawn = (Module["_posix_spawn"] = (a0, a1, a2, a3, a4, a5) =>
      (_posix_spawn = Module["_posix_spawn"] = wasmExports["posix_spawn"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _popen = (Module["_popen"] = (a0, a1) =>
      (_popen = Module["_popen"] = wasmExports["popen"])(a0, a1));
    var _pclose = (Module["_pclose"] = (a0) =>
      (_pclose = Module["_pclose"] = wasmExports["pclose"])(a0));
    var _setgroups = (Module["_setgroups"] = (a0, a1) =>
      (_setgroups = Module["_setgroups"] = wasmExports["setgroups"])(a0, a1));
    var _sigaltstack = (Module["_sigaltstack"] = (a0, a1) =>
      (_sigaltstack = Module["_sigaltstack"] = wasmExports["sigaltstack"])(
        a0,
        a1,
      ));
    var ___syscall_uname = (Module["___syscall_uname"] = (a0) =>
      (___syscall_uname = Module["___syscall_uname"] =
        wasmExports["__syscall_uname"])(a0));
    var ___syscall_setpgid = (Module["___syscall_setpgid"] = (a0, a1) =>
      (___syscall_setpgid = Module["___syscall_setpgid"] =
        wasmExports["__syscall_setpgid"])(a0, a1));
    var ___syscall_sync = (Module["___syscall_sync"] = () =>
      (___syscall_sync = Module["___syscall_sync"] =
        wasmExports["__syscall_sync"])());
    var ___syscall_getsid = (Module["___syscall_getsid"] = (a0) =>
      (___syscall_getsid = Module["___syscall_getsid"] =
        wasmExports["__syscall_getsid"])(a0));
    var ___syscall_getpgid = (Module["___syscall_getpgid"] = (a0) =>
      (___syscall_getpgid = Module["___syscall_getpgid"] =
        wasmExports["__syscall_getpgid"])(a0));
    var ___syscall_getpid = (Module["___syscall_getpid"] = () =>
      (___syscall_getpid = Module["___syscall_getpid"] =
        wasmExports["__syscall_getpid"])());
    var ___syscall_getppid = (Module["___syscall_getppid"] = () =>
      (___syscall_getppid = Module["___syscall_getppid"] =
        wasmExports["__syscall_getppid"])());
    var ___syscall_linkat = (Module["___syscall_linkat"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___syscall_linkat = Module["___syscall_linkat"] =
        wasmExports["__syscall_linkat"])(a0, a1, a2, a3, a4));
    var ___syscall_getgroups32 = (Module["___syscall_getgroups32"] = (a0, a1) =>
      (___syscall_getgroups32 = Module["___syscall_getgroups32"] =
        wasmExports["__syscall_getgroups32"])(a0, a1));
    var ___syscall_setsid = (Module["___syscall_setsid"] = () =>
      (___syscall_setsid = Module["___syscall_setsid"] =
        wasmExports["__syscall_setsid"])());
    var ___syscall_umask = (Module["___syscall_umask"] = (a0) =>
      (___syscall_umask = Module["___syscall_umask"] =
        wasmExports["__syscall_umask"])(a0));
    var ___syscall_setrlimit = (Module["___syscall_setrlimit"] = (a0, a1) =>
      (___syscall_setrlimit = Module["___syscall_setrlimit"] =
        wasmExports["__syscall_setrlimit"])(a0, a1));
    var ___syscall_getrusage = (Module["___syscall_getrusage"] = (a0, a1) =>
      (___syscall_getrusage = Module["___syscall_getrusage"] =
        wasmExports["__syscall_getrusage"])(a0, a1));
    var ___syscall_getpriority = (Module["___syscall_getpriority"] = (a0, a1) =>
      (___syscall_getpriority = Module["___syscall_getpriority"] =
        wasmExports["__syscall_getpriority"])(a0, a1));
    var ___syscall_setpriority = (Module["___syscall_setpriority"] = (
      a0,
      a1,
      a2,
    ) =>
      (___syscall_setpriority = Module["___syscall_setpriority"] =
        wasmExports["__syscall_setpriority"])(a0, a1, a2));
    var ___syscall_setdomainname = (Module["___syscall_setdomainname"] = (
      a0,
      a1,
    ) =>
      (___syscall_setdomainname = Module["___syscall_setdomainname"] =
        wasmExports["__syscall_setdomainname"])(a0, a1));
    var ___syscall_getuid32 = (Module["___syscall_getuid32"] = () =>
      (___syscall_getuid32 = Module["___syscall_getuid32"] =
        wasmExports["__syscall_getuid32"])());
    var ___syscall_getgid32 = (Module["___syscall_getgid32"] = () =>
      (___syscall_getgid32 = Module["___syscall_getgid32"] =
        wasmExports["__syscall_getgid32"])());
    var ___syscall_geteuid32 = (Module["___syscall_geteuid32"] = () =>
      (___syscall_geteuid32 = Module["___syscall_geteuid32"] =
        wasmExports["__syscall_geteuid32"])());
    var ___syscall_getegid32 = (Module["___syscall_getegid32"] = () =>
      (___syscall_getegid32 = Module["___syscall_getegid32"] =
        wasmExports["__syscall_getegid32"])());
    var ___syscall_getresuid32 = (Module["___syscall_getresuid32"] = (
      a0,
      a1,
      a2,
    ) =>
      (___syscall_getresuid32 = Module["___syscall_getresuid32"] =
        wasmExports["__syscall_getresuid32"])(a0, a1, a2));
    var ___syscall_getresgid32 = (Module["___syscall_getresgid32"] = (
      a0,
      a1,
      a2,
    ) =>
      (___syscall_getresgid32 = Module["___syscall_getresgid32"] =
        wasmExports["__syscall_getresgid32"])(a0, a1, a2));
    var ___syscall_pause = (Module["___syscall_pause"] = () =>
      (___syscall_pause = Module["___syscall_pause"] =
        wasmExports["__syscall_pause"])());
    var ___syscall_madvise = (Module["___syscall_madvise"] = (a0, a1, a2) =>
      (___syscall_madvise = Module["___syscall_madvise"] =
        wasmExports["__syscall_madvise"])(a0, a1, a2));
    var ___syscall_mlock = (Module["___syscall_mlock"] = (a0, a1) =>
      (___syscall_mlock = Module["___syscall_mlock"] =
        wasmExports["__syscall_mlock"])(a0, a1));
    var ___syscall_munlock = (Module["___syscall_munlock"] = (a0, a1) =>
      (___syscall_munlock = Module["___syscall_munlock"] =
        wasmExports["__syscall_munlock"])(a0, a1));
    var ___syscall_mprotect = (Module["___syscall_mprotect"] = (a0, a1, a2) =>
      (___syscall_mprotect = Module["___syscall_mprotect"] =
        wasmExports["__syscall_mprotect"])(a0, a1, a2));
    var ___syscall_mremap = (Module["___syscall_mremap"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___syscall_mremap = Module["___syscall_mremap"] =
        wasmExports["__syscall_mremap"])(a0, a1, a2, a3, a4));
    var ___syscall_mlockall = (Module["___syscall_mlockall"] = (a0) =>
      (___syscall_mlockall = Module["___syscall_mlockall"] =
        wasmExports["__syscall_mlockall"])(a0));
    var ___syscall_munlockall = (Module["___syscall_munlockall"] = () =>
      (___syscall_munlockall = Module["___syscall_munlockall"] =
        wasmExports["__syscall_munlockall"])());
    var ___syscall_prlimit64 = (Module["___syscall_prlimit64"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (___syscall_prlimit64 = Module["___syscall_prlimit64"] =
        wasmExports["__syscall_prlimit64"])(a0, a1, a2, a3));
    var ___syscall_ugetrlimit = (Module["___syscall_ugetrlimit"] = (a0, a1) =>
      (___syscall_ugetrlimit = Module["___syscall_ugetrlimit"] =
        wasmExports["__syscall_ugetrlimit"])(a0, a1));
    var ___syscall_setsockopt = (Module["___syscall_setsockopt"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (___syscall_setsockopt = Module["___syscall_setsockopt"] =
        wasmExports["__syscall_setsockopt"])(a0, a1, a2, a3, a4, a5));
    var ___syscall_acct = (Module["___syscall_acct"] = (a0) =>
      (___syscall_acct = Module["___syscall_acct"] =
        wasmExports["__syscall_acct"])(a0));
    var ___syscall_mincore = (Module["___syscall_mincore"] = (a0, a1, a2) =>
      (___syscall_mincore = Module["___syscall_mincore"] =
        wasmExports["__syscall_mincore"])(a0, a1, a2));
    var ___syscall_pipe2 = (Module["___syscall_pipe2"] = (a0, a1) =>
      (___syscall_pipe2 = Module["___syscall_pipe2"] =
        wasmExports["__syscall_pipe2"])(a0, a1));
    var ___syscall_pselect6 = (Module["___syscall_pselect6"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (___syscall_pselect6 = Module["___syscall_pselect6"] =
        wasmExports["__syscall_pselect6"])(a0, a1, a2, a3, a4, a5));
    var ___syscall_recvmmsg = (Module["___syscall_recvmmsg"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___syscall_recvmmsg = Module["___syscall_recvmmsg"] =
        wasmExports["__syscall_recvmmsg"])(a0, a1, a2, a3, a4));
    var ___syscall_sendmmsg = (Module["___syscall_sendmmsg"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___syscall_sendmmsg = Module["___syscall_sendmmsg"] =
        wasmExports["__syscall_sendmmsg"])(a0, a1, a2, a3, a4));
    var ___syscall_shutdown = (Module["___syscall_shutdown"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (___syscall_shutdown = Module["___syscall_shutdown"] =
        wasmExports["__syscall_shutdown"])(a0, a1, a2, a3, a4, a5));
    var ___syscall_socketpair = (Module["___syscall_socketpair"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (___syscall_socketpair = Module["___syscall_socketpair"] =
        wasmExports["__syscall_socketpair"])(a0, a1, a2, a3, a4, a5));
    var ___syscall_wait4 = (Module["___syscall_wait4"] = (a0, a1, a2, a3) =>
      (___syscall_wait4 = Module["___syscall_wait4"] =
        wasmExports["__syscall_wait4"])(a0, a1, a2, a3));
    var _atexit = (Module["_atexit"] = (a0) =>
      (_atexit = Module["_atexit"] = wasmExports["atexit"])(a0));
    var ___cxa_atexit = (Module["___cxa_atexit"] = (a0, a1, a2) =>
      (___cxa_atexit = Module["___cxa_atexit"] = wasmExports["__cxa_atexit"])(
        a0,
        a1,
        a2,
      ));
    var ___cxa_finalize = (Module["___cxa_finalize"] = (a0) =>
      (___cxa_finalize = Module["___cxa_finalize"] =
        wasmExports["__cxa_finalize"])(a0));
    var __Exit = (Module["__Exit"] = (a0) =>
      (__Exit = Module["__Exit"] = wasmExports["_Exit"])(a0));
    var _cosf = (Module["_cosf"] = (a0) =>
      (_cosf = Module["_cosf"] = wasmExports["cosf"])(a0));
    var _sinf = (Module["_sinf"] = (a0) =>
      (_sinf = Module["_sinf"] = wasmExports["sinf"])(a0));
    var _expf = (Module["_expf"] = (a0) =>
      (_expf = Module["_expf"] = wasmExports["expf"])(a0));
    var ___multf3 = (Module["___multf3"] = (a0, a1, a2, a3, a4) =>
      (___multf3 = Module["___multf3"] = wasmExports["__multf3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___addtf3 = (Module["___addtf3"] = (a0, a1, a2, a3, a4) =>
      (___addtf3 = Module["___addtf3"] = wasmExports["__addtf3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___subtf3 = (Module["___subtf3"] = (a0, a1, a2, a3, a4) =>
      (___subtf3 = Module["___subtf3"] = wasmExports["__subtf3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___ctype_b_loc = (Module["___ctype_b_loc"] = () =>
      (___ctype_b_loc = Module["___ctype_b_loc"] =
        wasmExports["__ctype_b_loc"])());
    var ___ctype_get_mb_cur_max = (Module["___ctype_get_mb_cur_max"] = () =>
      (___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] =
        wasmExports["__ctype_get_mb_cur_max"])());
    var ___get_tp = (Module["___get_tp"] = () =>
      (___get_tp = Module["___get_tp"] = wasmExports["__get_tp"])());
    var ___ctype_tolower_loc = (Module["___ctype_tolower_loc"] = () =>
      (___ctype_tolower_loc = Module["___ctype_tolower_loc"] =
        wasmExports["__ctype_tolower_loc"])());
    var ___ctype_toupper_loc = (Module["___ctype_toupper_loc"] = () =>
      (___ctype_toupper_loc = Module["___ctype_toupper_loc"] =
        wasmExports["__ctype_toupper_loc"])());
    var ___emscripten_environ_constructor = (Module[
      "___emscripten_environ_constructor"
    ] = () =>
      (___emscripten_environ_constructor = Module[
        "___emscripten_environ_constructor"
      ] =
        wasmExports["__emscripten_environ_constructor"])());
    var _emscripten_builtin_malloc = (Module["_emscripten_builtin_malloc"] = (
      a0,
    ) =>
      (_emscripten_builtin_malloc = Module["_emscripten_builtin_malloc"] =
        wasmExports["emscripten_builtin_malloc"])(a0));
    var ___flt_rounds = (Module["___flt_rounds"] = () =>
      (___flt_rounds = Module["___flt_rounds"] =
        wasmExports["__flt_rounds"])());
    var _fegetround = (Module["_fegetround"] = () =>
      (_fegetround = Module["_fegetround"] = wasmExports["fegetround"])());
    var ___fmodeflags = (Module["___fmodeflags"] = (a0) =>
      (___fmodeflags = Module["___fmodeflags"] = wasmExports["__fmodeflags"])(
        a0,
      ));
    var ___fpclassify = (Module["___fpclassify"] = (a0) =>
      (___fpclassify = Module["___fpclassify"] = wasmExports["__fpclassify"])(
        a0,
      ));
    var ___fpclassifyf = (Module["___fpclassifyf"] = (a0) =>
      (___fpclassifyf = Module["___fpclassifyf"] =
        wasmExports["__fpclassifyf"])(a0));
    var ___fpclassifyl = (Module["___fpclassifyl"] = (a0, a1) =>
      (___fpclassifyl = Module["___fpclassifyl"] =
        wasmExports["__fpclassifyl"])(a0, a1));
    var ___divtf3 = (Module["___divtf3"] = (a0, a1, a2, a3, a4) =>
      (___divtf3 = Module["___divtf3"] = wasmExports["__divtf3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___mo_lookup = (Module["___mo_lookup"] = (a0, a1, a2) =>
      (___mo_lookup = Module["___mo_lookup"] = wasmExports["__mo_lookup"])(
        a0,
        a1,
        a2,
      ));
    var ___overflow = (Module["___overflow"] = (a0, a1) =>
      (___overflow = Module["___overflow"] = wasmExports["__overflow"])(
        a0,
        a1,
      ));
    var _scalbn = (Module["_scalbn"] = (a0, a1) =>
      (_scalbn = Module["_scalbn"] = wasmExports["scalbn"])(a0, a1));
    var _floor = (Module["_floor"] = (a0) =>
      (_floor = Module["_floor"] = wasmExports["floor"])(a0));
    var ___lttf2 = (Module["___lttf2"] = (a0, a1, a2, a3) =>
      (___lttf2 = Module["___lttf2"] = wasmExports["__lttf2"])(a0, a1, a2, a3));
    var ___fixtfdi = (Module["___fixtfdi"] = (a0, a1) =>
      (___fixtfdi = Module["___fixtfdi"] = wasmExports["__fixtfdi"])(a0, a1));
    var ___gttf2 = (Module["___gttf2"] = (a0, a1, a2, a3) =>
      (___gttf2 = Module["___gttf2"] = wasmExports["__gttf2"])(a0, a1, a2, a3));
    var ___fixtfsi = (Module["___fixtfsi"] = (a0, a1) =>
      (___fixtfsi = Module["___fixtfsi"] = wasmExports["__fixtfsi"])(a0, a1));
    var ___floatsitf = (Module["___floatsitf"] = (a0, a1) =>
      (___floatsitf = Module["___floatsitf"] = wasmExports["__floatsitf"])(
        a0,
        a1,
      ));
    var ___signbit = (Module["___signbit"] = (a0) =>
      (___signbit = Module["___signbit"] = wasmExports["__signbit"])(a0));
    var ___signbitf = (Module["___signbitf"] = (a0) =>
      (___signbitf = Module["___signbitf"] = wasmExports["__signbitf"])(a0));
    var ___signbitl = (Module["___signbitl"] = (a0, a1) =>
      (___signbitl = Module["___signbitl"] = wasmExports["__signbitl"])(
        a0,
        a1,
      ));
    var ___wasi_syscall_ret = (Module["___wasi_syscall_ret"] = (a0) =>
      (___wasi_syscall_ret = Module["___wasi_syscall_ret"] =
        wasmExports["__wasi_syscall_ret"])(a0));
    var ___synccall = (Module["___synccall"] = (a0, a1) =>
      (___synccall = Module["___synccall"] = wasmExports["__synccall"])(
        a0,
        a1,
      ));
    var _fabsl = (Module["_fabsl"] = (a0, a1, a2) =>
      (_fabsl = Module["_fabsl"] = wasmExports["fabsl"])(a0, a1, a2));
    var ___getf2 = (Module["___getf2"] = (a0, a1, a2, a3) =>
      (___getf2 = Module["___getf2"] = wasmExports["__getf2"])(a0, a1, a2, a3));
    var ___uflow = (Module["___uflow"] = (a0) =>
      (___uflow = Module["___uflow"] = wasmExports["__uflow"])(a0));
    var ___fxstat = (Module["___fxstat"] = (a0, a1, a2) =>
      (___fxstat = Module["___fxstat"] = wasmExports["__fxstat"])(a0, a1, a2));
    var ___fxstatat = (Module["___fxstatat"] = (a0, a1, a2, a3, a4) =>
      (___fxstatat = Module["___fxstatat"] = wasmExports["__fxstatat"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___lxstat = (Module["___lxstat"] = (a0, a1, a2) =>
      (___lxstat = Module["___lxstat"] = wasmExports["__lxstat"])(a0, a1, a2));
    var ___xstat = (Module["___xstat"] = (a0, a1, a2) =>
      (___xstat = Module["___xstat"] = wasmExports["__xstat"])(a0, a1, a2));
    var ___xmknod = (Module["___xmknod"] = (a0, a1, a2, a3) =>
      (___xmknod = Module["___xmknod"] = wasmExports["__xmknod"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _mknod = (Module["_mknod"] = (a0, a1, a2) =>
      (_mknod = Module["_mknod"] = wasmExports["mknod"])(a0, a1, a2));
    var ___xmknodat = (Module["___xmknodat"] = (a0, a1, a2, a3, a4) =>
      (___xmknodat = Module["___xmknodat"] = wasmExports["__xmknodat"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _mknodat = (Module["_mknodat"] = (a0, a1, a2, a3) =>
      (_mknodat = Module["_mknodat"] = wasmExports["mknodat"])(a0, a1, a2, a3));
    var _a64l = (Module["_a64l"] = (a0) =>
      (_a64l = Module["_a64l"] = wasmExports["a64l"])(a0));
    var _l64a = (Module["_l64a"] = (a0) =>
      (_l64a = Module["_l64a"] = wasmExports["l64a"])(a0));
    var _abs = (Module["_abs"] = (a0) =>
      (_abs = Module["_abs"] = wasmExports["abs"])(a0));
    var _acct = (Module["_acct"] = (a0) =>
      (_acct = Module["_acct"] = wasmExports["acct"])(a0));
    var _acosf = (Module["_acosf"] = (a0) =>
      (_acosf = Module["_acosf"] = wasmExports["acosf"])(a0));
    var _sqrtf = (Module["_sqrtf"] = (a0) =>
      (_sqrtf = Module["_sqrtf"] = wasmExports["sqrtf"])(a0));
    var _acoshf = (Module["_acoshf"] = (a0) =>
      (_acoshf = Module["_acoshf"] = wasmExports["acoshf"])(a0));
    var _log1pf = (Module["_log1pf"] = (a0) =>
      (_log1pf = Module["_log1pf"] = wasmExports["log1pf"])(a0));
    var _logf = (Module["_logf"] = (a0) =>
      (_logf = Module["_logf"] = wasmExports["logf"])(a0));
    var _acoshl = (Module["_acoshl"] = (a0, a1, a2) =>
      (_acoshl = Module["_acoshl"] = wasmExports["acoshl"])(a0, a1, a2));
    var _acosl = (Module["_acosl"] = (a0, a1, a2) =>
      (_acosl = Module["_acosl"] = wasmExports["acosl"])(a0, a1, a2));
    var ___eqtf2 = (Module["___eqtf2"] = (a0, a1, a2, a3) =>
      (___eqtf2 = Module["___eqtf2"] = wasmExports["__eqtf2"])(a0, a1, a2, a3));
    var ___netf2 = (Module["___netf2"] = (a0, a1, a2, a3) =>
      (___netf2 = Module["___netf2"] = wasmExports["__netf2"])(a0, a1, a2, a3));
    var _sqrtl = (Module["_sqrtl"] = (a0, a1, a2) =>
      (_sqrtl = Module["_sqrtl"] = wasmExports["sqrtl"])(a0, a1, a2));
    var _alarm = (Module["_alarm"] = (a0) =>
      (_alarm = Module["_alarm"] = wasmExports["alarm"])(a0));
    var _setitimer = (Module["_setitimer"] = (a0, a1, a2) =>
      (_setitimer = Module["_setitimer"] = wasmExports["setitimer"])(
        a0,
        a1,
        a2,
      ));
    var _aligned_alloc = (Module["_aligned_alloc"] = (a0, a1) =>
      (_aligned_alloc = Module["_aligned_alloc"] =
        wasmExports["aligned_alloc"])(a0, a1));
    var _posix_memalign = (Module["_posix_memalign"] = (a0, a1, a2) =>
      (_posix_memalign = Module["_posix_memalign"] =
        wasmExports["posix_memalign"])(a0, a1, a2));
    var _alphasort = (Module["_alphasort"] = (a0, a1) =>
      (_alphasort = Module["_alphasort"] = wasmExports["alphasort"])(a0, a1));
    var _strcoll = (Module["_strcoll"] = (a0, a1) =>
      (_strcoll = Module["_strcoll"] = wasmExports["strcoll"])(a0, a1));
    var _asctime = (Module["_asctime"] = (a0) =>
      (_asctime = Module["_asctime"] = wasmExports["asctime"])(a0));
    var ___nl_langinfo_l = (Module["___nl_langinfo_l"] = (a0, a1) =>
      (___nl_langinfo_l = Module["___nl_langinfo_l"] =
        wasmExports["__nl_langinfo_l"])(a0, a1));
    var _asctime_r = (Module["_asctime_r"] = (a0, a1) =>
      (_asctime_r = Module["_asctime_r"] = wasmExports["asctime_r"])(a0, a1));
    var _asinf = (Module["_asinf"] = (a0) =>
      (_asinf = Module["_asinf"] = wasmExports["asinf"])(a0));
    var _fabsf = (Module["_fabsf"] = (a0) =>
      (_fabsf = Module["_fabsf"] = wasmExports["fabsf"])(a0));
    var _asinhf = (Module["_asinhf"] = (a0) =>
      (_asinhf = Module["_asinhf"] = wasmExports["asinhf"])(a0));
    var _asinhl = (Module["_asinhl"] = (a0, a1, a2) =>
      (_asinhl = Module["_asinhl"] = wasmExports["asinhl"])(a0, a1, a2));
    var _asinl = (Module["_asinl"] = (a0, a1, a2) =>
      (_asinl = Module["_asinl"] = wasmExports["asinl"])(a0, a1, a2));
    var _asprintf = (Module["_asprintf"] = (a0, a1, a2) =>
      (_asprintf = Module["_asprintf"] = wasmExports["asprintf"])(a0, a1, a2));
    var _vasprintf = (Module["_vasprintf"] = (a0, a1, a2) =>
      (_vasprintf = Module["_vasprintf"] = wasmExports["vasprintf"])(
        a0,
        a1,
        a2,
      ));
    var ___lock = (Module["___lock"] = (a0) =>
      (___lock = Module["___lock"] = wasmExports["__lock"])(a0));
    var ___unlock = (Module["___unlock"] = (a0) =>
      (___unlock = Module["___unlock"] = wasmExports["__unlock"])(a0));
    var _at_quick_exit = (Module["_at_quick_exit"] = (a0) =>
      (_at_quick_exit = Module["_at_quick_exit"] =
        wasmExports["at_quick_exit"])(a0));
    var _atan2f = (Module["_atan2f"] = (a0, a1) =>
      (_atan2f = Module["_atan2f"] = wasmExports["atan2f"])(a0, a1));
    var _atanf = (Module["_atanf"] = (a0) =>
      (_atanf = Module["_atanf"] = wasmExports["atanf"])(a0));
    var _atan2l = (Module["_atan2l"] = (a0, a1, a2, a3, a4) =>
      (_atan2l = Module["_atan2l"] = wasmExports["atan2l"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _atanl = (Module["_atanl"] = (a0, a1, a2) =>
      (_atanl = Module["_atanl"] = wasmExports["atanl"])(a0, a1, a2));
    var _atanhf = (Module["_atanhf"] = (a0) =>
      (_atanhf = Module["_atanhf"] = wasmExports["atanhf"])(a0));
    var _atanhl = (Module["_atanhl"] = (a0, a1, a2) =>
      (_atanhl = Module["_atanhl"] = wasmExports["atanhl"])(a0, a1, a2));
    var _log1pl = (Module["_log1pl"] = (a0, a1, a2) =>
      (_log1pl = Module["_log1pl"] = wasmExports["log1pl"])(a0, a1, a2));
    var ____cxa_finalize = (Module["____cxa_finalize"] = (a0) =>
      (____cxa_finalize = Module["____cxa_finalize"] =
        wasmExports["___cxa_finalize"])(a0));
    var ____cxa_atexit = (Module["____cxa_atexit"] = (a0, a1, a2) =>
      (____cxa_atexit = Module["____cxa_atexit"] =
        wasmExports["___cxa_atexit"])(a0, a1, a2));
    var ___libc_calloc = (Module["___libc_calloc"] = (a0, a1) =>
      (___libc_calloc = Module["___libc_calloc"] =
        wasmExports["__libc_calloc"])(a0, a1));
    var ___atexit = (Module["___atexit"] = (a0) =>
      (___atexit = Module["___atexit"] = wasmExports["__atexit"])(a0));
    var _atof = (Module["_atof"] = (a0) =>
      (_atof = Module["_atof"] = wasmExports["atof"])(a0));
    var _strtod = (Module["_strtod"] = (a0, a1) =>
      (_strtod = Module["_strtod"] = wasmExports["strtod"])(a0, a1));
    var _atoi = (Module["_atoi"] = (a0) =>
      (_atoi = Module["_atoi"] = wasmExports["atoi"])(a0));
    var _isspace = (Module["_isspace"] = (a0) =>
      (_isspace = Module["_isspace"] = wasmExports["isspace"])(a0));
    var _isdigit = (Module["_isdigit"] = (a0) =>
      (_isdigit = Module["_isdigit"] = wasmExports["isdigit"])(a0));
    var _atol = (Module["_atol"] = (a0) =>
      (_atol = Module["_atol"] = wasmExports["atol"])(a0));
    var _atoll = (Module["_atoll"] = (a0) =>
      (_atoll = Module["_atoll"] = wasmExports["atoll"])(a0));
    var _basename = (Module["_basename"] = (a0) =>
      (_basename = Module["_basename"] = wasmExports["basename"])(a0));
    var ___xpg_basename = (Module["___xpg_basename"] = (a0) =>
      (___xpg_basename = Module["___xpg_basename"] =
        wasmExports["__xpg_basename"])(a0));
    var _bcmp = (Module["_bcmp"] = (a0, a1, a2) =>
      (_bcmp = Module["_bcmp"] = wasmExports["bcmp"])(a0, a1, a2));
    var _bcopy = (Module["_bcopy"] = (a0, a1, a2) =>
      (_bcopy = Module["_bcopy"] = wasmExports["bcopy"])(a0, a1, a2));
    var _strcasecmp = (Module["_strcasecmp"] = (a0, a1) =>
      (_strcasecmp = Module["_strcasecmp"] = wasmExports["strcasecmp"])(
        a0,
        a1,
      ));
    var _bsearch = (Module["_bsearch"] = (a0, a1, a2, a3, a4) =>
      (_bsearch = Module["_bsearch"] = wasmExports["bsearch"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _btowc = (Module["_btowc"] = (a0) =>
      (_btowc = Module["_btowc"] = wasmExports["btowc"])(a0));
    var _bzero = (Module["_bzero"] = (a0, a1) =>
      (_bzero = Module["_bzero"] = wasmExports["bzero"])(a0, a1));
    var _c16rtomb = (Module["_c16rtomb"] = (a0, a1, a2) =>
      (_c16rtomb = Module["_c16rtomb"] = wasmExports["c16rtomb"])(a0, a1, a2));
    var _wcrtomb = (Module["_wcrtomb"] = (a0, a1, a2) =>
      (_wcrtomb = Module["_wcrtomb"] = wasmExports["wcrtomb"])(a0, a1, a2));
    var _c32rtomb = (Module["_c32rtomb"] = (a0, a1, a2) =>
      (_c32rtomb = Module["_c32rtomb"] = wasmExports["c32rtomb"])(a0, a1, a2));
    var _cabs = (Module["_cabs"] = (a0) =>
      (_cabs = Module["_cabs"] = wasmExports["cabs"])(a0));
    var _cabsf = (Module["_cabsf"] = (a0) =>
      (_cabsf = Module["_cabsf"] = wasmExports["cabsf"])(a0));
    var _hypotf = (Module["_hypotf"] = (a0, a1) =>
      (_hypotf = Module["_hypotf"] = wasmExports["hypotf"])(a0, a1));
    var _cabsl = (Module["_cabsl"] = (a0, a1) =>
      (_cabsl = Module["_cabsl"] = wasmExports["cabsl"])(a0, a1));
    var _hypotl = (Module["_hypotl"] = (a0, a1, a2, a3, a4) =>
      (_hypotl = Module["_hypotl"] = wasmExports["hypotl"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _cacos = (Module["_cacos"] = (a0, a1) =>
      (_cacos = Module["_cacos"] = wasmExports["cacos"])(a0, a1));
    var _casin = (Module["_casin"] = (a0, a1) =>
      (_casin = Module["_casin"] = wasmExports["casin"])(a0, a1));
    var _cacosf = (Module["_cacosf"] = (a0, a1) =>
      (_cacosf = Module["_cacosf"] = wasmExports["cacosf"])(a0, a1));
    var _casinf = (Module["_casinf"] = (a0, a1) =>
      (_casinf = Module["_casinf"] = wasmExports["casinf"])(a0, a1));
    var _cacosh = (Module["_cacosh"] = (a0, a1) =>
      (_cacosh = Module["_cacosh"] = wasmExports["cacosh"])(a0, a1));
    var _cacoshf = (Module["_cacoshf"] = (a0, a1) =>
      (_cacoshf = Module["_cacoshf"] = wasmExports["cacoshf"])(a0, a1));
    var _cacoshl = (Module["_cacoshl"] = (a0, a1) =>
      (_cacoshl = Module["_cacoshl"] = wasmExports["cacoshl"])(a0, a1));
    var _cacosl = (Module["_cacosl"] = (a0, a1) =>
      (_cacosl = Module["_cacosl"] = wasmExports["cacosl"])(a0, a1));
    var _casinl = (Module["_casinl"] = (a0, a1) =>
      (_casinl = Module["_casinl"] = wasmExports["casinl"])(a0, a1));
    var _call_once = (Module["_call_once"] = (a0, a1) =>
      (_call_once = Module["_call_once"] = wasmExports["call_once"])(a0, a1));
    var _carg = (Module["_carg"] = (a0) =>
      (_carg = Module["_carg"] = wasmExports["carg"])(a0));
    var _cargf = (Module["_cargf"] = (a0) =>
      (_cargf = Module["_cargf"] = wasmExports["cargf"])(a0));
    var _cargl = (Module["_cargl"] = (a0, a1) =>
      (_cargl = Module["_cargl"] = wasmExports["cargl"])(a0, a1));
    var _csqrt = (Module["_csqrt"] = (a0, a1) =>
      (_csqrt = Module["_csqrt"] = wasmExports["csqrt"])(a0, a1));
    var _clog = (Module["_clog"] = (a0, a1) =>
      (_clog = Module["_clog"] = wasmExports["clog"])(a0, a1));
    var _csqrtf = (Module["_csqrtf"] = (a0, a1) =>
      (_csqrtf = Module["_csqrtf"] = wasmExports["csqrtf"])(a0, a1));
    var _clogf = (Module["_clogf"] = (a0, a1) =>
      (_clogf = Module["_clogf"] = wasmExports["clogf"])(a0, a1));
    var _casinh = (Module["_casinh"] = (a0, a1) =>
      (_casinh = Module["_casinh"] = wasmExports["casinh"])(a0, a1));
    var _casinhf = (Module["_casinhf"] = (a0, a1) =>
      (_casinhf = Module["_casinhf"] = wasmExports["casinhf"])(a0, a1));
    var _casinhl = (Module["_casinhl"] = (a0, a1) =>
      (_casinhl = Module["_casinhl"] = wasmExports["casinhl"])(a0, a1));
    var _csqrtl = (Module["_csqrtl"] = (a0, a1) =>
      (_csqrtl = Module["_csqrtl"] = wasmExports["csqrtl"])(a0, a1));
    var _clogl = (Module["_clogl"] = (a0, a1) =>
      (_clogl = Module["_clogl"] = wasmExports["clogl"])(a0, a1));
    var _catan = (Module["_catan"] = (a0, a1) =>
      (_catan = Module["_catan"] = wasmExports["catan"])(a0, a1));
    var _catanf = (Module["_catanf"] = (a0, a1) =>
      (_catanf = Module["_catanf"] = wasmExports["catanf"])(a0, a1));
    var _catanh = (Module["_catanh"] = (a0, a1) =>
      (_catanh = Module["_catanh"] = wasmExports["catanh"])(a0, a1));
    var _catanhf = (Module["_catanhf"] = (a0, a1) =>
      (_catanhf = Module["_catanhf"] = wasmExports["catanhf"])(a0, a1));
    var _catanhl = (Module["_catanhl"] = (a0, a1) =>
      (_catanhl = Module["_catanhl"] = wasmExports["catanhl"])(a0, a1));
    var _catanl = (Module["_catanl"] = (a0, a1) =>
      (_catanl = Module["_catanl"] = wasmExports["catanl"])(a0, a1));
    var _logl = (Module["_logl"] = (a0, a1, a2) =>
      (_logl = Module["_logl"] = wasmExports["logl"])(a0, a1, a2));
    var ___trunctfsf2 = (Module["___trunctfsf2"] = (a0, a1) =>
      (___trunctfsf2 = Module["___trunctfsf2"] = wasmExports["__trunctfsf2"])(
        a0,
        a1,
      ));
    var ___extendsftf2 = (Module["___extendsftf2"] = (a0, a1) =>
      (___extendsftf2 = Module["___extendsftf2"] =
        wasmExports["__extendsftf2"])(a0, a1));
    var _catclose = (Module["_catclose"] = (a0) =>
      (_catclose = Module["_catclose"] = wasmExports["catclose"])(a0));
    var _catgets = (Module["_catgets"] = (a0, a1, a2, a3) =>
      (_catgets = Module["_catgets"] = wasmExports["catgets"])(a0, a1, a2, a3));
    var _catopen = (Module["_catopen"] = (a0, a1) =>
      (_catopen = Module["_catopen"] = wasmExports["catopen"])(a0, a1));
    var _cbrtf = (Module["_cbrtf"] = (a0) =>
      (_cbrtf = Module["_cbrtf"] = wasmExports["cbrtf"])(a0));
    var _cbrtl = (Module["_cbrtl"] = (a0, a1, a2) =>
      (_cbrtl = Module["_cbrtl"] = wasmExports["cbrtl"])(a0, a1, a2));
    var _ccos = (Module["_ccos"] = (a0, a1) =>
      (_ccos = Module["_ccos"] = wasmExports["ccos"])(a0, a1));
    var _ccosh = (Module["_ccosh"] = (a0, a1) =>
      (_ccosh = Module["_ccosh"] = wasmExports["ccosh"])(a0, a1));
    var _ccosf = (Module["_ccosf"] = (a0, a1) =>
      (_ccosf = Module["_ccosf"] = wasmExports["ccosf"])(a0, a1));
    var _ccoshf = (Module["_ccoshf"] = (a0, a1) =>
      (_ccoshf = Module["_ccoshf"] = wasmExports["ccoshf"])(a0, a1));
    var _coshf = (Module["_coshf"] = (a0) =>
      (_coshf = Module["_coshf"] = wasmExports["coshf"])(a0));
    var _sinhf = (Module["_sinhf"] = (a0) =>
      (_sinhf = Module["_sinhf"] = wasmExports["sinhf"])(a0));
    var _copysignf = (Module["_copysignf"] = (a0, a1) =>
      (_copysignf = Module["_copysignf"] = wasmExports["copysignf"])(a0, a1));
    var _ccoshl = (Module["_ccoshl"] = (a0, a1) =>
      (_ccoshl = Module["_ccoshl"] = wasmExports["ccoshl"])(a0, a1));
    var _ccosl = (Module["_ccosl"] = (a0, a1) =>
      (_ccosl = Module["_ccosl"] = wasmExports["ccosl"])(a0, a1));
    var _ceil = (Module["_ceil"] = (a0) =>
      (_ceil = Module["_ceil"] = wasmExports["ceil"])(a0));
    var _ceilf = (Module["_ceilf"] = (a0) =>
      (_ceilf = Module["_ceilf"] = wasmExports["ceilf"])(a0));
    var _ceill = (Module["_ceill"] = (a0, a1, a2) =>
      (_ceill = Module["_ceill"] = wasmExports["ceill"])(a0, a1, a2));
    var _cexp = (Module["_cexp"] = (a0, a1) =>
      (_cexp = Module["_cexp"] = wasmExports["cexp"])(a0, a1));
    var _cexpf = (Module["_cexpf"] = (a0, a1) =>
      (_cexpf = Module["_cexpf"] = wasmExports["cexpf"])(a0, a1));
    var _cexpl = (Module["_cexpl"] = (a0, a1) =>
      (_cexpl = Module["_cexpl"] = wasmExports["cexpl"])(a0, a1));
    var _cfgetospeed = (Module["_cfgetospeed"] = (a0) =>
      (_cfgetospeed = Module["_cfgetospeed"] = wasmExports["cfgetospeed"])(a0));
    var _cfgetispeed = (Module["_cfgetispeed"] = (a0) =>
      (_cfgetispeed = Module["_cfgetispeed"] = wasmExports["cfgetispeed"])(a0));
    var _cfmakeraw = (Module["_cfmakeraw"] = (a0) =>
      (_cfmakeraw = Module["_cfmakeraw"] = wasmExports["cfmakeraw"])(a0));
    var _cfsetospeed = (Module["_cfsetospeed"] = (a0, a1) =>
      (_cfsetospeed = Module["_cfsetospeed"] = wasmExports["cfsetospeed"])(
        a0,
        a1,
      ));
    var _cfsetispeed = (Module["_cfsetispeed"] = (a0, a1) =>
      (_cfsetispeed = Module["_cfsetispeed"] = wasmExports["cfsetispeed"])(
        a0,
        a1,
      ));
    var _cfsetspeed = (Module["_cfsetspeed"] = (a0, a1) =>
      (_cfsetspeed = Module["_cfsetspeed"] = wasmExports["cfsetspeed"])(
        a0,
        a1,
      ));
    var _cimag = (Module["_cimag"] = (a0) =>
      (_cimag = Module["_cimag"] = wasmExports["cimag"])(a0));
    var _cimagf = (Module["_cimagf"] = (a0) =>
      (_cimagf = Module["_cimagf"] = wasmExports["cimagf"])(a0));
    var _cimagl = (Module["_cimagl"] = (a0, a1) =>
      (_cimagl = Module["_cimagl"] = wasmExports["cimagl"])(a0, a1));
    var _clearenv = (Module["_clearenv"] = () =>
      (_clearenv = Module["_clearenv"] = wasmExports["clearenv"])());
    var _clearerr_unlocked = (Module["_clearerr_unlocked"] = (a0) =>
      (_clearerr_unlocked = Module["_clearerr_unlocked"] =
        wasmExports["clearerr_unlocked"])(a0));
    var _emscripten_thread_sleep = (Module["_emscripten_thread_sleep"] = (a0) =>
      (_emscripten_thread_sleep = Module["_emscripten_thread_sleep"] =
        wasmExports["emscripten_thread_sleep"])(a0));
    var _cnd_broadcast = (Module["_cnd_broadcast"] = (a0) =>
      (_cnd_broadcast = Module["_cnd_broadcast"] =
        wasmExports["cnd_broadcast"])(a0));
    var _cnd_destroy = (Module["_cnd_destroy"] = (a0) =>
      (_cnd_destroy = Module["_cnd_destroy"] = wasmExports["cnd_destroy"])(a0));
    var _cnd_init = (Module["_cnd_init"] = (a0) =>
      (_cnd_init = Module["_cnd_init"] = wasmExports["cnd_init"])(a0));
    var _cnd_signal = (Module["_cnd_signal"] = (a0) =>
      (_cnd_signal = Module["_cnd_signal"] = wasmExports["cnd_signal"])(a0));
    var _cnd_timedwait = (Module["_cnd_timedwait"] = (a0, a1, a2) =>
      (_cnd_timedwait = Module["_cnd_timedwait"] =
        wasmExports["cnd_timedwait"])(a0, a1, a2));
    var _cnd_wait = (Module["_cnd_wait"] = (a0, a1) =>
      (_cnd_wait = Module["_cnd_wait"] = wasmExports["cnd_wait"])(a0, a1));
    var _conj = (Module["_conj"] = (a0, a1) =>
      (_conj = Module["_conj"] = wasmExports["conj"])(a0, a1));
    var _conjf = (Module["_conjf"] = (a0, a1) =>
      (_conjf = Module["_conjf"] = wasmExports["conjf"])(a0, a1));
    var _conjl = (Module["_conjl"] = (a0, a1) =>
      (_conjl = Module["_conjl"] = wasmExports["conjl"])(a0, a1));
    var _copysignl = (Module["_copysignl"] = (a0, a1, a2, a3, a4) =>
      (_copysignl = Module["_copysignl"] = wasmExports["copysignl"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _expm1f = (Module["_expm1f"] = (a0) =>
      (_expm1f = Module["_expm1f"] = wasmExports["expm1f"])(a0));
    var _coshl = (Module["_coshl"] = (a0, a1, a2) =>
      (_coshl = Module["_coshl"] = wasmExports["coshl"])(a0, a1, a2));
    var _cosl = (Module["_cosl"] = (a0, a1, a2) =>
      (_cosl = Module["_cosl"] = wasmExports["cosl"])(a0, a1, a2));
    var _cpow = (Module["_cpow"] = (a0, a1, a2) =>
      (_cpow = Module["_cpow"] = wasmExports["cpow"])(a0, a1, a2));
    var ___muldc3 = (Module["___muldc3"] = (a0, a1, a2, a3, a4) =>
      (___muldc3 = Module["___muldc3"] = wasmExports["__muldc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _cpowf = (Module["_cpowf"] = (a0, a1, a2) =>
      (_cpowf = Module["_cpowf"] = wasmExports["cpowf"])(a0, a1, a2));
    var ___mulsc3 = (Module["___mulsc3"] = (a0, a1, a2, a3, a4) =>
      (___mulsc3 = Module["___mulsc3"] = wasmExports["__mulsc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _cpowl = (Module["_cpowl"] = (a0, a1, a2) =>
      (_cpowl = Module["_cpowl"] = wasmExports["cpowl"])(a0, a1, a2));
    var ___unordtf2 = (Module["___unordtf2"] = (a0, a1, a2, a3) =>
      (___unordtf2 = Module["___unordtf2"] = wasmExports["__unordtf2"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___multc3 = (Module["___multc3"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
    ) =>
      (___multc3 = Module["___multc3"] = wasmExports["__multc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var _cproj = (Module["_cproj"] = (a0, a1) =>
      (_cproj = Module["_cproj"] = wasmExports["cproj"])(a0, a1));
    var _cprojf = (Module["_cprojf"] = (a0, a1) =>
      (_cprojf = Module["_cprojf"] = wasmExports["cprojf"])(a0, a1));
    var _cprojl = (Module["_cprojl"] = (a0, a1) =>
      (_cprojl = Module["_cprojl"] = wasmExports["cprojl"])(a0, a1));
    var _creal = (Module["_creal"] = (a0) =>
      (_creal = Module["_creal"] = wasmExports["creal"])(a0));
    var _crealf = (Module["_crealf"] = (a0) =>
      (_crealf = Module["_crealf"] = wasmExports["crealf"])(a0));
    var _creall = (Module["_creall"] = (a0, a1) =>
      (_creall = Module["_creall"] = wasmExports["creall"])(a0, a1));
    var _creat = (Module["_creat"] = (a0, a1) =>
      (_creat = Module["_creat"] = wasmExports["creat"])(a0, a1));
    var _crypt = (Module["_crypt"] = (a0, a1) =>
      (_crypt = Module["_crypt"] = wasmExports["crypt"])(a0, a1));
    var ___crypt_blowfish = (Module["___crypt_blowfish"] = (a0, a1, a2) =>
      (___crypt_blowfish = Module["___crypt_blowfish"] =
        wasmExports["__crypt_blowfish"])(a0, a1, a2));
    var ___crypt_des = (Module["___crypt_des"] = (a0, a1, a2) =>
      (___crypt_des = Module["___crypt_des"] = wasmExports["__crypt_des"])(
        a0,
        a1,
        a2,
      ));
    var ___crypt_md5 = (Module["___crypt_md5"] = (a0, a1, a2) =>
      (___crypt_md5 = Module["___crypt_md5"] = wasmExports["__crypt_md5"])(
        a0,
        a1,
        a2,
      ));
    var _strnlen = (Module["_strnlen"] = (a0, a1) =>
      (_strnlen = Module["_strnlen"] = wasmExports["strnlen"])(a0, a1));
    var ___crypt_sha256 = (Module["___crypt_sha256"] = (a0, a1, a2) =>
      (___crypt_sha256 = Module["___crypt_sha256"] =
        wasmExports["__crypt_sha256"])(a0, a1, a2));
    var ___crypt_sha512 = (Module["___crypt_sha512"] = (a0, a1, a2) =>
      (___crypt_sha512 = Module["___crypt_sha512"] =
        wasmExports["__crypt_sha512"])(a0, a1, a2));
    var _sprintf = (Module["_sprintf"] = (a0, a1, a2) =>
      (_sprintf = Module["_sprintf"] = wasmExports["sprintf"])(a0, a1, a2));
    var _csin = (Module["_csin"] = (a0, a1) =>
      (_csin = Module["_csin"] = wasmExports["csin"])(a0, a1));
    var _csinh = (Module["_csinh"] = (a0, a1) =>
      (_csinh = Module["_csinh"] = wasmExports["csinh"])(a0, a1));
    var _csinf = (Module["_csinf"] = (a0, a1) =>
      (_csinf = Module["_csinf"] = wasmExports["csinf"])(a0, a1));
    var _csinhf = (Module["_csinhf"] = (a0, a1) =>
      (_csinhf = Module["_csinhf"] = wasmExports["csinhf"])(a0, a1));
    var _csinhl = (Module["_csinhl"] = (a0, a1) =>
      (_csinhl = Module["_csinhl"] = wasmExports["csinhl"])(a0, a1));
    var _csinl = (Module["_csinl"] = (a0, a1) =>
      (_csinl = Module["_csinl"] = wasmExports["csinl"])(a0, a1));
    var _ctan = (Module["_ctan"] = (a0, a1) =>
      (_ctan = Module["_ctan"] = wasmExports["ctan"])(a0, a1));
    var _ctanh = (Module["_ctanh"] = (a0, a1) =>
      (_ctanh = Module["_ctanh"] = wasmExports["ctanh"])(a0, a1));
    var _ctanf = (Module["_ctanf"] = (a0, a1) =>
      (_ctanf = Module["_ctanf"] = wasmExports["ctanf"])(a0, a1));
    var _ctanhf = (Module["_ctanhf"] = (a0, a1) =>
      (_ctanhf = Module["_ctanhf"] = wasmExports["ctanhf"])(a0, a1));
    var _tanf = (Module["_tanf"] = (a0) =>
      (_tanf = Module["_tanf"] = wasmExports["tanf"])(a0));
    var _ctanhl = (Module["_ctanhl"] = (a0, a1) =>
      (_ctanhl = Module["_ctanhl"] = wasmExports["ctanhl"])(a0, a1));
    var _ctanl = (Module["_ctanl"] = (a0, a1) =>
      (_ctanl = Module["_ctanl"] = wasmExports["ctanl"])(a0, a1));
    var _ctime = (Module["_ctime"] = (a0) =>
      (_ctime = Module["_ctime"] = wasmExports["ctime"])(a0));
    var _localtime = (Module["_localtime"] = (a0) =>
      (_localtime = Module["_localtime"] = wasmExports["localtime"])(a0));
    var _ctime_r = (Module["_ctime_r"] = (a0, a1) =>
      (_ctime_r = Module["_ctime_r"] = wasmExports["ctime_r"])(a0, a1));
    var _dcngettext = (Module["_dcngettext"] = (a0, a1, a2, a3, a4) =>
      (_dcngettext = Module["_dcngettext"] = wasmExports["dcngettext"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___gettextdomain = (Module["___gettextdomain"] = () =>
      (___gettextdomain = Module["___gettextdomain"] =
        wasmExports["__gettextdomain"])());
    var _dngettext = (Module["_dngettext"] = (a0, a1, a2, a3) =>
      (_dngettext = Module["_dngettext"] = wasmExports["dngettext"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _difftime = (Module["_difftime"] = (a0, a1) =>
      (_difftime = Module["_difftime"] = wasmExports["difftime"])(a0, a1));
    var _dirname = (Module["_dirname"] = (a0) =>
      (_dirname = Module["_dirname"] = wasmExports["dirname"])(a0));
    var _div = (Module["_div"] = (a0, a1, a2) =>
      (_div = Module["_div"] = wasmExports["div"])(a0, a1, a2));
    var _dladdr = (Module["_dladdr"] = (a0, a1) =>
      (_dladdr = Module["_dladdr"] = wasmExports["dladdr"])(a0, a1));
    var ___libc_free = (Module["___libc_free"] = (a0) =>
      (___libc_free = Module["___libc_free"] = wasmExports["__libc_free"])(a0));
    var ___libc_malloc = (Module["___libc_malloc"] = (a0) =>
      (___libc_malloc = Module["___libc_malloc"] =
        wasmExports["__libc_malloc"])(a0));
    var ___dl_seterr = (a0, a1) =>
      (___dl_seterr = wasmExports["__dl_seterr"])(a0, a1);
    var _dn_comp = (Module["_dn_comp"] = (a0, a1, a2, a3, a4) =>
      (_dn_comp = Module["_dn_comp"] = wasmExports["dn_comp"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _dn_expand = (Module["_dn_expand"] = (a0, a1, a2, a3, a4) =>
      (_dn_expand = Module["_dn_expand"] = wasmExports["dn_expand"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _dn_skipname = (Module["_dn_skipname"] = (a0, a1) =>
      (_dn_skipname = Module["_dn_skipname"] = wasmExports["dn_skipname"])(
        a0,
        a1,
      ));
    var _dprintf = (Module["_dprintf"] = (a0, a1, a2) =>
      (_dprintf = Module["_dprintf"] = wasmExports["dprintf"])(a0, a1, a2));
    var _vdprintf = (Module["_vdprintf"] = (a0, a1, a2) =>
      (_vdprintf = Module["_vdprintf"] = wasmExports["vdprintf"])(a0, a1, a2));
    var _erand48 = (Module["_erand48"] = (a0) =>
      (_erand48 = Module["_erand48"] = wasmExports["erand48"])(a0));
    var _drand48 = (Module["_drand48"] = () =>
      (_drand48 = Module["_drand48"] = wasmExports["drand48"])());
    var ___wasi_fd_is_valid = (Module["___wasi_fd_is_valid"] = (a0) =>
      (___wasi_fd_is_valid = Module["___wasi_fd_is_valid"] =
        wasmExports["__wasi_fd_is_valid"])(a0));
    var ___duplocale = (Module["___duplocale"] = (a0) =>
      (___duplocale = Module["___duplocale"] = wasmExports["__duplocale"])(a0));
    var _duplocale = (Module["_duplocale"] = (a0) =>
      (_duplocale = Module["_duplocale"] = wasmExports["duplocale"])(a0));
    var _new_dlevent = (Module["_new_dlevent"] = (a0, a1) =>
      (_new_dlevent = Module["_new_dlevent"] = wasmExports["new_dlevent"])(
        a0,
        a1,
      ));
    var _pthread_setcancelstate = (Module["_pthread_setcancelstate"] = (
      a0,
      a1,
    ) =>
      (_pthread_setcancelstate = Module["_pthread_setcancelstate"] =
        wasmExports["pthread_setcancelstate"])(a0, a1));
    var _emscripten_dlopen = (Module["_emscripten_dlopen"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_emscripten_dlopen = Module["_emscripten_dlopen"] =
        wasmExports["emscripten_dlopen"])(a0, a1, a2, a3, a4));
    var _emscripten_dlopen_promise = (Module["_emscripten_dlopen_promise"] = (
      a0,
      a1,
    ) =>
      (_emscripten_dlopen_promise = Module["_emscripten_dlopen_promise"] =
        wasmExports["emscripten_dlopen_promise"])(a0, a1));
    var _strspn = (Module["_strspn"] = (a0, a1) =>
      (_strspn = Module["_strspn"] = wasmExports["strspn"])(a0, a1));
    var _ecvt = (Module["_ecvt"] = (a0, a1, a2, a3) =>
      (_ecvt = Module["_ecvt"] = wasmExports["ecvt"])(a0, a1, a2, a3));
    var _emscripten_atomic_exchange_u8 = (Module[
      "_emscripten_atomic_exchange_u8"
    ] = (a0, a1) =>
      (_emscripten_atomic_exchange_u8 = Module[
        "_emscripten_atomic_exchange_u8"
      ] =
        wasmExports["emscripten_atomic_exchange_u8"])(a0, a1));
    var _emscripten_atomic_exchange_u16 = (Module[
      "_emscripten_atomic_exchange_u16"
    ] = (a0, a1) =>
      (_emscripten_atomic_exchange_u16 = Module[
        "_emscripten_atomic_exchange_u16"
      ] =
        wasmExports["emscripten_atomic_exchange_u16"])(a0, a1));
    var _emscripten_atomic_exchange_u32 = (Module[
      "_emscripten_atomic_exchange_u32"
    ] = (a0, a1) =>
      (_emscripten_atomic_exchange_u32 = Module[
        "_emscripten_atomic_exchange_u32"
      ] =
        wasmExports["emscripten_atomic_exchange_u32"])(a0, a1));
    var _emscripten_atomic_exchange_u64 = (Module[
      "_emscripten_atomic_exchange_u64"
    ] = (a0, a1) =>
      (_emscripten_atomic_exchange_u64 = Module[
        "_emscripten_atomic_exchange_u64"
      ] =
        wasmExports["emscripten_atomic_exchange_u64"])(a0, a1));
    var _emscripten_atomic_cas_u8 = (Module["_emscripten_atomic_cas_u8"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_atomic_cas_u8 = Module["_emscripten_atomic_cas_u8"] =
        wasmExports["emscripten_atomic_cas_u8"])(a0, a1, a2));
    var _emscripten_atomic_cas_u16 = (Module["_emscripten_atomic_cas_u16"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_atomic_cas_u16 = Module["_emscripten_atomic_cas_u16"] =
        wasmExports["emscripten_atomic_cas_u16"])(a0, a1, a2));
    var _emscripten_atomic_cas_u32 = (Module["_emscripten_atomic_cas_u32"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_atomic_cas_u32 = Module["_emscripten_atomic_cas_u32"] =
        wasmExports["emscripten_atomic_cas_u32"])(a0, a1, a2));
    var _emscripten_atomic_cas_u64 = (Module["_emscripten_atomic_cas_u64"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_atomic_cas_u64 = Module["_emscripten_atomic_cas_u64"] =
        wasmExports["emscripten_atomic_cas_u64"])(a0, a1, a2));
    var _emscripten_atomic_load_u8 = (Module["_emscripten_atomic_load_u8"] = (
      a0,
    ) =>
      (_emscripten_atomic_load_u8 = Module["_emscripten_atomic_load_u8"] =
        wasmExports["emscripten_atomic_load_u8"])(a0));
    var _emscripten_atomic_load_u16 = (Module["_emscripten_atomic_load_u16"] = (
      a0,
    ) =>
      (_emscripten_atomic_load_u16 = Module["_emscripten_atomic_load_u16"] =
        wasmExports["emscripten_atomic_load_u16"])(a0));
    var _emscripten_atomic_load_u32 = (Module["_emscripten_atomic_load_u32"] = (
      a0,
    ) =>
      (_emscripten_atomic_load_u32 = Module["_emscripten_atomic_load_u32"] =
        wasmExports["emscripten_atomic_load_u32"])(a0));
    var _emscripten_atomic_load_f32 = (Module["_emscripten_atomic_load_f32"] = (
      a0,
    ) =>
      (_emscripten_atomic_load_f32 = Module["_emscripten_atomic_load_f32"] =
        wasmExports["emscripten_atomic_load_f32"])(a0));
    var _emscripten_atomic_load_u64 = (Module["_emscripten_atomic_load_u64"] = (
      a0,
    ) =>
      (_emscripten_atomic_load_u64 = Module["_emscripten_atomic_load_u64"] =
        wasmExports["emscripten_atomic_load_u64"])(a0));
    var _emscripten_atomic_load_f64 = (Module["_emscripten_atomic_load_f64"] = (
      a0,
    ) =>
      (_emscripten_atomic_load_f64 = Module["_emscripten_atomic_load_f64"] =
        wasmExports["emscripten_atomic_load_f64"])(a0));
    var _emscripten_atomic_store_u8 = (Module["_emscripten_atomic_store_u8"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_store_u8 = Module["_emscripten_atomic_store_u8"] =
        wasmExports["emscripten_atomic_store_u8"])(a0, a1));
    var _emscripten_atomic_store_u16 = (Module["_emscripten_atomic_store_u16"] =
      (a0, a1) =>
        (_emscripten_atomic_store_u16 = Module["_emscripten_atomic_store_u16"] =
          wasmExports["emscripten_atomic_store_u16"])(a0, a1));
    var _emscripten_atomic_store_u32 = (Module["_emscripten_atomic_store_u32"] =
      (a0, a1) =>
        (_emscripten_atomic_store_u32 = Module["_emscripten_atomic_store_u32"] =
          wasmExports["emscripten_atomic_store_u32"])(a0, a1));
    var _emscripten_atomic_store_f32 = (Module["_emscripten_atomic_store_f32"] =
      (a0, a1) =>
        (_emscripten_atomic_store_f32 = Module["_emscripten_atomic_store_f32"] =
          wasmExports["emscripten_atomic_store_f32"])(a0, a1));
    var _emscripten_atomic_store_u64 = (Module["_emscripten_atomic_store_u64"] =
      (a0, a1) =>
        (_emscripten_atomic_store_u64 = Module["_emscripten_atomic_store_u64"] =
          wasmExports["emscripten_atomic_store_u64"])(a0, a1));
    var _emscripten_atomic_store_f64 = (Module["_emscripten_atomic_store_f64"] =
      (a0, a1) =>
        (_emscripten_atomic_store_f64 = Module["_emscripten_atomic_store_f64"] =
          wasmExports["emscripten_atomic_store_f64"])(a0, a1));
    var _emscripten_atomic_fence = (Module["_emscripten_atomic_fence"] = () =>
      (_emscripten_atomic_fence = Module["_emscripten_atomic_fence"] =
        wasmExports["emscripten_atomic_fence"])());
    var _emscripten_atomic_or_u8 = (Module["_emscripten_atomic_or_u8"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_or_u8 = Module["_emscripten_atomic_or_u8"] =
        wasmExports["emscripten_atomic_or_u8"])(a0, a1));
    var _emscripten_atomic_add_u8 = (Module["_emscripten_atomic_add_u8"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_add_u8 = Module["_emscripten_atomic_add_u8"] =
        wasmExports["emscripten_atomic_add_u8"])(a0, a1));
    var _emscripten_atomic_add_u16 = (Module["_emscripten_atomic_add_u16"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_add_u16 = Module["_emscripten_atomic_add_u16"] =
        wasmExports["emscripten_atomic_add_u16"])(a0, a1));
    var _emscripten_atomic_add_u32 = (Module["_emscripten_atomic_add_u32"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_add_u32 = Module["_emscripten_atomic_add_u32"] =
        wasmExports["emscripten_atomic_add_u32"])(a0, a1));
    var _emscripten_atomic_add_u64 = (Module["_emscripten_atomic_add_u64"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_add_u64 = Module["_emscripten_atomic_add_u64"] =
        wasmExports["emscripten_atomic_add_u64"])(a0, a1));
    var _emscripten_atomic_sub_u8 = (Module["_emscripten_atomic_sub_u8"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_sub_u8 = Module["_emscripten_atomic_sub_u8"] =
        wasmExports["emscripten_atomic_sub_u8"])(a0, a1));
    var _emscripten_atomic_sub_u16 = (Module["_emscripten_atomic_sub_u16"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_sub_u16 = Module["_emscripten_atomic_sub_u16"] =
        wasmExports["emscripten_atomic_sub_u16"])(a0, a1));
    var _emscripten_atomic_sub_u32 = (Module["_emscripten_atomic_sub_u32"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_sub_u32 = Module["_emscripten_atomic_sub_u32"] =
        wasmExports["emscripten_atomic_sub_u32"])(a0, a1));
    var _emscripten_atomic_sub_u64 = (Module["_emscripten_atomic_sub_u64"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_sub_u64 = Module["_emscripten_atomic_sub_u64"] =
        wasmExports["emscripten_atomic_sub_u64"])(a0, a1));
    var _emscripten_atomic_and_u8 = (Module["_emscripten_atomic_and_u8"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_and_u8 = Module["_emscripten_atomic_and_u8"] =
        wasmExports["emscripten_atomic_and_u8"])(a0, a1));
    var _emscripten_atomic_and_u16 = (Module["_emscripten_atomic_and_u16"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_and_u16 = Module["_emscripten_atomic_and_u16"] =
        wasmExports["emscripten_atomic_and_u16"])(a0, a1));
    var _emscripten_atomic_and_u32 = (Module["_emscripten_atomic_and_u32"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_and_u32 = Module["_emscripten_atomic_and_u32"] =
        wasmExports["emscripten_atomic_and_u32"])(a0, a1));
    var _emscripten_atomic_and_u64 = (Module["_emscripten_atomic_and_u64"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_and_u64 = Module["_emscripten_atomic_and_u64"] =
        wasmExports["emscripten_atomic_and_u64"])(a0, a1));
    var _emscripten_atomic_or_u16 = (Module["_emscripten_atomic_or_u16"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_or_u16 = Module["_emscripten_atomic_or_u16"] =
        wasmExports["emscripten_atomic_or_u16"])(a0, a1));
    var _emscripten_atomic_or_u32 = (Module["_emscripten_atomic_or_u32"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_or_u32 = Module["_emscripten_atomic_or_u32"] =
        wasmExports["emscripten_atomic_or_u32"])(a0, a1));
    var _emscripten_atomic_or_u64 = (Module["_emscripten_atomic_or_u64"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_or_u64 = Module["_emscripten_atomic_or_u64"] =
        wasmExports["emscripten_atomic_or_u64"])(a0, a1));
    var _emscripten_atomic_xor_u8 = (Module["_emscripten_atomic_xor_u8"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_xor_u8 = Module["_emscripten_atomic_xor_u8"] =
        wasmExports["emscripten_atomic_xor_u8"])(a0, a1));
    var _emscripten_atomic_xor_u16 = (Module["_emscripten_atomic_xor_u16"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_xor_u16 = Module["_emscripten_atomic_xor_u16"] =
        wasmExports["emscripten_atomic_xor_u16"])(a0, a1));
    var _emscripten_atomic_xor_u32 = (Module["_emscripten_atomic_xor_u32"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_xor_u32 = Module["_emscripten_atomic_xor_u32"] =
        wasmExports["emscripten_atomic_xor_u32"])(a0, a1));
    var _emscripten_atomic_xor_u64 = (Module["_emscripten_atomic_xor_u64"] = (
      a0,
      a1,
    ) =>
      (_emscripten_atomic_xor_u64 = Module["_emscripten_atomic_xor_u64"] =
        wasmExports["emscripten_atomic_xor_u64"])(a0, a1));
    var _emscripten_console_logf = (Module["_emscripten_console_logf"] = (
      a0,
      a1,
    ) =>
      (_emscripten_console_logf = Module["_emscripten_console_logf"] =
        wasmExports["emscripten_console_logf"])(a0, a1));
    var _emscripten_console_errorf = (Module["_emscripten_console_errorf"] = (
      a0,
      a1,
    ) =>
      (_emscripten_console_errorf = Module["_emscripten_console_errorf"] =
        wasmExports["emscripten_console_errorf"])(a0, a1));
    var _emscripten_console_warnf = (Module["_emscripten_console_warnf"] = (
      a0,
      a1,
    ) =>
      (_emscripten_console_warnf = Module["_emscripten_console_warnf"] =
        wasmExports["emscripten_console_warnf"])(a0, a1));
    var _emscripten_outf = (Module["_emscripten_outf"] = (a0, a1) =>
      (_emscripten_outf = Module["_emscripten_outf"] =
        wasmExports["emscripten_outf"])(a0, a1));
    var _emscripten_errf = (Module["_emscripten_errf"] = (a0, a1) =>
      (_emscripten_errf = Module["_emscripten_errf"] =
        wasmExports["emscripten_errf"])(a0, a1));
    var _emscripten_fiber_init = (Module["_emscripten_fiber_init"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
    ) =>
      (_emscripten_fiber_init = Module["_emscripten_fiber_init"] =
        wasmExports["emscripten_fiber_init"])(a0, a1, a2, a3, a4, a5, a6));
    var _emscripten_fiber_init_from_current_context = (Module[
      "_emscripten_fiber_init_from_current_context"
    ] = (a0, a1, a2) =>
      (_emscripten_fiber_init_from_current_context = Module[
        "_emscripten_fiber_init_from_current_context"
      ] =
        wasmExports["emscripten_fiber_init_from_current_context"])(a0, a1, a2));
    var _emscripten_stack_get_base = (Module["_emscripten_stack_get_base"] =
      () =>
        (_emscripten_stack_get_base = Module["_emscripten_stack_get_base"] =
          wasmExports["emscripten_stack_get_base"])());
    var _emscripten_stack_get_end = (Module["_emscripten_stack_get_end"] = () =>
      (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] =
        wasmExports["emscripten_stack_get_end"])());
    var _emscripten_get_heap_size = (Module["_emscripten_get_heap_size"] = () =>
      (_emscripten_get_heap_size = Module["_emscripten_get_heap_size"] =
        wasmExports["emscripten_get_heap_size"])());
    var _emscripten_builtin_memcpy = (Module["_emscripten_builtin_memcpy"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_builtin_memcpy = Module["_emscripten_builtin_memcpy"] =
        wasmExports["emscripten_builtin_memcpy"])(a0, a1, a2));
    var ___memset = (Module["___memset"] = (a0, a1, a2) =>
      (___memset = Module["___memset"] = wasmExports["__memset"])(a0, a1, a2));
    var _emscripten_builtin_memset = (Module["_emscripten_builtin_memset"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_builtin_memset = Module["_emscripten_builtin_memset"] =
        wasmExports["emscripten_builtin_memset"])(a0, a1, a2));
    var ___syscall_munmap = (Module["___syscall_munmap"] = (a0, a1) =>
      (___syscall_munmap = Module["___syscall_munmap"] =
        wasmExports["__syscall_munmap"])(a0, a1));
    var _emscripten_builtin_free = (Module["_emscripten_builtin_free"] = (a0) =>
      (_emscripten_builtin_free = Module["_emscripten_builtin_free"] =
        wasmExports["emscripten_builtin_free"])(a0));
    var ___syscall_msync = (Module["___syscall_msync"] = (a0, a1, a2) =>
      (___syscall_msync = Module["___syscall_msync"] =
        wasmExports["__syscall_msync"])(a0, a1, a2));
    var ___syscall_mmap2 = (Module["___syscall_mmap2"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (___syscall_mmap2 = Module["___syscall_mmap2"] =
        wasmExports["__syscall_mmap2"])(a0, a1, a2, a3, a4, a5));
    var _emscripten_builtin_memalign = (a0, a1) =>
      (_emscripten_builtin_memalign =
        wasmExports["emscripten_builtin_memalign"])(a0, a1);
    var _emscripten_scan_stack = (Module["_emscripten_scan_stack"] = (a0) =>
      (_emscripten_scan_stack = Module["_emscripten_scan_stack"] =
        wasmExports["emscripten_scan_stack"])(a0));
    var _emscripten_stack_get_current = (Module[
      "_emscripten_stack_get_current"
    ] = () =>
      (_emscripten_stack_get_current = Module["_emscripten_stack_get_current"] =
        wasmExports["emscripten_stack_get_current"])());
    var ___clock = (Module["___clock"] = () =>
      (___clock = Module["___clock"] = wasmExports["__clock"])());
    var ___time = (Module["___time"] = (a0) =>
      (___time = Module["___time"] = wasmExports["__time"])(a0));
    var ___clock_getres = (Module["___clock_getres"] = (a0, a1) =>
      (___clock_getres = Module["___clock_getres"] =
        wasmExports["__clock_getres"])(a0, a1));
    var ___gettimeofday = (Module["___gettimeofday"] = (a0, a1) =>
      (___gettimeofday = Module["___gettimeofday"] =
        wasmExports["__gettimeofday"])(a0, a1));
    var _dysize = (Module["_dysize"] = (a0) =>
      (_dysize = Module["_dysize"] = wasmExports["dysize"])(a0));
    var _setkey = (Module["_setkey"] = (a0) =>
      (_setkey = Module["_setkey"] = wasmExports["setkey"])(a0));
    var _encrypt = (Module["_encrypt"] = (a0, a1) =>
      (_encrypt = Module["_encrypt"] = wasmExports["encrypt"])(a0, a1));
    var _sethostent = (Module["_sethostent"] = (a0) =>
      (_sethostent = Module["_sethostent"] = wasmExports["sethostent"])(a0));
    var _gethostent = (Module["_gethostent"] = () =>
      (_gethostent = Module["_gethostent"] = wasmExports["gethostent"])());
    var _getnetent = (Module["_getnetent"] = () =>
      (_getnetent = Module["_getnetent"] = wasmExports["getnetent"])());
    var _endhostent = (Module["_endhostent"] = () =>
      (_endhostent = Module["_endhostent"] = wasmExports["endhostent"])());
    var _setnetent = (Module["_setnetent"] = (a0) =>
      (_setnetent = Module["_setnetent"] = wasmExports["setnetent"])(a0));
    var _endnetent = (Module["_endnetent"] = () =>
      (_endnetent = Module["_endnetent"] = wasmExports["endnetent"])());
    var _erff = (Module["_erff"] = (a0) =>
      (_erff = Module["_erff"] = wasmExports["erff"])(a0));
    var _erfcf = (Module["_erfcf"] = (a0) =>
      (_erfcf = Module["_erfcf"] = wasmExports["erfcf"])(a0));
    var _erfl = (Module["_erfl"] = (a0, a1, a2) =>
      (_erfl = Module["_erfl"] = wasmExports["erfl"])(a0, a1, a2));
    var _erfcl = (Module["_erfcl"] = (a0, a1, a2) =>
      (_erfcl = Module["_erfcl"] = wasmExports["erfcl"])(a0, a1, a2));
    var _vwarn = (Module["_vwarn"] = (a0, a1) =>
      (_vwarn = Module["_vwarn"] = wasmExports["vwarn"])(a0, a1));
    var _fprintf = (Module["_fprintf"] = (a0, a1, a2) =>
      (_fprintf = Module["_fprintf"] = wasmExports["fprintf"])(a0, a1, a2));
    var _vwarnx = (Module["_vwarnx"] = (a0, a1) =>
      (_vwarnx = Module["_vwarnx"] = wasmExports["vwarnx"])(a0, a1));
    var _putc = (Module["_putc"] = (a0, a1) =>
      (_putc = Module["_putc"] = wasmExports["putc"])(a0, a1));
    var _verr = (Module["_verr"] = (a0, a1, a2) =>
      (_verr = Module["_verr"] = wasmExports["verr"])(a0, a1, a2));
    var _verrx = (Module["_verrx"] = (a0, a1, a2) =>
      (_verrx = Module["_verrx"] = wasmExports["verrx"])(a0, a1, a2));
    var _warn = (Module["_warn"] = (a0, a1) =>
      (_warn = Module["_warn"] = wasmExports["warn"])(a0, a1));
    var _warnx = (Module["_warnx"] = (a0, a1) =>
      (_warnx = Module["_warnx"] = wasmExports["warnx"])(a0, a1));
    var _err = (Module["_err"] = (a0, a1, a2) =>
      (_err = Module["_err"] = wasmExports["err"])(a0, a1, a2));
    var _errx = (Module["_errx"] = (a0, a1, a2) =>
      (_errx = Module["_errx"] = wasmExports["errx"])(a0, a1, a2));
    var _ether_aton_r = (Module["_ether_aton_r"] = (a0, a1) =>
      (_ether_aton_r = Module["_ether_aton_r"] = wasmExports["ether_aton_r"])(
        a0,
        a1,
      ));
    var _ether_aton = (Module["_ether_aton"] = (a0) =>
      (_ether_aton = Module["_ether_aton"] = wasmExports["ether_aton"])(a0));
    var _ether_ntoa_r = (Module["_ether_ntoa_r"] = (a0, a1) =>
      (_ether_ntoa_r = Module["_ether_ntoa_r"] = wasmExports["ether_ntoa_r"])(
        a0,
        a1,
      ));
    var _ether_ntoa = (Module["_ether_ntoa"] = (a0) =>
      (_ether_ntoa = Module["_ether_ntoa"] = wasmExports["ether_ntoa"])(a0));
    var _ether_line = (Module["_ether_line"] = (a0, a1, a2) =>
      (_ether_line = Module["_ether_line"] = wasmExports["ether_line"])(
        a0,
        a1,
        a2,
      ));
    var _ether_ntohost = (Module["_ether_ntohost"] = (a0, a1) =>
      (_ether_ntohost = Module["_ether_ntohost"] =
        wasmExports["ether_ntohost"])(a0, a1));
    var _ether_hostton = (Module["_ether_hostton"] = (a0, a1) =>
      (_ether_hostton = Module["_ether_hostton"] =
        wasmExports["ether_hostton"])(a0, a1));
    var _execl = (Module["_execl"] = (a0, a1, a2) =>
      (_execl = Module["_execl"] = wasmExports["execl"])(a0, a1, a2));
    var _execle = (Module["_execle"] = (a0, a1, a2) =>
      (_execle = Module["_execle"] = wasmExports["execle"])(a0, a1, a2));
    var _execlp = (Module["_execlp"] = (a0, a1, a2) =>
      (_execlp = Module["_execlp"] = wasmExports["execlp"])(a0, a1, a2));
    var _execvp = (Module["_execvp"] = (a0, a1) =>
      (_execvp = Module["_execvp"] = wasmExports["execvp"])(a0, a1));
    var _execvpe = (Module["_execvpe"] = (a0, a1, a2) =>
      (_execvpe = Module["_execvpe"] = wasmExports["execvpe"])(a0, a1, a2));
    var _exp10 = (Module["_exp10"] = (a0) =>
      (_exp10 = Module["_exp10"] = wasmExports["exp10"])(a0));
    var _pow10 = (Module["_pow10"] = (a0) =>
      (_pow10 = Module["_pow10"] = wasmExports["pow10"])(a0));
    var _exp10f = (Module["_exp10f"] = (a0) =>
      (_exp10f = Module["_exp10f"] = wasmExports["exp10f"])(a0));
    var _modff = (Module["_modff"] = (a0, a1) =>
      (_modff = Module["_modff"] = wasmExports["modff"])(a0, a1));
    var _exp2f = (Module["_exp2f"] = (a0) =>
      (_exp2f = Module["_exp2f"] = wasmExports["exp2f"])(a0));
    var _pow10f = (Module["_pow10f"] = (a0) =>
      (_pow10f = Module["_pow10f"] = wasmExports["pow10f"])(a0));
    var _exp10l = (Module["_exp10l"] = (a0, a1, a2) =>
      (_exp10l = Module["_exp10l"] = wasmExports["exp10l"])(a0, a1, a2));
    var _modfl = (Module["_modfl"] = (a0, a1, a2, a3) =>
      (_modfl = Module["_modfl"] = wasmExports["modfl"])(a0, a1, a2, a3));
    var _exp2l = (Module["_exp2l"] = (a0, a1, a2) =>
      (_exp2l = Module["_exp2l"] = wasmExports["exp2l"])(a0, a1, a2));
    var _powl = (Module["_powl"] = (a0, a1, a2, a3, a4) =>
      (_powl = Module["_powl"] = wasmExports["powl"])(a0, a1, a2, a3, a4));
    var _pow10l = (Module["_pow10l"] = (a0, a1, a2) =>
      (_pow10l = Module["_pow10l"] = wasmExports["pow10l"])(a0, a1, a2));
    var ___letf2 = (Module["___letf2"] = (a0, a1, a2, a3) =>
      (___letf2 = Module["___letf2"] = wasmExports["__letf2"])(a0, a1, a2, a3));
    var _scalbnl = (Module["_scalbnl"] = (a0, a1, a2, a3) =>
      (_scalbnl = Module["_scalbnl"] = wasmExports["scalbnl"])(a0, a1, a2, a3));
    var _expl = (Module["_expl"] = (a0, a1, a2) =>
      (_expl = Module["_expl"] = wasmExports["expl"])(a0, a1, a2));
    var _expm1l = (Module["_expm1l"] = (a0, a1, a2) =>
      (_expm1l = Module["_expm1l"] = wasmExports["expm1l"])(a0, a1, a2));
    var __flushlbf = (Module["__flushlbf"] = () =>
      (__flushlbf = Module["__flushlbf"] = wasmExports["_flushlbf"])());
    var ___fsetlocking = (Module["___fsetlocking"] = (a0, a1) =>
      (___fsetlocking = Module["___fsetlocking"] =
        wasmExports["__fsetlocking"])(a0, a1));
    var ___fwriting = (Module["___fwriting"] = (a0) =>
      (___fwriting = Module["___fwriting"] = wasmExports["__fwriting"])(a0));
    var ___freading = (Module["___freading"] = (a0) =>
      (___freading = Module["___freading"] = wasmExports["__freading"])(a0));
    var ___freadable = (Module["___freadable"] = (a0) =>
      (___freadable = Module["___freadable"] = wasmExports["__freadable"])(a0));
    var ___fwritable = (Module["___fwritable"] = (a0) =>
      (___fwritable = Module["___fwritable"] = wasmExports["__fwritable"])(a0));
    var ___flbf = (Module["___flbf"] = (a0) =>
      (___flbf = Module["___flbf"] = wasmExports["__flbf"])(a0));
    var ___fbufsize = (Module["___fbufsize"] = (a0) =>
      (___fbufsize = Module["___fbufsize"] = wasmExports["__fbufsize"])(a0));
    var ___fpending = (Module["___fpending"] = (a0) =>
      (___fpending = Module["___fpending"] = wasmExports["__fpending"])(a0));
    var ___fpurge = (Module["___fpurge"] = (a0) =>
      (___fpurge = Module["___fpurge"] = wasmExports["__fpurge"])(a0));
    var _fpurge = (Module["_fpurge"] = (a0) =>
      (_fpurge = Module["_fpurge"] = wasmExports["fpurge"])(a0));
    var ___freadahead = (Module["___freadahead"] = (a0) =>
      (___freadahead = Module["___freadahead"] = wasmExports["__freadahead"])(
        a0,
      ));
    var ___freadptr = (Module["___freadptr"] = (a0, a1) =>
      (___freadptr = Module["___freadptr"] = wasmExports["__freadptr"])(
        a0,
        a1,
      ));
    var ___freadptrinc = (Module["___freadptrinc"] = (a0, a1) =>
      (___freadptrinc = Module["___freadptrinc"] =
        wasmExports["__freadptrinc"])(a0, a1));
    var ___fseterr = (Module["___fseterr"] = (a0) =>
      (___fseterr = Module["___fseterr"] = wasmExports["__fseterr"])(a0));
    var _faccessat = (Module["_faccessat"] = (a0, a1, a2, a3) =>
      (_faccessat = Module["_faccessat"] = wasmExports["faccessat"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _fcvt = (Module["_fcvt"] = (a0, a1, a2, a3) =>
      (_fcvt = Module["_fcvt"] = wasmExports["fcvt"])(a0, a1, a2, a3));
    var _fdim = (Module["_fdim"] = (a0, a1) =>
      (_fdim = Module["_fdim"] = wasmExports["fdim"])(a0, a1));
    var _fdimf = (Module["_fdimf"] = (a0, a1) =>
      (_fdimf = Module["_fdimf"] = wasmExports["fdimf"])(a0, a1));
    var _fdiml = (Module["_fdiml"] = (a0, a1, a2, a3, a4) =>
      (_fdiml = Module["_fdiml"] = wasmExports["fdiml"])(a0, a1, a2, a3, a4));
    var _fegetexceptflag = (Module["_fegetexceptflag"] = (a0, a1) =>
      (_fegetexceptflag = Module["_fegetexceptflag"] =
        wasmExports["fegetexceptflag"])(a0, a1));
    var _fetestexcept = (Module["_fetestexcept"] = (a0) =>
      (_fetestexcept = Module["_fetestexcept"] = wasmExports["fetestexcept"])(
        a0,
      ));
    var _feholdexcept = (Module["_feholdexcept"] = (a0) =>
      (_feholdexcept = Module["_feholdexcept"] = wasmExports["feholdexcept"])(
        a0,
      ));
    var _fegetenv = (Module["_fegetenv"] = (a0) =>
      (_fegetenv = Module["_fegetenv"] = wasmExports["fegetenv"])(a0));
    var _feclearexcept = (Module["_feclearexcept"] = (a0) =>
      (_feclearexcept = Module["_feclearexcept"] =
        wasmExports["feclearexcept"])(a0));
    var _feraiseexcept = (Module["_feraiseexcept"] = (a0) =>
      (_feraiseexcept = Module["_feraiseexcept"] =
        wasmExports["feraiseexcept"])(a0));
    var ___fesetround = (Module["___fesetround"] = (a0) =>
      (___fesetround = Module["___fesetround"] = wasmExports["__fesetround"])(
        a0,
      ));
    var _fesetenv = (Module["_fesetenv"] = (a0) =>
      (_fesetenv = Module["_fesetenv"] = wasmExports["fesetenv"])(a0));
    var _feof_unlocked = (Module["_feof_unlocked"] = (a0) =>
      (_feof_unlocked = Module["_feof_unlocked"] =
        wasmExports["feof_unlocked"])(a0));
    var __IO_feof_unlocked = (Module["__IO_feof_unlocked"] = (a0) =>
      (__IO_feof_unlocked = Module["__IO_feof_unlocked"] =
        wasmExports["_IO_feof_unlocked"])(a0));
    var _ferror_unlocked = (Module["_ferror_unlocked"] = (a0) =>
      (_ferror_unlocked = Module["_ferror_unlocked"] =
        wasmExports["ferror_unlocked"])(a0));
    var __IO_ferror_unlocked = (Module["__IO_ferror_unlocked"] = (a0) =>
      (__IO_ferror_unlocked = Module["__IO_ferror_unlocked"] =
        wasmExports["_IO_ferror_unlocked"])(a0));
    var _fesetexceptflag = (Module["_fesetexceptflag"] = (a0, a1) =>
      (_fesetexceptflag = Module["_fesetexceptflag"] =
        wasmExports["fesetexceptflag"])(a0, a1));
    var _fesetround = (Module["_fesetround"] = (a0) =>
      (_fesetround = Module["_fesetround"] = wasmExports["fesetround"])(a0));
    var _feupdateenv = (Module["_feupdateenv"] = (a0) =>
      (_feupdateenv = Module["_feupdateenv"] = wasmExports["feupdateenv"])(a0));
    var _fflush_unlocked = (Module["_fflush_unlocked"] = (a0) =>
      (_fflush_unlocked = Module["_fflush_unlocked"] =
        wasmExports["fflush_unlocked"])(a0));
    var _ffs = (Module["_ffs"] = (a0) =>
      (_ffs = Module["_ffs"] = wasmExports["ffs"])(a0));
    var _ffsl = (Module["_ffsl"] = (a0) =>
      (_ffsl = Module["_ffsl"] = wasmExports["ffsl"])(a0));
    var _ffsll = (Module["_ffsll"] = (a0) =>
      (_ffsll = Module["_ffsll"] = wasmExports["ffsll"])(a0));
    var _emscripten_futex_wake = (Module["_emscripten_futex_wake"] = (a0, a1) =>
      (_emscripten_futex_wake = Module["_emscripten_futex_wake"] =
        wasmExports["emscripten_futex_wake"])(a0, a1));
    var _fgetln = (Module["_fgetln"] = (a0, a1) =>
      (_fgetln = Module["_fgetln"] = wasmExports["fgetln"])(a0, a1));
    var _getline = (Module["_getline"] = (a0, a1, a2) =>
      (_getline = Module["_getline"] = wasmExports["getline"])(a0, a1, a2));
    var _fgetpos = (Module["_fgetpos"] = (a0, a1) =>
      (_fgetpos = Module["_fgetpos"] = wasmExports["fgetpos"])(a0, a1));
    var _fgets_unlocked = (Module["_fgets_unlocked"] = (a0, a1, a2) =>
      (_fgets_unlocked = Module["_fgets_unlocked"] =
        wasmExports["fgets_unlocked"])(a0, a1, a2));
    var ___fgetwc_unlocked = (Module["___fgetwc_unlocked"] = (a0) =>
      (___fgetwc_unlocked = Module["___fgetwc_unlocked"] =
        wasmExports["__fgetwc_unlocked"])(a0));
    var _fwide = (Module["_fwide"] = (a0, a1) =>
      (_fwide = Module["_fwide"] = wasmExports["fwide"])(a0, a1));
    var _mbtowc = (Module["_mbtowc"] = (a0, a1, a2) =>
      (_mbtowc = Module["_mbtowc"] = wasmExports["mbtowc"])(a0, a1, a2));
    var _fgetwc = (Module["_fgetwc"] = (a0) =>
      (_fgetwc = Module["_fgetwc"] = wasmExports["fgetwc"])(a0));
    var _fgetwc_unlocked = (Module["_fgetwc_unlocked"] = (a0) =>
      (_fgetwc_unlocked = Module["_fgetwc_unlocked"] =
        wasmExports["fgetwc_unlocked"])(a0));
    var _getwc_unlocked = (Module["_getwc_unlocked"] = (a0) =>
      (_getwc_unlocked = Module["_getwc_unlocked"] =
        wasmExports["getwc_unlocked"])(a0));
    var _fgetws = (Module["_fgetws"] = (a0, a1, a2) =>
      (_fgetws = Module["_fgetws"] = wasmExports["fgetws"])(a0, a1, a2));
    var _fgetws_unlocked = (Module["_fgetws_unlocked"] = (a0, a1, a2) =>
      (_fgetws_unlocked = Module["_fgetws_unlocked"] =
        wasmExports["fgetws_unlocked"])(a0, a1, a2));
    var _fileno_unlocked = (Module["_fileno_unlocked"] = (a0) =>
      (_fileno_unlocked = Module["_fileno_unlocked"] =
        wasmExports["fileno_unlocked"])(a0));
    var _finite = (Module["_finite"] = (a0) =>
      (_finite = Module["_finite"] = wasmExports["finite"])(a0));
    var _finitef = (Module["_finitef"] = (a0) =>
      (_finitef = Module["_finitef"] = wasmExports["finitef"])(a0));
    var ___floatunsitf = (Module["___floatunsitf"] = (a0, a1) =>
      (___floatunsitf = Module["___floatunsitf"] =
        wasmExports["__floatunsitf"])(a0, a1));
    var _fmodl = (Module["_fmodl"] = (a0, a1, a2, a3, a4) =>
      (_fmodl = Module["_fmodl"] = wasmExports["fmodl"])(a0, a1, a2, a3, a4));
    var _ftrylockfile = (Module["_ftrylockfile"] = (a0) =>
      (_ftrylockfile = Module["_ftrylockfile"] = wasmExports["ftrylockfile"])(
        a0,
      ));
    var _floorf = (Module["_floorf"] = (a0) =>
      (_floorf = Module["_floorf"] = wasmExports["floorf"])(a0));
    var _floorl = (Module["_floorl"] = (a0, a1, a2) =>
      (_floorl = Module["_floorl"] = wasmExports["floorl"])(a0, a1, a2));
    var _fma = (Module["_fma"] = (a0, a1, a2) =>
      (_fma = Module["_fma"] = wasmExports["fma"])(a0, a1, a2));
    var _fmaf = (Module["_fmaf"] = (a0, a1, a2) =>
      (_fmaf = Module["_fmaf"] = wasmExports["fmaf"])(a0, a1, a2));
    var _fmal = (Module["_fmal"] = (a0, a1, a2, a3, a4, a5, a6) =>
      (_fmal = Module["_fmal"] = wasmExports["fmal"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
      ));
    var _frexpl = (Module["_frexpl"] = (a0, a1, a2, a3) =>
      (_frexpl = Module["_frexpl"] = wasmExports["frexpl"])(a0, a1, a2, a3));
    var _nextafterl = (Module["_nextafterl"] = (a0, a1, a2, a3, a4) =>
      (_nextafterl = Module["_nextafterl"] = wasmExports["nextafterl"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _ilogbl = (Module["_ilogbl"] = (a0, a1) =>
      (_ilogbl = Module["_ilogbl"] = wasmExports["ilogbl"])(a0, a1));
    var _fmax = (Module["_fmax"] = (a0, a1) =>
      (_fmax = Module["_fmax"] = wasmExports["fmax"])(a0, a1));
    var _fmaxf = (Module["_fmaxf"] = (a0, a1) =>
      (_fmaxf = Module["_fmaxf"] = wasmExports["fmaxf"])(a0, a1));
    var _fmaxl = (Module["_fmaxl"] = (a0, a1, a2, a3, a4) =>
      (_fmaxl = Module["_fmaxl"] = wasmExports["fmaxl"])(a0, a1, a2, a3, a4));
    var _fmemopen = (Module["_fmemopen"] = (a0, a1, a2) =>
      (_fmemopen = Module["_fmemopen"] = wasmExports["fmemopen"])(a0, a1, a2));
    var _fmin = (Module["_fmin"] = (a0, a1) =>
      (_fmin = Module["_fmin"] = wasmExports["fmin"])(a0, a1));
    var _fminf = (Module["_fminf"] = (a0, a1) =>
      (_fminf = Module["_fminf"] = wasmExports["fminf"])(a0, a1));
    var _fminl = (Module["_fminl"] = (a0, a1, a2, a3, a4) =>
      (_fminl = Module["_fminl"] = wasmExports["fminl"])(a0, a1, a2, a3, a4));
    var _fmodf = (Module["_fmodf"] = (a0, a1) =>
      (_fmodf = Module["_fmodf"] = wasmExports["fmodf"])(a0, a1));
    var _fmtmsg = (Module["_fmtmsg"] = (a0, a1, a2, a3, a4, a5) =>
      (_fmtmsg = Module["_fmtmsg"] = wasmExports["fmtmsg"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _fnmatch = (Module["_fnmatch"] = (a0, a1, a2) =>
      (_fnmatch = Module["_fnmatch"] = wasmExports["fnmatch"])(a0, a1, a2));
    var _towupper = (Module["_towupper"] = (a0) =>
      (_towupper = Module["_towupper"] = wasmExports["towupper"])(a0));
    var _towlower = (Module["_towlower"] = (a0) =>
      (_towlower = Module["_towlower"] = wasmExports["towlower"])(a0));
    var _wctype = (Module["_wctype"] = (a0) =>
      (_wctype = Module["_wctype"] = wasmExports["wctype"])(a0));
    var _iswctype = (Module["_iswctype"] = (a0, a1) =>
      (_iswctype = Module["_iswctype"] = wasmExports["iswctype"])(a0, a1));
    var _fopencookie = (Module["_fopencookie"] = (a0, a1, a2) =>
      (_fopencookie = Module["_fopencookie"] = wasmExports["fopencookie"])(
        a0,
        a1,
        a2,
      ));
    var _forkpty = (Module["_forkpty"] = (a0, a1, a2, a3) =>
      (_forkpty = Module["_forkpty"] = wasmExports["forkpty"])(a0, a1, a2, a3));
    var _openpty = (Module["_openpty"] = (a0, a1, a2, a3, a4) =>
      (_openpty = Module["_openpty"] = wasmExports["openpty"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _pipe2 = (Module["_pipe2"] = (a0, a1) =>
      (_pipe2 = Module["_pipe2"] = wasmExports["pipe2"])(a0, a1));
    var _vfiprintf = (Module["_vfiprintf"] = (a0, a1, a2) =>
      (_vfiprintf = Module["_vfiprintf"] = wasmExports["vfiprintf"])(
        a0,
        a1,
        a2,
      ));
    var ___small_vfprintf = (Module["___small_vfprintf"] = (a0, a1, a2) =>
      (___small_vfprintf = Module["___small_vfprintf"] =
        wasmExports["__small_vfprintf"])(a0, a1, a2));
    var _fputs_unlocked = (Module["_fputs_unlocked"] = (a0, a1) =>
      (_fputs_unlocked = Module["_fputs_unlocked"] =
        wasmExports["fputs_unlocked"])(a0, a1));
    var ___fputwc_unlocked = (Module["___fputwc_unlocked"] = (a0, a1) =>
      (___fputwc_unlocked = Module["___fputwc_unlocked"] =
        wasmExports["__fputwc_unlocked"])(a0, a1));
    var _wctomb = (Module["_wctomb"] = (a0, a1) =>
      (_wctomb = Module["_wctomb"] = wasmExports["wctomb"])(a0, a1));
    var _fputwc = (Module["_fputwc"] = (a0, a1) =>
      (_fputwc = Module["_fputwc"] = wasmExports["fputwc"])(a0, a1));
    var _fputwc_unlocked = (Module["_fputwc_unlocked"] = (a0, a1) =>
      (_fputwc_unlocked = Module["_fputwc_unlocked"] =
        wasmExports["fputwc_unlocked"])(a0, a1));
    var _putwc_unlocked = (Module["_putwc_unlocked"] = (a0, a1) =>
      (_putwc_unlocked = Module["_putwc_unlocked"] =
        wasmExports["putwc_unlocked"])(a0, a1));
    var _fputws = (Module["_fputws"] = (a0, a1) =>
      (_fputws = Module["_fputws"] = wasmExports["fputws"])(a0, a1));
    var _wcsrtombs = (Module["_wcsrtombs"] = (a0, a1, a2, a3) =>
      (_wcsrtombs = Module["_wcsrtombs"] = wasmExports["wcsrtombs"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _fputws_unlocked = (Module["_fputws_unlocked"] = (a0, a1) =>
      (_fputws_unlocked = Module["_fputws_unlocked"] =
        wasmExports["fputws_unlocked"])(a0, a1));
    var _fread_unlocked = (Module["_fread_unlocked"] = (a0, a1, a2, a3) =>
      (_fread_unlocked = Module["_fread_unlocked"] =
        wasmExports["fread_unlocked"])(a0, a1, a2, a3));
    var _freelocale = (Module["_freelocale"] = (a0) =>
      (_freelocale = Module["_freelocale"] = wasmExports["freelocale"])(a0));
    var ___freelocale = (Module["___freelocale"] = (a0) =>
      (___freelocale = Module["___freelocale"] = wasmExports["__freelocale"])(
        a0,
      ));
    var _freopen = (Module["_freopen"] = (a0, a1, a2) =>
      (_freopen = Module["_freopen"] = wasmExports["freopen"])(a0, a1, a2));
    var _frexpf = (Module["_frexpf"] = (a0, a1) =>
      (_frexpf = Module["_frexpf"] = wasmExports["frexpf"])(a0, a1));
    var _fscanf = (Module["_fscanf"] = (a0, a1, a2) =>
      (_fscanf = Module["_fscanf"] = wasmExports["fscanf"])(a0, a1, a2));
    var _vfscanf = (Module["_vfscanf"] = (a0, a1, a2) =>
      (_vfscanf = Module["_vfscanf"] = wasmExports["vfscanf"])(a0, a1, a2));
    var ___isoc99_fscanf = (Module["___isoc99_fscanf"] = (a0, a1, a2) =>
      (___isoc99_fscanf = Module["___isoc99_fscanf"] =
        wasmExports["__isoc99_fscanf"])(a0, a1, a2));
    var _fseek = (Module["_fseek"] = (a0, a1, a2) =>
      (_fseek = Module["_fseek"] = wasmExports["fseek"])(a0, a1, a2));
    var _fseeko = (Module["_fseeko"] = (a0, a1, a2) =>
      (_fseeko = Module["_fseeko"] = wasmExports["fseeko"])(a0, a1, a2));
    var _fsetpos = (Module["_fsetpos"] = (a0, a1) =>
      (_fsetpos = Module["_fsetpos"] = wasmExports["fsetpos"])(a0, a1));
    var _ftello = (Module["_ftello"] = (a0) =>
      (_ftello = Module["_ftello"] = wasmExports["ftello"])(a0));
    var _ftime = (Module["_ftime"] = (a0) =>
      (_ftime = Module["_ftime"] = wasmExports["ftime"])(a0));
    var _utimensat = (Module["_utimensat"] = (a0, a1, a2, a3) =>
      (_utimensat = Module["_utimensat"] = wasmExports["utimensat"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _fwprintf = (Module["_fwprintf"] = (a0, a1, a2) =>
      (_fwprintf = Module["_fwprintf"] = wasmExports["fwprintf"])(a0, a1, a2));
    var _vfwprintf = (Module["_vfwprintf"] = (a0, a1, a2) =>
      (_vfwprintf = Module["_vfwprintf"] = wasmExports["vfwprintf"])(
        a0,
        a1,
        a2,
      ));
    var _fwrite_unlocked = (Module["_fwrite_unlocked"] = (a0, a1, a2, a3) =>
      (_fwrite_unlocked = Module["_fwrite_unlocked"] =
        wasmExports["fwrite_unlocked"])(a0, a1, a2, a3));
    var _fwscanf = (Module["_fwscanf"] = (a0, a1, a2) =>
      (_fwscanf = Module["_fwscanf"] = wasmExports["fwscanf"])(a0, a1, a2));
    var _vfwscanf = (Module["_vfwscanf"] = (a0, a1, a2) =>
      (_vfwscanf = Module["_vfwscanf"] = wasmExports["vfwscanf"])(a0, a1, a2));
    var ___isoc99_fwscanf = (Module["___isoc99_fwscanf"] = (a0, a1, a2) =>
      (___isoc99_fwscanf = Module["___isoc99_fwscanf"] =
        wasmExports["__isoc99_fwscanf"])(a0, a1, a2));
    var _gcvt = (Module["_gcvt"] = (a0, a1, a2) =>
      (_gcvt = Module["_gcvt"] = wasmExports["gcvt"])(a0, a1, a2));
    var _get_current_dir_name = (Module["_get_current_dir_name"] = () =>
      (_get_current_dir_name = Module["_get_current_dir_name"] =
        wasmExports["get_current_dir_name"])());
    var _strdup = (Module["_strdup"] = (a0) =>
      (_strdup = Module["_strdup"] = wasmExports["strdup"])(a0));
    var __IO_getc = (Module["__IO_getc"] = (a0) =>
      (__IO_getc = Module["__IO_getc"] = wasmExports["_IO_getc"])(a0));
    var _fgetc_unlocked = (Module["_fgetc_unlocked"] = (a0) =>
      (_fgetc_unlocked = Module["_fgetc_unlocked"] =
        wasmExports["fgetc_unlocked"])(a0));
    var __IO_getc_unlocked = (Module["__IO_getc_unlocked"] = (a0) =>
      (__IO_getc_unlocked = Module["__IO_getc_unlocked"] =
        wasmExports["_IO_getc_unlocked"])(a0));
    var _getchar = (Module["_getchar"] = () =>
      (_getchar = Module["_getchar"] = wasmExports["getchar"])());
    var _getchar_unlocked = (Module["_getchar_unlocked"] = () =>
      (_getchar_unlocked = Module["_getchar_unlocked"] =
        wasmExports["getchar_unlocked"])());
    var _getdelim = (Module["_getdelim"] = (a0, a1, a2, a3) =>
      (_getdelim = Module["_getdelim"] = wasmExports["getdelim"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___getdelim = (Module["___getdelim"] = (a0, a1, a2, a3) =>
      (___getdelim = Module["___getdelim"] = wasmExports["__getdelim"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _getdents = (Module["_getdents"] = (a0, a1, a2) =>
      (_getdents = Module["_getdents"] = wasmExports["getdents"])(a0, a1, a2));
    var _getdomainname = (Module["_getdomainname"] = (a0, a1) =>
      (_getdomainname = Module["_getdomainname"] =
        wasmExports["getdomainname"])(a0, a1));
    var _getegid = (Module["_getegid"] = () =>
      (_getegid = Module["_getegid"] = wasmExports["getegid"])());
    var _geteuid = (Module["_geteuid"] = () =>
      (_geteuid = Module["_geteuid"] = wasmExports["geteuid"])());
    var _getgroups = (Module["_getgroups"] = (a0, a1) =>
      (_getgroups = Module["_getgroups"] = wasmExports["getgroups"])(a0, a1));
    var _gethostid = (Module["_gethostid"] = () =>
      (_gethostid = Module["_gethostid"] = wasmExports["gethostid"])());
    var _freeifaddrs = (Module["_freeifaddrs"] = (a0) =>
      (_freeifaddrs = Module["_freeifaddrs"] = wasmExports["freeifaddrs"])(a0));
    var _getifaddrs = (Module["_getifaddrs"] = (a0) =>
      (_getifaddrs = Module["_getifaddrs"] = wasmExports["getifaddrs"])(a0));
    var ___getitimer = (Module["___getitimer"] = (a0, a1, a2) =>
      (___getitimer = Module["___getitimer"] = wasmExports["__getitimer"])(
        a0,
        a1,
        a2,
      ));
    var _getlogin_r = (Module["_getlogin_r"] = (a0, a1) =>
      (_getlogin_r = Module["_getlogin_r"] = wasmExports["getlogin_r"])(
        a0,
        a1,
      ));
    var _getopt = (Module["_getopt"] = (a0, a1, a2) =>
      (_getopt = Module["_getopt"] = wasmExports["getopt"])(a0, a1, a2));
    var ___posix_getopt = (Module["___posix_getopt"] = (a0, a1, a2) =>
      (___posix_getopt = Module["___posix_getopt"] =
        wasmExports["__posix_getopt"])(a0, a1, a2));
    var _getopt_long = (Module["_getopt_long"] = (a0, a1, a2, a3, a4) =>
      (_getopt_long = Module["_getopt_long"] = wasmExports["getopt_long"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _getopt_long_only = (Module["_getopt_long_only"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_getopt_long_only = Module["_getopt_long_only"] =
        wasmExports["getopt_long_only"])(a0, a1, a2, a3, a4));
    var _mblen = (Module["_mblen"] = (a0, a1) =>
      (_mblen = Module["_mblen"] = wasmExports["mblen"])(a0, a1));
    var _getpagesize = (Module["_getpagesize"] = () =>
      (_getpagesize = Module["_getpagesize"] = wasmExports["getpagesize"])());
    var _getresgid = (Module["_getresgid"] = (a0, a1, a2) =>
      (_getresgid = Module["_getresgid"] = wasmExports["getresgid"])(
        a0,
        a1,
        a2,
      ));
    var _getresuid = (Module["_getresuid"] = (a0, a1, a2) =>
      (_getresuid = Module["_getresuid"] = wasmExports["getresuid"])(
        a0,
        a1,
        a2,
      ));
    var _getrusage = (Module["_getrusage"] = (a0, a1) =>
      (_getrusage = Module["_getrusage"] = wasmExports["getrusage"])(a0, a1));
    var _gets = (Module["_gets"] = (a0) =>
      (_gets = Module["_gets"] = wasmExports["gets"])(a0));
    var _getservbyname_r = (Module["_getservbyname_r"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_getservbyname_r = Module["_getservbyname_r"] =
        wasmExports["getservbyname_r"])(a0, a1, a2, a3, a4, a5));
    var _getservbyport_r = (Module["_getservbyport_r"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_getservbyport_r = Module["_getservbyport_r"] =
        wasmExports["getservbyport_r"])(a0, a1, a2, a3, a4, a5));
    var _getsubopt = (Module["_getsubopt"] = (a0, a1, a2) =>
      (_getsubopt = Module["_getsubopt"] = wasmExports["getsubopt"])(
        a0,
        a1,
        a2,
      ));
    var _gettid = (Module["_gettid"] = () =>
      (_gettid = Module["_gettid"] = wasmExports["gettid"])());
    var _getw = (Module["_getw"] = (a0) =>
      (_getw = Module["_getw"] = wasmExports["getw"])(a0));
    var _getwc = (Module["_getwc"] = (a0) =>
      (_getwc = Module["_getwc"] = wasmExports["getwc"])(a0));
    var _getwchar = (Module["_getwchar"] = () =>
      (_getwchar = Module["_getwchar"] = wasmExports["getwchar"])());
    var _getwchar_unlocked = (Module["_getwchar_unlocked"] = () =>
      (_getwchar_unlocked = Module["_getwchar_unlocked"] =
        wasmExports["getwchar_unlocked"])());
    var _glob = (Module["_glob"] = (a0, a1, a2, a3) =>
      (_glob = Module["_glob"] = wasmExports["glob"])(a0, a1, a2, a3));
    var _globfree = (Module["_globfree"] = (a0) =>
      (_globfree = Module["_globfree"] = wasmExports["globfree"])(a0));
    var _gmtime = (Module["_gmtime"] = (a0) =>
      (_gmtime = Module["_gmtime"] = wasmExports["gmtime"])(a0));
    var _herror = (Module["_herror"] = (a0) =>
      (_herror = Module["_herror"] = wasmExports["herror"])(a0));
    var _hcreate = (Module["_hcreate"] = (a0) =>
      (_hcreate = Module["_hcreate"] = wasmExports["hcreate"])(a0));
    var _hdestroy = (Module["_hdestroy"] = () =>
      (_hdestroy = Module["_hdestroy"] = wasmExports["hdestroy"])());
    var _hsearch = (Module["_hsearch"] = (a0, a1) =>
      (_hsearch = Module["_hsearch"] = wasmExports["hsearch"])(a0, a1));
    var _hcreate_r = (Module["_hcreate_r"] = (a0, a1) =>
      (_hcreate_r = Module["_hcreate_r"] = wasmExports["hcreate_r"])(a0, a1));
    var _hdestroy_r = (Module["_hdestroy_r"] = (a0) =>
      (_hdestroy_r = Module["_hdestroy_r"] = wasmExports["hdestroy_r"])(a0));
    var _hsearch_r = (Module["_hsearch_r"] = (a0, a1, a2, a3) =>
      (_hsearch_r = Module["_hsearch_r"] = wasmExports["hsearch_r"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _iconv_open = (Module["_iconv_open"] = (a0, a1) =>
      (_iconv_open = Module["_iconv_open"] = wasmExports["iconv_open"])(
        a0,
        a1,
      ));
    var _iconv = (Module["_iconv"] = (a0, a1, a2, a3, a4) =>
      (_iconv = Module["_iconv"] = wasmExports["iconv"])(a0, a1, a2, a3, a4));
    var _iconv_close = (Module["_iconv_close"] = (a0) =>
      (_iconv_close = Module["_iconv_close"] = wasmExports["iconv_close"])(a0));
    var _ioctl = (Module["_ioctl"] = (a0, a1, a2) =>
      (_ioctl = Module["_ioctl"] = wasmExports["ioctl"])(a0, a1, a2));
    var _ilogb = (Module["_ilogb"] = (a0) =>
      (_ilogb = Module["_ilogb"] = wasmExports["ilogb"])(a0));
    var _ilogbf = (Module["_ilogbf"] = (a0) =>
      (_ilogbf = Module["_ilogbf"] = wasmExports["ilogbf"])(a0));
    var _imaxabs = (Module["_imaxabs"] = (a0) =>
      (_imaxabs = Module["_imaxabs"] = wasmExports["imaxabs"])(a0));
    var _imaxdiv = (Module["_imaxdiv"] = (a0, a1, a2) =>
      (_imaxdiv = Module["_imaxdiv"] = wasmExports["imaxdiv"])(a0, a1, a2));
    var _index = (Module["_index"] = (a0, a1) =>
      (_index = Module["_index"] = wasmExports["index"])(a0, a1));
    var _inet_addr = (Module["_inet_addr"] = (a0) =>
      (_inet_addr = Module["_inet_addr"] = wasmExports["inet_addr"])(a0));
    var _inet_network = (Module["_inet_network"] = (a0) =>
      (_inet_network = Module["_inet_network"] = wasmExports["inet_network"])(
        a0,
      ));
    var _inet_makeaddr = (Module["_inet_makeaddr"] = (a0, a1) =>
      (_inet_makeaddr = Module["_inet_makeaddr"] =
        wasmExports["inet_makeaddr"])(a0, a1));
    var _inet_lnaof = (Module["_inet_lnaof"] = (a0) =>
      (_inet_lnaof = Module["_inet_lnaof"] = wasmExports["inet_lnaof"])(a0));
    var _inet_netof = (Module["_inet_netof"] = (a0) =>
      (_inet_netof = Module["_inet_netof"] = wasmExports["inet_netof"])(a0));
    var _insque = (Module["_insque"] = (a0, a1) =>
      (_insque = Module["_insque"] = wasmExports["insque"])(a0, a1));
    var _remque = (Module["_remque"] = (a0) =>
      (_remque = Module["_remque"] = wasmExports["remque"])(a0));
    var ___intscan = (Module["___intscan"] = (a0, a1, a2, a3) =>
      (___intscan = Module["___intscan"] = wasmExports["__intscan"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___multi3 = (Module["___multi3"] = (a0, a1, a2, a3, a4) =>
      (___multi3 = Module["___multi3"] = wasmExports["__multi3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___isalnum_l = (Module["___isalnum_l"] = (a0, a1) =>
      (___isalnum_l = Module["___isalnum_l"] = wasmExports["__isalnum_l"])(
        a0,
        a1,
      ));
    var _isalnum_l = (Module["_isalnum_l"] = (a0, a1) =>
      (_isalnum_l = Module["_isalnum_l"] = wasmExports["isalnum_l"])(a0, a1));
    var ___isalpha_l = (Module["___isalpha_l"] = (a0, a1) =>
      (___isalpha_l = Module["___isalpha_l"] = wasmExports["__isalpha_l"])(
        a0,
        a1,
      ));
    var _isalpha_l = (Module["_isalpha_l"] = (a0, a1) =>
      (_isalpha_l = Module["_isalpha_l"] = wasmExports["isalpha_l"])(a0, a1));
    var _isascii = (Module["_isascii"] = (a0) =>
      (_isascii = Module["_isascii"] = wasmExports["isascii"])(a0));
    var _isblank = (Module["_isblank"] = (a0) =>
      (_isblank = Module["_isblank"] = wasmExports["isblank"])(a0));
    var ___isblank_l = (Module["___isblank_l"] = (a0, a1) =>
      (___isblank_l = Module["___isblank_l"] = wasmExports["__isblank_l"])(
        a0,
        a1,
      ));
    var _isblank_l = (Module["_isblank_l"] = (a0, a1) =>
      (_isblank_l = Module["_isblank_l"] = wasmExports["isblank_l"])(a0, a1));
    var _iscntrl = (Module["_iscntrl"] = (a0) =>
      (_iscntrl = Module["_iscntrl"] = wasmExports["iscntrl"])(a0));
    var ___iscntrl_l = (Module["___iscntrl_l"] = (a0, a1) =>
      (___iscntrl_l = Module["___iscntrl_l"] = wasmExports["__iscntrl_l"])(
        a0,
        a1,
      ));
    var _iscntrl_l = (Module["_iscntrl_l"] = (a0, a1) =>
      (_iscntrl_l = Module["_iscntrl_l"] = wasmExports["iscntrl_l"])(a0, a1));
    var ___isdigit_l = (Module["___isdigit_l"] = (a0, a1) =>
      (___isdigit_l = Module["___isdigit_l"] = wasmExports["__isdigit_l"])(
        a0,
        a1,
      ));
    var _isdigit_l = (Module["_isdigit_l"] = (a0, a1) =>
      (_isdigit_l = Module["_isdigit_l"] = wasmExports["isdigit_l"])(a0, a1));
    var _isgraph = (Module["_isgraph"] = (a0) =>
      (_isgraph = Module["_isgraph"] = wasmExports["isgraph"])(a0));
    var ___isgraph_l = (Module["___isgraph_l"] = (a0, a1) =>
      (___isgraph_l = Module["___isgraph_l"] = wasmExports["__isgraph_l"])(
        a0,
        a1,
      ));
    var _isgraph_l = (Module["_isgraph_l"] = (a0, a1) =>
      (_isgraph_l = Module["_isgraph_l"] = wasmExports["isgraph_l"])(a0, a1));
    var _islower = (Module["_islower"] = (a0) =>
      (_islower = Module["_islower"] = wasmExports["islower"])(a0));
    var ___islower_l = (Module["___islower_l"] = (a0, a1) =>
      (___islower_l = Module["___islower_l"] = wasmExports["__islower_l"])(
        a0,
        a1,
      ));
    var _islower_l = (Module["_islower_l"] = (a0, a1) =>
      (_islower_l = Module["_islower_l"] = wasmExports["islower_l"])(a0, a1));
    var _isprint = (Module["_isprint"] = (a0) =>
      (_isprint = Module["_isprint"] = wasmExports["isprint"])(a0));
    var ___isprint_l = (Module["___isprint_l"] = (a0, a1) =>
      (___isprint_l = Module["___isprint_l"] = wasmExports["__isprint_l"])(
        a0,
        a1,
      ));
    var _isprint_l = (Module["_isprint_l"] = (a0, a1) =>
      (_isprint_l = Module["_isprint_l"] = wasmExports["isprint_l"])(a0, a1));
    var _ispunct = (Module["_ispunct"] = (a0) =>
      (_ispunct = Module["_ispunct"] = wasmExports["ispunct"])(a0));
    var ___ispunct_l = (Module["___ispunct_l"] = (a0, a1) =>
      (___ispunct_l = Module["___ispunct_l"] = wasmExports["__ispunct_l"])(
        a0,
        a1,
      ));
    var _ispunct_l = (Module["_ispunct_l"] = (a0, a1) =>
      (_ispunct_l = Module["_ispunct_l"] = wasmExports["ispunct_l"])(a0, a1));
    var _issetugid = (Module["_issetugid"] = () =>
      (_issetugid = Module["_issetugid"] = wasmExports["issetugid"])());
    var ___isspace_l = (Module["___isspace_l"] = (a0, a1) =>
      (___isspace_l = Module["___isspace_l"] = wasmExports["__isspace_l"])(
        a0,
        a1,
      ));
    var _isspace_l = (Module["_isspace_l"] = (a0, a1) =>
      (_isspace_l = Module["_isspace_l"] = wasmExports["isspace_l"])(a0, a1));
    var ___isupper_l = (Module["___isupper_l"] = (a0, a1) =>
      (___isupper_l = Module["___isupper_l"] = wasmExports["__isupper_l"])(
        a0,
        a1,
      ));
    var _isupper_l = (Module["_isupper_l"] = (a0, a1) =>
      (_isupper_l = Module["_isupper_l"] = wasmExports["isupper_l"])(a0, a1));
    var _iswalnum = (Module["_iswalnum"] = (a0) =>
      (_iswalnum = Module["_iswalnum"] = wasmExports["iswalnum"])(a0));
    var _iswdigit = (Module["_iswdigit"] = (a0) =>
      (_iswdigit = Module["_iswdigit"] = wasmExports["iswdigit"])(a0));
    var _iswalpha = (Module["_iswalpha"] = (a0) =>
      (_iswalpha = Module["_iswalpha"] = wasmExports["iswalpha"])(a0));
    var ___iswalnum_l = (Module["___iswalnum_l"] = (a0, a1) =>
      (___iswalnum_l = Module["___iswalnum_l"] = wasmExports["__iswalnum_l"])(
        a0,
        a1,
      ));
    var _iswalnum_l = (Module["_iswalnum_l"] = (a0, a1) =>
      (_iswalnum_l = Module["_iswalnum_l"] = wasmExports["iswalnum_l"])(
        a0,
        a1,
      ));
    var ___iswalpha_l = (Module["___iswalpha_l"] = (a0, a1) =>
      (___iswalpha_l = Module["___iswalpha_l"] = wasmExports["__iswalpha_l"])(
        a0,
        a1,
      ));
    var _iswalpha_l = (Module["_iswalpha_l"] = (a0, a1) =>
      (_iswalpha_l = Module["_iswalpha_l"] = wasmExports["iswalpha_l"])(
        a0,
        a1,
      ));
    var _iswblank = (Module["_iswblank"] = (a0) =>
      (_iswblank = Module["_iswblank"] = wasmExports["iswblank"])(a0));
    var ___iswblank_l = (Module["___iswblank_l"] = (a0, a1) =>
      (___iswblank_l = Module["___iswblank_l"] = wasmExports["__iswblank_l"])(
        a0,
        a1,
      ));
    var _iswblank_l = (Module["_iswblank_l"] = (a0, a1) =>
      (_iswblank_l = Module["_iswblank_l"] = wasmExports["iswblank_l"])(
        a0,
        a1,
      ));
    var _iswcntrl = (Module["_iswcntrl"] = (a0) =>
      (_iswcntrl = Module["_iswcntrl"] = wasmExports["iswcntrl"])(a0));
    var ___iswcntrl_l = (Module["___iswcntrl_l"] = (a0, a1) =>
      (___iswcntrl_l = Module["___iswcntrl_l"] = wasmExports["__iswcntrl_l"])(
        a0,
        a1,
      ));
    var _iswcntrl_l = (Module["_iswcntrl_l"] = (a0, a1) =>
      (_iswcntrl_l = Module["_iswcntrl_l"] = wasmExports["iswcntrl_l"])(
        a0,
        a1,
      ));
    var _iswgraph = (Module["_iswgraph"] = (a0) =>
      (_iswgraph = Module["_iswgraph"] = wasmExports["iswgraph"])(a0));
    var _iswlower = (Module["_iswlower"] = (a0) =>
      (_iswlower = Module["_iswlower"] = wasmExports["iswlower"])(a0));
    var _iswprint = (Module["_iswprint"] = (a0) =>
      (_iswprint = Module["_iswprint"] = wasmExports["iswprint"])(a0));
    var _iswpunct = (Module["_iswpunct"] = (a0) =>
      (_iswpunct = Module["_iswpunct"] = wasmExports["iswpunct"])(a0));
    var _iswspace = (Module["_iswspace"] = (a0) =>
      (_iswspace = Module["_iswspace"] = wasmExports["iswspace"])(a0));
    var _iswupper = (Module["_iswupper"] = (a0) =>
      (_iswupper = Module["_iswupper"] = wasmExports["iswupper"])(a0));
    var _iswxdigit = (Module["_iswxdigit"] = (a0) =>
      (_iswxdigit = Module["_iswxdigit"] = wasmExports["iswxdigit"])(a0));
    var ___iswctype_l = (Module["___iswctype_l"] = (a0, a1, a2) =>
      (___iswctype_l = Module["___iswctype_l"] = wasmExports["__iswctype_l"])(
        a0,
        a1,
        a2,
      ));
    var ___wctype_l = (Module["___wctype_l"] = (a0, a1) =>
      (___wctype_l = Module["___wctype_l"] = wasmExports["__wctype_l"])(
        a0,
        a1,
      ));
    var _iswctype_l = (Module["_iswctype_l"] = (a0, a1, a2) =>
      (_iswctype_l = Module["_iswctype_l"] = wasmExports["iswctype_l"])(
        a0,
        a1,
        a2,
      ));
    var _wctype_l = (Module["_wctype_l"] = (a0, a1) =>
      (_wctype_l = Module["_wctype_l"] = wasmExports["wctype_l"])(a0, a1));
    var ___iswdigit_l = (Module["___iswdigit_l"] = (a0, a1) =>
      (___iswdigit_l = Module["___iswdigit_l"] = wasmExports["__iswdigit_l"])(
        a0,
        a1,
      ));
    var _iswdigit_l = (Module["_iswdigit_l"] = (a0, a1) =>
      (_iswdigit_l = Module["_iswdigit_l"] = wasmExports["iswdigit_l"])(
        a0,
        a1,
      ));
    var ___iswgraph_l = (Module["___iswgraph_l"] = (a0, a1) =>
      (___iswgraph_l = Module["___iswgraph_l"] = wasmExports["__iswgraph_l"])(
        a0,
        a1,
      ));
    var _iswgraph_l = (Module["_iswgraph_l"] = (a0, a1) =>
      (_iswgraph_l = Module["_iswgraph_l"] = wasmExports["iswgraph_l"])(
        a0,
        a1,
      ));
    var ___iswlower_l = (Module["___iswlower_l"] = (a0, a1) =>
      (___iswlower_l = Module["___iswlower_l"] = wasmExports["__iswlower_l"])(
        a0,
        a1,
      ));
    var _iswlower_l = (Module["_iswlower_l"] = (a0, a1) =>
      (_iswlower_l = Module["_iswlower_l"] = wasmExports["iswlower_l"])(
        a0,
        a1,
      ));
    var ___iswprint_l = (Module["___iswprint_l"] = (a0, a1) =>
      (___iswprint_l = Module["___iswprint_l"] = wasmExports["__iswprint_l"])(
        a0,
        a1,
      ));
    var _iswprint_l = (Module["_iswprint_l"] = (a0, a1) =>
      (_iswprint_l = Module["_iswprint_l"] = wasmExports["iswprint_l"])(
        a0,
        a1,
      ));
    var ___iswpunct_l = (Module["___iswpunct_l"] = (a0, a1) =>
      (___iswpunct_l = Module["___iswpunct_l"] = wasmExports["__iswpunct_l"])(
        a0,
        a1,
      ));
    var _iswpunct_l = (Module["_iswpunct_l"] = (a0, a1) =>
      (_iswpunct_l = Module["_iswpunct_l"] = wasmExports["iswpunct_l"])(
        a0,
        a1,
      ));
    var ___iswspace_l = (Module["___iswspace_l"] = (a0, a1) =>
      (___iswspace_l = Module["___iswspace_l"] = wasmExports["__iswspace_l"])(
        a0,
        a1,
      ));
    var _iswspace_l = (Module["_iswspace_l"] = (a0, a1) =>
      (_iswspace_l = Module["_iswspace_l"] = wasmExports["iswspace_l"])(
        a0,
        a1,
      ));
    var ___iswupper_l = (Module["___iswupper_l"] = (a0, a1) =>
      (___iswupper_l = Module["___iswupper_l"] = wasmExports["__iswupper_l"])(
        a0,
        a1,
      ));
    var _iswupper_l = (Module["_iswupper_l"] = (a0, a1) =>
      (_iswupper_l = Module["_iswupper_l"] = wasmExports["iswupper_l"])(
        a0,
        a1,
      ));
    var ___iswxdigit_l = (Module["___iswxdigit_l"] = (a0, a1) =>
      (___iswxdigit_l = Module["___iswxdigit_l"] =
        wasmExports["__iswxdigit_l"])(a0, a1));
    var _iswxdigit_l = (Module["_iswxdigit_l"] = (a0, a1) =>
      (_iswxdigit_l = Module["_iswxdigit_l"] = wasmExports["iswxdigit_l"])(
        a0,
        a1,
      ));
    var ___isxdigit_l = (Module["___isxdigit_l"] = (a0, a1) =>
      (___isxdigit_l = Module["___isxdigit_l"] = wasmExports["__isxdigit_l"])(
        a0,
        a1,
      ));
    var _isxdigit_l = (Module["_isxdigit_l"] = (a0, a1) =>
      (_isxdigit_l = Module["_isxdigit_l"] = wasmExports["isxdigit_l"])(
        a0,
        a1,
      ));
    var _j0 = (Module["_j0"] = (a0) =>
      (_j0 = Module["_j0"] = wasmExports["j0"])(a0));
    var _y0 = (Module["_y0"] = (a0) =>
      (_y0 = Module["_y0"] = wasmExports["y0"])(a0));
    var _j0f = (Module["_j0f"] = (a0) =>
      (_j0f = Module["_j0f"] = wasmExports["j0f"])(a0));
    var _y0f = (Module["_y0f"] = (a0) =>
      (_y0f = Module["_y0f"] = wasmExports["y0f"])(a0));
    var _j1 = (Module["_j1"] = (a0) =>
      (_j1 = Module["_j1"] = wasmExports["j1"])(a0));
    var _y1 = (Module["_y1"] = (a0) =>
      (_y1 = Module["_y1"] = wasmExports["y1"])(a0));
    var _j1f = (Module["_j1f"] = (a0) =>
      (_j1f = Module["_j1f"] = wasmExports["j1f"])(a0));
    var _y1f = (Module["_y1f"] = (a0) =>
      (_y1f = Module["_y1f"] = wasmExports["y1f"])(a0));
    var _jn = (Module["_jn"] = (a0, a1) =>
      (_jn = Module["_jn"] = wasmExports["jn"])(a0, a1));
    var _yn = (Module["_yn"] = (a0, a1) =>
      (_yn = Module["_yn"] = wasmExports["yn"])(a0, a1));
    var _jnf = (Module["_jnf"] = (a0, a1) =>
      (_jnf = Module["_jnf"] = wasmExports["jnf"])(a0, a1));
    var _ynf = (Module["_ynf"] = (a0, a1) =>
      (_ynf = Module["_ynf"] = wasmExports["ynf"])(a0, a1));
    var _labs = (Module["_labs"] = (a0) =>
      (_labs = Module["_labs"] = wasmExports["labs"])(a0));
    var ___nl_langinfo = (Module["___nl_langinfo"] = (a0) =>
      (___nl_langinfo = Module["___nl_langinfo"] =
        wasmExports["__nl_langinfo"])(a0));
    var _nl_langinfo_l = (Module["_nl_langinfo_l"] = (a0, a1) =>
      (_nl_langinfo_l = Module["_nl_langinfo_l"] =
        wasmExports["nl_langinfo_l"])(a0, a1));
    var _lchmod = (Module["_lchmod"] = (a0, a1) =>
      (_lchmod = Module["_lchmod"] = wasmExports["lchmod"])(a0, a1));
    var _lchown = (Module["_lchown"] = (a0, a1, a2) =>
      (_lchown = Module["_lchown"] = wasmExports["lchown"])(a0, a1, a2));
    var _lcong48 = (Module["_lcong48"] = (a0) =>
      (_lcong48 = Module["_lcong48"] = wasmExports["lcong48"])(a0));
    var _ldexpf = (Module["_ldexpf"] = (a0, a1) =>
      (_ldexpf = Module["_ldexpf"] = wasmExports["ldexpf"])(a0, a1));
    var _scalbnf = (Module["_scalbnf"] = (a0, a1) =>
      (_scalbnf = Module["_scalbnf"] = wasmExports["scalbnf"])(a0, a1));
    var _ldexpl = (Module["_ldexpl"] = (a0, a1, a2, a3) =>
      (_ldexpl = Module["_ldexpl"] = wasmExports["ldexpl"])(a0, a1, a2, a3));
    var _ldiv = (Module["_ldiv"] = (a0, a1, a2) =>
      (_ldiv = Module["_ldiv"] = wasmExports["ldiv"])(a0, a1, a2));
    var _get_nprocs_conf = (Module["_get_nprocs_conf"] = () =>
      (_get_nprocs_conf = Module["_get_nprocs_conf"] =
        wasmExports["get_nprocs_conf"])());
    var _get_nprocs = (Module["_get_nprocs"] = () =>
      (_get_nprocs = Module["_get_nprocs"] = wasmExports["get_nprocs"])());
    var _get_phys_pages = (Module["_get_phys_pages"] = () =>
      (_get_phys_pages = Module["_get_phys_pages"] =
        wasmExports["get_phys_pages"])());
    var _get_avphys_pages = (Module["_get_avphys_pages"] = () =>
      (_get_avphys_pages = Module["_get_avphys_pages"] =
        wasmExports["get_avphys_pages"])());
    var _lgamma = (Module["_lgamma"] = (a0) =>
      (_lgamma = Module["_lgamma"] = wasmExports["lgamma"])(a0));
    var _lgamma_r = (Module["_lgamma_r"] = (a0, a1) =>
      (_lgamma_r = Module["_lgamma_r"] = wasmExports["lgamma_r"])(a0, a1));
    var _lgammaf = (Module["_lgammaf"] = (a0) =>
      (_lgammaf = Module["_lgammaf"] = wasmExports["lgammaf"])(a0));
    var _lgammaf_r = (Module["_lgammaf_r"] = (a0, a1) =>
      (_lgammaf_r = Module["_lgammaf_r"] = wasmExports["lgammaf_r"])(a0, a1));
    var ___lgammal_r = (Module["___lgammal_r"] = (a0, a1, a2, a3) =>
      (___lgammal_r = Module["___lgammal_r"] = wasmExports["__lgammal_r"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _lgammal = (Module["_lgammal"] = (a0, a1, a2) =>
      (_lgammal = Module["_lgammal"] = wasmExports["lgammal"])(a0, a1, a2));
    var _lgammal_r = (Module["_lgammal_r"] = (a0, a1, a2, a3) =>
      (_lgammal_r = Module["_lgammal_r"] = wasmExports["lgammal_r"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _emscripten_has_threading_support = (Module[
      "_emscripten_has_threading_support"
    ] = () =>
      (_emscripten_has_threading_support = Module[
        "_emscripten_has_threading_support"
      ] =
        wasmExports["emscripten_has_threading_support"])());
    var _emscripten_num_logical_cores = (Module[
      "_emscripten_num_logical_cores"
    ] = () =>
      (_emscripten_num_logical_cores = Module["_emscripten_num_logical_cores"] =
        wasmExports["emscripten_num_logical_cores"])());
    var _emscripten_force_num_logical_cores = (Module[
      "_emscripten_force_num_logical_cores"
    ] = (a0) =>
      (_emscripten_force_num_logical_cores = Module[
        "_emscripten_force_num_logical_cores"
      ] =
        wasmExports["emscripten_force_num_logical_cores"])(a0));
    var _emscripten_futex_wait = (Module["_emscripten_futex_wait"] = (
      a0,
      a1,
      a2,
    ) =>
      (_emscripten_futex_wait = Module["_emscripten_futex_wait"] =
        wasmExports["emscripten_futex_wait"])(a0, a1, a2));
    var _emscripten_is_main_runtime_thread = (Module[
      "_emscripten_is_main_runtime_thread"
    ] = () =>
      (_emscripten_is_main_runtime_thread = Module[
        "_emscripten_is_main_runtime_thread"
      ] =
        wasmExports["emscripten_is_main_runtime_thread"])());
    var _emscripten_main_thread_process_queued_calls = (Module[
      "_emscripten_main_thread_process_queued_calls"
    ] = () =>
      (_emscripten_main_thread_process_queued_calls = Module[
        "_emscripten_main_thread_process_queued_calls"
      ] =
        wasmExports["emscripten_main_thread_process_queued_calls"])());
    var _emscripten_current_thread_process_queued_calls = (Module[
      "_emscripten_current_thread_process_queued_calls"
    ] = () =>
      (_emscripten_current_thread_process_queued_calls = Module[
        "_emscripten_current_thread_process_queued_calls"
      ] =
        wasmExports["emscripten_current_thread_process_queued_calls"])());
    var __emscripten_yield = (Module["__emscripten_yield"] = (a0) =>
      (__emscripten_yield = Module["__emscripten_yield"] =
        wasmExports["_emscripten_yield"])(a0));
    var __emscripten_check_timers = (Module["__emscripten_check_timers"] = (
      a0,
    ) =>
      (__emscripten_check_timers = Module["__emscripten_check_timers"] =
        wasmExports["_emscripten_check_timers"])(a0));
    var _pthread_mutex_consistent = (Module["_pthread_mutex_consistent"] = (
      a0,
    ) =>
      (_pthread_mutex_consistent = Module["_pthread_mutex_consistent"] =
        wasmExports["pthread_mutex_consistent"])(a0));
    var _pthread_barrier_init = (Module["_pthread_barrier_init"] = (
      a0,
      a1,
      a2,
    ) =>
      (_pthread_barrier_init = Module["_pthread_barrier_init"] =
        wasmExports["pthread_barrier_init"])(a0, a1, a2));
    var _pthread_barrier_destroy = (Module["_pthread_barrier_destroy"] = (a0) =>
      (_pthread_barrier_destroy = Module["_pthread_barrier_destroy"] =
        wasmExports["pthread_barrier_destroy"])(a0));
    var _pthread_barrier_wait = (Module["_pthread_barrier_wait"] = (a0) =>
      (_pthread_barrier_wait = Module["_pthread_barrier_wait"] =
        wasmExports["pthread_barrier_wait"])(a0));
    var _pthread_cond_broadcast = (Module["_pthread_cond_broadcast"] = (a0) =>
      (_pthread_cond_broadcast = Module["_pthread_cond_broadcast"] =
        wasmExports["pthread_cond_broadcast"])(a0));
    var _pthread_atfork = (Module["_pthread_atfork"] = (a0, a1, a2) =>
      (_pthread_atfork = Module["_pthread_atfork"] =
        wasmExports["pthread_atfork"])(a0, a1, a2));
    var _pthread_cancel = (Module["_pthread_cancel"] = (a0) =>
      (_pthread_cancel = Module["_pthread_cancel"] =
        wasmExports["pthread_cancel"])(a0));
    var _pthread_testcancel = (Module["_pthread_testcancel"] = () =>
      (_pthread_testcancel = Module["_pthread_testcancel"] =
        wasmExports["pthread_testcancel"])());
    var ___pthread_detach = (Module["___pthread_detach"] = (a0) =>
      (___pthread_detach = Module["___pthread_detach"] =
        wasmExports["__pthread_detach"])(a0));
    var _pthread_equal = (Module["_pthread_equal"] = (a0, a1) =>
      (_pthread_equal = Module["_pthread_equal"] =
        wasmExports["pthread_equal"])(a0, a1));
    var _pthread_mutexattr_init = (Module["_pthread_mutexattr_init"] = (a0) =>
      (_pthread_mutexattr_init = Module["_pthread_mutexattr_init"] =
        wasmExports["pthread_mutexattr_init"])(a0));
    var _pthread_mutexattr_setprotocol = (Module[
      "_pthread_mutexattr_setprotocol"
    ] = (a0, a1) =>
      (_pthread_mutexattr_setprotocol = Module[
        "_pthread_mutexattr_setprotocol"
      ] =
        wasmExports["pthread_mutexattr_setprotocol"])(a0, a1));
    var _pthread_mutexattr_settype = (Module["_pthread_mutexattr_settype"] = (
      a0,
      a1,
    ) =>
      (_pthread_mutexattr_settype = Module["_pthread_mutexattr_settype"] =
        wasmExports["pthread_mutexattr_settype"])(a0, a1));
    var _pthread_mutexattr_destroy = (Module["_pthread_mutexattr_destroy"] = (
      a0,
    ) =>
      (_pthread_mutexattr_destroy = Module["_pthread_mutexattr_destroy"] =
        wasmExports["pthread_mutexattr_destroy"])(a0));
    var _pthread_mutexattr_setpshared = (Module[
      "_pthread_mutexattr_setpshared"
    ] = (a0, a1) =>
      (_pthread_mutexattr_setpshared = Module["_pthread_mutexattr_setpshared"] =
        wasmExports["pthread_mutexattr_setpshared"])(a0, a1));
    var _pthread_condattr_destroy = (Module["_pthread_condattr_destroy"] = (
      a0,
    ) =>
      (_pthread_condattr_destroy = Module["_pthread_condattr_destroy"] =
        wasmExports["pthread_condattr_destroy"])(a0));
    var _pthread_condattr_setpshared = (Module["_pthread_condattr_setpshared"] =
      (a0, a1) =>
        (_pthread_condattr_setpshared = Module["_pthread_condattr_setpshared"] =
          wasmExports["pthread_condattr_setpshared"])(a0, a1));
    var _pthread_getattr_np = (Module["_pthread_getattr_np"] = (a0, a1) =>
      (_pthread_getattr_np = Module["_pthread_getattr_np"] =
        wasmExports["pthread_getattr_np"])(a0, a1));
    var _pthread_setcanceltype = (Module["_pthread_setcanceltype"] = (a0, a1) =>
      (_pthread_setcanceltype = Module["_pthread_setcanceltype"] =
        wasmExports["pthread_setcanceltype"])(a0, a1));
    var _pthread_rwlock_init = (Module["_pthread_rwlock_init"] = (a0, a1) =>
      (_pthread_rwlock_init = Module["_pthread_rwlock_init"] =
        wasmExports["pthread_rwlock_init"])(a0, a1));
    var _pthread_rwlock_destroy = (Module["_pthread_rwlock_destroy"] = (a0) =>
      (_pthread_rwlock_destroy = Module["_pthread_rwlock_destroy"] =
        wasmExports["pthread_rwlock_destroy"])(a0));
    var _pthread_rwlock_rdlock = (Module["_pthread_rwlock_rdlock"] = (a0) =>
      (_pthread_rwlock_rdlock = Module["_pthread_rwlock_rdlock"] =
        wasmExports["pthread_rwlock_rdlock"])(a0));
    var _pthread_rwlock_tryrdlock = (Module["_pthread_rwlock_tryrdlock"] = (
      a0,
    ) =>
      (_pthread_rwlock_tryrdlock = Module["_pthread_rwlock_tryrdlock"] =
        wasmExports["pthread_rwlock_tryrdlock"])(a0));
    var _pthread_rwlock_timedrdlock = (Module["_pthread_rwlock_timedrdlock"] = (
      a0,
      a1,
    ) =>
      (_pthread_rwlock_timedrdlock = Module["_pthread_rwlock_timedrdlock"] =
        wasmExports["pthread_rwlock_timedrdlock"])(a0, a1));
    var _pthread_rwlock_wrlock = (Module["_pthread_rwlock_wrlock"] = (a0) =>
      (_pthread_rwlock_wrlock = Module["_pthread_rwlock_wrlock"] =
        wasmExports["pthread_rwlock_wrlock"])(a0));
    var _pthread_rwlock_trywrlock = (Module["_pthread_rwlock_trywrlock"] = (
      a0,
    ) =>
      (_pthread_rwlock_trywrlock = Module["_pthread_rwlock_trywrlock"] =
        wasmExports["pthread_rwlock_trywrlock"])(a0));
    var _pthread_rwlock_timedwrlock = (Module["_pthread_rwlock_timedwrlock"] = (
      a0,
      a1,
    ) =>
      (_pthread_rwlock_timedwrlock = Module["_pthread_rwlock_timedwrlock"] =
        wasmExports["pthread_rwlock_timedwrlock"])(a0, a1));
    var _pthread_rwlock_unlock = (Module["_pthread_rwlock_unlock"] = (a0) =>
      (_pthread_rwlock_unlock = Module["_pthread_rwlock_unlock"] =
        wasmExports["pthread_rwlock_unlock"])(a0));
    var _pthread_rwlockattr_init = (Module["_pthread_rwlockattr_init"] = (a0) =>
      (_pthread_rwlockattr_init = Module["_pthread_rwlockattr_init"] =
        wasmExports["pthread_rwlockattr_init"])(a0));
    var _pthread_rwlockattr_destroy = (Module["_pthread_rwlockattr_destroy"] = (
      a0,
    ) =>
      (_pthread_rwlockattr_destroy = Module["_pthread_rwlockattr_destroy"] =
        wasmExports["pthread_rwlockattr_destroy"])(a0));
    var _pthread_rwlockattr_setpshared = (Module[
      "_pthread_rwlockattr_setpshared"
    ] = (a0, a1) =>
      (_pthread_rwlockattr_setpshared = Module[
        "_pthread_rwlockattr_setpshared"
      ] =
        wasmExports["pthread_rwlockattr_setpshared"])(a0, a1));
    var _pthread_spin_init = (Module["_pthread_spin_init"] = (a0, a1) =>
      (_pthread_spin_init = Module["_pthread_spin_init"] =
        wasmExports["pthread_spin_init"])(a0, a1));
    var _pthread_spin_destroy = (Module["_pthread_spin_destroy"] = (a0) =>
      (_pthread_spin_destroy = Module["_pthread_spin_destroy"] =
        wasmExports["pthread_spin_destroy"])(a0));
    var _pthread_spin_lock = (Module["_pthread_spin_lock"] = (a0) =>
      (_pthread_spin_lock = Module["_pthread_spin_lock"] =
        wasmExports["pthread_spin_lock"])(a0));
    var _pthread_spin_trylock = (Module["_pthread_spin_trylock"] = (a0) =>
      (_pthread_spin_trylock = Module["_pthread_spin_trylock"] =
        wasmExports["pthread_spin_trylock"])(a0));
    var _pthread_spin_unlock = (Module["_pthread_spin_unlock"] = (a0) =>
      (_pthread_spin_unlock = Module["_pthread_spin_unlock"] =
        wasmExports["pthread_spin_unlock"])(a0));
    var _sem_init = (Module["_sem_init"] = (a0, a1, a2) =>
      (_sem_init = Module["_sem_init"] = wasmExports["sem_init"])(a0, a1, a2));
    var _sem_post = (Module["_sem_post"] = (a0) =>
      (_sem_post = Module["_sem_post"] = wasmExports["sem_post"])(a0));
    var _sem_wait = (Module["_sem_wait"] = (a0) =>
      (_sem_wait = Module["_sem_wait"] = wasmExports["sem_wait"])(a0));
    var _sem_trywait = (Module["_sem_trywait"] = (a0) =>
      (_sem_trywait = Module["_sem_trywait"] = wasmExports["sem_trywait"])(a0));
    var _sem_destroy = (Module["_sem_destroy"] = (a0) =>
      (_sem_destroy = Module["_sem_destroy"] = wasmExports["sem_destroy"])(a0));
    var _pthread_mutex_timedlock = (Module["_pthread_mutex_timedlock"] = (
      a0,
      a1,
    ) =>
      (_pthread_mutex_timedlock = Module["_pthread_mutex_timedlock"] =
        wasmExports["pthread_mutex_timedlock"])(a0, a1));
    var _emscripten_builtin_pthread_create = (Module[
      "_emscripten_builtin_pthread_create"
    ] = (a0, a1, a2, a3) =>
      (_emscripten_builtin_pthread_create = Module[
        "_emscripten_builtin_pthread_create"
      ] =
        wasmExports["emscripten_builtin_pthread_create"])(a0, a1, a2, a3));
    var _emscripten_builtin_pthread_join = (Module[
      "_emscripten_builtin_pthread_join"
    ] = (a0, a1) =>
      (_emscripten_builtin_pthread_join = Module[
        "_emscripten_builtin_pthread_join"
      ] =
        wasmExports["emscripten_builtin_pthread_join"])(a0, a1));
    var _pthread_join = (Module["_pthread_join"] = (a0, a1) =>
      (_pthread_join = Module["_pthread_join"] = wasmExports["pthread_join"])(
        a0,
        a1,
      ));
    var _pthread_once = (Module["_pthread_once"] = (a0, a1) =>
      (_pthread_once = Module["_pthread_once"] = wasmExports["pthread_once"])(
        a0,
        a1,
      ));
    var _emscripten_builtin_pthread_detach = (Module[
      "_emscripten_builtin_pthread_detach"
    ] = (a0) =>
      (_emscripten_builtin_pthread_detach = Module[
        "_emscripten_builtin_pthread_detach"
      ] =
        wasmExports["emscripten_builtin_pthread_detach"])(a0));
    var _thrd_detach = (Module["_thrd_detach"] = (a0) =>
      (_thrd_detach = Module["_thrd_detach"] = wasmExports["thrd_detach"])(a0));
    var _link = (Module["_link"] = (a0, a1) =>
      (_link = Module["_link"] = wasmExports["link"])(a0, a1));
    var _linkat = (Module["_linkat"] = (a0, a1, a2, a3, a4) =>
      (_linkat = Module["_linkat"] = wasmExports["linkat"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _llabs = (Module["_llabs"] = (a0) =>
      (_llabs = Module["_llabs"] = wasmExports["llabs"])(a0));
    var _lldiv = (Module["_lldiv"] = (a0, a1, a2) =>
      (_lldiv = Module["_lldiv"] = wasmExports["lldiv"])(a0, a1, a2));
    var _llrint = (Module["_llrint"] = (a0) =>
      (_llrint = Module["_llrint"] = wasmExports["llrint"])(a0));
    var _rint = (Module["_rint"] = (a0) =>
      (_rint = Module["_rint"] = wasmExports["rint"])(a0));
    var _llrintf = (Module["_llrintf"] = (a0) =>
      (_llrintf = Module["_llrintf"] = wasmExports["llrintf"])(a0));
    var _rintf = (Module["_rintf"] = (a0) =>
      (_rintf = Module["_rintf"] = wasmExports["rintf"])(a0));
    var _llrintl = (Module["_llrintl"] = (a0, a1) =>
      (_llrintl = Module["_llrintl"] = wasmExports["llrintl"])(a0, a1));
    var _rintl = (Module["_rintl"] = (a0, a1, a2) =>
      (_rintl = Module["_rintl"] = wasmExports["rintl"])(a0, a1, a2));
    var _llround = (Module["_llround"] = (a0) =>
      (_llround = Module["_llround"] = wasmExports["llround"])(a0));
    var _llroundf = (Module["_llroundf"] = (a0) =>
      (_llroundf = Module["_llroundf"] = wasmExports["llroundf"])(a0));
    var _roundf = (Module["_roundf"] = (a0) =>
      (_roundf = Module["_roundf"] = wasmExports["roundf"])(a0));
    var _llroundl = (Module["_llroundl"] = (a0, a1) =>
      (_llroundl = Module["_llroundl"] = wasmExports["llroundl"])(a0, a1));
    var _roundl = (Module["_roundl"] = (a0, a1, a2) =>
      (_roundl = Module["_roundl"] = wasmExports["roundl"])(a0, a1, a2));
    var _log10f = (Module["_log10f"] = (a0) =>
      (_log10f = Module["_log10f"] = wasmExports["log10f"])(a0));
    var _log10l = (Module["_log10l"] = (a0, a1, a2) =>
      (_log10l = Module["_log10l"] = wasmExports["log10l"])(a0, a1, a2));
    var _log2f = (Module["_log2f"] = (a0) =>
      (_log2f = Module["_log2f"] = wasmExports["log2f"])(a0));
    var _log2l = (Module["_log2l"] = (a0, a1, a2) =>
      (_log2l = Module["_log2l"] = wasmExports["log2l"])(a0, a1, a2));
    var _logb = (Module["_logb"] = (a0) =>
      (_logb = Module["_logb"] = wasmExports["logb"])(a0));
    var _logbf = (Module["_logbf"] = (a0) =>
      (_logbf = Module["_logbf"] = wasmExports["logbf"])(a0));
    var _logbl = (Module["_logbl"] = (a0, a1, a2) =>
      (_logbl = Module["_logbl"] = wasmExports["logbl"])(a0, a1, a2));
    var _strtoull = (Module["_strtoull"] = (a0, a1, a2) =>
      (_strtoull = Module["_strtoull"] = wasmExports["strtoull"])(a0, a1, a2));
    var _nrand48 = (Module["_nrand48"] = (a0) =>
      (_nrand48 = Module["_nrand48"] = wasmExports["nrand48"])(a0));
    var _lrand48 = (Module["_lrand48"] = () =>
      (_lrand48 = Module["_lrand48"] = wasmExports["lrand48"])());
    var _lrint = (Module["_lrint"] = (a0) =>
      (_lrint = Module["_lrint"] = wasmExports["lrint"])(a0));
    var _lrintf = (Module["_lrintf"] = (a0) =>
      (_lrintf = Module["_lrintf"] = wasmExports["lrintf"])(a0));
    var _lrintl = (Module["_lrintl"] = (a0, a1) =>
      (_lrintl = Module["_lrintl"] = wasmExports["lrintl"])(a0, a1));
    var _lround = (Module["_lround"] = (a0) =>
      (_lround = Module["_lround"] = wasmExports["lround"])(a0));
    var _lroundf = (Module["_lroundf"] = (a0) =>
      (_lroundf = Module["_lroundf"] = wasmExports["lroundf"])(a0));
    var _lroundl = (Module["_lroundl"] = (a0, a1) =>
      (_lroundl = Module["_lroundl"] = wasmExports["lroundl"])(a0, a1));
    var _lsearch = (Module["_lsearch"] = (a0, a1, a2, a3, a4) =>
      (_lsearch = Module["_lsearch"] = wasmExports["lsearch"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _lfind = (Module["_lfind"] = (a0, a1, a2, a3, a4) =>
      (_lfind = Module["_lfind"] = wasmExports["lfind"])(a0, a1, a2, a3, a4));
    var _mbrlen = (Module["_mbrlen"] = (a0, a1, a2) =>
      (_mbrlen = Module["_mbrlen"] = wasmExports["mbrlen"])(a0, a1, a2));
    var _mbrtoc16 = (Module["_mbrtoc16"] = (a0, a1, a2, a3) =>
      (_mbrtoc16 = Module["_mbrtoc16"] = wasmExports["mbrtoc16"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _mbrtoc32 = (Module["_mbrtoc32"] = (a0, a1, a2, a3) =>
      (_mbrtoc32 = Module["_mbrtoc32"] = wasmExports["mbrtoc32"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _mbsinit = (Module["_mbsinit"] = (a0) =>
      (_mbsinit = Module["_mbsinit"] = wasmExports["mbsinit"])(a0));
    var _mbsnrtowcs = (Module["_mbsnrtowcs"] = (a0, a1, a2, a3, a4) =>
      (_mbsnrtowcs = Module["_mbsnrtowcs"] = wasmExports["mbsnrtowcs"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _mbsrtowcs = (Module["_mbsrtowcs"] = (a0, a1, a2, a3) =>
      (_mbsrtowcs = Module["_mbsrtowcs"] = wasmExports["mbsrtowcs"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _memccpy = (Module["_memccpy"] = (a0, a1, a2, a3) =>
      (_memccpy = Module["_memccpy"] = wasmExports["memccpy"])(a0, a1, a2, a3));
    var _memmem = (Module["_memmem"] = (a0, a1, a2, a3) =>
      (_memmem = Module["_memmem"] = wasmExports["memmem"])(a0, a1, a2, a3));
    var _mempcpy = (Module["_mempcpy"] = (a0, a1, a2) =>
      (_mempcpy = Module["_mempcpy"] = wasmExports["mempcpy"])(a0, a1, a2));
    var _mincore = (Module["_mincore"] = (a0, a1, a2) =>
      (_mincore = Module["_mincore"] = wasmExports["mincore"])(a0, a1, a2));
    var _mkdtemp = (Module["_mkdtemp"] = (a0) =>
      (_mkdtemp = Module["_mkdtemp"] = wasmExports["mkdtemp"])(a0));
    var _mkfifo = (Module["_mkfifo"] = (a0, a1) =>
      (_mkfifo = Module["_mkfifo"] = wasmExports["mkfifo"])(a0, a1));
    var _mkfifoat = (Module["_mkfifoat"] = (a0, a1, a2) =>
      (_mkfifoat = Module["_mkfifoat"] = wasmExports["mkfifoat"])(a0, a1, a2));
    var _mkostemp = (Module["_mkostemp"] = (a0, a1) =>
      (_mkostemp = Module["_mkostemp"] = wasmExports["mkostemp"])(a0, a1));
    var _mkostemps = (Module["_mkostemps"] = (a0, a1, a2) =>
      (_mkostemps = Module["_mkostemps"] = wasmExports["mkostemps"])(
        a0,
        a1,
        a2,
      ));
    var _mkstemp = (Module["_mkstemp"] = (a0) =>
      (_mkstemp = Module["_mkstemp"] = wasmExports["mkstemp"])(a0));
    var _mkstemps = (Module["_mkstemps"] = (a0, a1) =>
      (_mkstemps = Module["_mkstemps"] = wasmExports["mkstemps"])(a0, a1));
    var _mktemp = (Module["_mktemp"] = (a0) =>
      (_mktemp = Module["_mktemp"] = wasmExports["mktemp"])(a0));
    var _timegm = (Module["_timegm"] = (a0) =>
      (_timegm = Module["_timegm"] = wasmExports["timegm"])(a0));
    var _tzset = (Module["_tzset"] = () =>
      (_tzset = Module["_tzset"] = wasmExports["tzset"])());
    var _mlock = (Module["_mlock"] = (a0, a1) =>
      (_mlock = Module["_mlock"] = wasmExports["mlock"])(a0, a1));
    var _mlockall = (Module["_mlockall"] = (a0) =>
      (_mlockall = Module["_mlockall"] = wasmExports["mlockall"])(a0));
    var _emscripten_builtin_mmap = (Module["_emscripten_builtin_mmap"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (_emscripten_builtin_mmap = Module["_emscripten_builtin_mmap"] =
        wasmExports["emscripten_builtin_mmap"])(a0, a1, a2, a3, a4, a5));
    var _setmntent = (Module["_setmntent"] = (a0, a1) =>
      (_setmntent = Module["_setmntent"] = wasmExports["setmntent"])(a0, a1));
    var _endmntent = (Module["_endmntent"] = (a0) =>
      (_endmntent = Module["_endmntent"] = wasmExports["endmntent"])(a0));
    var _getmntent_r = (Module["_getmntent_r"] = (a0, a1, a2, a3) =>
      (_getmntent_r = Module["_getmntent_r"] = wasmExports["getmntent_r"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _sscanf = (Module["_sscanf"] = (a0, a1, a2) =>
      (_sscanf = Module["_sscanf"] = wasmExports["sscanf"])(a0, a1, a2));
    var _getmntent = (Module["_getmntent"] = (a0) =>
      (_getmntent = Module["_getmntent"] = wasmExports["getmntent"])(a0));
    var _addmntent = (Module["_addmntent"] = (a0, a1) =>
      (_addmntent = Module["_addmntent"] = wasmExports["addmntent"])(a0, a1));
    var _hasmntopt = (Module["_hasmntopt"] = (a0, a1) =>
      (_hasmntopt = Module["_hasmntopt"] = wasmExports["hasmntopt"])(a0, a1));
    var _mprotect = (Module["_mprotect"] = (a0, a1, a2) =>
      (_mprotect = Module["_mprotect"] = wasmExports["mprotect"])(a0, a1, a2));
    var _jrand48 = (Module["_jrand48"] = (a0) =>
      (_jrand48 = Module["_jrand48"] = wasmExports["jrand48"])(a0));
    var _mrand48 = (Module["_mrand48"] = () =>
      (_mrand48 = Module["_mrand48"] = wasmExports["mrand48"])());
    var _mtx_destroy = (Module["_mtx_destroy"] = (a0) =>
      (_mtx_destroy = Module["_mtx_destroy"] = wasmExports["mtx_destroy"])(a0));
    var _mtx_init = (Module["_mtx_init"] = (a0, a1) =>
      (_mtx_init = Module["_mtx_init"] = wasmExports["mtx_init"])(a0, a1));
    var _mtx_lock = (Module["_mtx_lock"] = (a0) =>
      (_mtx_lock = Module["_mtx_lock"] = wasmExports["mtx_lock"])(a0));
    var _mtx_timedlock = (Module["_mtx_timedlock"] = (a0, a1) =>
      (_mtx_timedlock = Module["_mtx_timedlock"] =
        wasmExports["mtx_timedlock"])(a0, a1));
    var _mtx_trylock = (Module["_mtx_trylock"] = (a0) =>
      (_mtx_trylock = Module["_mtx_trylock"] = wasmExports["mtx_trylock"])(a0));
    var _mtx_unlock = (Module["_mtx_unlock"] = (a0) =>
      (_mtx_unlock = Module["_mtx_unlock"] = wasmExports["mtx_unlock"])(a0));
    var _munlock = (Module["_munlock"] = (a0, a1) =>
      (_munlock = Module["_munlock"] = wasmExports["munlock"])(a0, a1));
    var _munlockall = (Module["_munlockall"] = () =>
      (_munlockall = Module["_munlockall"] = wasmExports["munlockall"])());
    var _emscripten_builtin_munmap = (Module["_emscripten_builtin_munmap"] = (
      a0,
      a1,
    ) =>
      (_emscripten_builtin_munmap = Module["_emscripten_builtin_munmap"] =
        wasmExports["emscripten_builtin_munmap"])(a0, a1));
    var _nan = (Module["_nan"] = (a0) =>
      (_nan = Module["_nan"] = wasmExports["nan"])(a0));
    var _nanf = (Module["_nanf"] = (a0) =>
      (_nanf = Module["_nanf"] = wasmExports["nanf"])(a0));
    var _nanl = (Module["_nanl"] = (a0, a1) =>
      (_nanl = Module["_nanl"] = wasmExports["nanl"])(a0, a1));
    var _nanosleep = (Module["_nanosleep"] = (a0, a1) =>
      (_nanosleep = Module["_nanosleep"] = wasmExports["nanosleep"])(a0, a1));
    var _nearbyint = (Module["_nearbyint"] = (a0) =>
      (_nearbyint = Module["_nearbyint"] = wasmExports["nearbyint"])(a0));
    var _nearbyintf = (Module["_nearbyintf"] = (a0) =>
      (_nearbyintf = Module["_nearbyintf"] = wasmExports["nearbyintf"])(a0));
    var _nearbyintl = (Module["_nearbyintl"] = (a0, a1, a2) =>
      (_nearbyintl = Module["_nearbyintl"] = wasmExports["nearbyintl"])(
        a0,
        a1,
        a2,
      ));
    var _getnetbyaddr = (Module["_getnetbyaddr"] = (a0, a1) =>
      (_getnetbyaddr = Module["_getnetbyaddr"] = wasmExports["getnetbyaddr"])(
        a0,
        a1,
      ));
    var _getnetbyname = (Module["_getnetbyname"] = (a0) =>
      (_getnetbyname = Module["_getnetbyname"] = wasmExports["getnetbyname"])(
        a0,
      ));
    var ___newlocale = (Module["___newlocale"] = (a0, a1, a2) =>
      (___newlocale = Module["___newlocale"] = wasmExports["__newlocale"])(
        a0,
        a1,
        a2,
      ));
    var _newlocale = (Module["_newlocale"] = (a0, a1, a2) =>
      (_newlocale = Module["_newlocale"] = wasmExports["newlocale"])(
        a0,
        a1,
        a2,
      ));
    var _nextafterf = (Module["_nextafterf"] = (a0, a1) =>
      (_nextafterf = Module["_nextafterf"] = wasmExports["nextafterf"])(
        a0,
        a1,
      ));
    var _nexttoward = (Module["_nexttoward"] = (a0, a1, a2) =>
      (_nexttoward = Module["_nexttoward"] = wasmExports["nexttoward"])(
        a0,
        a1,
        a2,
      ));
    var _nexttowardf = (Module["_nexttowardf"] = (a0, a1, a2) =>
      (_nexttowardf = Module["_nexttowardf"] = wasmExports["nexttowardf"])(
        a0,
        a1,
        a2,
      ));
    var _nexttowardl = (Module["_nexttowardl"] = (a0, a1, a2, a3, a4) =>
      (_nexttowardl = Module["_nexttowardl"] = wasmExports["nexttowardl"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _nftw = (Module["_nftw"] = (a0, a1, a2, a3) =>
      (_nftw = Module["_nftw"] = wasmExports["nftw"])(a0, a1, a2, a3));
    var _nice = (Module["_nice"] = (a0) =>
      (_nice = Module["_nice"] = wasmExports["nice"])(a0));
    var _setpriority = (Module["_setpriority"] = (a0, a1, a2) =>
      (_setpriority = Module["_setpriority"] = wasmExports["setpriority"])(
        a0,
        a1,
        a2,
      ));
    var _ns_get16 = (Module["_ns_get16"] = (a0) =>
      (_ns_get16 = Module["_ns_get16"] = wasmExports["ns_get16"])(a0));
    var _ns_get32 = (Module["_ns_get32"] = (a0) =>
      (_ns_get32 = Module["_ns_get32"] = wasmExports["ns_get32"])(a0));
    var _ns_put16 = (Module["_ns_put16"] = (a0, a1) =>
      (_ns_put16 = Module["_ns_put16"] = wasmExports["ns_put16"])(a0, a1));
    var _ns_put32 = (Module["_ns_put32"] = (a0, a1) =>
      (_ns_put32 = Module["_ns_put32"] = wasmExports["ns_put32"])(a0, a1));
    var _ns_skiprr = (Module["_ns_skiprr"] = (a0, a1, a2, a3) =>
      (_ns_skiprr = Module["_ns_skiprr"] = wasmExports["ns_skiprr"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _ns_initparse = (Module["_ns_initparse"] = (a0, a1, a2) =>
      (_ns_initparse = Module["_ns_initparse"] = wasmExports["ns_initparse"])(
        a0,
        a1,
        a2,
      ));
    var _ns_name_uncompress = (Module["_ns_name_uncompress"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (_ns_name_uncompress = Module["_ns_name_uncompress"] =
        wasmExports["ns_name_uncompress"])(a0, a1, a2, a3, a4));
    var _ns_parserr = (Module["_ns_parserr"] = (a0, a1, a2, a3) =>
      (_ns_parserr = Module["_ns_parserr"] = wasmExports["ns_parserr"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _open_memstream = (Module["_open_memstream"] = (a0, a1) =>
      (_open_memstream = Module["_open_memstream"] =
        wasmExports["open_memstream"])(a0, a1));
    var _open_wmemstream = (Module["_open_wmemstream"] = (a0, a1) =>
      (_open_wmemstream = Module["_open_wmemstream"] =
        wasmExports["open_wmemstream"])(a0, a1));
    var _tcsetattr = (Module["_tcsetattr"] = (a0, a1, a2) =>
      (_tcsetattr = Module["_tcsetattr"] = wasmExports["tcsetattr"])(
        a0,
        a1,
        a2,
      ));
    var _posix_close = (Module["_posix_close"] = (a0, a1) =>
      (_posix_close = Module["_posix_close"] = wasmExports["posix_close"])(
        a0,
        a1,
      ));
    var _posix_fallocate = (Module["_posix_fallocate"] = (a0, a1, a2) =>
      (_posix_fallocate = Module["_posix_fallocate"] =
        wasmExports["posix_fallocate"])(a0, a1, a2));
    var _posix_madvise = (Module["_posix_madvise"] = (a0, a1, a2) =>
      (_posix_madvise = Module["_posix_madvise"] =
        wasmExports["posix_madvise"])(a0, a1, a2));
    var _posix_spawn_file_actions_addchdir_np = (Module[
      "_posix_spawn_file_actions_addchdir_np"
    ] = (a0, a1) =>
      (_posix_spawn_file_actions_addchdir_np = Module[
        "_posix_spawn_file_actions_addchdir_np"
      ] =
        wasmExports["posix_spawn_file_actions_addchdir_np"])(a0, a1));
    var _posix_spawn_file_actions_addclose = (Module[
      "_posix_spawn_file_actions_addclose"
    ] = (a0, a1) =>
      (_posix_spawn_file_actions_addclose = Module[
        "_posix_spawn_file_actions_addclose"
      ] =
        wasmExports["posix_spawn_file_actions_addclose"])(a0, a1));
    var _posix_spawn_file_actions_adddup2 = (Module[
      "_posix_spawn_file_actions_adddup2"
    ] = (a0, a1, a2) =>
      (_posix_spawn_file_actions_adddup2 = Module[
        "_posix_spawn_file_actions_adddup2"
      ] =
        wasmExports["posix_spawn_file_actions_adddup2"])(a0, a1, a2));
    var _posix_spawn_file_actions_addfchdir_np = (Module[
      "_posix_spawn_file_actions_addfchdir_np"
    ] = (a0, a1) =>
      (_posix_spawn_file_actions_addfchdir_np = Module[
        "_posix_spawn_file_actions_addfchdir_np"
      ] =
        wasmExports["posix_spawn_file_actions_addfchdir_np"])(a0, a1));
    var _posix_spawn_file_actions_addopen = (Module[
      "_posix_spawn_file_actions_addopen"
    ] = (a0, a1, a2, a3, a4) =>
      (_posix_spawn_file_actions_addopen = Module[
        "_posix_spawn_file_actions_addopen"
      ] =
        wasmExports["posix_spawn_file_actions_addopen"])(a0, a1, a2, a3, a4));
    var _posix_spawn_file_actions_destroy = (Module[
      "_posix_spawn_file_actions_destroy"
    ] = (a0) =>
      (_posix_spawn_file_actions_destroy = Module[
        "_posix_spawn_file_actions_destroy"
      ] =
        wasmExports["posix_spawn_file_actions_destroy"])(a0));
    var _posix_spawn_file_actions_init = (Module[
      "_posix_spawn_file_actions_init"
    ] = (a0) =>
      (_posix_spawn_file_actions_init = Module[
        "_posix_spawn_file_actions_init"
      ] =
        wasmExports["posix_spawn_file_actions_init"])(a0));
    var _posix_spawnattr_destroy = (Module["_posix_spawnattr_destroy"] = (a0) =>
      (_posix_spawnattr_destroy = Module["_posix_spawnattr_destroy"] =
        wasmExports["posix_spawnattr_destroy"])(a0));
    var _posix_spawnattr_getflags = (Module["_posix_spawnattr_getflags"] = (
      a0,
      a1,
    ) =>
      (_posix_spawnattr_getflags = Module["_posix_spawnattr_getflags"] =
        wasmExports["posix_spawnattr_getflags"])(a0, a1));
    var _posix_spawnattr_getpgroup = (Module["_posix_spawnattr_getpgroup"] = (
      a0,
      a1,
    ) =>
      (_posix_spawnattr_getpgroup = Module["_posix_spawnattr_getpgroup"] =
        wasmExports["posix_spawnattr_getpgroup"])(a0, a1));
    var _posix_spawnattr_getsigdefault = (Module[
      "_posix_spawnattr_getsigdefault"
    ] = (a0, a1) =>
      (_posix_spawnattr_getsigdefault = Module[
        "_posix_spawnattr_getsigdefault"
      ] =
        wasmExports["posix_spawnattr_getsigdefault"])(a0, a1));
    var _posix_spawnattr_getsigmask = (Module["_posix_spawnattr_getsigmask"] = (
      a0,
      a1,
    ) =>
      (_posix_spawnattr_getsigmask = Module["_posix_spawnattr_getsigmask"] =
        wasmExports["posix_spawnattr_getsigmask"])(a0, a1));
    var _posix_spawnattr_init = (Module["_posix_spawnattr_init"] = (a0) =>
      (_posix_spawnattr_init = Module["_posix_spawnattr_init"] =
        wasmExports["posix_spawnattr_init"])(a0));
    var _posix_spawnattr_getschedparam = (Module[
      "_posix_spawnattr_getschedparam"
    ] = (a0, a1) =>
      (_posix_spawnattr_getschedparam = Module[
        "_posix_spawnattr_getschedparam"
      ] =
        wasmExports["posix_spawnattr_getschedparam"])(a0, a1));
    var _posix_spawnattr_setschedparam = (Module[
      "_posix_spawnattr_setschedparam"
    ] = (a0, a1) =>
      (_posix_spawnattr_setschedparam = Module[
        "_posix_spawnattr_setschedparam"
      ] =
        wasmExports["posix_spawnattr_setschedparam"])(a0, a1));
    var _posix_spawnattr_getschedpolicy = (Module[
      "_posix_spawnattr_getschedpolicy"
    ] = (a0, a1) =>
      (_posix_spawnattr_getschedpolicy = Module[
        "_posix_spawnattr_getschedpolicy"
      ] =
        wasmExports["posix_spawnattr_getschedpolicy"])(a0, a1));
    var _posix_spawnattr_setschedpolicy = (Module[
      "_posix_spawnattr_setschedpolicy"
    ] = (a0, a1) =>
      (_posix_spawnattr_setschedpolicy = Module[
        "_posix_spawnattr_setschedpolicy"
      ] =
        wasmExports["posix_spawnattr_setschedpolicy"])(a0, a1));
    var _posix_spawnattr_setflags = (Module["_posix_spawnattr_setflags"] = (
      a0,
      a1,
    ) =>
      (_posix_spawnattr_setflags = Module["_posix_spawnattr_setflags"] =
        wasmExports["posix_spawnattr_setflags"])(a0, a1));
    var _posix_spawnattr_setpgroup = (Module["_posix_spawnattr_setpgroup"] = (
      a0,
      a1,
    ) =>
      (_posix_spawnattr_setpgroup = Module["_posix_spawnattr_setpgroup"] =
        wasmExports["posix_spawnattr_setpgroup"])(a0, a1));
    var _posix_spawnattr_setsigdefault = (Module[
      "_posix_spawnattr_setsigdefault"
    ] = (a0, a1) =>
      (_posix_spawnattr_setsigdefault = Module[
        "_posix_spawnattr_setsigdefault"
      ] =
        wasmExports["posix_spawnattr_setsigdefault"])(a0, a1));
    var _posix_spawnattr_setsigmask = (Module["_posix_spawnattr_setsigmask"] = (
      a0,
      a1,
    ) =>
      (_posix_spawnattr_setsigmask = Module["_posix_spawnattr_setsigmask"] =
        wasmExports["posix_spawnattr_setsigmask"])(a0, a1));
    var _powf = (Module["_powf"] = (a0, a1) =>
      (_powf = Module["_powf"] = wasmExports["powf"])(a0, a1));
    var _preadv = (Module["_preadv"] = (a0, a1, a2, a3) =>
      (_preadv = Module["_preadv"] = wasmExports["preadv"])(a0, a1, a2, a3));
    var _printf = (Module["_printf"] = (a0, a1) =>
      (_printf = Module["_printf"] = wasmExports["printf"])(a0, a1));
    var ___small_printf = (Module["___small_printf"] = (a0, a1) =>
      (___small_printf = Module["___small_printf"] =
        wasmExports["__small_printf"])(a0, a1));
    var _em_proxying_queue_create = (Module["_em_proxying_queue_create"] = () =>
      (_em_proxying_queue_create = Module["_em_proxying_queue_create"] =
        wasmExports["em_proxying_queue_create"])());
    var _em_proxying_queue_destroy = (Module["_em_proxying_queue_destroy"] = (
      a0,
    ) =>
      (_em_proxying_queue_destroy = Module["_em_proxying_queue_destroy"] =
        wasmExports["em_proxying_queue_destroy"])(a0));
    var _emscripten_proxy_get_system_queue = (Module[
      "_emscripten_proxy_get_system_queue"
    ] = () =>
      (_emscripten_proxy_get_system_queue = Module[
        "_emscripten_proxy_get_system_queue"
      ] =
        wasmExports["emscripten_proxy_get_system_queue"])());
    var _emscripten_proxy_execute_queue = (Module[
      "_emscripten_proxy_execute_queue"
    ] = (a0) =>
      (_emscripten_proxy_execute_queue = Module[
        "_emscripten_proxy_execute_queue"
      ] =
        wasmExports["emscripten_proxy_execute_queue"])(a0));
    var _emscripten_proxy_finish = (Module["_emscripten_proxy_finish"] = (a0) =>
      (_emscripten_proxy_finish = Module["_emscripten_proxy_finish"] =
        wasmExports["emscripten_proxy_finish"])(a0));
    var _emscripten_proxy_async = (Module["_emscripten_proxy_async"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_emscripten_proxy_async = Module["_emscripten_proxy_async"] =
        wasmExports["emscripten_proxy_async"])(a0, a1, a2, a3));
    var _emscripten_proxy_sync = (Module["_emscripten_proxy_sync"] = (
      a0,
      a1,
      a2,
      a3,
    ) =>
      (_emscripten_proxy_sync = Module["_emscripten_proxy_sync"] =
        wasmExports["emscripten_proxy_sync"])(a0, a1, a2, a3));
    var _emscripten_proxy_sync_with_ctx = (Module[
      "_emscripten_proxy_sync_with_ctx"
    ] = (a0, a1, a2, a3) =>
      (_emscripten_proxy_sync_with_ctx = Module[
        "_emscripten_proxy_sync_with_ctx"
      ] =
        wasmExports["emscripten_proxy_sync_with_ctx"])(a0, a1, a2, a3));
    var _pselect = (Module["_pselect"] = (a0, a1, a2, a3, a4, a5) =>
      (_pselect = Module["_pselect"] = wasmExports["pselect"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _pthread_attr_getdetachstate = (Module["_pthread_attr_getdetachstate"] =
      (a0, a1) =>
        (_pthread_attr_getdetachstate = Module["_pthread_attr_getdetachstate"] =
          wasmExports["pthread_attr_getdetachstate"])(a0, a1));
    var _pthread_attr_getguardsize = (Module["_pthread_attr_getguardsize"] = (
      a0,
      a1,
    ) =>
      (_pthread_attr_getguardsize = Module["_pthread_attr_getguardsize"] =
        wasmExports["pthread_attr_getguardsize"])(a0, a1));
    var _pthread_attr_getinheritsched = (Module[
      "_pthread_attr_getinheritsched"
    ] = (a0, a1) =>
      (_pthread_attr_getinheritsched = Module["_pthread_attr_getinheritsched"] =
        wasmExports["pthread_attr_getinheritsched"])(a0, a1));
    var _pthread_attr_getschedparam = (Module["_pthread_attr_getschedparam"] = (
      a0,
      a1,
    ) =>
      (_pthread_attr_getschedparam = Module["_pthread_attr_getschedparam"] =
        wasmExports["pthread_attr_getschedparam"])(a0, a1));
    var _pthread_attr_getschedpolicy = (Module["_pthread_attr_getschedpolicy"] =
      (a0, a1) =>
        (_pthread_attr_getschedpolicy = Module["_pthread_attr_getschedpolicy"] =
          wasmExports["pthread_attr_getschedpolicy"])(a0, a1));
    var _pthread_attr_getscope = (Module["_pthread_attr_getscope"] = (a0, a1) =>
      (_pthread_attr_getscope = Module["_pthread_attr_getscope"] =
        wasmExports["pthread_attr_getscope"])(a0, a1));
    var _pthread_attr_getstack = (Module["_pthread_attr_getstack"] = (
      a0,
      a1,
      a2,
    ) =>
      (_pthread_attr_getstack = Module["_pthread_attr_getstack"] =
        wasmExports["pthread_attr_getstack"])(a0, a1, a2));
    var _pthread_attr_getstacksize = (Module["_pthread_attr_getstacksize"] = (
      a0,
      a1,
    ) =>
      (_pthread_attr_getstacksize = Module["_pthread_attr_getstacksize"] =
        wasmExports["pthread_attr_getstacksize"])(a0, a1));
    var _pthread_barrierattr_getpshared = (Module[
      "_pthread_barrierattr_getpshared"
    ] = (a0, a1) =>
      (_pthread_barrierattr_getpshared = Module[
        "_pthread_barrierattr_getpshared"
      ] =
        wasmExports["pthread_barrierattr_getpshared"])(a0, a1));
    var _pthread_condattr_getclock = (Module["_pthread_condattr_getclock"] = (
      a0,
      a1,
    ) =>
      (_pthread_condattr_getclock = Module["_pthread_condattr_getclock"] =
        wasmExports["pthread_condattr_getclock"])(a0, a1));
    var _pthread_condattr_getpshared = (Module["_pthread_condattr_getpshared"] =
      (a0, a1) =>
        (_pthread_condattr_getpshared = Module["_pthread_condattr_getpshared"] =
          wasmExports["pthread_condattr_getpshared"])(a0, a1));
    var _pthread_mutexattr_getprotocol = (Module[
      "_pthread_mutexattr_getprotocol"
    ] = (a0, a1) =>
      (_pthread_mutexattr_getprotocol = Module[
        "_pthread_mutexattr_getprotocol"
      ] =
        wasmExports["pthread_mutexattr_getprotocol"])(a0, a1));
    var _pthread_mutexattr_getpshared = (Module[
      "_pthread_mutexattr_getpshared"
    ] = (a0, a1) =>
      (_pthread_mutexattr_getpshared = Module["_pthread_mutexattr_getpshared"] =
        wasmExports["pthread_mutexattr_getpshared"])(a0, a1));
    var _pthread_mutexattr_getrobust = (Module["_pthread_mutexattr_getrobust"] =
      (a0, a1) =>
        (_pthread_mutexattr_getrobust = Module["_pthread_mutexattr_getrobust"] =
          wasmExports["pthread_mutexattr_getrobust"])(a0, a1));
    var _pthread_mutexattr_gettype = (Module["_pthread_mutexattr_gettype"] = (
      a0,
      a1,
    ) =>
      (_pthread_mutexattr_gettype = Module["_pthread_mutexattr_gettype"] =
        wasmExports["pthread_mutexattr_gettype"])(a0, a1));
    var _pthread_rwlockattr_getpshared = (Module[
      "_pthread_rwlockattr_getpshared"
    ] = (a0, a1) =>
      (_pthread_rwlockattr_getpshared = Module[
        "_pthread_rwlockattr_getpshared"
      ] =
        wasmExports["pthread_rwlockattr_getpshared"])(a0, a1));
    var _pthread_attr_setdetachstate = (Module["_pthread_attr_setdetachstate"] =
      (a0, a1) =>
        (_pthread_attr_setdetachstate = Module["_pthread_attr_setdetachstate"] =
          wasmExports["pthread_attr_setdetachstate"])(a0, a1));
    var _pthread_attr_setguardsize = (Module["_pthread_attr_setguardsize"] = (
      a0,
      a1,
    ) =>
      (_pthread_attr_setguardsize = Module["_pthread_attr_setguardsize"] =
        wasmExports["pthread_attr_setguardsize"])(a0, a1));
    var _pthread_attr_setinheritsched = (Module[
      "_pthread_attr_setinheritsched"
    ] = (a0, a1) =>
      (_pthread_attr_setinheritsched = Module["_pthread_attr_setinheritsched"] =
        wasmExports["pthread_attr_setinheritsched"])(a0, a1));
    var _pthread_attr_setschedparam = (Module["_pthread_attr_setschedparam"] = (
      a0,
      a1,
    ) =>
      (_pthread_attr_setschedparam = Module["_pthread_attr_setschedparam"] =
        wasmExports["pthread_attr_setschedparam"])(a0, a1));
    var _pthread_attr_setschedpolicy = (Module["_pthread_attr_setschedpolicy"] =
      (a0, a1) =>
        (_pthread_attr_setschedpolicy = Module["_pthread_attr_setschedpolicy"] =
          wasmExports["pthread_attr_setschedpolicy"])(a0, a1));
    var _pthread_attr_setscope = (Module["_pthread_attr_setscope"] = (a0, a1) =>
      (_pthread_attr_setscope = Module["_pthread_attr_setscope"] =
        wasmExports["pthread_attr_setscope"])(a0, a1));
    var _pthread_attr_setstack = (Module["_pthread_attr_setstack"] = (
      a0,
      a1,
      a2,
    ) =>
      (_pthread_attr_setstack = Module["_pthread_attr_setstack"] =
        wasmExports["pthread_attr_setstack"])(a0, a1, a2));
    var __pthread_cleanup_push = (Module["__pthread_cleanup_push"] = (
      a0,
      a1,
      a2,
    ) =>
      (__pthread_cleanup_push = Module["__pthread_cleanup_push"] =
        wasmExports["_pthread_cleanup_push"])(a0, a1, a2));
    var __pthread_cleanup_pop = (Module["__pthread_cleanup_pop"] = (a0, a1) =>
      (__pthread_cleanup_pop = Module["__pthread_cleanup_pop"] =
        wasmExports["_pthread_cleanup_pop"])(a0, a1));
    var _pthread_getconcurrency = (Module["_pthread_getconcurrency"] = () =>
      (_pthread_getconcurrency = Module["_pthread_getconcurrency"] =
        wasmExports["pthread_getconcurrency"])());
    var _pthread_getschedparam = (Module["_pthread_getschedparam"] = (
      a0,
      a1,
      a2,
    ) =>
      (_pthread_getschedparam = Module["_pthread_getschedparam"] =
        wasmExports["pthread_getschedparam"])(a0, a1, a2));
    var _thrd_current = (Module["_thrd_current"] = () =>
      (_thrd_current = Module["_thrd_current"] =
        wasmExports["thrd_current"])());
    var _emscripten_main_runtime_thread_id = (Module[
      "_emscripten_main_runtime_thread_id"
    ] = () =>
      (_emscripten_main_runtime_thread_id = Module[
        "_emscripten_main_runtime_thread_id"
      ] =
        wasmExports["emscripten_main_runtime_thread_id"])());
    var _pthread_setconcurrency = (Module["_pthread_setconcurrency"] = (a0) =>
      (_pthread_setconcurrency = Module["_pthread_setconcurrency"] =
        wasmExports["pthread_setconcurrency"])(a0));
    var _pthread_setschedprio = (Module["_pthread_setschedprio"] = (a0, a1) =>
      (_pthread_setschedprio = Module["_pthread_setschedprio"] =
        wasmExports["pthread_setschedprio"])(a0, a1));
    var ___sig_is_blocked = (Module["___sig_is_blocked"] = (a0) =>
      (___sig_is_blocked = Module["___sig_is_blocked"] =
        wasmExports["__sig_is_blocked"])(a0));
    var _sigorset = (Module["_sigorset"] = (a0, a1, a2) =>
      (_sigorset = Module["_sigorset"] = wasmExports["sigorset"])(a0, a1, a2));
    var _sigandset = (Module["_sigandset"] = (a0, a1, a2) =>
      (_sigandset = Module["_sigandset"] = wasmExports["sigandset"])(
        a0,
        a1,
        a2,
      ));
    var _sigdelset = (Module["_sigdelset"] = (a0, a1) =>
      (_sigdelset = Module["_sigdelset"] = wasmExports["sigdelset"])(a0, a1));
    var _ptsname = (Module["_ptsname"] = (a0) =>
      (_ptsname = Module["_ptsname"] = wasmExports["ptsname"])(a0));
    var _posix_openpt = (Module["_posix_openpt"] = (a0) =>
      (_posix_openpt = Module["_posix_openpt"] = wasmExports["posix_openpt"])(
        a0,
      ));
    var _grantpt = (Module["_grantpt"] = (a0) =>
      (_grantpt = Module["_grantpt"] = wasmExports["grantpt"])(a0));
    var _unlockpt = (Module["_unlockpt"] = (a0) =>
      (_unlockpt = Module["_unlockpt"] = wasmExports["unlockpt"])(a0));
    var _ptsname_r = (Module["_ptsname_r"] = (a0, a1, a2) =>
      (_ptsname_r = Module["_ptsname_r"] = wasmExports["ptsname_r"])(
        a0,
        a1,
        a2,
      ));
    var __IO_putc = (Module["__IO_putc"] = (a0, a1) =>
      (__IO_putc = Module["__IO_putc"] = wasmExports["_IO_putc"])(a0, a1));
    var _putc_unlocked = (Module["_putc_unlocked"] = (a0, a1) =>
      (_putc_unlocked = Module["_putc_unlocked"] =
        wasmExports["putc_unlocked"])(a0, a1));
    var _fputc_unlocked = (Module["_fputc_unlocked"] = (a0, a1) =>
      (_fputc_unlocked = Module["_fputc_unlocked"] =
        wasmExports["fputc_unlocked"])(a0, a1));
    var __IO_putc_unlocked = (Module["__IO_putc_unlocked"] = (a0, a1) =>
      (__IO_putc_unlocked = Module["__IO_putc_unlocked"] =
        wasmExports["_IO_putc_unlocked"])(a0, a1));
    var _putchar = (Module["_putchar"] = (a0) =>
      (_putchar = Module["_putchar"] = wasmExports["putchar"])(a0));
    var _putchar_unlocked = (Module["_putchar_unlocked"] = (a0) =>
      (_putchar_unlocked = Module["_putchar_unlocked"] =
        wasmExports["putchar_unlocked"])(a0));
    var _putenv = (Module["_putenv"] = (a0) =>
      (_putenv = Module["_putenv"] = wasmExports["putenv"])(a0));
    var _putw = (Module["_putw"] = (a0, a1) =>
      (_putw = Module["_putw"] = wasmExports["putw"])(a0, a1));
    var _putwc = (Module["_putwc"] = (a0, a1) =>
      (_putwc = Module["_putwc"] = wasmExports["putwc"])(a0, a1));
    var _putwchar = (Module["_putwchar"] = (a0) =>
      (_putwchar = Module["_putwchar"] = wasmExports["putwchar"])(a0));
    var _putwchar_unlocked = (Module["_putwchar_unlocked"] = (a0) =>
      (_putwchar_unlocked = Module["_putwchar_unlocked"] =
        wasmExports["putwchar_unlocked"])(a0));
    var _pwritev = (Module["_pwritev"] = (a0, a1, a2, a3) =>
      (_pwritev = Module["_pwritev"] = wasmExports["pwritev"])(a0, a1, a2, a3));
    var _qsort_r = (Module["_qsort_r"] = (a0, a1, a2, a3, a4) =>
      (_qsort_r = Module["_qsort_r"] = wasmExports["qsort_r"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _quick_exit = (Module["_quick_exit"] = (a0) =>
      (_quick_exit = Module["_quick_exit"] = wasmExports["quick_exit"])(a0));
    var _srand = (Module["_srand"] = (a0) =>
      (_srand = Module["_srand"] = wasmExports["srand"])(a0));
    var _rand = (Module["_rand"] = () =>
      (_rand = Module["_rand"] = wasmExports["rand"])());
    var _rand_r = (Module["_rand_r"] = (a0) =>
      (_rand_r = Module["_rand_r"] = wasmExports["rand_r"])(a0));
    var _srandom = (Module["_srandom"] = (a0) =>
      (_srandom = Module["_srandom"] = wasmExports["srandom"])(a0));
    var _initstate = (Module["_initstate"] = (a0, a1, a2) =>
      (_initstate = Module["_initstate"] = wasmExports["initstate"])(
        a0,
        a1,
        a2,
      ));
    var _setstate = (Module["_setstate"] = (a0) =>
      (_setstate = Module["_setstate"] = wasmExports["setstate"])(a0));
    var _random = (Module["_random"] = () =>
      (_random = Module["_random"] = wasmExports["random"])());
    var _readdir_r = (Module["_readdir_r"] = (a0, a1, a2) =>
      (_readdir_r = Module["_readdir_r"] = wasmExports["readdir_r"])(
        a0,
        a1,
        a2,
      ));
    var _recvmmsg = (Module["_recvmmsg"] = (a0, a1, a2, a3, a4) =>
      (_recvmmsg = Module["_recvmmsg"] = wasmExports["recvmmsg"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _regcomp = (Module["_regcomp"] = (a0, a1, a2) =>
      (_regcomp = Module["_regcomp"] = wasmExports["regcomp"])(a0, a1, a2));
    var _regfree = (Module["_regfree"] = (a0) =>
      (_regfree = Module["_regfree"] = wasmExports["regfree"])(a0));
    var _regerror = (Module["_regerror"] = (a0, a1, a2, a3) =>
      (_regerror = Module["_regerror"] = wasmExports["regerror"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _regexec = (Module["_regexec"] = (a0, a1, a2, a3, a4) =>
      (_regexec = Module["_regexec"] = wasmExports["regexec"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _remainder = (Module["_remainder"] = (a0, a1) =>
      (_remainder = Module["_remainder"] = wasmExports["remainder"])(a0, a1));
    var _remquo = (Module["_remquo"] = (a0, a1, a2) =>
      (_remquo = Module["_remquo"] = wasmExports["remquo"])(a0, a1, a2));
    var _drem = (Module["_drem"] = (a0, a1) =>
      (_drem = Module["_drem"] = wasmExports["drem"])(a0, a1));
    var _remainderf = (Module["_remainderf"] = (a0, a1) =>
      (_remainderf = Module["_remainderf"] = wasmExports["remainderf"])(
        a0,
        a1,
      ));
    var _remquof = (Module["_remquof"] = (a0, a1, a2) =>
      (_remquof = Module["_remquof"] = wasmExports["remquof"])(a0, a1, a2));
    var _dremf = (Module["_dremf"] = (a0, a1) =>
      (_dremf = Module["_dremf"] = wasmExports["dremf"])(a0, a1));
    var _remainderl = (Module["_remainderl"] = (a0, a1, a2, a3, a4) =>
      (_remainderl = Module["_remainderl"] = wasmExports["remainderl"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _remquol = (Module["_remquol"] = (a0, a1, a2, a3, a4, a5) =>
      (_remquol = Module["_remquol"] = wasmExports["remquol"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _remove = (Module["_remove"] = (a0) =>
      (_remove = Module["_remove"] = wasmExports["remove"])(a0));
    var _res_init = (Module["_res_init"] = () =>
      (_res_init = Module["_res_init"] = wasmExports["res_init"])());
    var _res_mkquery = (Module["_res_mkquery"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
    ) =>
      (_res_mkquery = Module["_res_mkquery"] = wasmExports["res_mkquery"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var ___res_msend = (Module["___res_msend"] = (a0, a1, a2, a3, a4, a5) =>
      (___res_msend = Module["___res_msend"] = wasmExports["__res_msend"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var _res_send = (Module["_res_send"] = (a0, a1, a2, a3) =>
      (_res_send = Module["_res_send"] = wasmExports["res_send"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___res_state = (Module["___res_state"] = () =>
      (___res_state = Module["___res_state"] = wasmExports["__res_state"])());
    var _rindex = (Module["_rindex"] = (a0, a1) =>
      (_rindex = Module["_rindex"] = wasmExports["rindex"])(a0, a1));
    var _emscripten_get_sbrk_ptr = (Module["_emscripten_get_sbrk_ptr"] = () =>
      (_emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] =
        wasmExports["emscripten_get_sbrk_ptr"])());
    var _sbrk = (Module["_sbrk"] = (a0) =>
      (_sbrk = Module["_sbrk"] = wasmExports["sbrk"])(a0));
    var _brk = (Module["_brk"] = (a0) =>
      (_brk = Module["_brk"] = wasmExports["brk"])(a0));
    var _scalb = (Module["_scalb"] = (a0, a1) =>
      (_scalb = Module["_scalb"] = wasmExports["scalb"])(a0, a1));
    var _scalbf = (Module["_scalbf"] = (a0, a1) =>
      (_scalbf = Module["_scalbf"] = wasmExports["scalbf"])(a0, a1));
    var _scalbln = (Module["_scalbln"] = (a0, a1) =>
      (_scalbln = Module["_scalbln"] = wasmExports["scalbln"])(a0, a1));
    var _scalblnf = (Module["_scalblnf"] = (a0, a1) =>
      (_scalblnf = Module["_scalblnf"] = wasmExports["scalblnf"])(a0, a1));
    var _scalblnl = (Module["_scalblnl"] = (a0, a1, a2, a3) =>
      (_scalblnl = Module["_scalblnl"] = wasmExports["scalblnl"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _scandir = (Module["_scandir"] = (a0, a1, a2, a3) =>
      (_scandir = Module["_scandir"] = wasmExports["scandir"])(a0, a1, a2, a3));
    var _scanf = (Module["_scanf"] = (a0, a1) =>
      (_scanf = Module["_scanf"] = wasmExports["scanf"])(a0, a1));
    var _vscanf = (Module["_vscanf"] = (a0, a1) =>
      (_vscanf = Module["_vscanf"] = wasmExports["vscanf"])(a0, a1));
    var ___isoc99_scanf = (Module["___isoc99_scanf"] = (a0, a1) =>
      (___isoc99_scanf = Module["___isoc99_scanf"] =
        wasmExports["__isoc99_scanf"])(a0, a1));
    var _secure_getenv = (Module["_secure_getenv"] = (a0) =>
      (_secure_getenv = Module["_secure_getenv"] =
        wasmExports["secure_getenv"])(a0));
    var _seed48 = (Module["_seed48"] = (a0) =>
      (_seed48 = Module["_seed48"] = wasmExports["seed48"])(a0));
    var _seekdir = (Module["_seekdir"] = (a0, a1) =>
      (_seekdir = Module["_seekdir"] = wasmExports["seekdir"])(a0, a1));
    var _sendmmsg = (Module["_sendmmsg"] = (a0, a1, a2, a3) =>
      (_sendmmsg = Module["_sendmmsg"] = wasmExports["sendmmsg"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _endservent = (Module["_endservent"] = () =>
      (_endservent = Module["_endservent"] = wasmExports["endservent"])());
    var _setservent = (Module["_setservent"] = (a0) =>
      (_setservent = Module["_setservent"] = wasmExports["setservent"])(a0));
    var _getservent = (Module["_getservent"] = () =>
      (_getservent = Module["_getservent"] = wasmExports["getservent"])());
    var _setbuf = (Module["_setbuf"] = (a0, a1) =>
      (_setbuf = Module["_setbuf"] = wasmExports["setbuf"])(a0, a1));
    var _setbuffer = (Module["_setbuffer"] = (a0, a1, a2) =>
      (_setbuffer = Module["_setbuffer"] = wasmExports["setbuffer"])(
        a0,
        a1,
        a2,
      ));
    var _setdomainname = (Module["_setdomainname"] = (a0, a1) =>
      (_setdomainname = Module["_setdomainname"] =
        wasmExports["setdomainname"])(a0, a1));
    var _setegid = (Module["_setegid"] = (a0) =>
      (_setegid = Module["_setegid"] = wasmExports["setegid"])(a0));
    var _seteuid = (Module["_seteuid"] = (a0) =>
      (_seteuid = Module["_seteuid"] = wasmExports["seteuid"])(a0));
    var __emscripten_timeout = (a0, a1) =>
      (__emscripten_timeout = wasmExports["_emscripten_timeout"])(a0, a1);
    var _setlinebuf = (Module["_setlinebuf"] = (a0) =>
      (_setlinebuf = Module["_setlinebuf"] = wasmExports["setlinebuf"])(a0));
    var _setresgid = (Module["_setresgid"] = (a0, a1, a2) =>
      (_setresgid = Module["_setresgid"] = wasmExports["setresgid"])(
        a0,
        a1,
        a2,
      ));
    var _setresuid = (Module["_setresuid"] = (a0, a1, a2) =>
      (_setresuid = Module["_setresuid"] = wasmExports["setresuid"])(
        a0,
        a1,
        a2,
      ));
    var _shm_open = (Module["_shm_open"] = (a0, a1, a2) =>
      (_shm_open = Module["_shm_open"] = wasmExports["shm_open"])(a0, a1, a2));
    var _shm_unlink = (Module["_shm_unlink"] = (a0) =>
      (_shm_unlink = Module["_shm_unlink"] = wasmExports["shm_unlink"])(a0));
    var _sigaction = (Module["_sigaction"] = (a0, a1, a2) =>
      (_sigaction = Module["_sigaction"] = wasmExports["sigaction"])(
        a0,
        a1,
        a2,
      ));
    var _bsd_signal = (Module["_bsd_signal"] = (a0, a1) =>
      (_bsd_signal = Module["_bsd_signal"] = wasmExports["bsd_signal"])(
        a0,
        a1,
      ));
    var ___sysv_signal = (Module["___sysv_signal"] = (a0, a1) =>
      (___sysv_signal = Module["___sysv_signal"] =
        wasmExports["__sysv_signal"])(a0, a1));
    var _significand = (Module["_significand"] = (a0) =>
      (_significand = Module["_significand"] = wasmExports["significand"])(a0));
    var _significandf = (Module["_significandf"] = (a0) =>
      (_significandf = Module["_significandf"] = wasmExports["significandf"])(
        a0,
      ));
    var _sigprocmask = (Module["_sigprocmask"] = (a0, a1, a2) =>
      (_sigprocmask = Module["_sigprocmask"] = wasmExports["sigprocmask"])(
        a0,
        a1,
        a2,
      ));
    var _sincos = (Module["_sincos"] = (a0, a1, a2) =>
      (_sincos = Module["_sincos"] = wasmExports["sincos"])(a0, a1, a2));
    var _sincosf = (Module["_sincosf"] = (a0, a1, a2) =>
      (_sincosf = Module["_sincosf"] = wasmExports["sincosf"])(a0, a1, a2));
    var _sincosl = (Module["_sincosl"] = (a0, a1, a2, a3) =>
      (_sincosl = Module["_sincosl"] = wasmExports["sincosl"])(a0, a1, a2, a3));
    var _sinhl = (Module["_sinhl"] = (a0, a1, a2) =>
      (_sinhl = Module["_sinhl"] = wasmExports["sinhl"])(a0, a1, a2));
    var _sinl = (Module["_sinl"] = (a0, a1, a2) =>
      (_sinl = Module["_sinl"] = wasmExports["sinl"])(a0, a1, a2));
    var _sleep = (Module["_sleep"] = (a0) =>
      (_sleep = Module["_sleep"] = wasmExports["sleep"])(a0));
    var _sockatmark = (Module["_sockatmark"] = (a0) =>
      (_sockatmark = Module["_sockatmark"] = wasmExports["sockatmark"])(a0));
    var _vsprintf = (Module["_vsprintf"] = (a0, a1, a2) =>
      (_vsprintf = Module["_vsprintf"] = wasmExports["vsprintf"])(a0, a1, a2));
    var _vsiprintf = (Module["_vsiprintf"] = (a0, a1, a2) =>
      (_vsiprintf = Module["_vsiprintf"] = wasmExports["vsiprintf"])(
        a0,
        a1,
        a2,
      ));
    var ___small_sprintf = (Module["___small_sprintf"] = (a0, a1, a2) =>
      (___small_sprintf = Module["___small_sprintf"] =
        wasmExports["__small_sprintf"])(a0, a1, a2));
    var ___small_vsprintf = (Module["___small_vsprintf"] = (a0, a1, a2) =>
      (___small_vsprintf = Module["___small_vsprintf"] =
        wasmExports["__small_vsprintf"])(a0, a1, a2));
    var _srand48 = (Module["_srand48"] = (a0) =>
      (_srand48 = Module["_srand48"] = wasmExports["srand48"])(a0));
    var _vsscanf = (Module["_vsscanf"] = (a0, a1, a2) =>
      (_vsscanf = Module["_vsscanf"] = wasmExports["vsscanf"])(a0, a1, a2));
    var ___isoc99_sscanf = (Module["___isoc99_sscanf"] = (a0, a1, a2) =>
      (___isoc99_sscanf = Module["___isoc99_sscanf"] =
        wasmExports["__isoc99_sscanf"])(a0, a1, a2));
    var _statfs = (Module["_statfs"] = (a0, a1) =>
      (_statfs = Module["_statfs"] = wasmExports["statfs"])(a0, a1));
    var _fstatfs = (Module["_fstatfs"] = (a0, a1) =>
      (_fstatfs = Module["_fstatfs"] = wasmExports["fstatfs"])(a0, a1));
    var _stpcpy = (Module["_stpcpy"] = (a0, a1) =>
      (_stpcpy = Module["_stpcpy"] = wasmExports["stpcpy"])(a0, a1));
    var _stpncpy = (Module["_stpncpy"] = (a0, a1, a2) =>
      (_stpncpy = Module["_stpncpy"] = wasmExports["stpncpy"])(a0, a1, a2));
    var ___strcasecmp_l = (Module["___strcasecmp_l"] = (a0, a1, a2) =>
      (___strcasecmp_l = Module["___strcasecmp_l"] =
        wasmExports["__strcasecmp_l"])(a0, a1, a2));
    var _strcasecmp_l = (Module["_strcasecmp_l"] = (a0, a1, a2) =>
      (_strcasecmp_l = Module["_strcasecmp_l"] = wasmExports["strcasecmp_l"])(
        a0,
        a1,
        a2,
      ));
    var _strcasestr = (Module["_strcasestr"] = (a0, a1) =>
      (_strcasestr = Module["_strcasestr"] = wasmExports["strcasestr"])(
        a0,
        a1,
      ));
    var _strncasecmp = (Module["_strncasecmp"] = (a0, a1, a2) =>
      (_strncasecmp = Module["_strncasecmp"] = wasmExports["strncasecmp"])(
        a0,
        a1,
        a2,
      ));
    var _strchrnul = (Module["_strchrnul"] = (a0, a1) =>
      (_strchrnul = Module["_strchrnul"] = wasmExports["strchrnul"])(a0, a1));
    var ___strcoll_l = (Module["___strcoll_l"] = (a0, a1, a2) =>
      (___strcoll_l = Module["___strcoll_l"] = wasmExports["__strcoll_l"])(
        a0,
        a1,
        a2,
      ));
    var _strcoll_l = (Module["_strcoll_l"] = (a0, a1, a2) =>
      (_strcoll_l = Module["_strcoll_l"] = wasmExports["strcoll_l"])(
        a0,
        a1,
        a2,
      ));
    var ___strerror_l = (Module["___strerror_l"] = (a0, a1) =>
      (___strerror_l = Module["___strerror_l"] = wasmExports["__strerror_l"])(
        a0,
        a1,
      ));
    var _strerror_l = (Module["_strerror_l"] = (a0, a1) =>
      (_strerror_l = Module["_strerror_l"] = wasmExports["strerror_l"])(
        a0,
        a1,
      ));
    var _strerror_r = (Module["_strerror_r"] = (a0, a1, a2) =>
      (_strerror_r = Module["_strerror_r"] = wasmExports["strerror_r"])(
        a0,
        a1,
        a2,
      ));
    var ___xpg_strerror_r = (Module["___xpg_strerror_r"] = (a0, a1, a2) =>
      (___xpg_strerror_r = Module["___xpg_strerror_r"] =
        wasmExports["__xpg_strerror_r"])(a0, a1, a2));
    var _strfmon_l = (Module["_strfmon_l"] = (a0, a1, a2, a3, a4) =>
      (_strfmon_l = Module["_strfmon_l"] = wasmExports["strfmon_l"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _strfmon = (Module["_strfmon"] = (a0, a1, a2, a3) =>
      (_strfmon = Module["_strfmon"] = wasmExports["strfmon"])(a0, a1, a2, a3));
    var _strlcat = (Module["_strlcat"] = (a0, a1, a2) =>
      (_strlcat = Module["_strlcat"] = wasmExports["strlcat"])(a0, a1, a2));
    var _strlcpy = (Module["_strlcpy"] = (a0, a1, a2) =>
      (_strlcpy = Module["_strlcpy"] = wasmExports["strlcpy"])(a0, a1, a2));
    var _strlwr = (Module["_strlwr"] = (a0) =>
      (_strlwr = Module["_strlwr"] = wasmExports["strlwr"])(a0));
    var ___strncasecmp_l = (Module["___strncasecmp_l"] = (a0, a1, a2, a3) =>
      (___strncasecmp_l = Module["___strncasecmp_l"] =
        wasmExports["__strncasecmp_l"])(a0, a1, a2, a3));
    var _strncasecmp_l = (Module["_strncasecmp_l"] = (a0, a1, a2, a3) =>
      (_strncasecmp_l = Module["_strncasecmp_l"] =
        wasmExports["strncasecmp_l"])(a0, a1, a2, a3));
    var _strndup = (Module["_strndup"] = (a0, a1) =>
      (_strndup = Module["_strndup"] = wasmExports["strndup"])(a0, a1));
    var _strpbrk = (Module["_strpbrk"] = (a0, a1) =>
      (_strpbrk = Module["_strpbrk"] = wasmExports["strpbrk"])(a0, a1));
    var _strsep = (Module["_strsep"] = (a0, a1) =>
      (_strsep = Module["_strsep"] = wasmExports["strsep"])(a0, a1));
    var _strtof = (Module["_strtof"] = (a0, a1) =>
      (_strtof = Module["_strtof"] = wasmExports["strtof"])(a0, a1));
    var _strtold = (Module["_strtold"] = (a0, a1, a2) =>
      (_strtold = Module["_strtold"] = wasmExports["strtold"])(a0, a1, a2));
    var _strtof_l = (Module["_strtof_l"] = (a0, a1, a2) =>
      (_strtof_l = Module["_strtof_l"] = wasmExports["strtof_l"])(a0, a1, a2));
    var _strtod_l = (Module["_strtod_l"] = (a0, a1, a2) =>
      (_strtod_l = Module["_strtod_l"] = wasmExports["strtod_l"])(a0, a1, a2));
    var _strtold_l = (Module["_strtold_l"] = (a0, a1, a2, a3) =>
      (_strtold_l = Module["_strtold_l"] = wasmExports["strtold_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___strtof_l = (Module["___strtof_l"] = (a0, a1, a2) =>
      (___strtof_l = Module["___strtof_l"] = wasmExports["__strtof_l"])(
        a0,
        a1,
        a2,
      ));
    var ___strtod_l = (Module["___strtod_l"] = (a0, a1, a2) =>
      (___strtod_l = Module["___strtod_l"] = wasmExports["__strtod_l"])(
        a0,
        a1,
        a2,
      ));
    var ___strtold_l = (Module["___strtold_l"] = (a0, a1, a2, a3) =>
      (___strtold_l = Module["___strtold_l"] = wasmExports["__strtold_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _strtok = (Module["_strtok"] = (a0, a1) =>
      (_strtok = Module["_strtok"] = wasmExports["strtok"])(a0, a1));
    var _strtok_r = (Module["_strtok_r"] = (a0, a1, a2) =>
      (_strtok_r = Module["_strtok_r"] = wasmExports["strtok_r"])(a0, a1, a2));
    var _strtoll = (Module["_strtoll"] = (a0, a1, a2) =>
      (_strtoll = Module["_strtoll"] = wasmExports["strtoll"])(a0, a1, a2));
    var _strtoimax = (Module["_strtoimax"] = (a0, a1, a2) =>
      (_strtoimax = Module["_strtoimax"] = wasmExports["strtoimax"])(
        a0,
        a1,
        a2,
      ));
    var _strtoumax = (Module["_strtoumax"] = (a0, a1, a2) =>
      (_strtoumax = Module["_strtoumax"] = wasmExports["strtoumax"])(
        a0,
        a1,
        a2,
      ));
    var ___strtol_internal = (Module["___strtol_internal"] = (a0, a1, a2) =>
      (___strtol_internal = Module["___strtol_internal"] =
        wasmExports["__strtol_internal"])(a0, a1, a2));
    var ___strtoul_internal = (Module["___strtoul_internal"] = (a0, a1, a2) =>
      (___strtoul_internal = Module["___strtoul_internal"] =
        wasmExports["__strtoul_internal"])(a0, a1, a2));
    var ___strtoll_internal = (Module["___strtoll_internal"] = (a0, a1, a2) =>
      (___strtoll_internal = Module["___strtoll_internal"] =
        wasmExports["__strtoll_internal"])(a0, a1, a2));
    var ___strtoull_internal = (Module["___strtoull_internal"] = (a0, a1, a2) =>
      (___strtoull_internal = Module["___strtoull_internal"] =
        wasmExports["__strtoull_internal"])(a0, a1, a2));
    var ___strtoimax_internal = (Module["___strtoimax_internal"] = (
      a0,
      a1,
      a2,
    ) =>
      (___strtoimax_internal = Module["___strtoimax_internal"] =
        wasmExports["__strtoimax_internal"])(a0, a1, a2));
    var ___strtoumax_internal = (Module["___strtoumax_internal"] = (
      a0,
      a1,
      a2,
    ) =>
      (___strtoumax_internal = Module["___strtoumax_internal"] =
        wasmExports["__strtoumax_internal"])(a0, a1, a2));
    var _strtoull_l = (Module["_strtoull_l"] = (a0, a1, a2, a3) =>
      (_strtoull_l = Module["_strtoull_l"] = wasmExports["strtoull_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _strtoll_l = (Module["_strtoll_l"] = (a0, a1, a2, a3) =>
      (_strtoll_l = Module["_strtoll_l"] = wasmExports["strtoll_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _strtoul_l = (Module["_strtoul_l"] = (a0, a1, a2, a3) =>
      (_strtoul_l = Module["_strtoul_l"] = wasmExports["strtoul_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _strtol_l = (Module["_strtol_l"] = (a0, a1, a2, a3) =>
      (_strtol_l = Module["_strtol_l"] = wasmExports["strtol_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _strupr = (Module["_strupr"] = (a0) =>
      (_strupr = Module["_strupr"] = wasmExports["strupr"])(a0));
    var _strverscmp = (Module["_strverscmp"] = (a0, a1) =>
      (_strverscmp = Module["_strverscmp"] = wasmExports["strverscmp"])(
        a0,
        a1,
      ));
    var ___strxfrm_l = (Module["___strxfrm_l"] = (a0, a1, a2, a3) =>
      (___strxfrm_l = Module["___strxfrm_l"] = wasmExports["__strxfrm_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _strxfrm = (Module["_strxfrm"] = (a0, a1, a2) =>
      (_strxfrm = Module["_strxfrm"] = wasmExports["strxfrm"])(a0, a1, a2));
    var _strxfrm_l = (Module["_strxfrm_l"] = (a0, a1, a2, a3) =>
      (_strxfrm_l = Module["_strxfrm_l"] = wasmExports["strxfrm_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _swab = (Module["_swab"] = (a0, a1, a2) =>
      (_swab = Module["_swab"] = wasmExports["swab"])(a0, a1, a2));
    var _swprintf = (Module["_swprintf"] = (a0, a1, a2, a3) =>
      (_swprintf = Module["_swprintf"] = wasmExports["swprintf"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _vswprintf = (Module["_vswprintf"] = (a0, a1, a2, a3) =>
      (_vswprintf = Module["_vswprintf"] = wasmExports["vswprintf"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _swscanf = (Module["_swscanf"] = (a0, a1, a2) =>
      (_swscanf = Module["_swscanf"] = wasmExports["swscanf"])(a0, a1, a2));
    var _vswscanf = (Module["_vswscanf"] = (a0, a1, a2) =>
      (_vswscanf = Module["_vswscanf"] = wasmExports["vswscanf"])(a0, a1, a2));
    var ___isoc99_swscanf = (Module["___isoc99_swscanf"] = (a0, a1, a2) =>
      (___isoc99_swscanf = Module["___isoc99_swscanf"] =
        wasmExports["__isoc99_swscanf"])(a0, a1, a2));
    var _symlinkat = (Module["_symlinkat"] = (a0, a1, a2) =>
      (_symlinkat = Module["_symlinkat"] = wasmExports["symlinkat"])(
        a0,
        a1,
        a2,
      ));
    var _setlogmask = (Module["_setlogmask"] = (a0) =>
      (_setlogmask = Module["_setlogmask"] = wasmExports["setlogmask"])(a0));
    var _closelog = (Module["_closelog"] = () =>
      (_closelog = Module["_closelog"] = wasmExports["closelog"])());
    var _openlog = (Module["_openlog"] = (a0, a1, a2) =>
      (_openlog = Module["_openlog"] = wasmExports["openlog"])(a0, a1, a2));
    var _syslog = (Module["_syslog"] = (a0, a1, a2) =>
      (_syslog = Module["_syslog"] = wasmExports["syslog"])(a0, a1, a2));
    var _vsyslog = (Module["_vsyslog"] = (a0, a1, a2) =>
      (_vsyslog = Module["_vsyslog"] = wasmExports["vsyslog"])(a0, a1, a2));
    var _tanhf = (Module["_tanhf"] = (a0) =>
      (_tanhf = Module["_tanhf"] = wasmExports["tanhf"])(a0));
    var _tanhl = (Module["_tanhl"] = (a0, a1, a2) =>
      (_tanhl = Module["_tanhl"] = wasmExports["tanhl"])(a0, a1, a2));
    var _tanl = (Module["_tanl"] = (a0, a1, a2) =>
      (_tanl = Module["_tanl"] = wasmExports["tanl"])(a0, a1, a2));
    var _tcdrain = (Module["_tcdrain"] = (a0) =>
      (_tcdrain = Module["_tcdrain"] = wasmExports["tcdrain"])(a0));
    var _tcflow = (Module["_tcflow"] = (a0, a1) =>
      (_tcflow = Module["_tcflow"] = wasmExports["tcflow"])(a0, a1));
    var _tcflush = (Module["_tcflush"] = (a0, a1) =>
      (_tcflush = Module["_tcflush"] = wasmExports["tcflush"])(a0, a1));
    var _tcgetattr = (Module["_tcgetattr"] = (a0, a1) =>
      (_tcgetattr = Module["_tcgetattr"] = wasmExports["tcgetattr"])(a0, a1));
    var _tcgetsid = (Module["_tcgetsid"] = (a0) =>
      (_tcgetsid = Module["_tcgetsid"] = wasmExports["tcgetsid"])(a0));
    var _tcgetwinsize = (Module["_tcgetwinsize"] = (a0, a1) =>
      (_tcgetwinsize = Module["_tcgetwinsize"] = wasmExports["tcgetwinsize"])(
        a0,
        a1,
      ));
    var _tcsendbreak = (Module["_tcsendbreak"] = (a0, a1) =>
      (_tcsendbreak = Module["_tcsendbreak"] = wasmExports["tcsendbreak"])(
        a0,
        a1,
      ));
    var _tcsetwinsize = (Module["_tcsetwinsize"] = (a0, a1) =>
      (_tcsetwinsize = Module["_tcsetwinsize"] = wasmExports["tcsetwinsize"])(
        a0,
        a1,
      ));
    var _tdelete = (Module["_tdelete"] = (a0, a1, a2) =>
      (_tdelete = Module["_tdelete"] = wasmExports["tdelete"])(a0, a1, a2));
    var _tdestroy = (Module["_tdestroy"] = (a0, a1) =>
      (_tdestroy = Module["_tdestroy"] = wasmExports["tdestroy"])(a0, a1));
    var _telldir = (Module["_telldir"] = (a0) =>
      (_telldir = Module["_telldir"] = wasmExports["telldir"])(a0));
    var _tempnam = (Module["_tempnam"] = (a0, a1) =>
      (_tempnam = Module["_tempnam"] = wasmExports["tempnam"])(a0, a1));
    var _ngettext = (Module["_ngettext"] = (a0, a1, a2) =>
      (_ngettext = Module["_ngettext"] = wasmExports["ngettext"])(a0, a1, a2));
    var _tfind = (Module["_tfind"] = (a0, a1, a2) =>
      (_tfind = Module["_tfind"] = wasmExports["tfind"])(a0, a1, a2));
    var _tgamma = (Module["_tgamma"] = (a0) =>
      (_tgamma = Module["_tgamma"] = wasmExports["tgamma"])(a0));
    var _tgammaf = (Module["_tgammaf"] = (a0) =>
      (_tgammaf = Module["_tgammaf"] = wasmExports["tgammaf"])(a0));
    var _tgammal = (Module["_tgammal"] = (a0, a1, a2) =>
      (_tgammal = Module["_tgammal"] = wasmExports["tgammal"])(a0, a1, a2));
    var _thrd_create = (Module["_thrd_create"] = (a0, a1, a2) =>
      (_thrd_create = Module["_thrd_create"] = wasmExports["thrd_create"])(
        a0,
        a1,
        a2,
      ));
    var _thrd_exit = (Module["_thrd_exit"] = (a0) =>
      (_thrd_exit = Module["_thrd_exit"] = wasmExports["thrd_exit"])(a0));
    var _thrd_join = (Module["_thrd_join"] = (a0, a1) =>
      (_thrd_join = Module["_thrd_join"] = wasmExports["thrd_join"])(a0, a1));
    var _thrd_sleep = (Module["_thrd_sleep"] = (a0, a1) =>
      (_thrd_sleep = Module["_thrd_sleep"] = wasmExports["thrd_sleep"])(
        a0,
        a1,
      ));
    var _thrd_yield = (Module["_thrd_yield"] = () =>
      (_thrd_yield = Module["_thrd_yield"] = wasmExports["thrd_yield"])());
    var _emscripten_set_thread_name = (Module["_emscripten_set_thread_name"] = (
      a0,
      a1,
    ) =>
      (_emscripten_set_thread_name = Module["_emscripten_set_thread_name"] =
        wasmExports["emscripten_set_thread_name"])(a0, a1));
    var _timespec_get = (Module["_timespec_get"] = (a0, a1) =>
      (_timespec_get = Module["_timespec_get"] = wasmExports["timespec_get"])(
        a0,
        a1,
      ));
    var _tmpfile = (Module["_tmpfile"] = () =>
      (_tmpfile = Module["_tmpfile"] = wasmExports["tmpfile"])());
    var _tmpnam = (Module["_tmpnam"] = (a0) =>
      (_tmpnam = Module["_tmpnam"] = wasmExports["tmpnam"])(a0));
    var _toascii = (Module["_toascii"] = (a0) =>
      (_toascii = Module["_toascii"] = wasmExports["toascii"])(a0));
    var ___tolower_l = (Module["___tolower_l"] = (a0, a1) =>
      (___tolower_l = Module["___tolower_l"] = wasmExports["__tolower_l"])(
        a0,
        a1,
      ));
    var _tolower_l = (Module["_tolower_l"] = (a0, a1) =>
      (_tolower_l = Module["_tolower_l"] = wasmExports["tolower_l"])(a0, a1));
    var ___toupper_l = (Module["___toupper_l"] = (a0, a1) =>
      (___toupper_l = Module["___toupper_l"] = wasmExports["__toupper_l"])(
        a0,
        a1,
      ));
    var _toupper_l = (Module["_toupper_l"] = (a0, a1) =>
      (_toupper_l = Module["_toupper_l"] = wasmExports["toupper_l"])(a0, a1));
    var ___towupper_l = (Module["___towupper_l"] = (a0, a1) =>
      (___towupper_l = Module["___towupper_l"] = wasmExports["__towupper_l"])(
        a0,
        a1,
      ));
    var ___towlower_l = (Module["___towlower_l"] = (a0, a1) =>
      (___towlower_l = Module["___towlower_l"] = wasmExports["__towlower_l"])(
        a0,
        a1,
      ));
    var _towupper_l = (Module["_towupper_l"] = (a0, a1) =>
      (_towupper_l = Module["_towupper_l"] = wasmExports["towupper_l"])(
        a0,
        a1,
      ));
    var _towlower_l = (Module["_towlower_l"] = (a0, a1) =>
      (_towlower_l = Module["_towlower_l"] = wasmExports["towlower_l"])(
        a0,
        a1,
      ));
    var _trunc = (Module["_trunc"] = (a0) =>
      (_trunc = Module["_trunc"] = wasmExports["trunc"])(a0));
    var _truncf = (Module["_truncf"] = (a0) =>
      (_truncf = Module["_truncf"] = wasmExports["truncf"])(a0));
    var _truncl = (Module["_truncl"] = (a0, a1, a2) =>
      (_truncl = Module["_truncl"] = wasmExports["truncl"])(a0, a1, a2));
    var _tsearch = (Module["_tsearch"] = (a0, a1, a2) =>
      (_tsearch = Module["_tsearch"] = wasmExports["tsearch"])(a0, a1, a2));
    var _tss_create = (Module["_tss_create"] = (a0, a1) =>
      (_tss_create = Module["_tss_create"] = wasmExports["tss_create"])(
        a0,
        a1,
      ));
    var _tss_delete = (Module["_tss_delete"] = (a0) =>
      (_tss_delete = Module["_tss_delete"] = wasmExports["tss_delete"])(a0));
    var _tss_set = (Module["_tss_set"] = (a0, a1) =>
      (_tss_set = Module["_tss_set"] = wasmExports["tss_set"])(a0, a1));
    var _ttyname = (Module["_ttyname"] = (a0) =>
      (_ttyname = Module["_ttyname"] = wasmExports["ttyname"])(a0));
    var _twalk = (Module["_twalk"] = (a0, a1) =>
      (_twalk = Module["_twalk"] = wasmExports["twalk"])(a0, a1));
    var _ualarm = (Module["_ualarm"] = (a0, a1) =>
      (_ualarm = Module["_ualarm"] = wasmExports["ualarm"])(a0, a1));
    var _ungetwc = (Module["_ungetwc"] = (a0, a1) =>
      (_ungetwc = Module["_ungetwc"] = wasmExports["ungetwc"])(a0, a1));
    var ___uselocale = (Module["___uselocale"] = (a0) =>
      (___uselocale = Module["___uselocale"] = wasmExports["__uselocale"])(a0));
    var _uselocale = (Module["_uselocale"] = (a0) =>
      (_uselocale = Module["_uselocale"] = wasmExports["uselocale"])(a0));
    var _usleep = (Module["_usleep"] = (a0) =>
      (_usleep = Module["_usleep"] = wasmExports["usleep"])(a0));
    var _utime = (Module["_utime"] = (a0, a1) =>
      (_utime = Module["_utime"] = wasmExports["utime"])(a0, a1));
    var _versionsort = (Module["_versionsort"] = (a0, a1) =>
      (_versionsort = Module["_versionsort"] = wasmExports["versionsort"])(
        a0,
        a1,
      ));
    var ___vfprintf_internal = (Module["___vfprintf_internal"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___vfprintf_internal = Module["___vfprintf_internal"] =
        wasmExports["__vfprintf_internal"])(a0, a1, a2, a3, a4));
    var ___isoc99_vfscanf = (Module["___isoc99_vfscanf"] = (a0, a1, a2) =>
      (___isoc99_vfscanf = Module["___isoc99_vfscanf"] =
        wasmExports["__isoc99_vfscanf"])(a0, a1, a2));
    var _wcsnlen = (Module["_wcsnlen"] = (a0, a1) =>
      (_wcsnlen = Module["_wcsnlen"] = wasmExports["wcsnlen"])(a0, a1));
    var ___isoc99_vfwscanf = (Module["___isoc99_vfwscanf"] = (a0, a1, a2) =>
      (___isoc99_vfwscanf = Module["___isoc99_vfwscanf"] =
        wasmExports["__isoc99_vfwscanf"])(a0, a1, a2));
    var _vprintf = (Module["_vprintf"] = (a0, a1) =>
      (_vprintf = Module["_vprintf"] = wasmExports["vprintf"])(a0, a1));
    var ___isoc99_vscanf = (Module["___isoc99_vscanf"] = (a0, a1) =>
      (___isoc99_vscanf = Module["___isoc99_vscanf"] =
        wasmExports["__isoc99_vscanf"])(a0, a1));
    var _vsniprintf = (Module["_vsniprintf"] = (a0, a1, a2, a3) =>
      (_vsniprintf = Module["_vsniprintf"] = wasmExports["vsniprintf"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___small_vsnprintf = (Module["___small_vsnprintf"] = (a0, a1, a2, a3) =>
      (___small_vsnprintf = Module["___small_vsnprintf"] =
        wasmExports["__small_vsnprintf"])(a0, a1, a2, a3));
    var ___isoc99_vsscanf = (Module["___isoc99_vsscanf"] = (a0, a1, a2) =>
      (___isoc99_vsscanf = Module["___isoc99_vsscanf"] =
        wasmExports["__isoc99_vsscanf"])(a0, a1, a2));
    var ___isoc99_vswscanf = (Module["___isoc99_vswscanf"] = (a0, a1, a2) =>
      (___isoc99_vswscanf = Module["___isoc99_vswscanf"] =
        wasmExports["__isoc99_vswscanf"])(a0, a1, a2));
    var _vwprintf = (Module["_vwprintf"] = (a0, a1) =>
      (_vwprintf = Module["_vwprintf"] = wasmExports["vwprintf"])(a0, a1));
    var _vwscanf = (Module["_vwscanf"] = (a0, a1) =>
      (_vwscanf = Module["_vwscanf"] = wasmExports["vwscanf"])(a0, a1));
    var ___isoc99_vwscanf = (Module["___isoc99_vwscanf"] = (a0, a1) =>
      (___isoc99_vwscanf = Module["___isoc99_vwscanf"] =
        wasmExports["__isoc99_vwscanf"])(a0, a1));
    var _wcpcpy = (Module["_wcpcpy"] = (a0, a1) =>
      (_wcpcpy = Module["_wcpcpy"] = wasmExports["wcpcpy"])(a0, a1));
    var _wcpncpy = (Module["_wcpncpy"] = (a0, a1, a2) =>
      (_wcpncpy = Module["_wcpncpy"] = wasmExports["wcpncpy"])(a0, a1, a2));
    var _wcscasecmp = (Module["_wcscasecmp"] = (a0, a1) =>
      (_wcscasecmp = Module["_wcscasecmp"] = wasmExports["wcscasecmp"])(
        a0,
        a1,
      ));
    var _wcsncasecmp = (Module["_wcsncasecmp"] = (a0, a1, a2) =>
      (_wcsncasecmp = Module["_wcsncasecmp"] = wasmExports["wcsncasecmp"])(
        a0,
        a1,
        a2,
      ));
    var _wcscasecmp_l = (Module["_wcscasecmp_l"] = (a0, a1, a2) =>
      (_wcscasecmp_l = Module["_wcscasecmp_l"] = wasmExports["wcscasecmp_l"])(
        a0,
        a1,
        a2,
      ));
    var _wcscat = (Module["_wcscat"] = (a0, a1) =>
      (_wcscat = Module["_wcscat"] = wasmExports["wcscat"])(a0, a1));
    var ___wcscoll_l = (Module["___wcscoll_l"] = (a0, a1, a2) =>
      (___wcscoll_l = Module["___wcscoll_l"] = wasmExports["__wcscoll_l"])(
        a0,
        a1,
        a2,
      ));
    var _wcscoll_l = (Module["_wcscoll_l"] = (a0, a1, a2) =>
      (_wcscoll_l = Module["_wcscoll_l"] = wasmExports["wcscoll_l"])(
        a0,
        a1,
        a2,
      ));
    var _wcscspn = (Module["_wcscspn"] = (a0, a1) =>
      (_wcscspn = Module["_wcscspn"] = wasmExports["wcscspn"])(a0, a1));
    var _wcsdup = (Module["_wcsdup"] = (a0) =>
      (_wcsdup = Module["_wcsdup"] = wasmExports["wcsdup"])(a0));
    var _wmemcpy = (Module["_wmemcpy"] = (a0, a1, a2) =>
      (_wmemcpy = Module["_wmemcpy"] = wasmExports["wmemcpy"])(a0, a1, a2));
    var _wcsncasecmp_l = (Module["_wcsncasecmp_l"] = (a0, a1, a2, a3) =>
      (_wcsncasecmp_l = Module["_wcsncasecmp_l"] =
        wasmExports["wcsncasecmp_l"])(a0, a1, a2, a3));
    var _wcsncat = (Module["_wcsncat"] = (a0, a1, a2) =>
      (_wcsncat = Module["_wcsncat"] = wasmExports["wcsncat"])(a0, a1, a2));
    var _wmemset = (Module["_wmemset"] = (a0, a1, a2) =>
      (_wmemset = Module["_wmemset"] = wasmExports["wmemset"])(a0, a1, a2));
    var _wmemchr = (Module["_wmemchr"] = (a0, a1, a2) =>
      (_wmemchr = Module["_wmemchr"] = wasmExports["wmemchr"])(a0, a1, a2));
    var _wcsnrtombs = (Module["_wcsnrtombs"] = (a0, a1, a2, a3, a4) =>
      (_wcsnrtombs = Module["_wcsnrtombs"] = wasmExports["wcsnrtombs"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var _wcspbrk = (Module["_wcspbrk"] = (a0, a1) =>
      (_wcspbrk = Module["_wcspbrk"] = wasmExports["wcspbrk"])(a0, a1));
    var _wcsspn = (Module["_wcsspn"] = (a0, a1) =>
      (_wcsspn = Module["_wcsspn"] = wasmExports["wcsspn"])(a0, a1));
    var _wcsstr = (Module["_wcsstr"] = (a0, a1) =>
      (_wcsstr = Module["_wcsstr"] = wasmExports["wcsstr"])(a0, a1));
    var _wcstof = (Module["_wcstof"] = (a0, a1) =>
      (_wcstof = Module["_wcstof"] = wasmExports["wcstof"])(a0, a1));
    var _wcstod = (Module["_wcstod"] = (a0, a1) =>
      (_wcstod = Module["_wcstod"] = wasmExports["wcstod"])(a0, a1));
    var _wcstold = (Module["_wcstold"] = (a0, a1, a2) =>
      (_wcstold = Module["_wcstold"] = wasmExports["wcstold"])(a0, a1, a2));
    var _wcstoull = (Module["_wcstoull"] = (a0, a1, a2) =>
      (_wcstoull = Module["_wcstoull"] = wasmExports["wcstoull"])(a0, a1, a2));
    var _wcstoll = (Module["_wcstoll"] = (a0, a1, a2) =>
      (_wcstoll = Module["_wcstoll"] = wasmExports["wcstoll"])(a0, a1, a2));
    var _wcstoul = (Module["_wcstoul"] = (a0, a1, a2) =>
      (_wcstoul = Module["_wcstoul"] = wasmExports["wcstoul"])(a0, a1, a2));
    var _wcstoimax = (Module["_wcstoimax"] = (a0, a1, a2) =>
      (_wcstoimax = Module["_wcstoimax"] = wasmExports["wcstoimax"])(
        a0,
        a1,
        a2,
      ));
    var _wcstoumax = (Module["_wcstoumax"] = (a0, a1, a2) =>
      (_wcstoumax = Module["_wcstoumax"] = wasmExports["wcstoumax"])(
        a0,
        a1,
        a2,
      ));
    var _wcswcs = (Module["_wcswcs"] = (a0, a1) =>
      (_wcswcs = Module["_wcswcs"] = wasmExports["wcswcs"])(a0, a1));
    var _wcswidth = (Module["_wcswidth"] = (a0, a1) =>
      (_wcswidth = Module["_wcswidth"] = wasmExports["wcswidth"])(a0, a1));
    var _wcwidth = (Module["_wcwidth"] = (a0) =>
      (_wcwidth = Module["_wcwidth"] = wasmExports["wcwidth"])(a0));
    var ___wcsxfrm_l = (Module["___wcsxfrm_l"] = (a0, a1, a2, a3) =>
      (___wcsxfrm_l = Module["___wcsxfrm_l"] = wasmExports["__wcsxfrm_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _wcsxfrm_l = (Module["_wcsxfrm_l"] = (a0, a1, a2, a3) =>
      (_wcsxfrm_l = Module["_wcsxfrm_l"] = wasmExports["wcsxfrm_l"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _wctob = (Module["_wctob"] = (a0) =>
      (_wctob = Module["_wctob"] = wasmExports["wctob"])(a0));
    var _wctrans = (Module["_wctrans"] = (a0) =>
      (_wctrans = Module["_wctrans"] = wasmExports["wctrans"])(a0));
    var _towctrans = (Module["_towctrans"] = (a0, a1) =>
      (_towctrans = Module["_towctrans"] = wasmExports["towctrans"])(a0, a1));
    var ___wctrans_l = (Module["___wctrans_l"] = (a0, a1) =>
      (___wctrans_l = Module["___wctrans_l"] = wasmExports["__wctrans_l"])(
        a0,
        a1,
      ));
    var ___towctrans_l = (Module["___towctrans_l"] = (a0, a1, a2) =>
      (___towctrans_l = Module["___towctrans_l"] =
        wasmExports["__towctrans_l"])(a0, a1, a2));
    var _wctrans_l = (Module["_wctrans_l"] = (a0, a1) =>
      (_wctrans_l = Module["_wctrans_l"] = wasmExports["wctrans_l"])(a0, a1));
    var _towctrans_l = (Module["_towctrans_l"] = (a0, a1, a2) =>
      (_towctrans_l = Module["_towctrans_l"] = wasmExports["towctrans_l"])(
        a0,
        a1,
        a2,
      ));
    var _wmemmove = (Module["_wmemmove"] = (a0, a1, a2) =>
      (_wmemmove = Module["_wmemmove"] = wasmExports["wmemmove"])(a0, a1, a2));
    var _wprintf = (Module["_wprintf"] = (a0, a1) =>
      (_wprintf = Module["_wprintf"] = wasmExports["wprintf"])(a0, a1));
    var _wscanf = (Module["_wscanf"] = (a0, a1) =>
      (_wscanf = Module["_wscanf"] = wasmExports["wscanf"])(a0, a1));
    var ___isoc99_wscanf = (Module["___isoc99_wscanf"] = (a0, a1) =>
      (___isoc99_wscanf = Module["___isoc99_wscanf"] =
        wasmExports["__isoc99_wscanf"])(a0, a1));
    var ___libc_realloc = (Module["___libc_realloc"] = (a0, a1) =>
      (___libc_realloc = Module["___libc_realloc"] =
        wasmExports["__libc_realloc"])(a0, a1));
    var _realloc_in_place = (Module["_realloc_in_place"] = (a0, a1) =>
      (_realloc_in_place = Module["_realloc_in_place"] =
        wasmExports["realloc_in_place"])(a0, a1));
    var _memalign = (Module["_memalign"] = (a0, a1) =>
      (_memalign = Module["_memalign"] = wasmExports["memalign"])(a0, a1));
    var _valloc = (Module["_valloc"] = (a0) =>
      (_valloc = Module["_valloc"] = wasmExports["valloc"])(a0));
    var _pvalloc = (Module["_pvalloc"] = (a0) =>
      (_pvalloc = Module["_pvalloc"] = wasmExports["pvalloc"])(a0));
    var _mallinfo = (Module["_mallinfo"] = (a0) =>
      (_mallinfo = Module["_mallinfo"] = wasmExports["mallinfo"])(a0));
    var _mallopt = (Module["_mallopt"] = (a0, a1) =>
      (_mallopt = Module["_mallopt"] = wasmExports["mallopt"])(a0, a1));
    var _malloc_trim = (Module["_malloc_trim"] = (a0) =>
      (_malloc_trim = Module["_malloc_trim"] = wasmExports["malloc_trim"])(a0));
    var _malloc_usable_size = (Module["_malloc_usable_size"] = (a0) =>
      (_malloc_usable_size = Module["_malloc_usable_size"] =
        wasmExports["malloc_usable_size"])(a0));
    var _malloc_footprint = (Module["_malloc_footprint"] = () =>
      (_malloc_footprint = Module["_malloc_footprint"] =
        wasmExports["malloc_footprint"])());
    var _malloc_max_footprint = (Module["_malloc_max_footprint"] = () =>
      (_malloc_max_footprint = Module["_malloc_max_footprint"] =
        wasmExports["malloc_max_footprint"])());
    var _malloc_footprint_limit = (Module["_malloc_footprint_limit"] = () =>
      (_malloc_footprint_limit = Module["_malloc_footprint_limit"] =
        wasmExports["malloc_footprint_limit"])());
    var _malloc_set_footprint_limit = (Module["_malloc_set_footprint_limit"] = (
      a0,
    ) =>
      (_malloc_set_footprint_limit = Module["_malloc_set_footprint_limit"] =
        wasmExports["malloc_set_footprint_limit"])(a0));
    var _independent_calloc = (Module["_independent_calloc"] = (a0, a1, a2) =>
      (_independent_calloc = Module["_independent_calloc"] =
        wasmExports["independent_calloc"])(a0, a1, a2));
    var _independent_comalloc = (Module["_independent_comalloc"] = (
      a0,
      a1,
      a2,
    ) =>
      (_independent_comalloc = Module["_independent_comalloc"] =
        wasmExports["independent_comalloc"])(a0, a1, a2));
    var _bulk_free = (Module["_bulk_free"] = (a0, a1) =>
      (_bulk_free = Module["_bulk_free"] = wasmExports["bulk_free"])(a0, a1));
    var ___trap = (Module["___trap"] = () =>
      (___trap = Module["___trap"] = wasmExports["__trap"])());
    var ___absvdi2 = (Module["___absvdi2"] = (a0) =>
      (___absvdi2 = Module["___absvdi2"] = wasmExports["__absvdi2"])(a0));
    var ___absvsi2 = (Module["___absvsi2"] = (a0) =>
      (___absvsi2 = Module["___absvsi2"] = wasmExports["__absvsi2"])(a0));
    var ___absvti2 = (Module["___absvti2"] = (a0, a1, a2) =>
      (___absvti2 = Module["___absvti2"] = wasmExports["__absvti2"])(
        a0,
        a1,
        a2,
      ));
    var ___adddf3 = (Module["___adddf3"] = (a0, a1) =>
      (___adddf3 = Module["___adddf3"] = wasmExports["__adddf3"])(a0, a1));
    var ___fe_getround = (Module["___fe_getround"] = () =>
      (___fe_getround = Module["___fe_getround"] =
        wasmExports["__fe_getround"])());
    var ___fe_raise_inexact = (Module["___fe_raise_inexact"] = () =>
      (___fe_raise_inexact = Module["___fe_raise_inexact"] =
        wasmExports["__fe_raise_inexact"])());
    var ___addsf3 = (Module["___addsf3"] = (a0, a1) =>
      (___addsf3 = Module["___addsf3"] = wasmExports["__addsf3"])(a0, a1));
    var ___ashlti3 = (Module["___ashlti3"] = (a0, a1, a2, a3) =>
      (___ashlti3 = Module["___ashlti3"] = wasmExports["__ashlti3"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___lshrti3 = (Module["___lshrti3"] = (a0, a1, a2, a3) =>
      (___lshrti3 = Module["___lshrti3"] = wasmExports["__lshrti3"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___addvdi3 = (Module["___addvdi3"] = (a0, a1) =>
      (___addvdi3 = Module["___addvdi3"] = wasmExports["__addvdi3"])(a0, a1));
    var ___addvsi3 = (Module["___addvsi3"] = (a0, a1) =>
      (___addvsi3 = Module["___addvsi3"] = wasmExports["__addvsi3"])(a0, a1));
    var ___addvti3 = (Module["___addvti3"] = (a0, a1, a2, a3, a4) =>
      (___addvti3 = Module["___addvti3"] = wasmExports["__addvti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___ashldi3 = (Module["___ashldi3"] = (a0, a1) =>
      (___ashldi3 = Module["___ashldi3"] = wasmExports["__ashldi3"])(a0, a1));
    var ___ashrdi3 = (Module["___ashrdi3"] = (a0, a1) =>
      (___ashrdi3 = Module["___ashrdi3"] = wasmExports["__ashrdi3"])(a0, a1));
    var ___ashrti3 = (Module["___ashrti3"] = (a0, a1, a2, a3) =>
      (___ashrti3 = Module["___ashrti3"] = wasmExports["__ashrti3"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___atomic_is_lock_free = (Module["___atomic_is_lock_free"] = (a0, a1) =>
      (___atomic_is_lock_free = Module["___atomic_is_lock_free"] =
        wasmExports["__atomic_is_lock_free"])(a0, a1));
    var ___atomic_load = (Module["___atomic_load"] = (a0, a1, a2, a3) =>
      (___atomic_load = Module["___atomic_load"] =
        wasmExports["__atomic_load"])(a0, a1, a2, a3));
    var ___atomic_store = (Module["___atomic_store"] = (a0, a1, a2, a3) =>
      (___atomic_store = Module["___atomic_store"] =
        wasmExports["__atomic_store"])(a0, a1, a2, a3));
    var ___atomic_compare_exchange = (Module["___atomic_compare_exchange"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
    ) =>
      (___atomic_compare_exchange = Module["___atomic_compare_exchange"] =
        wasmExports["__atomic_compare_exchange"])(a0, a1, a2, a3, a4, a5));
    var ___atomic_exchange = (Module["___atomic_exchange"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_exchange = Module["___atomic_exchange"] =
        wasmExports["__atomic_exchange"])(a0, a1, a2, a3, a4));
    var ___atomic_load_1 = (Module["___atomic_load_1"] = (a0, a1) =>
      (___atomic_load_1 = Module["___atomic_load_1"] =
        wasmExports["__atomic_load_1"])(a0, a1));
    var ___atomic_load_2 = (Module["___atomic_load_2"] = (a0, a1) =>
      (___atomic_load_2 = Module["___atomic_load_2"] =
        wasmExports["__atomic_load_2"])(a0, a1));
    var ___atomic_load_4 = (Module["___atomic_load_4"] = (a0, a1) =>
      (___atomic_load_4 = Module["___atomic_load_4"] =
        wasmExports["__atomic_load_4"])(a0, a1));
    var ___atomic_load_8 = (Module["___atomic_load_8"] = (a0, a1) =>
      (___atomic_load_8 = Module["___atomic_load_8"] =
        wasmExports["__atomic_load_8"])(a0, a1));
    var ___atomic_load_16 = (Module["___atomic_load_16"] = (a0, a1, a2) =>
      (___atomic_load_16 = Module["___atomic_load_16"] =
        wasmExports["__atomic_load_16"])(a0, a1, a2));
    var ___atomic_store_1 = (Module["___atomic_store_1"] = (a0, a1, a2) =>
      (___atomic_store_1 = Module["___atomic_store_1"] =
        wasmExports["__atomic_store_1"])(a0, a1, a2));
    var ___atomic_store_2 = (Module["___atomic_store_2"] = (a0, a1, a2) =>
      (___atomic_store_2 = Module["___atomic_store_2"] =
        wasmExports["__atomic_store_2"])(a0, a1, a2));
    var ___atomic_store_4 = (Module["___atomic_store_4"] = (a0, a1, a2) =>
      (___atomic_store_4 = Module["___atomic_store_4"] =
        wasmExports["__atomic_store_4"])(a0, a1, a2));
    var ___atomic_store_8 = (Module["___atomic_store_8"] = (a0, a1, a2) =>
      (___atomic_store_8 = Module["___atomic_store_8"] =
        wasmExports["__atomic_store_8"])(a0, a1, a2));
    var ___atomic_store_16 = (Module["___atomic_store_16"] = (a0, a1, a2, a3) =>
      (___atomic_store_16 = Module["___atomic_store_16"] =
        wasmExports["__atomic_store_16"])(a0, a1, a2, a3));
    var ___atomic_exchange_1 = (Module["___atomic_exchange_1"] = (a0, a1, a2) =>
      (___atomic_exchange_1 = Module["___atomic_exchange_1"] =
        wasmExports["__atomic_exchange_1"])(a0, a1, a2));
    var ___atomic_exchange_2 = (Module["___atomic_exchange_2"] = (a0, a1, a2) =>
      (___atomic_exchange_2 = Module["___atomic_exchange_2"] =
        wasmExports["__atomic_exchange_2"])(a0, a1, a2));
    var ___atomic_exchange_4 = (Module["___atomic_exchange_4"] = (a0, a1, a2) =>
      (___atomic_exchange_4 = Module["___atomic_exchange_4"] =
        wasmExports["__atomic_exchange_4"])(a0, a1, a2));
    var ___atomic_exchange_8 = (Module["___atomic_exchange_8"] = (a0, a1, a2) =>
      (___atomic_exchange_8 = Module["___atomic_exchange_8"] =
        wasmExports["__atomic_exchange_8"])(a0, a1, a2));
    var ___atomic_exchange_16 = (Module["___atomic_exchange_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_exchange_16 = Module["___atomic_exchange_16"] =
        wasmExports["__atomic_exchange_16"])(a0, a1, a2, a3, a4));
    var ___atomic_compare_exchange_1 = (Module["___atomic_compare_exchange_1"] =
      (a0, a1, a2, a3, a4) =>
        (___atomic_compare_exchange_1 = Module["___atomic_compare_exchange_1"] =
          wasmExports["__atomic_compare_exchange_1"])(a0, a1, a2, a3, a4));
    var ___atomic_compare_exchange_2 = (Module["___atomic_compare_exchange_2"] =
      (a0, a1, a2, a3, a4) =>
        (___atomic_compare_exchange_2 = Module["___atomic_compare_exchange_2"] =
          wasmExports["__atomic_compare_exchange_2"])(a0, a1, a2, a3, a4));
    var ___atomic_compare_exchange_4 = (Module["___atomic_compare_exchange_4"] =
      (a0, a1, a2, a3, a4) =>
        (___atomic_compare_exchange_4 = Module["___atomic_compare_exchange_4"] =
          wasmExports["__atomic_compare_exchange_4"])(a0, a1, a2, a3, a4));
    var ___atomic_compare_exchange_8 = (Module["___atomic_compare_exchange_8"] =
      (a0, a1, a2, a3, a4) =>
        (___atomic_compare_exchange_8 = Module["___atomic_compare_exchange_8"] =
          wasmExports["__atomic_compare_exchange_8"])(a0, a1, a2, a3, a4));
    var ___atomic_compare_exchange_16 = (Module[
      "___atomic_compare_exchange_16"
    ] = (a0, a1, a2, a3, a4, a5) =>
      (___atomic_compare_exchange_16 = Module["___atomic_compare_exchange_16"] =
        wasmExports["__atomic_compare_exchange_16"])(a0, a1, a2, a3, a4, a5));
    var ___atomic_fetch_add_1 = (Module["___atomic_fetch_add_1"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_add_1 = Module["___atomic_fetch_add_1"] =
        wasmExports["__atomic_fetch_add_1"])(a0, a1, a2));
    var ___atomic_fetch_add_2 = (Module["___atomic_fetch_add_2"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_add_2 = Module["___atomic_fetch_add_2"] =
        wasmExports["__atomic_fetch_add_2"])(a0, a1, a2));
    var ___atomic_fetch_add_4 = (Module["___atomic_fetch_add_4"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_add_4 = Module["___atomic_fetch_add_4"] =
        wasmExports["__atomic_fetch_add_4"])(a0, a1, a2));
    var ___atomic_fetch_add_8 = (Module["___atomic_fetch_add_8"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_add_8 = Module["___atomic_fetch_add_8"] =
        wasmExports["__atomic_fetch_add_8"])(a0, a1, a2));
    var ___atomic_fetch_add_16 = (Module["___atomic_fetch_add_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_fetch_add_16 = Module["___atomic_fetch_add_16"] =
        wasmExports["__atomic_fetch_add_16"])(a0, a1, a2, a3, a4));
    var ___atomic_fetch_sub_1 = (Module["___atomic_fetch_sub_1"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_sub_1 = Module["___atomic_fetch_sub_1"] =
        wasmExports["__atomic_fetch_sub_1"])(a0, a1, a2));
    var ___atomic_fetch_sub_2 = (Module["___atomic_fetch_sub_2"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_sub_2 = Module["___atomic_fetch_sub_2"] =
        wasmExports["__atomic_fetch_sub_2"])(a0, a1, a2));
    var ___atomic_fetch_sub_4 = (Module["___atomic_fetch_sub_4"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_sub_4 = Module["___atomic_fetch_sub_4"] =
        wasmExports["__atomic_fetch_sub_4"])(a0, a1, a2));
    var ___atomic_fetch_sub_8 = (Module["___atomic_fetch_sub_8"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_sub_8 = Module["___atomic_fetch_sub_8"] =
        wasmExports["__atomic_fetch_sub_8"])(a0, a1, a2));
    var ___atomic_fetch_sub_16 = (Module["___atomic_fetch_sub_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_fetch_sub_16 = Module["___atomic_fetch_sub_16"] =
        wasmExports["__atomic_fetch_sub_16"])(a0, a1, a2, a3, a4));
    var ___atomic_fetch_and_1 = (Module["___atomic_fetch_and_1"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_and_1 = Module["___atomic_fetch_and_1"] =
        wasmExports["__atomic_fetch_and_1"])(a0, a1, a2));
    var ___atomic_fetch_and_2 = (Module["___atomic_fetch_and_2"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_and_2 = Module["___atomic_fetch_and_2"] =
        wasmExports["__atomic_fetch_and_2"])(a0, a1, a2));
    var ___atomic_fetch_and_4 = (Module["___atomic_fetch_and_4"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_and_4 = Module["___atomic_fetch_and_4"] =
        wasmExports["__atomic_fetch_and_4"])(a0, a1, a2));
    var ___atomic_fetch_and_8 = (Module["___atomic_fetch_and_8"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_and_8 = Module["___atomic_fetch_and_8"] =
        wasmExports["__atomic_fetch_and_8"])(a0, a1, a2));
    var ___atomic_fetch_and_16 = (Module["___atomic_fetch_and_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_fetch_and_16 = Module["___atomic_fetch_and_16"] =
        wasmExports["__atomic_fetch_and_16"])(a0, a1, a2, a3, a4));
    var ___atomic_fetch_or_1 = (Module["___atomic_fetch_or_1"] = (a0, a1, a2) =>
      (___atomic_fetch_or_1 = Module["___atomic_fetch_or_1"] =
        wasmExports["__atomic_fetch_or_1"])(a0, a1, a2));
    var ___atomic_fetch_or_2 = (Module["___atomic_fetch_or_2"] = (a0, a1, a2) =>
      (___atomic_fetch_or_2 = Module["___atomic_fetch_or_2"] =
        wasmExports["__atomic_fetch_or_2"])(a0, a1, a2));
    var ___atomic_fetch_or_4 = (Module["___atomic_fetch_or_4"] = (a0, a1, a2) =>
      (___atomic_fetch_or_4 = Module["___atomic_fetch_or_4"] =
        wasmExports["__atomic_fetch_or_4"])(a0, a1, a2));
    var ___atomic_fetch_or_8 = (Module["___atomic_fetch_or_8"] = (a0, a1, a2) =>
      (___atomic_fetch_or_8 = Module["___atomic_fetch_or_8"] =
        wasmExports["__atomic_fetch_or_8"])(a0, a1, a2));
    var ___atomic_fetch_or_16 = (Module["___atomic_fetch_or_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_fetch_or_16 = Module["___atomic_fetch_or_16"] =
        wasmExports["__atomic_fetch_or_16"])(a0, a1, a2, a3, a4));
    var ___atomic_fetch_xor_1 = (Module["___atomic_fetch_xor_1"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_xor_1 = Module["___atomic_fetch_xor_1"] =
        wasmExports["__atomic_fetch_xor_1"])(a0, a1, a2));
    var ___atomic_fetch_xor_2 = (Module["___atomic_fetch_xor_2"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_xor_2 = Module["___atomic_fetch_xor_2"] =
        wasmExports["__atomic_fetch_xor_2"])(a0, a1, a2));
    var ___atomic_fetch_xor_4 = (Module["___atomic_fetch_xor_4"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_xor_4 = Module["___atomic_fetch_xor_4"] =
        wasmExports["__atomic_fetch_xor_4"])(a0, a1, a2));
    var ___atomic_fetch_xor_8 = (Module["___atomic_fetch_xor_8"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_xor_8 = Module["___atomic_fetch_xor_8"] =
        wasmExports["__atomic_fetch_xor_8"])(a0, a1, a2));
    var ___atomic_fetch_xor_16 = (Module["___atomic_fetch_xor_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_fetch_xor_16 = Module["___atomic_fetch_xor_16"] =
        wasmExports["__atomic_fetch_xor_16"])(a0, a1, a2, a3, a4));
    var ___atomic_fetch_nand_1 = (Module["___atomic_fetch_nand_1"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_nand_1 = Module["___atomic_fetch_nand_1"] =
        wasmExports["__atomic_fetch_nand_1"])(a0, a1, a2));
    var ___atomic_fetch_nand_2 = (Module["___atomic_fetch_nand_2"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_nand_2 = Module["___atomic_fetch_nand_2"] =
        wasmExports["__atomic_fetch_nand_2"])(a0, a1, a2));
    var ___atomic_fetch_nand_4 = (Module["___atomic_fetch_nand_4"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_nand_4 = Module["___atomic_fetch_nand_4"] =
        wasmExports["__atomic_fetch_nand_4"])(a0, a1, a2));
    var ___atomic_fetch_nand_8 = (Module["___atomic_fetch_nand_8"] = (
      a0,
      a1,
      a2,
    ) =>
      (___atomic_fetch_nand_8 = Module["___atomic_fetch_nand_8"] =
        wasmExports["__atomic_fetch_nand_8"])(a0, a1, a2));
    var ___atomic_fetch_nand_16 = (Module["___atomic_fetch_nand_16"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___atomic_fetch_nand_16 = Module["___atomic_fetch_nand_16"] =
        wasmExports["__atomic_fetch_nand_16"])(a0, a1, a2, a3, a4));
    var _atomic_flag_clear = (Module["_atomic_flag_clear"] = (a0) =>
      (_atomic_flag_clear = Module["_atomic_flag_clear"] =
        wasmExports["atomic_flag_clear"])(a0));
    var _atomic_flag_clear_explicit = (Module["_atomic_flag_clear_explicit"] = (
      a0,
      a1,
    ) =>
      (_atomic_flag_clear_explicit = Module["_atomic_flag_clear_explicit"] =
        wasmExports["atomic_flag_clear_explicit"])(a0, a1));
    var _atomic_flag_test_and_set = (Module["_atomic_flag_test_and_set"] = (
      a0,
    ) =>
      (_atomic_flag_test_and_set = Module["_atomic_flag_test_and_set"] =
        wasmExports["atomic_flag_test_and_set"])(a0));
    var _atomic_flag_test_and_set_explicit = (Module[
      "_atomic_flag_test_and_set_explicit"
    ] = (a0, a1) =>
      (_atomic_flag_test_and_set_explicit = Module[
        "_atomic_flag_test_and_set_explicit"
      ] =
        wasmExports["atomic_flag_test_and_set_explicit"])(a0, a1));
    var _atomic_signal_fence = (Module["_atomic_signal_fence"] = (a0) =>
      (_atomic_signal_fence = Module["_atomic_signal_fence"] =
        wasmExports["atomic_signal_fence"])(a0));
    var _atomic_thread_fence = (Module["_atomic_thread_fence"] = (a0) =>
      (_atomic_thread_fence = Module["_atomic_thread_fence"] =
        wasmExports["atomic_thread_fence"])(a0));
    var ___bswapdi2 = (Module["___bswapdi2"] = (a0) =>
      (___bswapdi2 = Module["___bswapdi2"] = wasmExports["__bswapdi2"])(a0));
    var ___bswapsi2 = (Module["___bswapsi2"] = (a0) =>
      (___bswapsi2 = Module["___bswapsi2"] = wasmExports["__bswapsi2"])(a0));
    var ___clear_cache = (Module["___clear_cache"] = (a0, a1) =>
      (___clear_cache = Module["___clear_cache"] =
        wasmExports["__clear_cache"])(a0, a1));
    var ___clzdi2 = (Module["___clzdi2"] = (a0) =>
      (___clzdi2 = Module["___clzdi2"] = wasmExports["__clzdi2"])(a0));
    var ___clzsi2 = (Module["___clzsi2"] = (a0) =>
      (___clzsi2 = Module["___clzsi2"] = wasmExports["__clzsi2"])(a0));
    var ___clzti2 = (Module["___clzti2"] = (a0, a1) =>
      (___clzti2 = Module["___clzti2"] = wasmExports["__clzti2"])(a0, a1));
    var ___cmpdi2 = (Module["___cmpdi2"] = (a0, a1) =>
      (___cmpdi2 = Module["___cmpdi2"] = wasmExports["__cmpdi2"])(a0, a1));
    var ___cmpti2 = (Module["___cmpti2"] = (a0, a1, a2, a3) =>
      (___cmpti2 = Module["___cmpti2"] = wasmExports["__cmpti2"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___ledf2 = (Module["___ledf2"] = (a0, a1) =>
      (___ledf2 = Module["___ledf2"] = wasmExports["__ledf2"])(a0, a1));
    var ___gedf2 = (Module["___gedf2"] = (a0, a1) =>
      (___gedf2 = Module["___gedf2"] = wasmExports["__gedf2"])(a0, a1));
    var ___unorddf2 = (Module["___unorddf2"] = (a0, a1) =>
      (___unorddf2 = Module["___unorddf2"] = wasmExports["__unorddf2"])(
        a0,
        a1,
      ));
    var ___eqdf2 = (Module["___eqdf2"] = (a0, a1) =>
      (___eqdf2 = Module["___eqdf2"] = wasmExports["__eqdf2"])(a0, a1));
    var ___ltdf2 = (Module["___ltdf2"] = (a0, a1) =>
      (___ltdf2 = Module["___ltdf2"] = wasmExports["__ltdf2"])(a0, a1));
    var ___nedf2 = (Module["___nedf2"] = (a0, a1) =>
      (___nedf2 = Module["___nedf2"] = wasmExports["__nedf2"])(a0, a1));
    var ___gtdf2 = (Module["___gtdf2"] = (a0, a1) =>
      (___gtdf2 = Module["___gtdf2"] = wasmExports["__gtdf2"])(a0, a1));
    var ___lesf2 = (Module["___lesf2"] = (a0, a1) =>
      (___lesf2 = Module["___lesf2"] = wasmExports["__lesf2"])(a0, a1));
    var ___gesf2 = (Module["___gesf2"] = (a0, a1) =>
      (___gesf2 = Module["___gesf2"] = wasmExports["__gesf2"])(a0, a1));
    var ___unordsf2 = (Module["___unordsf2"] = (a0, a1) =>
      (___unordsf2 = Module["___unordsf2"] = wasmExports["__unordsf2"])(
        a0,
        a1,
      ));
    var ___eqsf2 = (Module["___eqsf2"] = (a0, a1) =>
      (___eqsf2 = Module["___eqsf2"] = wasmExports["__eqsf2"])(a0, a1));
    var ___ltsf2 = (Module["___ltsf2"] = (a0, a1) =>
      (___ltsf2 = Module["___ltsf2"] = wasmExports["__ltsf2"])(a0, a1));
    var ___nesf2 = (Module["___nesf2"] = (a0, a1) =>
      (___nesf2 = Module["___nesf2"] = wasmExports["__nesf2"])(a0, a1));
    var ___gtsf2 = (Module["___gtsf2"] = (a0, a1) =>
      (___gtsf2 = Module["___gtsf2"] = wasmExports["__gtsf2"])(a0, a1));
    var ___ctzdi2 = (Module["___ctzdi2"] = (a0) =>
      (___ctzdi2 = Module["___ctzdi2"] = wasmExports["__ctzdi2"])(a0));
    var ___ctzsi2 = (Module["___ctzsi2"] = (a0) =>
      (___ctzsi2 = Module["___ctzsi2"] = wasmExports["__ctzsi2"])(a0));
    var ___ctzti2 = (Module["___ctzti2"] = (a0, a1) =>
      (___ctzti2 = Module["___ctzti2"] = wasmExports["__ctzti2"])(a0, a1));
    var ___divdc3 = (Module["___divdc3"] = (a0, a1, a2, a3, a4) =>
      (___divdc3 = Module["___divdc3"] = wasmExports["__divdc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___divdf3 = (Module["___divdf3"] = (a0, a1) =>
      (___divdf3 = Module["___divdf3"] = wasmExports["__divdf3"])(a0, a1));
    var ___divdi3 = (Module["___divdi3"] = (a0, a1) =>
      (___divdi3 = Module["___divdi3"] = wasmExports["__divdi3"])(a0, a1));
    var ___udivmoddi4 = (Module["___udivmoddi4"] = (a0, a1, a2) =>
      (___udivmoddi4 = Module["___udivmoddi4"] = wasmExports["__udivmoddi4"])(
        a0,
        a1,
        a2,
      ));
    var ___divmoddi4 = (Module["___divmoddi4"] = (a0, a1, a2) =>
      (___divmoddi4 = Module["___divmoddi4"] = wasmExports["__divmoddi4"])(
        a0,
        a1,
        a2,
      ));
    var ___divmodsi4 = (Module["___divmodsi4"] = (a0, a1, a2) =>
      (___divmodsi4 = Module["___divmodsi4"] = wasmExports["__divmodsi4"])(
        a0,
        a1,
        a2,
      ));
    var ___udivmodsi4 = (Module["___udivmodsi4"] = (a0, a1, a2) =>
      (___udivmodsi4 = Module["___udivmodsi4"] = wasmExports["__udivmodsi4"])(
        a0,
        a1,
        a2,
      ));
    var ___divmodti4 = (Module["___divmodti4"] = (a0, a1, a2, a3, a4, a5) =>
      (___divmodti4 = Module["___divmodti4"] = wasmExports["__divmodti4"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var ___udivmodti4 = (Module["___udivmodti4"] = (a0, a1, a2, a3, a4, a5) =>
      (___udivmodti4 = Module["___udivmodti4"] = wasmExports["__udivmodti4"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var ___divsc3 = (Module["___divsc3"] = (a0, a1, a2, a3, a4) =>
      (___divsc3 = Module["___divsc3"] = wasmExports["__divsc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___divsf3 = (Module["___divsf3"] = (a0, a1) =>
      (___divsf3 = Module["___divsf3"] = wasmExports["__divsf3"])(a0, a1));
    var ___divsi3 = (Module["___divsi3"] = (a0, a1) =>
      (___divsi3 = Module["___divsi3"] = wasmExports["__divsi3"])(a0, a1));
    var ___divtc3 = (Module["___divtc3"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
    ) =>
      (___divtc3 = Module["___divtc3"] = wasmExports["__divtc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var ___divti3 = (Module["___divti3"] = (a0, a1, a2, a3, a4) =>
      (___divti3 = Module["___divti3"] = wasmExports["__divti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___divxc3 = (Module["___divxc3"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
    ) =>
      (___divxc3 = Module["___divxc3"] = wasmExports["__divxc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var _setThrew = (a0, a1) => (_setThrew = wasmExports["setThrew"])(a0, a1);
    var _saveSetjmp = (Module["_saveSetjmp"] = (a0, a1, a2, a3) =>
      (_saveSetjmp = Module["_saveSetjmp"] = wasmExports["saveSetjmp"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var setTempRet0 = (a0) => (setTempRet0 = wasmExports["setTempRet0"])(a0);
    var _testSetjmp = (Module["_testSetjmp"] = (a0, a1, a2) =>
      (_testSetjmp = Module["_testSetjmp"] = wasmExports["testSetjmp"])(
        a0,
        a1,
        a2,
      ));
    var _emscripten_longjmp = (Module["_emscripten_longjmp"] = (a0, a1) =>
      (_emscripten_longjmp = Module["_emscripten_longjmp"] =
        wasmExports["emscripten_longjmp"])(a0, a1));
    var getTempRet0 = () => (getTempRet0 = wasmExports["getTempRet0"])();
    var ___get_temp_ret = (Module["___get_temp_ret"] = () =>
      (___get_temp_ret = Module["___get_temp_ret"] =
        wasmExports["__get_temp_ret"])());
    var ___set_temp_ret = (Module["___set_temp_ret"] = (a0) =>
      (___set_temp_ret = Module["___set_temp_ret"] =
        wasmExports["__set_temp_ret"])(a0));
    var ___emutls_get_address = (Module["___emutls_get_address"] = (a0) =>
      (___emutls_get_address = Module["___emutls_get_address"] =
        wasmExports["__emutls_get_address"])(a0));
    var ___enable_execute_stack = (Module["___enable_execute_stack"] = (a0) =>
      (___enable_execute_stack = Module["___enable_execute_stack"] =
        wasmExports["__enable_execute_stack"])(a0));
    var ___extendhfsf2 = (Module["___extendhfsf2"] = (a0) =>
      (___extendhfsf2 = Module["___extendhfsf2"] =
        wasmExports["__extendhfsf2"])(a0));
    var ___gnu_h2f_ieee = (Module["___gnu_h2f_ieee"] = (a0) =>
      (___gnu_h2f_ieee = Module["___gnu_h2f_ieee"] =
        wasmExports["__gnu_h2f_ieee"])(a0));
    var ___extendsfdf2 = (Module["___extendsfdf2"] = (a0) =>
      (___extendsfdf2 = Module["___extendsfdf2"] =
        wasmExports["__extendsfdf2"])(a0));
    var ___ffsdi2 = (Module["___ffsdi2"] = (a0) =>
      (___ffsdi2 = Module["___ffsdi2"] = wasmExports["__ffsdi2"])(a0));
    var ___ffssi2 = (Module["___ffssi2"] = (a0) =>
      (___ffssi2 = Module["___ffssi2"] = wasmExports["__ffssi2"])(a0));
    var ___ffsti2 = (Module["___ffsti2"] = (a0, a1) =>
      (___ffsti2 = Module["___ffsti2"] = wasmExports["__ffsti2"])(a0, a1));
    var ___fixdfdi = (Module["___fixdfdi"] = (a0) =>
      (___fixdfdi = Module["___fixdfdi"] = wasmExports["__fixdfdi"])(a0));
    var ___fixunsdfdi = (Module["___fixunsdfdi"] = (a0) =>
      (___fixunsdfdi = Module["___fixunsdfdi"] = wasmExports["__fixunsdfdi"])(
        a0,
      ));
    var ___fixdfsi = (Module["___fixdfsi"] = (a0) =>
      (___fixdfsi = Module["___fixdfsi"] = wasmExports["__fixdfsi"])(a0));
    var ___fixdfti = (Module["___fixdfti"] = (a0, a1) =>
      (___fixdfti = Module["___fixdfti"] = wasmExports["__fixdfti"])(a0, a1));
    var ___fixsfdi = (Module["___fixsfdi"] = (a0) =>
      (___fixsfdi = Module["___fixsfdi"] = wasmExports["__fixsfdi"])(a0));
    var ___fixunssfdi = (Module["___fixunssfdi"] = (a0) =>
      (___fixunssfdi = Module["___fixunssfdi"] = wasmExports["__fixunssfdi"])(
        a0,
      ));
    var ___fixsfsi = (Module["___fixsfsi"] = (a0) =>
      (___fixsfsi = Module["___fixsfsi"] = wasmExports["__fixsfsi"])(a0));
    var ___fixsfti = (Module["___fixsfti"] = (a0, a1) =>
      (___fixsfti = Module["___fixsfti"] = wasmExports["__fixsfti"])(a0, a1));
    var ___fixtfti = (Module["___fixtfti"] = (a0, a1, a2) =>
      (___fixtfti = Module["___fixtfti"] = wasmExports["__fixtfti"])(
        a0,
        a1,
        a2,
      ));
    var ___fixunsdfsi = (Module["___fixunsdfsi"] = (a0) =>
      (___fixunsdfsi = Module["___fixunsdfsi"] = wasmExports["__fixunsdfsi"])(
        a0,
      ));
    var ___fixunsdfti = (Module["___fixunsdfti"] = (a0, a1) =>
      (___fixunsdfti = Module["___fixunsdfti"] = wasmExports["__fixunsdfti"])(
        a0,
        a1,
      ));
    var ___fixunssfsi = (Module["___fixunssfsi"] = (a0) =>
      (___fixunssfsi = Module["___fixunssfsi"] = wasmExports["__fixunssfsi"])(
        a0,
      ));
    var ___fixunssfti = (Module["___fixunssfti"] = (a0, a1) =>
      (___fixunssfti = Module["___fixunssfti"] = wasmExports["__fixunssfti"])(
        a0,
        a1,
      ));
    var ___fixunstfdi = (Module["___fixunstfdi"] = (a0, a1) =>
      (___fixunstfdi = Module["___fixunstfdi"] = wasmExports["__fixunstfdi"])(
        a0,
        a1,
      ));
    var ___fixunstfsi = (Module["___fixunstfsi"] = (a0, a1) =>
      (___fixunstfsi = Module["___fixunstfsi"] = wasmExports["__fixunstfsi"])(
        a0,
        a1,
      ));
    var ___fixunstfti = (Module["___fixunstfti"] = (a0, a1, a2) =>
      (___fixunstfti = Module["___fixunstfti"] = wasmExports["__fixunstfti"])(
        a0,
        a1,
        a2,
      ));
    var ___fixunsxfdi = (Module["___fixunsxfdi"] = (a0, a1) =>
      (___fixunsxfdi = Module["___fixunsxfdi"] = wasmExports["__fixunsxfdi"])(
        a0,
        a1,
      ));
    var ___fixunsxfsi = (Module["___fixunsxfsi"] = (a0, a1) =>
      (___fixunsxfsi = Module["___fixunsxfsi"] = wasmExports["__fixunsxfsi"])(
        a0,
        a1,
      ));
    var ___fixunsxfti = (Module["___fixunsxfti"] = (a0, a1, a2) =>
      (___fixunsxfti = Module["___fixunsxfti"] = wasmExports["__fixunsxfti"])(
        a0,
        a1,
        a2,
      ));
    var ___fixxfdi = (Module["___fixxfdi"] = (a0, a1) =>
      (___fixxfdi = Module["___fixxfdi"] = wasmExports["__fixxfdi"])(a0, a1));
    var ___fixxfti = (Module["___fixxfti"] = (a0, a1, a2) =>
      (___fixxfti = Module["___fixxfti"] = wasmExports["__fixxfti"])(
        a0,
        a1,
        a2,
      ));
    var ___floatdidf = (Module["___floatdidf"] = (a0) =>
      (___floatdidf = Module["___floatdidf"] = wasmExports["__floatdidf"])(a0));
    var ___floatdisf = (Module["___floatdisf"] = (a0) =>
      (___floatdisf = Module["___floatdisf"] = wasmExports["__floatdisf"])(a0));
    var ___floatditf = (Module["___floatditf"] = (a0, a1) =>
      (___floatditf = Module["___floatditf"] = wasmExports["__floatditf"])(
        a0,
        a1,
      ));
    var ___floatdixf = (Module["___floatdixf"] = (a0, a1) =>
      (___floatdixf = Module["___floatdixf"] = wasmExports["__floatdixf"])(
        a0,
        a1,
      ));
    var ___floatsidf = (Module["___floatsidf"] = (a0) =>
      (___floatsidf = Module["___floatsidf"] = wasmExports["__floatsidf"])(a0));
    var ___floatsisf = (Module["___floatsisf"] = (a0) =>
      (___floatsisf = Module["___floatsisf"] = wasmExports["__floatsisf"])(a0));
    var ___floattidf = (Module["___floattidf"] = (a0, a1) =>
      (___floattidf = Module["___floattidf"] = wasmExports["__floattidf"])(
        a0,
        a1,
      ));
    var ___floattisf = (Module["___floattisf"] = (a0, a1) =>
      (___floattisf = Module["___floattisf"] = wasmExports["__floattisf"])(
        a0,
        a1,
      ));
    var ___floattitf = (Module["___floattitf"] = (a0, a1, a2) =>
      (___floattitf = Module["___floattitf"] = wasmExports["__floattitf"])(
        a0,
        a1,
        a2,
      ));
    var ___floattixf = (Module["___floattixf"] = (a0, a1, a2) =>
      (___floattixf = Module["___floattixf"] = wasmExports["__floattixf"])(
        a0,
        a1,
        a2,
      ));
    var ___floatundidf = (Module["___floatundidf"] = (a0) =>
      (___floatundidf = Module["___floatundidf"] =
        wasmExports["__floatundidf"])(a0));
    var ___floatundisf = (Module["___floatundisf"] = (a0) =>
      (___floatundisf = Module["___floatundisf"] =
        wasmExports["__floatundisf"])(a0));
    var ___floatunditf = (Module["___floatunditf"] = (a0, a1) =>
      (___floatunditf = Module["___floatunditf"] =
        wasmExports["__floatunditf"])(a0, a1));
    var ___floatundixf = (Module["___floatundixf"] = (a0, a1) =>
      (___floatundixf = Module["___floatundixf"] =
        wasmExports["__floatundixf"])(a0, a1));
    var ___floatunsidf = (Module["___floatunsidf"] = (a0) =>
      (___floatunsidf = Module["___floatunsidf"] =
        wasmExports["__floatunsidf"])(a0));
    var ___floatunsisf = (Module["___floatunsisf"] = (a0) =>
      (___floatunsisf = Module["___floatunsisf"] =
        wasmExports["__floatunsisf"])(a0));
    var ___floatuntidf = (Module["___floatuntidf"] = (a0, a1) =>
      (___floatuntidf = Module["___floatuntidf"] =
        wasmExports["__floatuntidf"])(a0, a1));
    var ___floatuntisf = (Module["___floatuntisf"] = (a0, a1) =>
      (___floatuntisf = Module["___floatuntisf"] =
        wasmExports["__floatuntisf"])(a0, a1));
    var ___floatuntitf = (Module["___floatuntitf"] = (a0, a1, a2) =>
      (___floatuntitf = Module["___floatuntitf"] =
        wasmExports["__floatuntitf"])(a0, a1, a2));
    var ___floatuntixf = (Module["___floatuntixf"] = (a0, a1, a2) =>
      (___floatuntixf = Module["___floatuntixf"] =
        wasmExports["__floatuntixf"])(a0, a1, a2));
    var ___lshrdi3 = (Module["___lshrdi3"] = (a0, a1) =>
      (___lshrdi3 = Module["___lshrdi3"] = wasmExports["__lshrdi3"])(a0, a1));
    var ___moddi3 = (Module["___moddi3"] = (a0, a1) =>
      (___moddi3 = Module["___moddi3"] = wasmExports["__moddi3"])(a0, a1));
    var ___modsi3 = (Module["___modsi3"] = (a0, a1) =>
      (___modsi3 = Module["___modsi3"] = wasmExports["__modsi3"])(a0, a1));
    var ___modti3 = (Module["___modti3"] = (a0, a1, a2, a3, a4) =>
      (___modti3 = Module["___modti3"] = wasmExports["__modti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___muldf3 = (Module["___muldf3"] = (a0, a1) =>
      (___muldf3 = Module["___muldf3"] = wasmExports["__muldf3"])(a0, a1));
    var ___muldi3 = (Module["___muldi3"] = (a0, a1) =>
      (___muldi3 = Module["___muldi3"] = wasmExports["__muldi3"])(a0, a1));
    var ___mulodi4 = (Module["___mulodi4"] = (a0, a1, a2) =>
      (___mulodi4 = Module["___mulodi4"] = wasmExports["__mulodi4"])(
        a0,
        a1,
        a2,
      ));
    var ___mulosi4 = (Module["___mulosi4"] = (a0, a1, a2) =>
      (___mulosi4 = Module["___mulosi4"] = wasmExports["__mulosi4"])(
        a0,
        a1,
        a2,
      ));
    var ___muloti4 = (Module["___muloti4"] = (a0, a1, a2, a3, a4, a5) =>
      (___muloti4 = Module["___muloti4"] = wasmExports["__muloti4"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
      ));
    var ___udivti3 = (Module["___udivti3"] = (a0, a1, a2, a3, a4) =>
      (___udivti3 = Module["___udivti3"] = wasmExports["__udivti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___mulsf3 = (Module["___mulsf3"] = (a0, a1) =>
      (___mulsf3 = Module["___mulsf3"] = wasmExports["__mulsf3"])(a0, a1));
    var ___mulvdi3 = (Module["___mulvdi3"] = (a0, a1) =>
      (___mulvdi3 = Module["___mulvdi3"] = wasmExports["__mulvdi3"])(a0, a1));
    var ___mulvsi3 = (Module["___mulvsi3"] = (a0, a1) =>
      (___mulvsi3 = Module["___mulvsi3"] = wasmExports["__mulvsi3"])(a0, a1));
    var ___mulvti3 = (Module["___mulvti3"] = (a0, a1, a2, a3, a4) =>
      (___mulvti3 = Module["___mulvti3"] = wasmExports["__mulvti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___mulxc3 = (Module["___mulxc3"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
    ) =>
      (___mulxc3 = Module["___mulxc3"] = wasmExports["__mulxc3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
        a5,
        a6,
        a7,
        a8,
      ));
    var ___negdf2 = (Module["___negdf2"] = (a0) =>
      (___negdf2 = Module["___negdf2"] = wasmExports["__negdf2"])(a0));
    var ___negdi2 = (Module["___negdi2"] = (a0) =>
      (___negdi2 = Module["___negdi2"] = wasmExports["__negdi2"])(a0));
    var ___negsf2 = (Module["___negsf2"] = (a0) =>
      (___negsf2 = Module["___negsf2"] = wasmExports["__negsf2"])(a0));
    var ___negti2 = (Module["___negti2"] = (a0, a1, a2) =>
      (___negti2 = Module["___negti2"] = wasmExports["__negti2"])(a0, a1, a2));
    var ___negvdi2 = (Module["___negvdi2"] = (a0) =>
      (___negvdi2 = Module["___negvdi2"] = wasmExports["__negvdi2"])(a0));
    var ___negvsi2 = (Module["___negvsi2"] = (a0) =>
      (___negvsi2 = Module["___negvsi2"] = wasmExports["__negvsi2"])(a0));
    var ___negvti2 = (Module["___negvti2"] = (a0, a1, a2) =>
      (___negvti2 = Module["___negvti2"] = wasmExports["__negvti2"])(
        a0,
        a1,
        a2,
      ));
    var ___paritydi2 = (Module["___paritydi2"] = (a0) =>
      (___paritydi2 = Module["___paritydi2"] = wasmExports["__paritydi2"])(a0));
    var ___paritysi2 = (Module["___paritysi2"] = (a0) =>
      (___paritysi2 = Module["___paritysi2"] = wasmExports["__paritysi2"])(a0));
    var ___parityti2 = (Module["___parityti2"] = (a0, a1) =>
      (___parityti2 = Module["___parityti2"] = wasmExports["__parityti2"])(
        a0,
        a1,
      ));
    var ___popcountdi2 = (Module["___popcountdi2"] = (a0) =>
      (___popcountdi2 = Module["___popcountdi2"] =
        wasmExports["__popcountdi2"])(a0));
    var ___popcountsi2 = (Module["___popcountsi2"] = (a0) =>
      (___popcountsi2 = Module["___popcountsi2"] =
        wasmExports["__popcountsi2"])(a0));
    var ___popcountti2 = (Module["___popcountti2"] = (a0, a1) =>
      (___popcountti2 = Module["___popcountti2"] =
        wasmExports["__popcountti2"])(a0, a1));
    var ___powidf2 = (Module["___powidf2"] = (a0, a1) =>
      (___powidf2 = Module["___powidf2"] = wasmExports["__powidf2"])(a0, a1));
    var ___powisf2 = (Module["___powisf2"] = (a0, a1) =>
      (___powisf2 = Module["___powisf2"] = wasmExports["__powisf2"])(a0, a1));
    var ___powitf2 = (Module["___powitf2"] = (a0, a1, a2, a3) =>
      (___powitf2 = Module["___powitf2"] = wasmExports["__powitf2"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___powixf2 = (Module["___powixf2"] = (a0, a1, a2, a3) =>
      (___powixf2 = Module["___powixf2"] = wasmExports["__powixf2"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _emscripten_stack_init = (Module["_emscripten_stack_init"] = () =>
      (_emscripten_stack_init = Module["_emscripten_stack_init"] =
        wasmExports["emscripten_stack_init"])());
    var _emscripten_stack_set_limits = (Module["_emscripten_stack_set_limits"] =
      (a0, a1) =>
        (_emscripten_stack_set_limits = Module["_emscripten_stack_set_limits"] =
          wasmExports["emscripten_stack_set_limits"])(a0, a1));
    var _emscripten_stack_get_free = (Module["_emscripten_stack_get_free"] =
      () =>
        (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] =
          wasmExports["emscripten_stack_get_free"])());
    var stackSave = () => (stackSave = wasmExports["stackSave"])();
    var stackRestore = (a0) => (stackRestore = wasmExports["stackRestore"])(a0);
    var stackAlloc = (a0) => (stackAlloc = wasmExports["stackAlloc"])(a0);
    var ___subdf3 = (Module["___subdf3"] = (a0, a1) =>
      (___subdf3 = Module["___subdf3"] = wasmExports["__subdf3"])(a0, a1));
    var ___subsf3 = (Module["___subsf3"] = (a0, a1) =>
      (___subsf3 = Module["___subsf3"] = wasmExports["__subsf3"])(a0, a1));
    var ___subvdi3 = (Module["___subvdi3"] = (a0, a1) =>
      (___subvdi3 = Module["___subvdi3"] = wasmExports["__subvdi3"])(a0, a1));
    var ___subvsi3 = (Module["___subvsi3"] = (a0, a1) =>
      (___subvsi3 = Module["___subvsi3"] = wasmExports["__subvsi3"])(a0, a1));
    var ___subvti3 = (Module["___subvti3"] = (a0, a1, a2, a3, a4) =>
      (___subvti3 = Module["___subvti3"] = wasmExports["__subvti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___truncdfhf2 = (Module["___truncdfhf2"] = (a0) =>
      (___truncdfhf2 = Module["___truncdfhf2"] = wasmExports["__truncdfhf2"])(
        a0,
      ));
    var ___truncdfsf2 = (Module["___truncdfsf2"] = (a0) =>
      (___truncdfsf2 = Module["___truncdfsf2"] = wasmExports["__truncdfsf2"])(
        a0,
      ));
    var ___truncsfhf2 = (Module["___truncsfhf2"] = (a0) =>
      (___truncsfhf2 = Module["___truncsfhf2"] = wasmExports["__truncsfhf2"])(
        a0,
      ));
    var ___gnu_f2h_ieee = (Module["___gnu_f2h_ieee"] = (a0) =>
      (___gnu_f2h_ieee = Module["___gnu_f2h_ieee"] =
        wasmExports["__gnu_f2h_ieee"])(a0));
    var ___ucmpdi2 = (Module["___ucmpdi2"] = (a0, a1) =>
      (___ucmpdi2 = Module["___ucmpdi2"] = wasmExports["__ucmpdi2"])(a0, a1));
    var ___ucmpti2 = (Module["___ucmpti2"] = (a0, a1, a2, a3) =>
      (___ucmpti2 = Module["___ucmpti2"] = wasmExports["__ucmpti2"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var ___udivdi3 = (Module["___udivdi3"] = (a0, a1) =>
      (___udivdi3 = Module["___udivdi3"] = wasmExports["__udivdi3"])(a0, a1));
    var ___udivsi3 = (Module["___udivsi3"] = (a0, a1) =>
      (___udivsi3 = Module["___udivsi3"] = wasmExports["__udivsi3"])(a0, a1));
    var ___umoddi3 = (Module["___umoddi3"] = (a0, a1) =>
      (___umoddi3 = Module["___umoddi3"] = wasmExports["__umoddi3"])(a0, a1));
    var ___umodsi3 = (Module["___umodsi3"] = (a0, a1) =>
      (___umodsi3 = Module["___umodsi3"] = wasmExports["__umodsi3"])(a0, a1));
    var ___umodti3 = (Module["___umodti3"] = (a0, a1, a2, a3, a4) =>
      (___umodti3 = Module["___umodti3"] = wasmExports["__umodti3"])(
        a0,
        a1,
        a2,
        a3,
        a4,
      ));
    var ___cxa_pure_virtual = (Module["___cxa_pure_virtual"] = () =>
      (___cxa_pure_virtual = Module["___cxa_pure_virtual"] =
        wasmExports["__cxa_pure_virtual"])());
    var ___cxa_allocate_exception = (Module["___cxa_allocate_exception"] = (
      a0,
    ) =>
      (___cxa_allocate_exception = Module["___cxa_allocate_exception"] =
        wasmExports["__cxa_allocate_exception"])(a0));
    var ___cxa_free_exception = (a0) =>
      (___cxa_free_exception = wasmExports["__cxa_free_exception"])(a0);
    var ___cxa_decrement_exception_refcount = (a0) =>
      (___cxa_decrement_exception_refcount =
        wasmExports["__cxa_decrement_exception_refcount"])(a0);
    var ___cxa_increment_exception_refcount = (a0) =>
      (___cxa_increment_exception_refcount =
        wasmExports["__cxa_increment_exception_refcount"])(a0);
    var ___cxa_bad_cast = (Module["___cxa_bad_cast"] = () =>
      (___cxa_bad_cast = Module["___cxa_bad_cast"] =
        wasmExports["__cxa_bad_cast"])());
    var ___cxa_bad_typeid = (Module["___cxa_bad_typeid"] = () =>
      (___cxa_bad_typeid = Module["___cxa_bad_typeid"] =
        wasmExports["__cxa_bad_typeid"])());
    var ___cxa_throw_bad_array_new_length = (Module[
      "___cxa_throw_bad_array_new_length"
    ] = () =>
      (___cxa_throw_bad_array_new_length = Module[
        "___cxa_throw_bad_array_new_length"
      ] =
        wasmExports["__cxa_throw_bad_array_new_length"])());
    var ___cxa_demangle = (a0, a1, a2, a3) =>
      (___cxa_demangle = wasmExports["__cxa_demangle"])(a0, a1, a2, a3);
    var ___gxx_personality_v0 = (Module["___gxx_personality_v0"] = (
      a0,
      a1,
      a2,
      a3,
      a4,
    ) =>
      (___gxx_personality_v0 = Module["___gxx_personality_v0"] =
        wasmExports["__gxx_personality_v0"])(a0, a1, a2, a3, a4));
    var ___thrown_object_from_unwind_exception = (Module[
      "___thrown_object_from_unwind_exception"
    ] = (a0) =>
      (___thrown_object_from_unwind_exception = Module[
        "___thrown_object_from_unwind_exception"
      ] =
        wasmExports["__thrown_object_from_unwind_exception"])(a0));
    var ___get_exception_message = (Module["___get_exception_message"] = (
      a0,
      a1,
      a2,
    ) =>
      (___get_exception_message = Module["___get_exception_message"] =
        wasmExports["__get_exception_message"])(a0, a1, a2));
    var ___get_exception_terminate_message = (Module[
      "___get_exception_terminate_message"
    ] = (a0) =>
      (___get_exception_terminate_message = Module[
        "___get_exception_terminate_message"
      ] =
        wasmExports["__get_exception_terminate_message"])(a0));
    var ___cxa_guard_acquire = (Module["___cxa_guard_acquire"] = (a0) =>
      (___cxa_guard_acquire = Module["___cxa_guard_acquire"] =
        wasmExports["__cxa_guard_acquire"])(a0));
    var ___cxa_guard_release = (Module["___cxa_guard_release"] = (a0) =>
      (___cxa_guard_release = Module["___cxa_guard_release"] =
        wasmExports["__cxa_guard_release"])(a0));
    var ___cxa_guard_abort = (Module["___cxa_guard_abort"] = (a0) =>
      (___cxa_guard_abort = Module["___cxa_guard_abort"] =
        wasmExports["__cxa_guard_abort"])(a0));
    var ___cxa_thread_atexit = (Module["___cxa_thread_atexit"] = (a0, a1, a2) =>
      (___cxa_thread_atexit = Module["___cxa_thread_atexit"] =
        wasmExports["__cxa_thread_atexit"])(a0, a1, a2));
    var ___cxa_deleted_virtual = (Module["___cxa_deleted_virtual"] = () =>
      (___cxa_deleted_virtual = Module["___cxa_deleted_virtual"] =
        wasmExports["__cxa_deleted_virtual"])());
    var ___dynamic_cast = (Module["___dynamic_cast"] = (a0, a1, a2, a3) =>
      (___dynamic_cast = Module["___dynamic_cast"] =
        wasmExports["__dynamic_cast"])(a0, a1, a2, a3));
    var ___cxa_can_catch = (a0, a1, a2) =>
      (___cxa_can_catch = wasmExports["__cxa_can_catch"])(a0, a1, a2);
    var ___cxa_is_pointer_type = (a0) =>
      (___cxa_is_pointer_type = wasmExports["__cxa_is_pointer_type"])(a0);
    var _shutdown = (Module["_shutdown"] = (a0, a1) =>
      (_shutdown = Module["_shutdown"] = wasmExports["shutdown"])(a0, a1));
    var _socketpair = (Module["_socketpair"] = (a0, a1, a2, a3) =>
      (_socketpair = Module["_socketpair"] = wasmExports["socketpair"])(
        a0,
        a1,
        a2,
        a3,
      ));
    var _py_docstring_mod = (Module["_py_docstring_mod"] = 3885760);
    var _PyExc_AttributeError = (Module["_PyExc_AttributeError"] = 2762280);
    var _stdout = (Module["_stdout"] = 3739648);
    var __Py_NoneStruct = (Module["__Py_NoneStruct"] = 2788148);
    var _PyExc_TypeError = (Module["_PyExc_TypeError"] = 2755832);
    var _internal_error = (Module["_internal_error"] = 3885764);
    var _conversion_error = (Module["_conversion_error"] = 3885768);
    var _PyExc_ImportError = (Module["_PyExc_ImportError"] = 2757288);
    var _pyodide_export_ = (Module["_pyodide_export_"] = 2741400);
    var _py_version_major_ = (Module["_py_version_major_"] = 2741404);
    var _set_new_cframe_ = (Module["_set_new_cframe_"] = 2741408);
    var __Py_TrueStruct = (Module["__Py_TrueStruct"] = 2744608);
    var __Py_FalseStruct = (Module["__Py_FalseStruct"] = 2744624);
    var _Jsr_undefined = (Module["_Jsr_undefined"] = 243188);
    var _PyExc_StopIteration = (Module["_PyExc_StopIteration"] = 2756248);
    var _PyTraceBack_Type = (Module["_PyTraceBack_Type"] = 2984248);
    var _PyExc_GeneratorExit = (Module["_PyExc_GeneratorExit"] = 2756456);
    var _PyExc_StopAsyncIteration = (Module["_PyExc_StopAsyncIteration"] =
      2756040);
    var _PyExc_RuntimeError = (Module["_PyExc_RuntimeError"] = 2761240);
    var _PyExc_Exception = (Module["_PyExc_Exception"] = 2755624);
    var _PyExc_BaseException = (Module["_PyExc_BaseException"] = 2755416);
    var _PyExc_KeyError = (Module["_PyExc_KeyError"] = 2763528);
    var _PyExc_IndexError = (Module["_PyExc_IndexError"] = 2763320);
    var _PySlice_Type = (Module["_PySlice_Type"] = 2793124);
    var _PyExc_ValueError = (Module["_PyExc_ValueError"] = 2763736);
    var _PyExc_NotImplementedError = (Module["_PyExc_NotImplementedError"] =
      2761656);
    var _PyBaseObject_Type = (Module["_PyBaseObject_Type"] = 2794380);
    var _PyExc_OverflowError = (Module["_PyExc_OverflowError"] = 2765400);
    var _PyList_Type = (Module["_PyList_Type"] = 2778220);
    var _PyTuple_Type = (Module["_PyTuple_Type"] = 2793568);
    var __Py_NotImplementedStruct = (Module["__Py_NotImplementedStruct"] =
      2788924);
    var _PyDict_Type = (Module["_PyDict_Type"] = 2780504);
    var _PyGen_Type = (Module["_PyGen_Type"] = 2772124);
    var _PyCoro_Type = (Module["_PyCoro_Type"] = 2772328);
    var _compat_to_string_repr = (Module["_compat_to_string_repr"] = 3885824);
    var _PyMethod_Type = (Module["_PyMethod_Type"] = 2749192);
    var _PyFunction_Type = (Module["_PyFunction_Type"] = 2775828);
    var _py_buffer_len_offset = (Module["_py_buffer_len_offset"] = 2743468);
    var _py_buffer_shape_offset = (Module["_py_buffer_shape_offset"] = 2743472);
    var _syncifyHandler = (Module["_syncifyHandler"] = 3885852);
    var _Jsr_true = (Module["_Jsr_true"] = 243192);
    var _Jsr_false = (Module["_Jsr_false"] = 243196);
    var _Jsr_novalue = (Module["_Jsr_novalue"] = 243200);
    var _PySet_Type = (Module["_PySet_Type"] = 2791888);
    var _PyFloat_Type = (Module["_PyFloat_Type"] = 2774576);
    var _PyBool_Type = (Module["_PyBool_Type"] = 2744784);
    var _size_of_cframe = (Module["_size_of_cframe"] = 2743920);
    var __PyParser_TokenNames = (Module["__PyParser_TokenNames"] = 2743936);
    var _PyExc_SyntaxError = (Module["_PyExc_SyntaxError"] = 2762488);
    var __PyRuntime = (Module["__PyRuntime"] = 2810368);
    var _PyExc_LookupError = (Module["_PyExc_LookupError"] = 2763112);
    var _PyExc_UnicodeDecodeError = (Module["_PyExc_UnicodeDecodeError"] =
      2764360);
    var _PyExc_IndentationError = (Module["_PyExc_IndentationError"] = 2762696);
    var _PyExc_KeyboardInterrupt = (Module["_PyExc_KeyboardInterrupt"] =
      2757080);
    var _PyExc_TabError = (Module["_PyExc_TabError"] = 2762904);
    var _PyExc_UnicodeError = (Module["_PyExc_UnicodeError"] = 2763944);
    var _stdin = (Module["_stdin"] = 3739496);
    var _PyComplex_Type = (Module["_PyComplex_Type"] = 2751180);
    var __Py_EllipsisObject = (Module["__Py_EllipsisObject"] = 2793116);
    var _PyExc_SystemError = (Module["_PyExc_SystemError"] = 2765816);
    var __Py_ctype_table = (Module["__Py_ctype_table"] = 434496);
    var _PyExc_DeprecationWarning = (Module["_PyExc_DeprecationWarning"] =
      2767064);
    var __PyOS_ReadlineTState = (Module["__PyOS_ReadlineTState"] = 3885912);
    var _stderr = (Module["_stderr"] = 3739344);
    var _PyOS_InputHook = (Module["_PyOS_InputHook"] = 3885916);
    var _PyOS_ReadlineFunctionPointer = (Module[
      "_PyOS_ReadlineFunctionPointer"
    ] = 3885920);
    var _PyExc_MemoryError = (Module["_PyExc_MemoryError"] = 2766232);
    var _PyExc_SyntaxWarning = (Module["_PyExc_SyntaxWarning"] = 2767480);
    var _PyExc_OSError = (Module["_PyExc_OSError"] = 2757704);
    var _PyType_Type = (Module["_PyType_Type"] = 2794176);
    var _PyExc_BufferError = (Module["_PyExc_BufferError"] = 2766440);
    var _PyUnicode_Type = (Module["_PyUnicode_Type"] = 2798536);
    var _PyLong_Type = (Module["_PyLong_Type"] = 2779324);
    var _PyCFunction_Type = (Module["_PyCFunction_Type"] = 2786872);
    var _PyByteArray_Type = (Module["_PyByteArray_Type"] = 2744988);
    var __PyByteArray_empty_string = (Module["__PyByteArray_empty_string"] =
      3885928);
    var __Py_ctype_tolower = (Module["__Py_ctype_tolower"] = 435520);
    var __Py_ctype_toupper = (Module["__Py_ctype_toupper"] = 435776);
    var _Py_hexdigits = (Module["_Py_hexdigits"] = 2806616);
    var _PyExc_BytesWarning = (Module["_PyExc_BytesWarning"] = 2768520);
    var _PyByteArrayIter_Type = (Module["_PyByteArrayIter_Type"] = 2746352);
    var _PyBytes_Type = (Module["_PyBytes_Type"] = 2746948);
    var __PyLong_DigitValue = (Module["__PyLong_DigitValue"] = 2779536);
    var _PyBytesIter_Type = (Module["_PyBytesIter_Type"] = 2748080);
    var _PyCapsule_Type = (Module["_PyCapsule_Type"] = 2748740);
    var _PyCell_Type = (Module["_PyCell_Type"] = 2748944);
    var _PyInstanceMethod_Type = (Module["_PyInstanceMethod_Type"] = 2749544);
    var _PyCode_Type = (Module["_PyCode_Type"] = 2749848);
    var _PyFrozenSet_Type = (Module["_PyFrozenSet_Type"] = 2792448);
    var _PyExc_ZeroDivisionError = (Module["_PyExc_ZeroDivisionError"] =
      2765608);
    var __PyMethodWrapper_Type = (Module["__PyMethodWrapper_Type"] = 2753560);
    var _PyMethodDescr_Type = (Module["_PyMethodDescr_Type"] = 2751904);
    var _PyClassMethodDescr_Type = (Module["_PyClassMethodDescr_Type"] =
      2752108);
    var _PyMemberDescr_Type = (Module["_PyMemberDescr_Type"] = 2752380);
    var _PyGetSetDescr_Type = (Module["_PyGetSetDescr_Type"] = 2752652);
    var _PyWrapperDescr_Type = (Module["_PyWrapperDescr_Type"] = 2752944);
    var _PyDictProxy_Type = (Module["_PyDictProxy_Type"] = 2753148);
    var _PyProperty_Type = (Module["_PyProperty_Type"] = 2754328);
    var _PyReversed_Type = (Module["_PyReversed_Type"] = 2754960);
    var _PyEnum_Type = (Module["_PyEnum_Type"] = 2754688);
    var _PyExc_BaseExceptionGroup = (Module["_PyExc_BaseExceptionGroup"] =
      2756668);
    var _PyExc_UnicodeTranslateError = (Module["_PyExc_UnicodeTranslateError"] =
      2764568);
    var _PyExc_BlockingIOError = (Module["_PyExc_BlockingIOError"] = 2757912);
    var _PyExc_BrokenPipeError = (Module["_PyExc_BrokenPipeError"] = 2758536);
    var _PyExc_ChildProcessError = (Module["_PyExc_ChildProcessError"] =
      2758328);
    var _PyExc_ConnectionAbortedError = (Module[
      "_PyExc_ConnectionAbortedError"
    ] = 2758744);
    var _PyExc_ConnectionRefusedError = (Module[
      "_PyExc_ConnectionRefusedError"
    ] = 2758952);
    var _PyExc_ConnectionResetError = (Module["_PyExc_ConnectionResetError"] =
      2759160);
    var _PyExc_FileExistsError = (Module["_PyExc_FileExistsError"] = 2759368);
    var _PyExc_FileNotFoundError = (Module["_PyExc_FileNotFoundError"] =
      2759576);
    var _PyExc_IsADirectoryError = (Module["_PyExc_IsADirectoryError"] =
      2759784);
    var _PyExc_NotADirectoryError = (Module["_PyExc_NotADirectoryError"] =
      2759992);
    var _PyExc_InterruptedError = (Module["_PyExc_InterruptedError"] = 2760200);
    var _PyExc_PermissionError = (Module["_PyExc_PermissionError"] = 2760408);
    var _PyExc_ProcessLookupError = (Module["_PyExc_ProcessLookupError"] =
      2760616);
    var _PyExc_TimeoutError = (Module["_PyExc_TimeoutError"] = 2760824);
    var _PyExc_EnvironmentError = (Module["_PyExc_EnvironmentError"] = 3885932);
    var _PyExc_IOError = (Module["_PyExc_IOError"] = 3885936);
    var _PyExc_SystemExit = (Module["_PyExc_SystemExit"] = 2756664);
    var _PyExc_ModuleNotFoundError = (Module["_PyExc_ModuleNotFoundError"] =
      2757496);
    var _PyExc_ConnectionError = (Module["_PyExc_ConnectionError"] = 2758120);
    var _PyExc_EOFError = (Module["_PyExc_EOFError"] = 2761032);
    var _PyExc_RecursionError = (Module["_PyExc_RecursionError"] = 2761448);
    var _PyExc_NameError = (Module["_PyExc_NameError"] = 2761864);
    var _PyExc_UnboundLocalError = (Module["_PyExc_UnboundLocalError"] =
      2762072);
    var _PyExc_UnicodeEncodeError = (Module["_PyExc_UnicodeEncodeError"] =
      2764152);
    var _PyExc_AssertionError = (Module["_PyExc_AssertionError"] = 2764776);
    var _PyExc_ArithmeticError = (Module["_PyExc_ArithmeticError"] = 2764984);
    var _PyExc_FloatingPointError = (Module["_PyExc_FloatingPointError"] =
      2765192);
    var _PyExc_ReferenceError = (Module["_PyExc_ReferenceError"] = 2766024);
    var _PyExc_Warning = (Module["_PyExc_Warning"] = 2766648);
    var _PyExc_UserWarning = (Module["_PyExc_UserWarning"] = 2766856);
    var _PyExc_PendingDeprecationWarning = (Module[
      "_PyExc_PendingDeprecationWarning"
    ] = 2767272);
    var _PyExc_RuntimeWarning = (Module["_PyExc_RuntimeWarning"] = 2767688);
    var _PyExc_FutureWarning = (Module["_PyExc_FutureWarning"] = 2767896);
    var _PyExc_ImportWarning = (Module["_PyExc_ImportWarning"] = 2768104);
    var _PyExc_UnicodeWarning = (Module["_PyExc_UnicodeWarning"] = 2768312);
    var _PyExc_EncodingWarning = (Module["_PyExc_EncodingWarning"] = 2768728);
    var _PyExc_ResourceWarning = (Module["_PyExc_ResourceWarning"] = 2768936);
    var _Py_GenericAliasType = (Module["_Py_GenericAliasType"] = 2771372);
    var _PyAsyncGen_Type = (Module["_PyAsyncGen_Type"] = 2771632);
    var __PyAsyncGenWrappedValue_Type = (Module[
      "__PyAsyncGenWrappedValue_Type"
    ] = 2773692);
    var __PyCoroWrapper_Type = (Module["__PyCoroWrapper_Type"] = 2772912);
    var __PyAsyncGenASend_Type = (Module["__PyAsyncGenASend_Type"] = 2773488);
    var __PyAsyncGenAThrow_Type = (Module["__PyAsyncGenAThrow_Type"] = 2773984);
    var _PyStdPrinter_Type = (Module["_PyStdPrinter_Type"] = 2774188);
    var __Py_SwappedOp = (Module["__Py_SwappedOp"] = 2788160);
    var _PyFrame_Type = (Module["_PyFrame_Type"] = 2775604);
    var _PyModule_Type = (Module["_PyModule_Type"] = 2787492);
    var _PyClassMethod_Type = (Module["_PyClassMethod_Type"] = 2776460);
    var _PyStaticMethod_Type = (Module["_PyStaticMethod_Type"] = 2776796);
    var __PyInterpreterID_Type = (Module["__PyInterpreterID_Type"] = 2777212);
    var _PySeqIter_Type = (Module["_PySeqIter_Type"] = 2777428);
    var _PyCallIter_Type = (Module["_PyCallIter_Type"] = 2777696);
    var _PyListIter_Type = (Module["_PyListIter_Type"] = 2778800);
    var _PyListRevIter_Type = (Module["_PyListRevIter_Type"] = 2779072);
    var _PyDictIterKey_Type = (Module["_PyDictIterKey_Type"] = 2781232);
    var _PyDictRevIterKey_Type = (Module["_PyDictRevIterKey_Type"] = 2781844);
    var _PyDictRevIterValue_Type = (Module["_PyDictRevIterValue_Type"] =
      2782252);
    var _PyDictKeys_Type = (Module["_PyDictKeys_Type"] = 2782456);
    var _PyDictItems_Type = (Module["_PyDictItems_Type"] = 2782660);
    var _PyDictIterItem_Type = (Module["_PyDictIterItem_Type"] = 2781640);
    var _PyDictIterValue_Type = (Module["_PyDictIterValue_Type"] = 2781436);
    var _PyDictRevIterItem_Type = (Module["_PyDictRevIterItem_Type"] = 2782048);
    var _PyDictValues_Type = (Module["_PyDictValues_Type"] = 2783312);
    var _PyODict_Type = (Module["_PyODict_Type"] = 2783992);
    var _PyODictIter_Type = (Module["_PyODictIter_Type"] = 2784240);
    var _PyODictKeys_Type = (Module["_PyODictKeys_Type"] = 2784480);
    var _PyODictValues_Type = (Module["_PyODictValues_Type"] = 2784960);
    var _PyODictItems_Type = (Module["_PyODictItems_Type"] = 2784720);
    var __PyManagedBuffer_Type = (Module["__PyManagedBuffer_Type"] = 2785400);
    var _PyMemoryView_Type = (Module["_PyMemoryView_Type"] = 2785604);
    var _PyCMethod_Type = (Module["_PyCMethod_Type"] = 2786668);
    var _PyModuleDef_Type = (Module["_PyModuleDef_Type"] = 2787288);
    var __Py_PackageContext = (Module["__Py_PackageContext"] = 3887924);
    var __PyNamespace_Type = (Module["__PyNamespace_Type"] = 2787944);
    var __Py_tracemalloc_config = (Module["__Py_tracemalloc_config"] = 2789400);
    var __PyNone_Type = (Module["__PyNone_Type"] = 2788328);
    var __PyNotImplemented_Type = (Module["__PyNotImplemented_Type"] = 2788720);
    var _PyContextToken_Type = (Module["_PyContextToken_Type"] = 2807192);
    var _PyContextVar_Type = (Module["_PyContextVar_Type"] = 2806988);
    var _PyContext_Type = (Module["_PyContext_Type"] = 2806784);
    var _PyEllipsis_Type = (Module["_PyEllipsis_Type"] = 2792912);
    var _PyFilter_Type = (Module["_PyFilter_Type"] = 2804576);
    var _PyLongRangeIter_Type = (Module["_PyLongRangeIter_Type"] = 2790880);
    var _PyMap_Type = (Module["_PyMap_Type"] = 2804816);
    var _PyPickleBuffer_Type = (Module["_PyPickleBuffer_Type"] = 2789696);
    var _PyRangeIter_Type = (Module["_PyRangeIter_Type"] = 2790608);
    var _PyRange_Type = (Module["_PyRange_Type"] = 2790336);
    var _PySetIter_Type = (Module["_PySetIter_Type"] = 2791136);
    var _PySuper_Type = (Module["_PySuper_Type"] = 2798112);
    var _PyTupleIter_Type = (Module["_PyTupleIter_Type"] = 2793904);
    var _PyUnicodeIter_Type = (Module["_PyUnicodeIter_Type"] = 2800448);
    var _PyZip_Type = (Module["_PyZip_Type"] = 2805072);
    var __PyWeakref_CallableProxyType = (Module[
      "__PyWeakref_CallableProxyType"
    ] = 2802508);
    var __PyWeakref_ProxyType = (Module["__PyWeakref_ProxyType"] = 2802304);
    var __PyWeakref_RefType = (Module["__PyWeakref_RefType"] = 2801848);
    var __PySet_Dummy = (Module["__PySet_Dummy"] = 2792660);
    var _PyStructSequence_UnnamedField = (Module[
      "_PyStructSequence_UnnamedField"
    ] = 2793476);
    var __Py_ascii_whitespace = (Module["__Py_ascii_whitespace"] = 289472);
    var _Py_VerboseFlag = (Module["_Py_VerboseFlag"] = 3887852);
    var _Py_Version = (Module["_Py_Version"] = 419860);
    var _PyImport_Inittab = (Module["_PyImport_Inittab"] = 2809696);
    var __PyImport_FrozenBootstrap = (Module["__PyImport_FrozenBootstrap"] =
      3734576);
    var _PyImport_FrozenModules = (Module["_PyImport_FrozenModules"] = 3901984);
    var __PyImport_FrozenStdlib = (Module["__PyImport_FrozenStdlib"] = 3734912);
    var __PyImport_FrozenTest = (Module["__PyImport_FrozenTest"] = 3735168);
    var _Py_IgnoreEnvironmentFlag = (Module["_Py_IgnoreEnvironmentFlag"] =
      3887884);
    var _Py_IsolatedFlag = (Module["_Py_IsolatedFlag"] = 3887904);
    var _Py_BytesWarningFlag = (Module["_Py_BytesWarningFlag"] = 3887876);
    var _Py_InspectFlag = (Module["_Py_InspectFlag"] = 3887864);
    var _Py_InteractiveFlag = (Module["_Py_InteractiveFlag"] = 3887860);
    var _Py_OptimizeFlag = (Module["_Py_OptimizeFlag"] = 3887868);
    var _Py_DebugFlag = (Module["_Py_DebugFlag"] = 3887848);
    var _Py_QuietFlag = (Module["_Py_QuietFlag"] = 3887856);
    var _Py_FrozenFlag = (Module["_Py_FrozenFlag"] = 3887880);
    var _Py_UnbufferedStdioFlag = (Module["_Py_UnbufferedStdioFlag"] = 3887896);
    var _Py_NoSiteFlag = (Module["_Py_NoSiteFlag"] = 3887872);
    var _Py_DontWriteBytecodeFlag = (Module["_Py_DontWriteBytecodeFlag"] =
      3887888);
    var _Py_NoUserSiteDirectory = (Module["_Py_NoUserSiteDirectory"] = 3887892);
    var _Py_HashRandomizationFlag = (Module["_Py_HashRandomizationFlag"] =
      3887900);
    var _Py_FileSystemDefaultEncoding = (Module[
      "_Py_FileSystemDefaultEncoding"
    ] = 3887964);
    var _Py_HasFileSystemDefaultEncoding = (Module[
      "_Py_HasFileSystemDefaultEncoding"
    ] = 3887968);
    var _Py_FileSystemDefaultEncodeErrors = (Module[
      "_Py_FileSystemDefaultEncodeErrors"
    ] = 3887972);
    var __Py_HasFileSystemDefaultEncodeErrors = (Module[
      "__Py_HasFileSystemDefaultEncodeErrors"
    ] = 3887976);
    var _Py_UTF8Mode = (Module["_Py_UTF8Mode"] = 3887844);
    var __Py_HashSecret = (Module["__Py_HashSecret"] = 3887984);
    var __Py_UnhandledKeyboardInterrupt = (Module[
      "__Py_UnhandledKeyboardInterrupt"
    ] = 3888008);
    var _Py_EMSCRIPTEN_SIGNAL_HANDLING = (Module[
      "_Py_EMSCRIPTEN_SIGNAL_HANDLING"
    ] = 3891616);
    var _ffi_type_pointer = (Module["_ffi_type_pointer"] = 2389412);
    var _ffi_type_void = (Module["_ffi_type_void"] = 2389304);
    var _ffi_type_sint32 = (Module["_ffi_type_sint32"] = 2389376);
    var _ffi_type_uint8 = (Module["_ffi_type_uint8"] = 2389316);
    var _ffi_type_double = (Module["_ffi_type_double"] = 2389436);
    var _ffi_type_longdouble = (Module["_ffi_type_longdouble"] = 2389448);
    var _ffi_type_float = (Module["_ffi_type_float"] = 2389424);
    var _ffi_type_sint16 = (Module["_ffi_type_sint16"] = 2389352);
    var _ffi_type_uint16 = (Module["_ffi_type_uint16"] = 2389340);
    var _ffi_type_uint32 = (Module["_ffi_type_uint32"] = 2389364);
    var _ffi_type_sint64 = (Module["_ffi_type_sint64"] = 2389400);
    var _ffi_type_uint64 = (Module["_ffi_type_uint64"] = 2389388);
    var _ffi_type_sint8 = (Module["_ffi_type_sint8"] = 2389328);
    var _environ = (Module["_environ"] = 3902008);
    var __PyBytesIOBuffer_Type = (Module["__PyBytesIOBuffer_Type"] = 3106108);
    var __deduplicate_map = (Module["__deduplicate_map"] = 3901988);
    var _z_errmsg = (Module["_z_errmsg"] = 3735472);
    var __length_code = (Module["__length_code"] = 2400064);
    var __dist_code = (Module["__dist_code"] = 2399552);
    var _deflate_copyright = (Module["_deflate_copyright"] = 2394720);
    var _inflate_copyright = (Module["_inflate_copyright"] = 2399248);
    var _BZ2_crc32Table = (Module["_BZ2_crc32Table"] = 3735584);
    var _BZ2_rNums = (Module["_BZ2_rNums"] = 3736608);
    var ___environ = (Module["___environ"] = 3902008);
    var ____environ = (Module["____environ"] = 3902008);
    var __environ = (Module["__environ"] = 3902008);
    var _timezone = (Module["_timezone"] = 3902664);
    var _daylight = (Module["_daylight"] = 3902668);
    var _tzname = (Module["_tzname"] = 3902672);
    var ___progname = (Module["___progname"] = 3903888);
    var ___optreset = (Module["___optreset"] = 3902852);
    var _optind = (Module["_optind"] = 3738872);
    var ___optpos = (Module["___optpos"] = 3902856);
    var _optarg = (Module["_optarg"] = 3902860);
    var _optopt = (Module["_optopt"] = 3902864);
    var _opterr = (Module["_opterr"] = 3738876);
    var _optreset = (Module["_optreset"] = 3902852);
    var _h_errno = (Module["_h_errno"] = 3902988);
    var ___signgam = (Module["___signgam"] = 3918284);
    var __ns_flagdata = (Module["__ns_flagdata"] = 2587040);
    var ___progname_full = (Module["___progname_full"] = 3903892);
    var _program_invocation_short_name = (Module[
      "_program_invocation_short_name"
    ] = 3903888);
    var _program_invocation_name = (Module["_program_invocation_name"] =
      3903892);
    var ___sig_pending = (Module["___sig_pending"] = 3908264);
    var ___sig_actions = (Module["___sig_actions"] = 3909184);
    var _signgam = (Module["_signgam"] = 3918284);
    var ___THREW__ = (Module["___THREW__"] = 3925120);
    var ___threwValue = (Module["___threwValue"] = 3925124);
    var ___cxa_unexpected_handler = (Module["___cxa_unexpected_handler"] =
      3750032);
    var ___cxa_terminate_handler = (Module["___cxa_terminate_handler"] =
      3750028);
    var ___cxa_new_handler = (Module["___cxa_new_handler"] = 3948040);
    var _in6addr_any = (Module["_in6addr_any"] = 2741292);
    var _in6addr_loopback = (Module["_in6addr_loopback"] = 2741308);
    var ___start_em_js = (Module["___start_em_js"] = 3757008);
    var ___stop_em_js = (Module["___stop_em_js"] = 3885483);
    function invoke_iiii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iii(index, a1, a2) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_i(index) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)();
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiifi(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiidi(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiii(index, a1, a2, a3, a4) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_ii(index, a1) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_j(index) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)();
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
        return 0n;
      }
    }
    function invoke_ji(index, a1) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
        return 0n;
      }
    }
    function invoke_vii(index, a1, a2) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_jii(index, a1, a2) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
        return 0n;
      }
    }
    function invoke_v(index) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)();
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiii(index, a1, a2, a3, a4) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_vi(index, a1) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiiii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viijii(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiij(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4, a5);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiijj(index, a1, a2, a3, a4, a5, a6) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiiiiiiii(
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
    ) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(
          a1,
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          a9,
          a10,
        );
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_jiiii(index, a1, a2, a3, a4) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
        return 0n;
      }
    }
    function invoke_iiiiiiiiiiiii(
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
    ) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(
          a1,
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          a9,
          a10,
          a11,
          a12,
        );
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_fiii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_diii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_iiiiiiiiiiii(
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
    ) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(
          a1,
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          a9,
          a10,
          a11,
        );
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiiiiiiiii(
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
    ) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiiiiiiiiiiiiii(
      index,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
    ) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(
          a1,
          a2,
          a3,
          a4,
          a5,
          a6,
          a7,
          a8,
          a9,
          a10,
          a11,
          a12,
          a13,
          a14,
          a15,
        );
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4, a5, a6);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_jiii(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        return getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
        return 0n;
      }
    }
    function invoke_viif(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viid(index, a1, a2, a3) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function invoke_viijj(index, a1, a2, a3, a4) {
      var sp = stackSave();
      try {
        getWasmTableEntry(index)(a1, a2, a3, a4);
      } catch (e) {
        stackRestore(sp);
        if (e !== e + 0) throw e;
        _setThrew(1, 0);
      }
    }
    function intArrayFromBase64(s) {
      if (typeof ENVIRONMENT_IS_NODE != "undefined" && ENVIRONMENT_IS_NODE) {
        var buf = Buffer.from(s, "base64");
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);
      }
      try {
        var decoded = atob(s);
        var bytes = new Uint8Array(decoded.length);
        for (var i = 0; i < decoded.length; ++i) {
          bytes[i] = decoded.charCodeAt(i);
        }
        return bytes;
      } catch (_) {
        throw new Error("Converting base64 string to bytes failed.");
      }
    }
    function tryParseAsDataURI(filename) {
      if (!isDataURI(filename)) {
        return;
      }
      return intArrayFromBase64(filename.slice(dataURIPrefix.length));
    }
    Module["addRunDependency"] = addRunDependency;
    Module["removeRunDependency"] = removeRunDependency;
    Module["FS_createPath"] = FS.createPath;
    Module["FS_createLazyFile"] = FS.createLazyFile;
    Module["FS_createDevice"] = FS.createDevice;
    Module["ERRNO_CODES"] = ERRNO_CODES;
    Module["wasmTable"] = wasmTable;
    Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
    Module["FS_createDataFile"] = FS.createDataFile;
    Module["FS_unlink"] = FS.unlink;
    Module["LZ4"] = LZ4;
    var calledRun;
    dependenciesFulfilled = function runCaller() {
      if (!calledRun) run();
      if (!calledRun) dependenciesFulfilled = runCaller;
    };
    function callMain(args = []) {
      var entryFunction = resolveGlobalSymbol("main").sym;
      if (!entryFunction) return;
      args.unshift(thisProgram);
      var argc = args.length;
      var argv = stackAlloc((argc + 1) * 4);
      var argv_ptr = argv;
      args.forEach((arg) => {
        HEAPU32[argv_ptr >> 2] = stringToUTF8OnStack(arg);
        argv_ptr += 4;
      });
      HEAPU32[argv_ptr >> 2] = 0;
      try {
        var ret = entryFunction(argc, argv);
        exitJS(ret, true);
        return ret;
      } catch (e) {
        return handleException(e);
      }
    }
    function run(args = arguments_) {
      if (runDependencies > 0) {
        return;
      }
      preRun();
      if (runDependencies > 0) {
        return;
      }
      function doRun() {
        if (calledRun) return;
        calledRun = true;
        Module["calledRun"] = true;
        if (ABORT) return;
        initRuntime();
        preMain();
        readyPromiseResolve(Module);
        if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
        if (shouldRunNow) callMain(args);
        postRun();
      }
      if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout(function () {
          setTimeout(function () {
            Module["setStatus"]("");
          }, 1);
          doRun();
        }, 1);
      } else {
        doRun();
      }
    }
    if (Module["preInit"]) {
      if (typeof Module["preInit"] == "function")
        Module["preInit"] = [Module["preInit"]];
      while (Module["preInit"].length > 0) {
        Module["preInit"].pop()();
      }
    }
    var shouldRunNow = true;
    if (Module["noInitialRun"]) shouldRunNow = false;
    run();

    return moduleArg.ready;
  };
})();
globalThis._createPyodideModule = _createPyodideModule;
